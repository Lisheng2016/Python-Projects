var ASPx = {};
ASPx.SSLSecureBlankUrl = '/Concordia/DXR.axd?r=1_0-8rkta';
ASPx.EmptyImageUrl = '/Concordia/DXR.axd?r=1_15-8rkta';
var __aspxVersionInfo = 'Version=\'14.1.7.0\', File Version=\'14.1.7.0\', Date Modified=\'3/24/2015 3:01:02 AM\'';
var __aspxStyleSheet = null;
var __aspxInvalidDimension = -10000;
var __aspxInvalidPosition = -10000;
var __aspxAbsoluteLeftPosition = -10000;
var __aspxAbsoluteRightPosition = 10000;
var __aspxMenuZIndex = 21998;
var __aspxPopupControlZIndex = 11998;
var __aspxPopupShadowWidth = 5;
var __aspxPopupShadowHeight = 5;
var __aspxCallbackSeparator = ":";
var __aspxItemIndexSeparator = "i";
var __aspxCallbackResultPrefix = "/*DX*/";
var __aspxItemClassName = "dxi";
var __aspxAccessibilityEmptyUrl = "javascript:;";
var __aspxAccessibilityMarkerClass = "dxalink";
var __aspxEmptyAttributeValue = { };
var __aspxEmptyCachedValue = { };
var __aspxCachedRules = { };
var __aspxStyleCount = 0;
var __aspxStyleNameCache = { };
var __aspxPossibleNumberDecimalSeparators = [",", "."];
var __aspxAdaptiveClass = "dx-adaptive";
var __aspxCultureInfo = {
 twoDigitYearMax: 2029,
 ts: ":",
 ds: "/",
 am: "AM",
 pm: "PM",
 monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
 genMonthNames: null,
 abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
 abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
 dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
 numDecimalPoint: ".",
 numPrec: 2,
 numGroupSeparator: ",",
 numGroups: [ 3 ],
 numNegPattern: 1,
 numPosInf: "Infinity",
 numNegInf: "-Infinity",
 numNan: "NaN",
 currency: "$",
 currDecimalPoint: ".",
 currPrec: 2,
 currGroupSeparator: ",",
 currGroups: [ 3 ],
 currPosPattern: 0,
 currNegPattern: 0,
 percentPattern: 0,
 shortTime: "h:mm tt",
 longTime: "h:mm:ss tt",
 shortDate: "M/d/yyyy",
 longDate: "dddd, MMMM dd, yyyy",
 monthDay: "MMMM dd",
 yearMonth: "MMMM, yyyy"
};
__aspxCultureInfo.genMonthNames = __aspxCultureInfo.monthNames;
function _aspxGetInvariantDateString(date) {
 if(!date)
  return "01/01/0001";
 var day = date.getDate();
 var month = date.getMonth() + 1;
 var year = date.getFullYear();
 var result = "";
 if(month < 10)
  result += "0";
 result += month.toString() + "/";
 if(day < 10)
  result += "0";
 result += day.toString() + "/";
 if(year < 1000)
  result += "0";
 result += year.toString();
 return result;
}
function _aspxGetInvariantDateTimeString(date) {
 var dateTimeString = _aspxGetInvariantDateString(date);
 var time = {
  h: date.getHours(),
  m: date.getMinutes(),
  s: date.getSeconds()
 };
 for(var key in time) {
  var str = time[key].toString();
  if(str.length < 2)
   str = "0" + str;
  time[key] = str;
 }
 dateTimeString += " " + time.h + ":" + time.m + ":" + time.s;
 var msec = date.getMilliseconds();
 if(msec > 0)
  dateTimeString += "." + msec.toString();
 return dateTimeString;
}
function _aspxExpandTwoDigitYear(value) {
 value += 1900;
 if(value + 99 < __aspxCultureInfo.twoDigitYearMax)
  value += 100;
 return value;
}
function _aspxToUtcTime(date) {
 var result = new Date();
 result.setTime(date.valueOf() + 60000 * date.getTimezoneOffset());
 return result;
}
function _aspxToLocalTime(date) {
 var result = new Date();
 result.setTime(date.valueOf() - 60000 * date.getTimezoneOffset());
 return result;
}
function _aspxAreDatesEqualExact(date1, date2) {
 if(date1 == null && date2 == null)
  return true;
 if(date1 == null || date2 == null)
  return false;
 return date1.getTime() == date2.getTime();
}
function _aspxFixTimezoneGap(oldDate, newDate) {
 var diff = newDate.getHours() - oldDate.getHours();
 if(diff == 0)
  return;
 var sign = (diff == 1 || diff == -23) ? -1 : 1;
 var trial = new Date(newDate.getTime() + sign * 3600000);
 if(sign > 0 || trial.getDate() == newDate.getDate())
  newDate.setTime(trial.getTime());
}
var ASPxKey = {
 F1     : 112,
 F2     : 113,
 F3     : 114,
 F4     : 115,
 F5     : 116,
 F6     : 117,
 F7     : 118,
 F8     : 119,
 F9     : 120,
 F10    : 121,
 F11    : 122,
 F12    : 123,
 Ctrl   : 17,
 Shift  : 16,
 Alt    : 18,
 Enter  : 13,
 Home   : 36,
 End    : 35,
 Left   : 37,
 Right  : 39,
 Up     : 38,
 Down   : 40,
 PageUp    : 33,
 PageDown  : 34,
 Esc    : 27,
 Space  : 32,
 Tab    : 9,
 Backspace : 8,
 Delete    : 46,
 Insert    : 45,
 ContextMenu  : 93,
 Windows   : 91,
 Decimal   : 110
};
var ASPxCallbackType = {
 Data: "d",
 Common: "c"
};
var ASPxWhiteSpaces = {
 0x0009: 1, 0x000a: 1, 0x000b: 1, 0x000c: 1, 0x000d: 1, 0x0020: 1, 0x0085: 1,
 0x00a0: 1, 0x1680: 1, 0x180e: 1, 0x2000: 1, 0x2001: 1, 0x2002: 1, 0x2003: 1,
 0x2004: 1, 0x2005: 1, 0x2006: 1, 0x2007: 1, 0x2008: 1, 0x2009: 1, 0x200a: 1,
 0x200b: 1, 0x2028: 1, 0x2029: 1, 0x202f: 1, 0x205f: 1, 0x3000: 1
};
function _aspxFalseFunction() { return false; }
function _aspxGetActiveElement() {
 try{
  return document.activeElement;
 } catch(e) {
 }
 return null;
}
var __aspxUserAgent = navigator.userAgent.toLowerCase();
var __aspxMozilla,
 __aspxIE,
 __aspxFirefox,
 __aspxNetscape,
 __aspxSafari,
 __aspxChrome,
 __aspxOpera,
 __aspxBrowserVersion,
 __aspxBrowserMajorVersion,
 __aspxWindowsPlatform,
 __aspxMacOSPlatform,
 __aspxMacOSMobilePlatform,
 __aspxAndroidMobilePlatform,
 __aspxPlaformMajorVersion,
 __aspxWebKitFamily,
 __aspxNetscapeFamily,
 __aspxBrowserWithHardwareAcceleration;
function _aspxIndentPlatformMajorVersion(userAgent) {
 var regex = /(?:(?:windows nt|macintosh|mac os|cpu os|cpu iphone os|android|windows phone|linux) )(\d+)(?:[-0-9_.])*/;
 var matches = regex.exec(userAgent);
 if(matches)
  __aspxPlaformMajorVersion = matches[1];
}
function _aspxIdentUserAgent(userAgent, ignoreDocumentMode) {
 var browserTypesOrderedList = [ "Mozilla", "IE", "Firefox", "Netscape", "Safari", "Chrome", "Opera", "Opera10" ];
 var defaultBrowserType = "IE";
 var defaultPlatform = "Win";
 var defaultVersions = { Safari: 2, Chrome: 0.1, Mozilla: 1.9, Netscape: 8, Firefox: 2, Opera: 9, IE: 6 };
 if(!userAgent || userAgent.length == 0) {
  _aspxFillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
  return;
 }
 userAgent = userAgent.toLowerCase();
 _aspxIndentPlatformMajorVersion(userAgent);
 try {
  var platformIdentStrings = {
   "Windows": "Win",
   "Macintosh": "Mac",
   "Mac OS": "Mac",
   "Mac_PowerPC": "Mac",
   "cpu os": "MacMobile",
   "cpu iphone os": "MacMobile",
   "Android": "Android",
   "!Windows Phone": "WinPhone",
   "!WPDesktop": "WinPhone",
   "!ZuneWP": "WinPhone"
  };
  var tridentIdentStrings = {
   "Trident/5": 9,
   "Trident/6": 10
  };
  var optSlashOrSpace = "(?:/|\\s*)?";
  var version = "(\\d+)(?:\\.((?:\\d+?[1-9])|\\d)0*?)?";
  var optVersion = "(?:" + version + ")?";
  var patterns = {
   Safari: "applewebkit(?:.*?(?:version/" + version + "[\\.\\w\\d]*?(?:\\s+mobile\/\\S*)?\\s+safari))?",
   Chrome: "chrome(?!frame)" + optSlashOrSpace + optVersion,
   Mozilla: "mozilla(?:.*rv:" + optVersion + ".*Gecko)?",
   Netscape: "(?:netscape|navigator)\\d*/?\\s*" + optVersion,
   Firefox: "firefox" + optSlashOrSpace + optVersion,
   Opera: "opera" + optSlashOrSpace + optVersion,
   Opera10: "opera.*\\s*version" + optSlashOrSpace + optVersion,
   IE: "msie\\s*" + optVersion
  };
  var browserType;
  var version = -1;
  for(var i = 0; i < browserTypesOrderedList.length; i++) {
   var browserTypeCandidate = browserTypesOrderedList[i];
   var regExp = new RegExp(patterns[browserTypeCandidate], "i");
   if(regExp.compile)
    regExp.compile(patterns[browserTypeCandidate], "i");
   var matches = regExp.exec(userAgent);
   if(matches && matches.index >= 0) {
    browserType = browserTypeCandidate;
    if(browserType == "Opera10")
     browserType = "Opera";
    var tridentPattern = "trident" + optSlashOrSpace + optVersion;
    version = _aspxGetBrowserVersion(userAgent, matches, tridentPattern, _aspxGetIECompatibleVersionString());
    if(browserType == "Mozilla" && version >= 11)
     browserType = "IE";
   }
  }
  if(!browserType)
   browserType = defaultBrowserType;
  var browserVersionDetected = version != -1;
  if(!browserVersionDetected)
   version = defaultVersions[browserType];
  var platform;
  var minOccurenceIndex = Number.MAX_VALUE;
  for(var identStr in platformIdentStrings) {
   if(!platformIdentStrings.hasOwnProperty(identStr)) continue;
   var importantIdent = identStr.substr(0,1) == "!";
   var occurenceIndex = userAgent.indexOf((importantIdent ? identStr.substr(1) : identStr).toLowerCase());
   if(occurenceIndex >= 0 && (occurenceIndex < minOccurenceIndex || importantIdent)) {
    minOccurenceIndex = importantIdent ? 0 : occurenceIndex;
    platform = platformIdentStrings[identStr];
   }
  }
  if(platform == "WinPhone" && version < 9) {
   for(var identStr in tridentIdentStrings) {
    if(!tridentIdentStrings.hasOwnProperty(identStr)) continue;
    if(userAgent.indexOf(identStr.toLowerCase()) > -1)
     version = tridentIdentStrings[identStr];
   }
  }
  if(!ignoreDocumentMode && browserType == "IE" && version > 7 && document.documentMode < version)
   version = document.documentMode;
  if(platform == "WinPhone")
   version = Math.max(9, version);
  if(!platform)
   platform = defaultPlatform;
  if(platform == platformIdentStrings["cpu os"] && !browserVersionDetected)
   version = 4;
  _aspxFillUserAgentInfo(browserTypesOrderedList, browserType, version, platform);
 } catch(e) {
  _aspxFillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
 }
}
function _aspxGetIECompatibleVersionString() {
 if(document.compatible) {
  for(var i = 0; i < document.compatible.length; i++)
   if(document.compatible[i].userAgent === "IE" && document.compatible[i].version)
    return document.compatible[i].version.toLowerCase();
 }
 return "";
}
function _aspxGetBrowserVersion(userAgent, matches, tridentPattern, ieCompatibleVersionString) {
 var version = _aspxGetVersionFromMatches(matches);
 if(ieCompatibleVersionString) {
  var versionFromTrident = _aspxGetVersionFromTrident(userAgent, tridentPattern);
  if(ieCompatibleVersionString === "edge" || parseInt(ieCompatibleVersionString) === versionFromTrident)
   return versionFromTrident;
 }
 return version;
}
function _aspxGetVersionFromTrident(userAgent, tridentPattern) {
 var tridentDiffFromVersion = 4;
 var matches = new RegExp(tridentPattern, "i").exec(userAgent);
 return _aspxGetVersionFromMatches(matches) + tridentDiffFromVersion;
}
function _aspxGetVersionFromMatches(matches) {
 var result = -1;
 var versionStr = "";
 if(matches[1]) {
  versionStr += matches[1];
  if(matches[2])
   versionStr += "." + matches[2];
 }
 if(versionStr != "") {
  result = parseFloat(versionStr);
  if(result == NaN)
   result = -1;
 }
 return result;
}
function _aspxFillUserAgentInfo(browserTypesOrderedList, browserType, version, platform) {
 for(var i = 0; i < browserTypesOrderedList.length; i++) {
  var type = browserTypesOrderedList[i];
  window["__aspx" + type] = type == browserType;
 }
 __aspxBrowserVersion = Math.floor(10.0 * version) / 10.0;
 __aspxBrowserMajorVersion = Math.floor(__aspxBrowserVersion);
 __aspxWindowsPlatform = platform == "Win" || platform == "WinPhone";
 __aspxMacOSPlatform = platform == "Mac";
 __aspxMacOSMobilePlatform = platform == "MacMobile";
 __aspxAndroidMobilePlatform = platform == "Android";
 __aspxWindowsPhonePlatform = platform == "WinPhone";
 __aspxWebKitFamily = __aspxSafari || __aspxChrome;
 __aspxNetscapeFamily = __aspxNetscape || __aspxMozilla || __aspxFirefox;
 __aspxBrowserWithHardwareAcceleration = (__aspxIE && __aspxBrowserMajorVersion >= 9) || (__aspxFirefox && __aspxBrowserMajorVersion >= 4) || (__aspxAndroidMobilePlatform && __aspxChrome) || (__aspxChrome && __aspxBrowserMajorVersion >= 37);
 __aspxWebKitTouchUI = __aspxMacOSMobilePlatform || __aspxAndroidMobilePlatform;
 __aspxMSTouchUI = __aspxIE && __aspxBrowserMajorVersion > 9 && __aspxWindowsPlatform && __aspxUserAgent.toLowerCase().indexOf("touch") >= 0;
 __aspxTouchUI = __aspxWebKitTouchUI || __aspxMSTouchUI;
 __aspxAndroidDefaultBrowser = __aspxAndroidMobilePlatform && !__aspxChrome;
}
_aspxIdentUserAgent(__aspxUserAgent);
ASPx.BlankUrl = __aspxIE
 ? ASPx.SSLSecureBlankUrl
 : (__aspxOpera
  ? "about:blank"
  : "");
function _aspxArrayInsert(array, element, position){
 if(0 <= position && position < array.length){
  for(var i = array.length; i > position; i --)
   array[i] = array[i - 1];
  array[position] = element;
 }
 else
  array.push(element);
}
function _aspxArrayRemove(array, element){
 var index = _aspxArrayIndexOf(array, element);
 if(index > -1) _aspxArrayRemoveAt(array, index);
}
function _aspxArrayRemoveAt(array, index){
 if(index >= 0  && index < array.length){
  for(var i = index; i < array.length - 1; i++)
   array[i] = array[i + 1];
  array.pop();
 }
}
function _aspxArrayClear(array){
 while(array.length > 0)
  array.pop();
}
function _aspxArrayIndexOf(array, element, comparer) {
 if(!comparer) {
  for(var i = 0; i < array.length; i++) {
   if(array[i] == element)
    return i;
  }
 } else {
  for(var i = 0; i < array.length; i++) {
   if(comparer(array[i], element))
    return i;
  }
 }
 return -1;
}
function _aspxArrayIntegerAscendingSort(array){
 _aspxArrayIntegerSort(array);
}
function _aspxArrayIntegerSort(array, desc) {
 array.sort(function(i1, i2) {
  var res = 0;
  if(i1 > i2)
   res = 1;
  else if(i1 < i2)
   res = -1;
  if(desc)
   res *= -1;
  return res;
 });
}
function _aspxCollectionsUnionToArray(firstCollection, secondCollection) {
 var result = [];
 var firstCollectionLength = firstCollection.length;
 var secondCollectionLength = secondCollection.length;
 for(var i = 0; i <  firstCollectionLength + secondCollectionLength; i++) {
  if(i < firstCollectionLength)
   result.push(firstCollection[i]);
  else
   result.push(secondCollection[i - firstCollectionLength]);
 }
 return result;
}
function _aspxCollectionToArray(collection) {
 var array = [];
 for(var i = 0; i < collection.length; i++)
  array.push(collection[i]);
 return array;
}
function _aspxCreateHashTableFromArray(array) {
 var hash = [];
 for(var i = 0; i < array.length; i++)
  hash[array[i]] = 1;
 return hash;
}
function _aspxCreateIndexHashTableFromArray(array) {
 var hash = [];
 for(var i = 0; i < array.length; i++)
  hash[array[i]] = i;
 return hash;
}
var __aspxDefaultBinarySearchComparer = function(array, index, value) {
 var arrayElement = array[index];
 if(arrayElement == value)
  return 0;
 else
  return arrayElement < value ? -1 : 1;
};
var __aspxNearestLeftBinarySearchComparer = function(array, index, value) {
 var arrayElement = array[index];
 var leftPoint = arrayElement < value;
 var lastLeftPoint = leftPoint && index == array.length - 1;
 var nearestLeftPoint = lastLeftPoint || (leftPoint && array[index + 1] >= value)
 if(nearestLeftPoint)
  return 0;
 else
  return arrayElement < value ? -1 : 1;
};
function _aspxArrayBinarySearch(array, value, binarySearchComparer, startIndex, length) {
 if(!binarySearchComparer)
  binarySearchComparer = __aspxDefaultBinarySearchComparer;
 if(!_aspxIsExists(startIndex))
  startIndex = 0;
 if(!_aspxIsExists(length))
  length = array.length - startIndex;
 var endIndex = (startIndex + length) - 1;
 while (startIndex <= endIndex) {
  var middle =  (startIndex + ((endIndex - startIndex) >> 1));
  var compareResult = binarySearchComparer(array, middle, value);
  if (compareResult == 0)
   return middle;
  if (compareResult < 0)
   startIndex = middle + 1;
  else
   endIndex = middle - 1;
 }
 return -(startIndex + 1);
}
function _aspxGetDistinctArray(array) {
 var resultArray = [];
 for(var i = 0; i < array.length; i++) {
  var currentEntry = array[i];
  if(_aspxArrayIndexOf(resultArray, currentEntry) == -1) {
     resultArray.push(currentEntry);
  }
 }
 return resultArray;
}
function _aspxApplyReplacement(text, replecementTable) {
 for(var i = 0; i < replecementTable.length; i++) {
  var replacement = replecementTable[i];
  text = text.replace(replacement[0], replacement[1]);
 }
 return text;
}
function _aspxCompleteReplace(text, regexp, newSubStr) {
 var textPrev;
 do {
  textPrev = text;
  text = text.replace(regexp, newSubStr);
 } while(text != textPrev);
 return text;
}
function _aspxNodeListToArray(nodeList, filter) {
 var result = [];
 for(var i = 0, element; element = nodeList[i]; i++) {
  if(filter && !filter(element))
   continue;
  result.push(element);
 }
 return result;
}
function _aspxEncodeHtml(html) {
 return _aspxApplyReplacement(html, [
  [ /&amp;/g,  '&ampx;'  ], [ /&/g, '&amp;'  ],
  [ /&quot;/g, '&quotx;' ], [ /"/g, '&quot;' ],
  [ /&lt;/g,   '&ltx;'   ], [ /</g, '&lt;'   ],
  [ /&gt;/g,   '&gtx;'   ], [ />/g, '&gt;'   ]
 ]);
}
function _aspxDecodeHtml(html) {
 return _aspxApplyReplacement(html, [
  [ /&gt;/g,   '>' ], [ /&gtx;/g,  '&gt;'   ],
  [ /&lt;/g,   '<' ], [ /&ltx;/g,  '&lt;'   ],
  [ /&quot;/g, '"' ], [ /&quotx;/g,'&quot;' ],
  [ /&amp;/g,  '&' ], [ /&ampx;/g, '&amp;'  ]
 ]);
}
function _aspxParseShortcutString(shortcutString) {
 if(!shortcutString)
  return 0;
 var isCtrlKey = false;
 var isShiftKey = false;
 var isAltKey = false;
 var keyCode = null;
 var shcKeys = shortcutString.toString().split("+");
 if (shcKeys.length > 0) {
  for (var i = 0; i < shcKeys.length; i++) {
   var key = _aspxTrim(shcKeys[i].toUpperCase());
   switch (key) {
    case "CTRL":
     isCtrlKey = true;
     break;
    case "SHIFT":
     isShiftKey = true;
     break;
    case "ALT":
     isAltKey = true;
     break;
    case "F1": keyCode = ASPxKey.F1; break;
    case "F2": keyCode = ASPxKey.F2; break;
    case "F3": keyCode = ASPxKey.F3; break;
    case "F4": keyCode = ASPxKey.F4; break;
    case "F5": keyCode = ASPxKey.F5; break;
    case "F6": keyCode = ASPxKey.F6; break;
    case "F7": keyCode = ASPxKey.F7; break;
    case "F8": keyCode = ASPxKey.F8; break;
    case "F9": keyCode = ASPxKey.F9; break;
    case "F10":   keyCode = ASPxKey.F10; break;
    case "F11":   keyCode = ASPxKey.F11; break;
    case "F12":   keyCode = ASPxKey.F12; break;
    case "ENTER": keyCode = ASPxKey.Enter; break;
    case "HOME":  keyCode = ASPxKey.Home; break;
    case "END":   keyCode = ASPxKey.End; break;
    case "LEFT":  keyCode = ASPxKey.Left; break;
    case "RIGHT": keyCode = ASPxKey.Right; break;
    case "UP": keyCode = ASPxKey.Up; break;
    case "DOWN":  keyCode = ASPxKey.Down; break;
    case "PAGEUP": keyCode = ASPxKey.PageUp; break;
    case "PAGEDOWN": keyCode = ASPxKey.PageDown; break;
    case "SPACE": keyCode = ASPxKey.Space; break;
    case "TAB":   keyCode = ASPxKey.Tab; break;
    case "BACK":  keyCode = ASPxKey.Backspace; break;
    case "CONTEXT": keyCode = ASPxKey.ContextMenu; break;
    case "ESCAPE":
    case "ESC":
     keyCode = ASPxKey.Esc;
     break;
    case "DELETE":
    case "DEL":
     keyCode = ASPxKey.Delete;
     break;
    case "INSERT":
    case "INS":
     keyCode = ASPxKey.Insert;
     break;
    case "PLUS":
     keyCode = "+".charCodeAt(0);
     break;
    default:
     keyCode = key.charCodeAt(0);
     break;
   }
  }
 } else
  alert("Invalid shortcut");
 return _aspxGetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey);
}
function _aspxGetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey) {
 var value = keyCode & 0xFFFF;
 var flags = 0;
 flags |= isCtrlKey ? 1 << 0 : 0;
 flags |= isShiftKey ? 1 << 2 : 0;
 flags |= isAltKey ? 1 << 4 : 0;
 value |= flags << 16;
 return value;
}
function _aspxGetShortcutCodeByEvent(evt) {
 return _aspxGetShortcutCode(_aspxGetKeyCode(evt), evt.ctrlKey, evt.shiftKey, evt.altKey);
}
function _aspxIsPasteShortcut(evt){
 var keyCode = _aspxGetKeyCode(evt);
 if (__aspxNetscapeFamily && evt.which == 0)
  keyCode = evt.keyCode;
 return (evt.ctrlKey && (keyCode == 118  || (keyCode == 86))) ||
     (evt.shiftKey && !evt.ctrlKey && !evt.altKey &&
     (keyCode == ASPxKey.Insert)) ;
}
var ASPxImageUtils = {
 GetImageSrc: function (image){
  return image.src;
 },
 SetImageSrc: function(image, src){
  image.src = src;
 },
 SetSize: function(image, width, height){
  image.style.width = width + "px";
  image.style.height = height + "px";
 },
 GetSize: function(image, isWidth){
  return (isWidth ? image.offsetWidth : image.offsetHeight);
 }
};
var __aspxVerticalScrollBarWidth;
function _aspxGetVerticalScrollBarWidth() {
 if(typeof(__aspxVerticalScrollBarWidth) == "undefined") {
  var container = document.createElement("DIV");
  container.style.cssText = "position: absolute; top: 0px; left: 0px; visibility: hidden; width: 200px; height: 150px; overflow: hidden";
  document.body.appendChild(container);
  var child = document.createElement("P");
  container.appendChild(child);
  child.style.cssText = "width: 100%; height: 200px;";
  var widthWithoutScrollBar = child.offsetWidth;
  container.style.overflow = "scroll";
  var widthWithScrollBar = child.offsetWidth;
  if(widthWithoutScrollBar == widthWithScrollBar)
   widthWithScrollBar = container.clientWidth;
  __aspxVerticalScrollBarWidth = widthWithoutScrollBar - widthWithScrollBar;
  document.body.removeChild(container);
 }
 return __aspxVerticalScrollBarWidth;
}
function _aspxGetVerticalOverflow(element) {
 if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
  return element.style.overflowY;
 return element.style.overflow;
}
function _aspxSetVerticalOverflow(element, value) {
 if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
  element.style.overflowY = value;
 else
  element.style.overflow = value;
}
function _aspxHideScrollBarCore(element, scrollName) {
 if(element.tagName == "IFRAME") {
  if((element.scrolling == "yes") || (element.scrolling == "auto")) {
   _aspxChangeAttribute(element, "scrolling", "no");
   return true;
  }
 }
 else if(element.tagName == "DIV") {
  if((element.style[scrollName] == "scroll") || (element.style[scrollName] == "auto")) {
   _aspxChangeStyleAttribute(element, scrollName, "hidden");
   return true;
  }
 }
 return false;
}
function _aspxRestoreScrollBarCore(element, scrollName) {
 if(element.tagName == "IFRAME")
  return _aspxRestoreAttribute(element, "scrolling");
 else if(element.tagName == "DIV")
  return _aspxRestoreStyleAttribute(element, scrollName);
 return false;
}
function _aspxSetScrollBarVisibilityCore(element, scrollName, isVisible) {
 return isVisible ? _aspxRestoreScrollBarCore(element, scrollName) : _aspxHideScrollBarCore(element, scrollName);
}
function _aspxSetScrollBarVisibility(element, isVisible) {
 if(_aspxSetScrollBarVisibilityCore(element, "overflow", isVisible))
  return true;
 var result = _aspxSetScrollBarVisibilityCore(element, "overflowX", isVisible)
  || _aspxSetScrollBarVisibilityCore(element, "overflowY", isVisible);
 return result;
}
function _aspxSetTimeout(callString, timeout){
 return window.setTimeout(callString, timeout);
}
function _aspxClearTimer(timerID){
 if(timerID > -1)
  window.clearTimeout(timerID);
 return -1;
}
function _aspxSetInterval(callString, interval){
 return window.setInterval(callString, interval);
}
function _aspxClearInterval(timerID){
 if(timerID > -1)
  window.clearInterval(timerID);
 return -1;
}
function _aspxSetInnerHtml(element, html) {
 if(__aspxIE) {
  element.innerHTML = "<em>&nbsp;</em>" + html;
  element.removeChild(element.firstChild);
 } else
  element.innerHTML = html;
}
function _aspxGetInnerText(container) {
 if (__aspxSafari && __aspxBrowserMajorVersion <= 5) {
  var filter = _aspxGetHtml2PlainTextFilter();
  filter.innerHTML = container.innerHTML;
  _aspxSetElementDisplay(filter, true);
  var innerText = filter.innerText;
  _aspxSetElementDisplay(filter, false);
  return innerText;
 } else if (__aspxNetscapeFamily || __aspxWebKitFamily) {
  return container.textContent;
 } else
  return container.innerText;
}
var __aspxHtml2PlainTextFilter = null;
function _aspxGetHtml2PlainTextFilter() {
 if (__aspxHtml2PlainTextFilter == null) {
  __aspxHtml2PlainTextFilter = document.createElement("DIV");
  __aspxHtml2PlainTextFilter.style.width = "0";
  __aspxHtml2PlainTextFilter.style.height = "0";
  __aspxHtml2PlainTextFilter.style.overflow = "visible";
  _aspxSetElementDisplay(__aspxHtml2PlainTextFilter, false);
  document.body.appendChild(__aspxHtml2PlainTextFilter);
 }
 return __aspxHtml2PlainTextFilter;
}
function _aspxCreateHiddenField(name, id) {
 var input = document.createElement("INPUT");
 input.setAttribute("type", "hidden");
 if(name)
  input.setAttribute("name", name);
 if(id)
  input.setAttribute("id", id);
 return input;
}
function _aspxCloneObject(srcObject) {
  if(typeof(srcObject) != 'object' || srcObject == null)
 return srcObject;
  var newObject = { };
  for(var i in srcObject)
 newObject[i] = srcObject[i];
  return newObject;
}
function _aspxIsExists(obj){
 return (typeof(obj) != "undefined") && (obj != null);
}
function _aspxIsFunction(obj){
 return typeof(obj) == "function";
}
function _aspxGetDefinedValue(value, defaultValue){
 return (typeof(value) != "undefined") ? value : defaultValue;
}
function _aspxGetKeyCode(srcEvt) {
 return __aspxNetscapeFamily || __aspxOpera ? srcEvt.which : srcEvt.keyCode;
}
function _aspxPreventElementDrag(element) {
 if(__aspxIE)
  _aspxAttachEventToElement(element, "dragstart", _aspxPreventEvent);
 else
  _aspxAttachEventToElement(element, "mousedown", _aspxPreventEvent);
}
function _aspxPreventElementDragAndSelect(element, skipMouseMove, skipIESelect){
 if(__aspxWebKitFamily)
  _aspxAttachEventToElement(element, "selectstart", _aspxPreventEventAndBubble);
 if(__aspxIE){
  if(!skipIESelect)
   _aspxAttachEventToElement(element, "selectstart", _aspxFalseFunction);
  if(!skipMouseMove)
   _aspxAttachEventToElement(element, "mousemove", _aspxClearSelectionOnMouseMove);
  _aspxAttachEventToElement(element, "dragstart", _aspxPreventDragStart);
 }
}
function _aspxSetElementAsUnselectable(element, isWithChild, recursive) {
 if (element && element.nodeType == 1) {
  element.unselectable = "on";
  if(__aspxNetscapeFamily)
   element.onmousedown = _aspxFalseFunction;
  if((__aspxIE && __aspxBrowserVersion >= 9) || __aspxWebKitFamily)
   _aspxAttachEventToElement(element, "mousedown", _aspxPreventEventAndBubble);
  if(isWithChild === true){
   for(var j = 0; j < element.childNodes.length; j ++)
    _aspxSetElementAsUnselectable(element.childNodes[j], (!!recursive ? true : false), (!!recursive));
  }
 }
}
function _aspxIsPercentageSize(size) {
 return size && size.indexOf('%') != -1;
}
function _aspxClearSelection() {
 try {
  if (window.getSelection) {
   if (__aspxWebKitFamily)
    window.getSelection().collapse();
   else
    window.getSelection().removeAllRanges();
  }
  else if (document.selection) {
   if(document.selection.empty)
    document.selection.empty();
   else if(document.selection.clear)
    document.selection.clear();
  }
 } catch(e) {
 }
}
function _aspxClearSelectionOnMouseMove(evt) {
 if (!__aspxIE || (evt.button != 0))
  _aspxClearSelection();
}
function _aspxPreventDragStart(evt) {
 evt = _aspxGetEvent(evt);
 var element = _aspxGetEventSource(evt);
 if (element.releaseCapture)
  element.releaseCapture();
 return false;
}
function _aspxSetElementSelectionEnabled(element, value) {
 var userSelectValue = value ? "" : "none";
 var func = value ? _aspxDetachEventFromElement : _aspxAttachEventToElement;
 if(__aspxFirefox)
  element.style.MozUserSelect = userSelectValue;
 else if(__aspxWebKitFamily)
  element.style.webkitUserSelect = userSelectValue;
 else if(__aspxOpera)
  func(element, "mousemove", _aspxClearSelection);
 else {
  func(element, "selectstart", _aspxFalseFunction);
  func(element, "mousemove", _aspxClearSelection);
 }
}
function _aspxGetElementById(id) {
 if(document.getElementById)
  return document.getElementById(id);
 else
  return document.all[id];
}
function _aspxGetInputElementById(id) {
 var elem = _aspxGetElementById(id);
 if(!__aspxIE)
  return elem;
 if(elem) {
  if(elem.id == id)
   return elem;
  else {
   for(var i = 1; i < document.all[id].length; i++) {
    if(document.all[id][i].id == id)
     return document.all[id][i];
   }
  }
 }
 return null;
}
function _aspxGetElementByIdInDocument(documentObj, id) {
 if(documentObj.getElementById)
  return documentObj.getElementById(id);
 else
  return documentObj.all[id];
}
function _aspxGetIsParent(parentElement, element) {
 while(element){
  if(element === parentElement)
   return true;
  if(element.tagName === "BODY")
   return false;
  element = element.parentNode;
 }
 return false;
}
function _aspxGetParentById(element, id) {
 element = element.parentNode;
 while(element){
  if(element.id === id)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetParentByTagName(element, tagName) {
 tagName = tagName.toUpperCase();
 while(element) {
  if(element.tagName === "BODY")
   return null;
  if(element.tagName === tagName)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxElementHasCssClass(element, className) {
 try {
  return !!element.className.match("(^|\\s)" + className + "(\\s|$)");
 } catch(e) {
  return false;
 }
}
function _aspxElementCssClassContains(element, className) {
 try {
  return element.className.indexOf(className) != -1;
 } catch(e) {
  return false;
 }
}
function _aspxAddClassNameToElement(element, className){
 if(!_aspxElementHasCssClass(element, className))
  element.className = element.className + " " + className;
}
function _aspxRemoveClassNameFromElement(element, className){
 if(_aspxElementHasCssClass(element, className)) {
  element.className = (" " + element.className + " ").replace(" " + className + " ", " ");
 }
}
function _aspxGetChildNodesByClassName(parent, className) {
 if(parent.querySelectorAll) {
  var children = parent.querySelectorAll('.' + className);
  return _aspxNodeListToArray(children, function(element) {
   return element.parentNode === parent;
  });
 }
 return _aspxGetChildNodes(parent, function(elem) { return elem.className && _aspxElementHasCssClass(elem, className); });
}
function _aspxGetDescendantNodesByClassName(parent, className) {
 if(parent.querySelectorAll) {
  var children = parent.querySelectorAll('.' + className);
  return _aspxNodeListToArray(children);
 }
 return _aspxGetDescendantNodes(parent, function(elem) { return elem.className && _aspxElementHasCssClass(elem, className); });
}
function _aspxGetParentByClassNameInternal(element, className, selector) {
 while(element != null) {
  if(element.tagName == "BODY")
   return null;
  if(selector(element, className))
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetParentByPartialClassName(element, className) {
 return _aspxGetParentByClassNameInternal(element, className, _aspxElementCssClassContains);
}
function _aspxGetParentByClassName(element, className) {
 return _aspxGetParentByClassNameInternal(element, className, _aspxElementHasCssClass);
}
function _aspxGetParentByTagNameAndAttributeValue(element, tagName, attrName, attrValue) {
 tagName = tagName.toUpperCase();
 while(element != null) {
  if(element.tagName == "BODY")
   return null;
  if(element.tagName == tagName && element[attrName] == attrValue)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetChildById(element, id) {
 if(element.all) {
  var child = element.all[id];
  if (!child) {
   child = element.all(id);
   if(!child)
    return __aspxIE ? document.getElementById(id) : null;
  }
  if(!_aspxIsExists(child.length))
   return child;
  else
   return _aspxGetElementById(id);
 }
 else
  return _aspxGetElementById(id);
}
function _aspxGetElementsByTagName(element, tagName) {
 tagName = tagName.toUpperCase();
 if(element) {
  if(element.getElementsByTagName)
   return element.getElementsByTagName(tagName);
  else if(element.all && element.all.tags !== undefined)
   return __aspxNetscape ? element.all.tags[tagName] : element.all.tags(tagName);
 }
 return null;
}
function _aspxGetChildByTagName(element, tagName, index) {
 if(element != null){
  var collection = _aspxGetElementsByTagName(element, tagName);
  if(collection != null){
   if(index < collection.length)
    return collection[index];
  }
 }
 return null;
}
function _aspxRetrieveByPredicate(scourceCollection, predicate) {
 var result = [];
 for(var i = 0; i < scourceCollection.length; i++) {
  var element = scourceCollection[i];
  if(!predicate || predicate(element))
   result.push(element);
 }
 return result;
}
function _aspxGetChildNodes(parent, predicate) {
 return _aspxRetrieveByPredicate(parent.childNodes, predicate);
}
function _aspxGetChildNodesByTagName(parent, tagName) {
 return _aspxGetChildNodes(parent, function (child) { return child.tagName === tagName; });
}
function _aspxGetDescendantNodes(parent, predicate) {
 var c = parent.all || parent.getElementsByTagName('*');
 return _aspxRetrieveByPredicate(c, predicate);
}
function _aspxGetElementNodes(parent) {
 if(!parent) return null;
 return _aspxGetChildNodes(parent, function(e) { return e.nodeType == 1 })
}
function _aspxGetElementNodesByPredicate(parent, predicate) {
 if(!parent) return null;
 if(!predicate) return _aspxGetElementNodes(parent);
 return _aspxGetChildNodes(parent, function(e) { return e.nodeType == 1 && predicate(e); })
}
function _aspxGetChildTextNode(element, index) {
 if(element != null){
  var collection = [ ];
  _aspxGetChildTextNodeCollection(element, collection);
  if(index < collection.length)
   return collection[index];
 }
 return null;
}
function _aspxGetChildTextNodeCollection(element, collection) {
 for(var i = 0; i < element.childNodes.length; i ++){
  var childNode = element.childNodes[i];
  if(_aspxIsExists(childNode.nodeValue))
   collection.push(childNode);
  _aspxGetChildTextNodeCollection(childNode, collection);
 }
}
function _aspxGetChildrenByPartialClassName(element, className) {
 if(element.querySelectorAll) {
  var list = element.querySelectorAll('*[class*=' + className + ']');
  return _aspxNodeListToArray(list);
 }
 var collection = element.all || element.getElementsByTagName('*');
 var ret = [ ];
 if(collection != null) {
  for(var i = 0; i < collection.length; i ++) {
   if(_aspxElementCssClassContains(collection[i], className))
    ret.push(collection[i]);
  }
 }
 return ret;
}
function _aspxGetParentByPartialId(element, idPart){
 while(element && element.tagName != "BODY") {
  if(element.id && element.id.indexOf(idPart) > -1)
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxGetElementsByPartialId(element, partialName, list) {
 if(element.id && element.id.indexOf(partialName) > -1) {
  list.push(element);
 }
 if(element.childNodes)
 for(var i = 0; i < element.childNodes.length; i ++) {
  _aspxGetElementsByPartialId(element.childNodes[i], partialName, list);
 }
}
function _aspxGetElementDocument(element) {
 return element.document || element.ownerDocument;
}
function _aspxRemoveElement(element) {
 if(element && element.parentNode)
  element.parentNode.removeChild(element);
}
function _aspxReplaceTagName(element, newTagName, cloneChilds) {
 if (element.nodeType != 1)
  return null;
 if (element.nodeName == newTagName)
  return element;
 cloneChilds = cloneChilds !== undefined ? cloneChilds : true;
 var doc = element.ownerDocument;
 var newElem = doc.createElement(newTagName);
 _aspxCopyAllAttributes(element, newElem);
 if(cloneChilds) {
  for (var i = 0; i < element.childNodes.length; i++)
   newElem.appendChild(element.childNodes[i].cloneNode(true));
 }
 else {
  for(var child; child = element.firstChild; )
   newElem.appendChild(child);
 }
 element.parentNode.replaceChild(newElem, element);
 return newElem;
}
function _aspxRemoveOuterTags(element) {
 if (__aspxIE) {
  element.insertAdjacentHTML( 'beforeBegin', element.innerHTML ) ;
  _aspxRemoveElement(element);
 } else {
  var docFragment = element.ownerDocument.createDocumentFragment();
  for (var i = 0; i < element.childNodes.length; i++)
   docFragment.appendChild(element.childNodes[i].cloneNode(true));
  element.parentNode.replaceChild(docFragment, element);
 }
}
function _aspxWrapElementInNewElement(element, newElementTagName) {
 var wrapElement = null;
 if (__aspxIE) {
  var wrapElement = element.ownerDocument.createElement(newElementTagName);
  wrapElement.appendChild(element.cloneNode(true));
  element.parentNode.insertBefore(wrapElement, element);
  element.parentNode.removeChild(element);
 } else {
  var docFragment = element.ownerDocument.createDocumentFragment();
  wrapElement = element.ownerDocument.createElement(newElementTagName);
  docFragment.appendChild(wrapElement);
  wrapElement.appendChild(element.cloneNode(true));
  element.parentNode.replaceChild(docFragment, element);
 }
 return wrapElement;
}
function _aspxInsertElementAfter(newElement, targetElement) {
 var parentElem = targetElement.parentNode;
 if(parentElem.childNodes[parentElem.childNodes.length - 1] == targetElement)
  parentElem.appendChild(newElement);
 else
  parentElem.insertBefore(newElement, targetElement.nextSibling);
}
function _aspxGetEvent(evt){
 return (typeof(event) != "undefined" && event != null && __aspxIE) ? event : evt;
}
function _aspxEventPrevented(evt) {
 return evt.defaultPrevented || evt.returnValue === false;
}
function _aspxPreventEvent(evt){
 if (evt.preventDefault)
  evt.preventDefault();
 else
  evt.returnValue = false;
 return false;
}
function _aspxPreventEventAndBubble(evt){
 _aspxPreventEvent(evt);
 if (evt.stopPropagation)
  evt.stopPropagation();
 evt.cancelBubble = true;
 return false;
}
function _aspxCancelBubble(evt){
 evt.cancelBubble = true;
 return false;
}
function _aspxPreventImageDragging(image) {
 if(image) {
  if(__aspxNetscapeFamily)
   image.onmousedown = function(evt) {
    evt.cancelBubble = true;
    return false;
   };
  else
   image.ondragstart = function() {
    return false;
   };
 }
}
function _aspxClientEventRequiresDocScrollCorrection() {
 return __aspxAndroidDefaultBrowser || !(__aspxSafari && __aspxBrowserVersion < 3 || __aspxMacOSMobilePlatform && __aspxBrowserVersion < 5.1);
}
function _aspxGetEventSource(evt){
 if(!_aspxIsExists(evt)) return null;
 return evt.srcElement ? evt.srcElement : evt.target;
}
function _aspxGetEventX(evt){
 if(ASPxClientTouchUI.isTouchEvent(evt))
  return ASPxClientTouchUI.getEventX(evt);
 return evt.clientX  - _aspxGetIEDocumentClientOffsetInternal(true) + (_aspxClientEventRequiresDocScrollCorrection() ? _aspxGetDocumentScrollLeft() : 0);
}
function _aspxGetEventY(evt){
 if(ASPxClientTouchUI.isTouchEvent(evt))
  return ASPxClientTouchUI.getEventY(evt);
 var oldSafari = __aspxSafari && __aspxBrowserVersion < 3 || __aspxMacOSMobilePlatform && __aspxBrowserVersion < 5.1;
 return evt.clientY - _aspxGetIEDocumentClientOffsetInternal(false) + (_aspxClientEventRequiresDocScrollCorrection() ? _aspxGetDocumentScrollTop() : 0 );
}
function _aspxGetIEDocumentClientOffsetInternal(IsX){
 var clientOffset = 0;
 if(__aspxIE && __aspxBrowserVersion < 8){
  if(document.documentElement)
   clientOffset = IsX ? document.documentElement.clientLeft : document.documentElement.clientTop;
  if(clientOffset == 0 && document.body)
   var clientOffset = IsX ? document.body.clientLeft : document.body.clientTop;
 }
 return clientOffset;
}
function _aspxGetIsLeftButtonPressed(evt){
 if(ASPxClientTouchUI.isTouchEvent(evt))
  return true;
 evt = _aspxGetEvent(evt);
 if(!evt) return false;
 if(__aspxIE && __aspxBrowserVersion < 11){
  if(__aspxMSTouchUI)
   return true;
  return evt.button % 2 == 1;
 }
 else if(__aspxNetscapeFamily || __aspxWebKitFamily || (__aspxIE && __aspxBrowserVersion >= 11))
  return evt.which == 1;
 else if (__aspxOpera)
  return evt.button == 0;
 return true;
}
function _aspxGetWheelDelta(evt){
 var ret = __aspxNetscapeFamily ? -evt.detail : evt.wheelDelta;
 if (__aspxOpera && __aspxBrowserVersion < 9)
  ret = -ret;
 return ret;
}
function _aspxDelCookie(name){
 _aspxSetCookieInternal(name, "", new Date(1970, 1, 1));
}
function _aspxGetCookie(name) {
 name = escape(name);
 var cookies = document.cookie.split(';');
 for(var i = 0; i < cookies.length; i++) {
  var cookie = _aspxTrim(cookies[i]);
  if(cookie.indexOf(name + "=") == 0)
   return unescape(cookie.substring(name.length + 1, cookie.length));
  else if(cookie.indexOf(name + ";") == 0 || cookie === name)
   return "";
 }
 return null;
}
function _aspxSetCookie(name, value, expirationDate){
 if(!_aspxIsExists(value)) {
  _aspxDelCookie(name);
  return;
 }
 if(!ASPxIdent.IsDate(expirationDate)) {
  expirationDate = new Date();
  expirationDate.setFullYear(expirationDate.getFullYear() + 1);
 }
 _aspxSetCookieInternal(name, value, expirationDate);
}
function _aspxSetCookieInternal(name, value, date){
 document.cookie = escape(name) + "=" + escape(value.toString()) + "; expires=" + date.toGMTString() + "; path=/";
}
function _aspxSetElementOpacity(element, value) {
  var useOpacityStyle = !__aspxIE || __aspxBrowserVersion > 8;
  if (useOpacityStyle){
   element.style.opacity = value;
  } else {
   if(typeof(element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"])
    element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity = value*100;
   else
   element.style.filter = "alpha(opacity=" + (value * 100) + ")";
  }
}
function _aspxGetElementOpacity(element) {
 var useOpacityStyle = !__aspxIE || __aspxBrowserVersion > 8;
 if (useOpacityStyle)
  return parseFloat(_aspxGetCurrentStyle(element).opacity);
 else {
  if(typeof(element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"]){
   return element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity / 100;
  } else {
   var alphaValue = _aspxGetCurrentStyle(element).filter;
   var value = alphaValue.replace("alpha(opacity=", "");
   value = value.replace(")", "");
   return parseInt(value) / 100;
  }
  return 100;
 }
}
function _aspxGetElementDisplay(element){
 return element.style.display != "none";
}
function _aspxSetElementDisplay(element, value) {
 if(!element) return;
 element.style.display = value ? "" : "none";
}
function _aspxGetElementVisibility(element){
 return element.style.visibility != "hidden";
}
function _aspxSetElementVisibility(element, value){
 element.style.visibility = value ? "visible" : "hidden";
}
function _aspxElementIsVisible(element){
 while(element && element.tagName != "BODY") {
  if(!_aspxGetElementDisplay(element) || (!_aspxGetElementVisibility(element) && !_aspxIsExistsAttribute(element, "errorFrame")))
     return false;
  element = element.parentNode;
 }
 return true;
}
function _aspxElementIsDisplayed(element) {
 while(element && element.tagName != "BODY") {
  if(!_aspxGetElementDisplay(element))
     return false;
  element = element.parentNode;
 }
 return true;
}
function _aspxAddStyleSheetLinkToDocument(doc, linkUrl) {
 var newLink = _aspxCreateStyleLink(doc, linkUrl);
 var head = _aspxGetHeadElementOrCreateIfNotExist(doc);
 head.appendChild(newLink);
}
function _aspxGetHeadElementOrCreateIfNotExist(doc) {
 var elements = _aspxGetElementsByTagName(doc, "head");
 var head = null;
 if (elements.length == 0) {
  head = doc.createElement("head");
  head.visibility = "hidden";
  doc.insertBefore(head, doc.body);
 } else
  head = elements[0];
 return head;
}
function _aspxCreateStyleLink(doc, url) {
 var newLink = doc.createElement("link");
 _aspxSetAttribute(newLink, "href", url);
 _aspxSetAttribute(newLink, "type", "text/css");
 _aspxSetAttribute(newLink, "rel", "stylesheet");
 return newLink;
}
function _aspxGetCurrentStyle(element) {
 if(element.currentStyle)
  return element.currentStyle;
 else if(document.defaultView && document.defaultView.getComputedStyle) {
  var result = document.defaultView.getComputedStyle(element, null);
  if(!result && __aspxFirefox && window.frameElement) {
   var changes = [];
   var curElement = window.frameElement;
   while(!(result = document.defaultView.getComputedStyle(element, null))) {
    changes.push([curElement, curElement.style.display]);
    _aspxSetStyleCore(curElement, "display", "block", true);
    curElement = curElement.tagName == "BODY" ? curElement.ownerDocument.defaultView.frameElement : curElement.parentNode;
   }
   result = _aspxCloneObject(result);
   for(var ch, i = 0; ch = changes[i]; i++)
    _aspxSetStyleCore(ch[0], "display", ch[1]);
  }
  return result;
 }
 return window.getComputedStyle(element, null);
}
function _aspxIsElementRightToLeft(element) {
 return _aspxGetElementDirection(element) == "rtl";
}
function _aspxCreateStyleSheetInDocument(doc) {
 if(doc.createStyleSheet) {
  try {
   return doc.createStyleSheet();
  }
  catch(e) {
   var message = "The CSS link limit (31) has been exceeded. Please enable CSS merging or reduce the number of CSS files on the page. For details, see http://www.devexpress.com/Support/Center/p/K18487.aspx.";
   throw new Error(message);
  }
 }
 else {
  var styleSheet = doc.createElement("STYLE");
  _aspxGetChildByTagName(doc, "HEAD", 0).appendChild(styleSheet);
  return styleSheet.sheet;
 }
}
function _aspxGetCurrentStyleSheet() {
 if(!__aspxStyleSheet)
  __aspxStyleSheet = _aspxCreateStyleSheetInDocument(document);
 return __aspxStyleSheet;
}
function _aspxCreateStyleSheet(){
 return _aspxCreateStyleSheetInDocument(document);
}
function _aspxGetStyleSheetRules(styleSheet){
 try {
  return __aspxIE ? styleSheet.rules : styleSheet.cssRules;
 }
 catch(e) {
  return null;
 }
}
function _aspxGetStyleSheetRule(className){
 if(__aspxCachedRules[className]) {
  if(__aspxCachedRules[className] != __aspxEmptyCachedValue)
   return __aspxCachedRules[className];
  return null;
 }
 for(var i = 0; i < document.styleSheets.length; i ++){
  var styleSheet = document.styleSheets[i];
  var rules = _aspxGetStyleSheetRules(styleSheet);
  if(rules != null){
   for(var j = 0; j < rules.length; j ++){
    if(rules[j].selectorText == "." + className){
     __aspxCachedRules[className] = rules[j];
     return rules[j];
    }
   }
  }
 }
 __aspxCachedRules[className] = __aspxEmptyCachedValue;
 return null;
}
function _aspxCreateImportantStyleRule(styleSheet, cssText, postfix, prefix) {
 styleSheet = styleSheet || _aspxGetCurrentStyleSheet();
 var cacheKey = (postfix ? postfix + "||" : "") + cssText + (prefix ? "||" + prefix : "");
 if(__aspxStyleNameCache[cacheKey])
  return __aspxStyleNameCache[cacheKey];
 prefix = prefix ? prefix + " " : "";
 var className = "dxh" + __aspxStyleCount + (postfix ? postfix : "");
 _aspxAddStyleSheetRule(styleSheet, prefix + "." + className, _aspxCreateImportantCssText(cssText));
 __aspxStyleCount++;
 __aspxStyleNameCache[cacheKey] = className;
 return className;
}
function _aspxCreateImportantCssText(cssText) {
 var newText = "";
 var attributes = cssText.split(";");
 for(var i = 0; i < attributes.length; i++){
  if(attributes[i] != "")
   newText += attributes[i] + " !important;";
 }
 return newText;
}
function _aspxRemoveStyleSheetRule(styleSheet, index){
 var rules = _aspxGetStyleSheetRules(styleSheet);
 if(rules != null && rules.length > 0 && rules.length >= index){
  if(__aspxIE)
   styleSheet.removeRule(index);
  else
   styleSheet.deleteRule(index);
 }
}
function _aspxAddStyleSheetRule(styleSheet, selector, cssText){
 if(!cssText) return;
 if(__aspxIE)
  styleSheet.addRule(selector, cssText);
 else
  styleSheet.insertRule(selector + " { " + cssText + " }", styleSheet.cssRules.length);
}
function _aspxGetPointerCursor() {
 return "pointer";
}
function _aspxSetPointerCursor(element) {
 if(element.style.cursor == "")
  element.style.cursor = _aspxGetPointerCursor();
}
function _aspxSetElementFloat(element, value) {
 if(_aspxIsExists(element.style.cssFloat))
  element.style.cssFloat = value;
 else if(_aspxIsExists(element.style.styleFloat))
  element.style.styleFloat = value;
 else
  _aspxSetAttribute(element.style, "float", value);
}
function _aspxGetElementFloat(element) {
 var currentStyle = _aspxGetCurrentStyle(element);
 if(_aspxIsExists(currentStyle.cssFloat))
  return currentStyle.cssFloat;
 if(_aspxIsExists(currentStyle.styleFloat))
  return currentStyle.styleFloat;
 return _aspxGetAttribute(currentStyle, "float");
}
function _aspxGetElementDirection(element) {
 return _aspxGetCurrentStyle(element).direction;
}
function _aspxSetElementDirection(element, value) {
 element.style.direction = value;
}
function _aspxAdjustVerticalMarginsInContainer(container) {
 var containerBorderAndPaddings = _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
 var flowElements = [], floatElements = [], floatTextElements = [];
 var maxHeight = 0, maxFlowHeight = 0;
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  _aspxClearVerticalMargins(element);
 }
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  var float = _aspxGetElementFloat(element);
  var isFloat = (float === "left" || float === "right");
  if(isFloat)
   floatElements.push(element)
  else {
   flowElements.push(element);
   if(element.tagName !== "IMG"){
    element.style.verticalAlign = 'baseline';
    floatTextElements.push(element);
   }
   if(element.tagName === "DIV")
    _aspxChangeStyleAttribute(element, "float", "left");
  }
  if(element.offsetHeight > maxHeight)
   maxHeight = element.offsetHeight;
  if(!isFloat && element.offsetHeight > maxFlowHeight)
   maxFlowHeight = element.offsetHeight;
 }
 for(var i = 0; i < flowElements.length; i++)
  _aspxRestoreStyleAttribute(flowElements[i], "float");
 var containerBorderAndPaddings = _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
 var containerHeight = container.offsetHeight - containerBorderAndPaddings;
 if(maxHeight == containerHeight) {
  var verticalAlign = _aspxGetCurrentStyle(container).verticalAlign;
  for(var i = 0; i < floatTextElements.length; i++)
   floatTextElements[i].style.verticalAlign = '';
  containerHeight = container.offsetHeight - containerBorderAndPaddings;
  for(var i = 0; i < floatElements.length; i++)
   _aspxAdjustVerticalMarginsCore(floatElements[i], containerHeight, verticalAlign, true);
  for(var i = 0; i < flowElements.length; i++) {
   if(maxFlowHeight != maxHeight)
    _aspxAdjustVerticalMarginsCore(flowElements[i], containerHeight, verticalAlign);
  }
 }
}
function _aspxAdjustVerticalMargins(element) {
 _aspxClearVerticalMargins(element);
 var parentElement = element.parentNode;
 var parentHeight = parentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(parentElement);
 _aspxAdjustVerticalMarginsCore(element, parentHeight, _aspxGetCurrentStyle(parentElement).verticalAlign);
}
function _aspxAdjustVerticalMarginsCore(element, parentHeight, verticalAlign, toBottom) {
 var marginTop;
 if(verticalAlign == "top")
  marginTop = 0;
 else if(verticalAlign == "bottom")
  marginTop = parentHeight - element.offsetHeight;
 else
  marginTop = (parentHeight - element.offsetHeight) / 2;
 if(marginTop !== 0){
  var marginAttr = (toBottom ? Math.ceil(marginTop) : Math.floor(marginTop)) + "px"
  element.style.marginTop = marginAttr;
 }
}
function _aspxClearVerticalMargins(element) {
 element.style.marginTop = "";
 element.style.marginBottom = "";
}
function _aspxAdjustHeightInContainer(container) {
 var height = container.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  _aspxClearHeight(element);
 }
 var elements = [];
 var childrenHeight = 0;
 for(var i = 0; i < container.childNodes.length; i++) {
  var element = container.childNodes[i];
  if(!element.offsetHeight) continue;
  childrenHeight += element.offsetHeight + _aspxGetTopBottomMargins(element);
  elements.push(element);
 }
 if(elements.length > 0 && childrenHeight < height) {
  var correctedHeight = 0;
  for(var i = 0; i < elements.length; i++) {
   var elementHeight = 0;
   if(i < elements.length - 1){
    var elementHeight = Math.floor(height / elements.length);
    correctedHeight += elementHeight;
   }
   else{
    var elementHeight = height - correctedHeight;
    if(elementHeight < 0) elementHeight = 0;
   }
   _aspxAdjustHeightCore(elements[i], elementHeight);
  }
 }
}
function _aspxAdjustHeight(element) {
 _aspxClearHeight(element);
 var parentElement = element.parentNode;
 var height = parentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(parentElement);
 _aspxAdjustHeightCore(element, height);
}
function _aspxAdjustHeightCore(element, height) {
 var height = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
 element.style.height = height + "px";
}
function _aspxClearHeight(element) {
 element.style.height = "";
}
function _aspxAdjustWrappedTextInContainer(container) {
 if(!container) return;
 var textContainer, leftWidth = 0, rightWidth = 0;
 for(var i = 0; i < container.childNodes.length; i++){
  var child = container.childNodes[i];
  if(child.tagName === "BR")
   return;
  if(!child.tagName)
   continue;
  if(child.tagName !== "IMG"){
   textContainer = child;
   if(_aspxIsTextWrapped(textContainer)){
    textContainer.style.width = "";
    textContainer.style.marginRight = "";
   }
  }
  else {
   if(child.offsetWidth === 0){
    _aspxAttachEventToElement(child, "load", function (evt) {
     _aspxAdjustWrappedTextInContainer(container);
    });
    return;
   }
   var width = child.offsetWidth + _aspxGetLeftRightMargins(child);
   if(textContainer)
    rightWidth += width;
   else
    leftWidth += width;
  }
 }
 var containerWidth = container.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(container);
 if(textContainer && _aspxIsTextWrapped(textContainer) && textContainer.offsetWidth + leftWidth + rightWidth >= containerWidth) {
   if(rightWidth > 0)
   textContainer.style.width = (containerWidth - rightWidth) + "px";
  else if(leftWidth > 0){
   if(_aspxIsElementRightToLeft(container))
    textContainer.style.marginLeft = leftWidth + "px";
   else
    textContainer.style.marginRight = leftWidth + "px";
  }
 }
}
function _aspxIsTextWrapped(element) {
 return element && _aspxGetCurrentStyle(element).whiteSpace !== "nowrap";
}
var _aspxWebKit3TDRealInfo = {
 GetOffsetTop: function(tdElement){
  switch(_aspxGetCurrentStyle(tdElement).verticalAlign){
   case "middle":
    return Math.round(tdElement.offsetTop - (tdElement.offsetHeight - tdElement.clientHeight )/2 + tdElement.clientTop);
   case "bottom":
    return tdElement.offsetTop - tdElement.offsetHeight + tdElement.clientHeight + tdElement.clientTop;
  }
  return tdElement.offsetTop;
 },
 GetClientHeight: function(tdElement){
  var valign = _aspxGetCurrentStyle(tdElement).verticalAlign;
  switch(valign){
   case "middle":
    return tdElement.clientHeight + tdElement.offsetTop * 2;
   case "top":
    return tdElement.offsetHeight - tdElement.clientTop * 2;
   case "bottom":
    return tdElement.clientHeight + tdElement.offsetTop;
  }
  return tdElement.clientHeight;
 }
}
function _aspxGetIsValidPosition(pos){
 return pos != __aspxInvalidPosition && pos != -__aspxInvalidPosition;
}
function _aspxGetAbsoluteX(curEl){
 return _aspxGetAbsolutePositionX(curEl);
}
function _aspxGetAbsoluteY(curEl){
 return _aspxGetAbsolutePositionY(curEl);
}
function _aspxSetAbsoluteX(element, x){
 element.style.left = _aspxPrepareClientPosForElement(x, element, true) + "px";
}
function _aspxSetAbsoluteY(element, y){
 element.style.top = _aspxPrepareClientPosForElement(y, element, false) + "px";
}
function _aspxGetAbsolutePositionX(element){
 if (__aspxIE)
  return _aspxGetAbsolutePositionX_IE(element);
 else if (__aspxFirefox && __aspxBrowserVersion >= 3)
  return _aspxGetAbsolutePositionX_FF3(element);
 else if (__aspxOpera)
  return _aspxGetAbsolutePositionX_Opera(element);
 else if(__aspxNetscapeFamily && (!__aspxFirefox || __aspxBrowserVersion < 3))
  return _aspxGetAbsolutePositionX_NS(element);
 else if(__aspxWebKitFamily)
  return _aspxGetAbsolutePositionX_Safari(element);
 else
  return _aspxGetAbsolutePositionX_Other(element);
}
function _aspxGetAbsolutePositionX_Opera(curEl){
 var isFirstCycle = true;
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, true);
 while (curEl != null) {
  pos += curEl.offsetLeft;
  if(!isFirstCycle)
   pos -= curEl.scrollLeft;
  curEl = curEl.offsetParent;
  isFirstCycle = false;
 }
 pos += document.body.scrollLeft;
 return pos;
}
function _aspxGetAbsolutePositionX_IE(element){
 if(element == null || __aspxIE && element.parentNode == null) return 0;
 return element.getBoundingClientRect().left + _aspxGetDocumentScrollLeft() - _aspxGetIEDocumentClientOffsetInternal(true);
}
function _aspxGetAbsolutePositionX_FF3(element){
 if(element == null) return 0;
 var x = element.getBoundingClientRect().left + _aspxGetDocumentScrollLeft();
 return Math.round(x);
}
function _aspxGetAbsolutePositionX_NS(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, true);
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetLeft;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollLeft;
  if (!isFirstCycle && __aspxFirefox){
   var style = _aspxGetCurrentStyle(curEl);
   if(curEl.tagName == "DIV" && style.overflow != "visible")
    pos += _aspxPxToInt(style.borderLeftWidth);
  }
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxGetAbsolutePositionX_Safari(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_WebKit(curEl, true);
 var isSafariVerNonLessThan3OrChrome = __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome;
 if(curEl != null){
  var isFirstCycle = true;
  if(isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
   pos += curEl.offsetLeft;
   curEl = curEl.offsetParent;
   isFirstCycle = false;
  }
  while (curEl != null) {
   pos += curEl.offsetLeft;
   var style = _aspxGetCurrentStyle(curEl);
   var posDiv = curEl.tagName == "DIV" && (style.position == "absolute" || style.position == "relative");
   if(!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
    pos += curEl.clientLeft;
   isFirstCycle = false;
   curEl = curEl.offsetParent;
  }
 }
 return pos;
}
function _aspxGetAbsolutePositionX_Other(curEl){
 var pos = 0;
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetLeft;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollLeft;
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxGetAbsolutePositionY(element){
 if (__aspxIE)
  return _aspxGetAbsolutePositionY_IE(element);
 else if (__aspxFirefox && __aspxBrowserVersion >= 3)
  return _aspxGetAbsolutePositionY_FF3(element);
 else if (__aspxOpera)
  return _aspxGetAbsolutePositionY_Opera(element);
 else if(__aspxNetscapeFamily && (!__aspxFirefox || __aspxBrowserVersion < 3))
  return _aspxGetAbsolutePositionY_NS(element);
 else if(__aspxWebKitFamily)
  return _aspxGetAbsolutePositionY_Safari(element);
 else
  return _aspxGetAbsolutePositionY_Other(element);
}
function _aspxGetAbsolutePositionY_Opera(curEl){
 var isFirstCycle = true;
 if(curEl && curEl.tagName == "TR" && curEl.cells.length > 0)
  curEl = curEl.cells[0];
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, false);
 while (curEl != null) {
  pos += curEl.offsetTop;
  if(!isFirstCycle)
   pos -= curEl.scrollTop;
  curEl = curEl.offsetParent;
  isFirstCycle = false;
 }
 pos += document.body.scrollTop;
 return pos;
}
function _aspxGetAbsolutePositionY_IE(element){
 if(element == null || __aspxIE && element.parentNode == null) return 0;
 return element.getBoundingClientRect().top + _aspxGetDocumentScrollTop() - _aspxGetIEDocumentClientOffsetInternal(false);
}
function _aspxGetAbsolutePositionY_FF3(element){
 if(element == null) return 0;
 var y = element.getBoundingClientRect().top + _aspxGetDocumentScrollTop();
 return Math.round(y);
}
function _aspxGetAbsolutePositionY_NS(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, false);
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetTop;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollTop;
  if (!isFirstCycle && __aspxFirefox){
   var style = _aspxGetCurrentStyle(curEl);
   if(curEl.tagName == "DIV" && style.overflow != "visible")
    pos += _aspxPxToInt(style.borderTopWidth);
  }
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxGetAbsolutePositionY_Safari(curEl){
 var pos = _aspxGetAbsoluteScrollOffset_WebKit(curEl, false);
 var isSafariVerNonLessThan3OrChrome = __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome;
 if(curEl != null){
  var isFirstCycle = true;
  if(isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
   pos += _aspxWebKit3TDRealInfo.GetOffsetTop(curEl);
   curEl = curEl.offsetParent;
   isFirstCycle = false;
  }
  while (curEl != null) {
   pos += curEl.offsetTop;
   var style = _aspxGetCurrentStyle(curEl);
   var posDiv = curEl.tagName == "DIV" && (style.position == "absolute" || style.position == "relative");
   if(!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
    pos += curEl.clientTop;
   isFirstCycle = false;
   curEl = curEl.offsetParent;
  }
 }
 return pos;
}
function _aspxGetAbsoluteScrollOffset_OperaFF(curEl, isX) {
 var pos = 0;
 var isFirstCycle = true;
 while (curEl != null) {
  if(curEl.tagName == "BODY")
   break;
  var style = _aspxGetCurrentStyle(curEl);
  if(style.position == "absolute")
   break;
  if(!isFirstCycle && curEl.tagName == "DIV" && (style.position == "" || style.position == "static"))
   pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.parentNode;
  isFirstCycle = false;
 }
 return pos;
}
function _aspxGetAbsoluteScrollOffset_WebKit(curEl, isX) {
 var pos = 0;
 var isFirstCycle = true;
 var step = 0;
 var absoluteWasFoundAtStep = -1;
 var isThereFixedParent = false;
 while (curEl != null) {
  if(curEl.tagName == "BODY")
   break;
  var style = _aspxGetCurrentStyle(curEl);
  var positionIsDefault = style.position == "" || style.position == "static";
  var absoluteWasFoundAtPreviousStep = absoluteWasFoundAtStep >= 0 && absoluteWasFoundAtStep < step;
  if(!isFirstCycle && (curEl.tagName == "DIV" || curEl.tagName == "FORM") && (!positionIsDefault || !absoluteWasFoundAtPreviousStep))
   pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
  if(style.position == "absolute")
   absoluteWasFoundAtStep = step;
  else if(style.position == "relative")
   absoluteWasFoundAtStep = -1;
  else if(style.position == "fixed")
   isThereFixedParent = true;
  curEl = curEl.parentNode;
  isFirstCycle = false;
  step ++;
 }
 if(isThereFixedParent)
  pos += isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
 return pos;
}
function _aspxGetAbsolutePositionY_Other(curEl){
 var pos = 0;
 var isFirstCycle = true;
 while (curEl != null) {
  pos += curEl.offsetTop;
  if (!isFirstCycle && curEl.offsetParent != null)
   pos -= curEl.scrollTop;
  isFirstCycle = false;
  curEl = curEl.offsetParent;
 }
 return pos;
}
function _aspxCreateElementMoke(element) {
 var div = document.createElement('DIV');
 div.style.top = "0px";
 div.style.left = "0px";
 div.visibility = "hidden";
 div.style.position = _aspxGetCurrentStyle(element).position;
 return div;
}
function _aspxPrepareClientPosElementForOtherParent(pos, element, otherParent, isX) {
 if(element.parentNode == otherParent)
  return _aspxPrepareClientPosForElement(pos, element, isX);
 var elementMoke = _aspxCreateElementMoke(element);
 otherParent.appendChild(elementMoke);
 var preparedPos = _aspxPrepareClientPosForElement(pos, elementMoke, isX);
 otherParent.removeChild(elementMoke);
 return preparedPos;
}
function _aspxPrepareClientPosForElement(pos, element, isX) {
 pos -= _aspxGetPositionElementOffset(element, isX);
 return pos;
}
function _aspxGetExperimentalPositionOffset(element, isX) {
    var div = _aspxCreateElementMoke(element);
    if (__aspxFirefox && __aspxBrowserVersion >= 10 && div.style.position == "static")
     div.style.position = "absolute";
    element.parentNode.appendChild(div);
    var realPos = isX ? _aspxGetAbsoluteX(div) : _aspxGetAbsoluteY(div);
    element.parentNode.removeChild(div);
    return realPos;
}
function _aspxTestElementParentsByFunc(element, func) {
 while(element) {
  var tagName = element.tagName;
  if(tagName == "HTML" || tagName == "BODY" )
   return false;
  if(func(element))
   return true;
  element = element.parentNode;
 }
 return false;
}
function _aspxGetPositionElementOffset(element, isX) {
 if(__aspxFirefox && __aspxBrowserVersion >= 10){
  return _aspxGetExperimentalPositionOffset(element, isX);
 }
 return _aspxGetPositionElementOffsetCore(element, isX);
}
function _aspxGetPositionElementOffsetCore(element, isX) {
 var curEl = element.offsetParent;
 var offset = 0;
 var scroll = 0;
 var isThereFixedParent = false;
 var isFixed = false;
 var hasDisplayTableParent = false;
 var position = "";
 while(curEl != null) {
  var tagName = curEl.tagName;
  if(tagName == "HTML"){
   break;
  }
  if(tagName == "BODY"){
   if(!__aspxOpera && !__aspxChrome){
    var style = _aspxGetCurrentStyle(curEl);
    if(style.position != "" && style.position != "static"){
     offset += _aspxPxToInt(isX ? style.left : style.top);
     offset += _aspxPxToInt(isX ? style.marginLeft : style.marginTop);
    }
   }
   break;
  }
  if(tagName != "TD" && tagName != "TR") {
   var style = _aspxGetCurrentStyle(curEl);
   isFixed = style.position == "fixed";
   if(isFixed) {
    isThereFixedParent = true;
    if(__aspxIE && __aspxBrowserVersion >= 8) {
     return _aspxGetExperimentalPositionOffset(element, isX);
    }
   }
   hasDisplayTableParent = style.display == "table" && (style.position == "absolute" || style.position == "relative");
   if(hasDisplayTableParent && __aspxIE && __aspxBrowserVersion >= 8)
    return _aspxGetExperimentalPositionOffset(element, isX);
   if (style.position == "absolute" || isFixed || style.position == "relative") {
    offset += isX ? curEl.offsetLeft : curEl.offsetTop;
    offset += _aspxPxToInt(isX ? style.borderLeftWidth : style.borderTopWidth);
   }
   if(style.position == "relative" && !(__aspxIE && __aspxBrowserVersion < 8))
    scroll += _aspxGetElementChainScroll(curEl, curEl.offsetParent, isX);
  }
  scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.offsetParent;
 }
 offset -= scroll;
 if((__aspxIE && __aspxBrowserVersion >= 7 || __aspxFirefox && __aspxBrowserVersion >= 3 || __aspxWebKitFamily) && isThereFixedParent)
  offset += isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
 return offset;
}
function _aspxGetElementChainScroll(startElement, endElement, isX){
 var curEl = startElement.parentNode;
 var scroll = 0;
 while(curEl != endElement){
  scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
  curEl = curEl.parentNode;
 }
 return scroll;
}
function _aspxGetSizeOfText(text, textCss) {
 var testContainer = document.createElement("tester");
 testContainer.style.fontSize = textCss.fontSize;
 testContainer.style.fontFamily = textCss.fontFamily;
 testContainer.style.fontWeight = textCss.fontWeight;
 testContainer.style.letterSpacing = textCss.letterSpacing;
 testContainer.style.lineHeight = textCss.lineHeight;
 testContainer.style.position = "absolute";
 testContainer.style.top = __aspxInvalidPosition + "px";
 testContainer.style.left = __aspxInvalidPosition + "px";
 testContainer.style.width = "auto";
 testContainer.style.whiteSpace = "nowrap";
 testContainer.appendChild(document.createTextNode(text));
 var testElement = document.body.appendChild(testContainer);
 var size = {
  "width": testElement.offsetWidth,
  "height": testElement.offsetHeight
 };
 document.body.removeChild(testElement);
 return size;
}
function _aspxIsValidJSON(JsonString) {
 return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(JsonString.replace(/"(\\.|[^"\\])*"/g, '')))
}
function _aspxEvalJSON(jsonString, controlName) {
 if(_aspxIsValidJSON(jsonString))
  return eval("(" + jsonString + ")");
 else
  throw new Error(controlName + " received incorrect JSON-data: " + jsonString);
}
function _aspxPointToPixel(points, addPx) {
 var result = 0;
 try {
  var indexOfPt = points.toLowerCase().indexOf("pt");
  if (indexOfPt > -1)
   result = parseInt(points.substr(0, indexOfPt)) * 96 / 72;
  else
   result = parseInt(points) * 96 / 72;
  if (addPx)
   result = result + "px";
 } catch(e) {}
 return result;
}
function _aspxPixelToPoint(pixels, addPt) {
 var result = 0;
 try {
  var indexOfPx = pixels.toLowerCase().indexOf("px");
  if (indexOfPx > -1)
   result = parseInt(pixels.substr(0, indexOfPx)) * 72 / 96;
  else
   result = parseInt(pixels) * 72 / 96;
  if (addPt)
   result = result + "pt";
 } catch(e) {}
 return result;
}
function _aspxPxToInt(px) {
 return _aspxPxToNumber(px, parseInt);
}
function _aspxPxToFloat(px) {
 return _aspxPxToNumber(px, parseFloat);
}
function _aspxPxToNumber(px, parseFunction) {
 var result = 0;
 if (px != null && px != "") {
  try {
   var indexOfPx = px.indexOf("px");
   if (indexOfPx > -1)
    result = parseFunction(px.substr(0, indexOfPx));
  } catch(e) { }
 }
 return result;
}
function _aspxIsNumber(str) {
 return !isNaN(parseFloat(str)) && isFinite(str);
}
function _aspxPercentageToFloat(perc) {
 var result = 0;
 if(perc != null && perc != "") {
  try {
   var indexOfPerc = perc.indexOf("%");
   if(indexOfPerc > -1)
    result = parseFloat(perc.substr(0, indexOfPerc)) / 100;
  } catch(e) { }
 }
 return result;
}
function _aspxGetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle) {
 return _aspxGetLeftRightPaddings(element, currentStyle) + _aspxGetHorizontalBordersWidth(element, currentStyle);
}
function _aspxGetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle) {
 return _aspxGetTopBottomPaddings(element, currentStyle) + _aspxGetVerticalBordersWidth(element, currentStyle);
}
function _aspxGetVerticalBordersWidth(element, style) {
 if(!_aspxIsExists(style))
  style = _aspxGetCurrentStyle(element);
 var res = 0;
 if(style.borderTopStyle != "none")
  res += _aspxPxToFloat(style.borderTopWidth);
 if(style.borderBottomStyle != "none")
  res += _aspxPxToFloat(style.borderBottomWidth);
 return res;
}
function _aspxGetHorizontalBordersWidth(element, style) {
 if(!_aspxIsExists(style))
  style = _aspxGetCurrentStyle(element);
 var res = 0;
 if(style.borderLeftStyle != "none")
  res += _aspxPxToFloat(style.borderLeftWidth);
 if(style.borderRightStyle != "none")
  res += _aspxPxToFloat(style.borderRightWidth);
 return res;
}
function _aspxGetTopBottomPaddings(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.paddingTop) + _aspxPxToInt(currentStyle.paddingBottom);
}
function _aspxGetLeftRightPaddings(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.paddingLeft) + _aspxPxToInt(currentStyle.paddingRight);
}
function _aspxGetTopBottomMargins(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.marginTop) + _aspxPxToInt(currentStyle.marginBottom);
}
function _aspxGetLeftRightMargins(element, style) {
 var currentStyle = style ? style : _aspxGetCurrentStyle(element);
 return _aspxPxToInt(currentStyle.marginLeft) + _aspxPxToInt(currentStyle.marginRight);
}
function _aspxGetCeilOffsetHeight(element) {
 if(__aspxIE && __aspxBrowserVersion > 9)
  return Math.ceil(element.getBoundingClientRect().height);
 return element.offsetHeight;
}
function _aspxGetClearClientWidth(element) {
 return element.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
}
function _aspxGetClearClientHeight(element) {
 return element.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
}
function _aspxSetOffsetWidth(element, widthValue, currentStyle) {
 if(!_aspxIsExists(currentStyle))
  currentStyle = _aspxGetCurrentStyle(element);
 var value = widthValue - _aspxPxToInt(currentStyle.marginLeft) - _aspxPxToInt(currentStyle.marginRight);
  value -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
 if(value > -1)
  element.style.width = value + "px";
}
function _aspxSetOffsetHeight(element, heightValue, currentStyle) {
 if(!_aspxIsExists(currentStyle))
  currentStyle = _aspxGetCurrentStyle(element);
 var value = heightValue - _aspxPxToInt(currentStyle.marginTop) - _aspxPxToInt(currentStyle.marginBottom);
  value -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
 if(value > -1)
  element.style.height = value + "px";
}
function _aspxFindOffsetParent(element) {
 if(__aspxIE && __aspxBrowserVersion < 8)
  return element.offsetParent;
 var currentElement = element.parentNode;
 while(_aspxIsExistsElement(currentElement) && currentElement.tagName != "BODY") {
  if (currentElement.offsetWidth > 0 && currentElement.offsetHeight > 0)
   return currentElement;
  currentElement = currentElement.parentNode;
 }
 return document.body;
}
function _aspxGetDocumentScrollTop(){
 if(__aspxWebKitFamily) {
  if(__aspxMacOSMobilePlatform)
   return window.pageYOffset;
  else
   return document.body.scrollTop;
 }
 else
  return document.documentElement.scrollTop;
}
function _aspxSetDocumentScrollTop(scrollTop) {
 if(__aspxWebKitFamily) {
  if(__aspxMacOSMobilePlatform)
   window.pageYOffset = scrollTop;
  else
   document.body.scrollTop = scrollTop;
 }
 else
  document.documentElement.scrollTop = scrollTop;
}
function _aspxGetDocumentScrollLeft(){
 if(__aspxIE && __aspxBrowserVersion < 8) {
  var body = document.body || document.documentElement;
  if(_aspxIsElementRightToLeft(body))
   return body.scrollWidth - body.scrollLeft - body.clientWidth;
 }
 if(__aspxWebKitFamily)
  return document.body.scrollLeft;
 return document.documentElement.scrollLeft;
}
function _aspxSetDocumentScrollLeft(scrollLeft) {
 if(__aspxWebKitFamily) {
  if(__aspxMacOSMobilePlatform)
   window.pageXOffset = scrollLeft;
  else
   document.body.scrollLeft = scrollLeft;
 }
 else
  document.documentElement.scrollLeft = scrollLeft;
}
function _aspxGetDocumentClientWidth(){
 if(document.documentElement.clientWidth == 0)
  return document.body.clientWidth;
 else
  return document.documentElement.clientWidth;
}
function _aspxGetDocumentClientHeight() {
 if (__aspxFirefox && window.innerHeight - document.documentElement.clientHeight > _aspxGetVerticalScrollBarWidth()) {
  return window.innerHeight;
 } else if (__aspxOpera && __aspxBrowserVersion < 9.6 || document.documentElement.clientHeight == 0) {
   return document.body.clientHeight
 }
 return document.documentElement.clientHeight;
}
function _aspxSetStyles(element, styles, makeImportant) {
 if (_aspxIsExists(styles.cssText))
  element.style.cssText = styles.cssText;
 if (_aspxIsExists(styles.className))
  element.className = styles.className;
 for (var property in styles) {
  if(!styles.hasOwnProperty(property))
   continue;
  var value = styles[property];
  switch (property) {
   case "cssText":
   case "className":
    break;
   case "float":
    _aspxSetElementFloat(element, value);
    break;
   case "opacity":
    _aspxSetElementOpacity(element, value);
    break;
   case "zIndex":
    _aspxSetStyleCore(element, property, value, makeImportant);
    break;
   default:
    _aspxSetStyleCore(element, property, value + (typeof (value) == "number" ? "px" : ""), makeImportant);
  }
 }
}
function _aspxSetStyleCore(element, property, value, makeImportant) {
 if(makeImportant) {
  var index = property.search("[A-Z]");
  if(index != -1)
   property = property.replace(property.charAt(index), "-" + property.charAt(index).toLowerCase());
  if(element.style.setProperty)
   element.style.setProperty(property, value, "important");
  else
   element.style.cssText += ";" + property + ":" + value + "!important";
 }
 else
  element.style[property] = value;
}
function _aspxGetDocumentWidth(){
 var bodyWidth = document.body.offsetWidth;
 var docWidth = (__aspxIE && __aspxBrowserMajorVersion != 7) ? document.documentElement.clientWidth : document.documentElement.offsetWidth;
 var bodyScrollWidth = document.body.scrollWidth;
 var docScrollWidth = document.documentElement.scrollWidth;
 return _aspxGetMaxDimensionOf(bodyWidth, docWidth, bodyScrollWidth, docScrollWidth);
}
function _aspxGetDocumentHeight(){
 var bodyHeight = document.body.offsetHeight;
 var docHeight = (__aspxIE && __aspxBrowserMajorVersion != 7) ? document.documentElement.clientHeight : document.documentElement.offsetHeight;
 var bodyScrollHeight = document.body.scrollHeight;
 var docScrollHeight = document.documentElement.scrollHeight;
 var maxHeight = _aspxGetMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight, docScrollHeight);
 if(__aspxOpera && __aspxBrowserVersion >= 9.6){
  if(__aspxBrowserVersion < 10)
   maxHeight = _aspxGetMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight);
  var visibleHeightOfDocument = document.documentElement.clientHeight;
  if(maxHeight > visibleHeightOfDocument)
   maxHeight = _aspxGetMaxDimensionOf(window.outerHeight, maxHeight);
  else
   maxHeight = document.documentElement.clientHeight;
  return maxHeight;
 }
 return maxHeight;
}
function _aspxGetDocumentMaxClientWidth(){
 var bodyWidth = document.body.offsetWidth;
 var docWidth = document.documentElement.offsetWidth;
 var docClientWidth = document.documentElement.clientWidth;
 return _aspxGetMaxDimensionOf(bodyWidth, docWidth, docClientWidth);
}
function _aspxGetDocumentMaxClientHeight(){
 var bodyHeight = document.body.offsetHeight;
 var docHeight = document.documentElement.offsetHeight;
 var docClientHeight = document.documentElement.clientHeight;
 return _aspxGetMaxDimensionOf(bodyHeight, docHeight, docClientHeight);
}
function _aspxGetMaxDimensionOf(){
 var max = __aspxInvalidDimension;
 for (var i = 0; i < arguments.length; i++){
  if(max < arguments[i])
   max = arguments[i];
 }
 return max;
}
function _aspxGetClientLeft(element){
 return _aspxIsExists(element.clientLeft) ? element.clientLeft : (element.offsetWidth - element.clientWidth) / 2;
}
function _aspxGetClientTop(element){
 return _aspxIsExists(element.clientTop) ? element.clientTop : (element.offsetHeight - element.clientHeight) / 2;
}
function _aspxRemoveBorders(element) {
 if(!element)
  return;
 element.style.borderWidth = 0;
 for(var i = 0; i < element.childNodes.length; i++) {
  var child = element.childNodes[i];
  if(child.style)
   child.style.border = "0";
 }
}
function _aspxRemoveBordersAndShadows(el) {
 if(!el || !el.style)
  return;
 el.style.borderWidth = 0;
 if(_aspxIsExists(el.style.boxShadow))
  el.style.boxShadow = "none";
 else if(_aspxIsExists(el.style.MozBoxShadow))
  el.style.MozBoxShadow = "none";
 else if(_aspxIsExists(el.style.webkitBoxShadow))
  el.style.webkitBoxShadow = "none";
}
function _aspxSetBackground(element, background) {
 if(!element)
  return;
 element.style.backgroundColor = background;
 for(var i = 0; i < element.childNodes.length; i++) {
  var child = element.childNodes[i];
  if(child.style)
   child.style.backgroundColor = background;
 }
}
function _aspxDoElementClick(element) {
 try{
  element.click();
 }
 catch(e){
 }
}
function _aspxGetCellSpacing(element) {
 var val = parseInt(element.cellSpacing);
 if(!isNaN(val)) return val;
 val = parseInt(_aspxGetCurrentStyle(element).borderSpacing);
 if(!isNaN(val)) return val;
 return 0;
}
function _aspxGetInnerScrollPositions(element) {
 var scrolls = [];
 _aspxGetInnerScrollPositionsCore(element, scrolls);
 return scrolls;
}
function _aspxGetInnerScrollPositionsCore(element, scrolls) {
 for(var child = element.firstChild; child; child = child.nextSibling) {
  var scrollTop = child.scrollTop,
   scrollLeft = child.scrollLeft;
  if(scrollTop > 0 || scrollLeft > 0)
   scrolls.push([child, scrollTop, scrollLeft]);
  _aspxGetInnerScrollPositionsCore(child, scrolls);
 }
}
function _aspxRestoreInnerScrollPositions(scrolls) {
 for(var i = 0, scrollArr; scrollArr = scrolls[i]; i++) {
  if(scrollArr[1] > 0)
   scrollArr[0].scrollTop = scrollArr[1];
  if(scrollArr[2] > 0)
   scrollArr[0].scrollLeft = scrollArr[2];
 }
}
function _aspxGetOuterScrollPosition(element) {
 while(element.tagName !== "BODY") {
  var scrollTop = element.scrollTop,
   scrollLeft = element.scrollLeft;
  if(scrollTop > 0 || scrollLeft > 0) {
   return {
    scrollTop: scrollTop,
    scrollLeft: scrollLeft,
    element: element
   };
  }
  element = element.parentNode;
 }
 return {
  scrollTop: _aspxGetDocumentScrollTop(),
  scrollLeft: _aspxGetDocumentScrollLeft()
 };
}
function _aspxRestoreOuterScrollPosition(scrollInfo) {
 if(scrollInfo.element) {
  if(scrollInfo.scrollTop > 0)
   scrollInfo.element.scrollTop = scrollInfo.scrollTop;
  if(scrollInfo.scrollLeft > 0)
   scrollInfo.element.scrollLeft = scrollInfo.scrollLeft;
 }
 else {
  if(scrollInfo.scrollTop > 0)
   _aspxSetDocumentScrollTop(scrollInfo.scrollTop);
  if(scrollInfo.scrollLeft > 0)
   _aspxSetDocumentScrollLeft(scrollInfo.scrollLeft);
 }
}
function _aspxSetSelection(input, startPos, endPos, scrollToSelection) {
 if(!_aspxIsExistsElement(input))
  return;
 var textLen = input.value.length;
 startPos = _aspxGetDefinedValue(startPos, 0);
 endPos = _aspxGetDefinedValue(endPos, textLen);
 if(startPos < 0)
  startPos = 0;
 if(endPos < 0 || endPos > textLen)
  endPos = textLen;
 if(startPos > endPos)
  startPos = endPos;
 var makeReadOnly = false;
 if(__aspxWebKitFamily && input.readOnly) {
  input.readOnly = false;
  makeReadOnly = true;
 }
 try {
  if (__aspxFirefox && __aspxBrowserVersion >= 8)
   input.setSelectionRange(startPos, endPos, "backward")
  else if (__aspxIE && __aspxBrowserVersion < 9)  {
   var range = input.createTextRange();
   range.collapse(true);
   range.moveStart("character", startPos);
   range.moveEnd("character", endPos - startPos);
   range.select();
  } else
   input.setSelectionRange(startPos, endPos);
  if(__aspxOpera || __aspxFirefox)
   input.focus();
 } catch(e) {
 }
 if(scrollToSelection && input.tagName == 'TEXTAREA') {
  var scrollHeight = input.scrollHeight;
  var approxCaretPos = startPos;
  var scrollTop = Math.max(Math.round(approxCaretPos * scrollHeight / textLen  - input.clientHeight / 2), 0);
  input.scrollTop = scrollTop;
 }
 if(makeReadOnly)
  input.readOnly = true;
}
function _aspxGetSelectionInfo(input) {
 var start, end;
 if(__aspxIE && __aspxBrowserVersion < 9) {
  var range = document.selection.createRange();
  var rangeCopy = range.duplicate();
  range.move('character', -input.value.length);
  range.setEndPoint('EndToStart', rangeCopy);
  start = range.text.length;
  end = start + rangeCopy.text.length;
 } else {
  try {
   start = input.selectionStart;
   end = input.selectionEnd;
  } catch (e) {
  }
 }
 return { startPos: start, endPos: end };
}
function _aspxGetExtSelectionInfo(input) {
 var start = 0, end = 0, textLen = 0;
 if (__aspxIE && __aspxBrowserVersion < 9) {
  var normalizedValue;
  var range, textInputRange, textInputEndRange;
  range = document.selection.createRange();
  if (range && range.parentElement() == input) {
   textLen = input.value.length;
   normalizedValue = input.value.replace(/\r\n/g, "\n");
   textInputRange = input.createTextRange();
   textInputRange.moveToBookmark(range.getBookmark());
   textInputEndRange = input.createTextRange();
   textInputEndRange.collapse(false);
   if (textInputRange.compareEndPoints("StartToEnd", textInputEndRange) > -1) {
    start = textLen;
    end = textLen;
   } else {
    start = normalizedValue.slice(0, start).split("\n").length - textInputRange.moveStart("character", -textLen) -1;
    if (textInputRange.compareEndPoints("EndToEnd", textInputEndRange) > -1)
     end = textLen;
    else
     end = normalizedValue.slice(0, end).split("\n").length - textInputRange.moveEnd("character", -textLen) - 1;
   }
  }
  return {startPos: start, endPos: end};
 }
 try {
  start = input.selectionStart;
  end = input.selectionEnd;
 } catch (e) {
 }
 return {startPos: start, endPos: end};
}
function _aspxSetCaretPosition(input, caretPos) {
 if(typeof caretPos === "undefined" || caretPos < 0)
  caretPos = input.value.length;
 _aspxSetSelection(input, caretPos, caretPos, true);
}
_aspxSetInputSelection = _aspxSetSelectionCore = _aspxSetSelection;
_aspxClearInputSelection = _aspxSetCaretPosition;
function _aspxSetFocus(element, selectAction) {
 function focusCore(element, selectAction){
  try {
    element.focus();
    if(__aspxIE && document.activeElement != element)
     element.focus();
    if(selectAction) {
     var currentSelection = _aspxGetSelectionInfo(element);
     if(currentSelection.startPos == currentSelection.endPos) {
      switch(selectAction) {
       case "start":
        _aspxSetCaretPosition(element, 0);
        break;
       case "all":
        _aspxSetSelection(element);
        break;
      }
     }
    }
   } catch (e) {
  }
 }
 if(ASPxClientUtils.iOSPlatform)
  focusCore(element, selectAction);
 else {
  window.setTimeout(function() {
   focusCore(element, selectAction);
  }, 100);
 }
}
function _aspxIsFocusableCore(element, skipContainerVisibilityCheck) {
 var current = element;
 while(current && current.nodeType == 1) {
  if (current == element || !skipContainerVisibilityCheck(current)) {
   if (current.tagName == "BODY")
    return true;
   if (current.disabled || !_aspxGetElementDisplay(current) || !_aspxGetElementVisibility(current))
    return false;
  }
  current = current.parentNode;
 }
 return true;
}
function _aspxIsFocusable(element) {
 return _aspxIsFocusableCore(element, _aspxFalseFunction);
}
function _aspxAttachEventToElement(element, eventName, func, onlyBubbling) {
 if(element.addEventListener)
  element.addEventListener(eventName, func, !onlyBubbling);
 else
  element.attachEvent("on" + eventName, func);
}
function _aspxDetachEventFromElement(element, eventName, func) {
 if(element.removeEventListener)
  element.removeEventListener(eventName, func, true);
 else
  element.detachEvent("on" + eventName, func);
}
function _aspxAttachEventToDocument(eventName, func) {
 var attachingAllowed = ASPxClientTouchUI.onEventAttachingToDocument(eventName, func);
 if(attachingAllowed)
  _aspxAttachEventToDocumentCore(eventName, func);
}
function _aspxAttachEventToDocumentCore(eventName, func) {
 _aspxAttachEventToElement(document, eventName, func);
}
function _aspxDetachEventFromDocument(eventName, func) {
 _aspxDetachEventFromDocumentCore(eventName, func);
 ASPxClientTouchUI.onEventDettachedFromDocument(eventName, func);
}
function _aspxDetachEventFromDocumentCore(eventName, func){
 _aspxDetachEventFromElement(document, eventName, func);
}
function _aspxCreateEventHandlerFunction(funcName, controlName, withHtmlEventArg) {
 if(withHtmlEventArg)
  return function(e) { window[funcName](controlName, e) };
 return function() { window[funcName](controlName) };
}
function _aspxGetMouseWheelEventName(){
 return __aspxNetscapeFamily ? "DOMMouseScroll" : "mousewheel";
}
function _aspxAttachMouseEnterToElement(element, onMouseOverHandler, onMouseOutHandler) {
 _aspxAttachEventToElement(element, "mouseover", function(evt) { _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
 _aspxAttachEventToElement(element, "mouseout", function(evt) { _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
}
function _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler) {
 var isMouseOverExecuted = !!element.dxMouseOverExecuted;
 var isMouseOverEvent = (evt.type == "mouseover");
 if (isMouseOverEvent && isMouseOverExecuted || !isMouseOverEvent && !isMouseOverExecuted)
  return;
 var source = evt.relatedTarget || (isMouseOverEvent ? evt.srcElement : evt.toElement);
 if (!_aspxGetIsParent(element, source)) {
  element.dxMouseOverExecuted = isMouseOverEvent;
  if(isMouseOverEvent)
   onMouseOverHandler(element);
  else
   onMouseOutHandler(element);
 }
 else if (isMouseOverEvent && !isMouseOverExecuted) {
  element.dxMouseOverExecuted = true;
  onMouseOverHandler(element);
 }
}
function _aspxCreateClass(parentClass, properties) {
 var ret = function() {
  if (ret.preparing)
   return delete(ret.preparing);
  if (ret.constr) {
   this.constructor = ret;
   ret.constr.apply(this, arguments);
  }
 }
 ret.prototype = {};
 if(parentClass) {
  parentClass.preparing = true;
  ret.prototype = new parentClass;
  ret.prototype.constructor = parentClass;
  ret.constr = parentClass;
 }
 if(properties) {
  var constructorName = "constructor";
  for(var name in properties){
   if (name != constructorName)
    ret.prototype[name] = properties[name];
  }
  if (properties[constructorName] && properties[constructorName] != Object)
   ret.constr = properties[constructorName];
 }
 return ret;
}
function _aspxGetAttribute(obj, attrName){
 if(obj.getAttribute)
  return obj.getAttribute(attrName);
 else if(obj.getPropertyValue)
  return obj.getPropertyValue(attrName);
 return null;
}
function _aspxSetAttribute(obj, attrName, value){
 if(obj.setAttribute) {
  obj.setAttribute(attrName, value);
  if(__aspxIE && attrName.toLowerCase() === "tabindex")
   window.setTimeout(function() { obj.parentNode.replaceChild(obj, obj); }, 0);
 }
 else if(obj.setProperty)
  obj.setProperty(attrName, value, "");
}
function _aspxRemoveAttribute(obj, attrName){
 if(obj.removeAttribute)
  obj.removeAttribute(attrName);
 else if(obj.removeProperty)
  obj.removeProperty(attrName);
}
function _aspxIsExistsAttribute(obj, attrName){
 var value = _aspxGetAttribute(obj, attrName);
 return (value != null) && (value !== "");
}
function _aspxSetOrRemoveAttribute(obj, attrName, value) {
 if (!value)
  _aspxRemoveAttribute(obj, attrName);
 else
  _aspxSetAttribute(obj, attrName, value);
}
function _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName){
 if(!_aspxIsExistsAttribute(savedObj, savedAttrName)){
  var oldValue = _aspxIsExistsAttribute(obj, attrName) ? _aspxGetAttribute(obj, attrName) : __aspxEmptyAttributeValue;
  _aspxSetAttribute(savedObj, savedAttrName, oldValue);
 }
}
function _aspxSaveStyleAttribute(obj, attrName){
 _aspxSaveAttribute(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxChangeAttributeExtended(obj, attrName, savedObj, savedAttrName, newValue){
 _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName);
 _aspxSetAttribute(obj, attrName, newValue);
}
function _aspxChangeAttribute(obj, attrName, newValue){
 _aspxChangeAttributeExtended(obj, attrName, obj, "saved" + attrName, newValue);
}
function _aspxChangeStyleAttribute(obj, attrName, newValue){
 _aspxChangeAttributeExtended(obj.style, attrName, obj, "saved" + attrName, newValue);
}
function _aspxResetAttributeExtended(obj, attrName, savedObj, savedAttrName){
 _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName);
 _aspxSetAttribute(obj, attrName, "");
 _aspxRemoveAttribute(obj, attrName);
}
function _aspxResetAttribute(obj, attrName){
 _aspxResetAttributeExtended(obj, attrName, obj, "saved" + attrName);
}
function _aspxResetStyleAttribute(obj, attrName){
 _aspxResetAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxRestoreAttributeExtended(obj, attrName, savedObj, savedAttrName){
 if(_aspxIsExistsAttribute(savedObj, savedAttrName)){
  var oldValue = _aspxGetAttribute(savedObj, savedAttrName);
  if(oldValue != __aspxEmptyAttributeValue)
   _aspxSetAttribute(obj, attrName, oldValue);
  else
   _aspxRemoveAttribute(obj, attrName);
  _aspxRemoveAttribute(savedObj, savedAttrName);
  return true;
 }
 return false;
}
function _aspxRestoreAttribute(obj, attrName){
 return _aspxRestoreAttributeExtended(obj, attrName, obj, "saved" + attrName);
}
function _aspxRestoreStyleAttribute(obj, attrName){
 return _aspxRestoreAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxCopyAllAttributes(sourceElem, destElement) {
 var attrs = sourceElem.attributes;
 for (var n = 0; n < attrs.length; n++) {
  var attr = attrs[n];
  if (attr.specified) {
   var attrName = attr.nodeName;
   var attrValue = sourceElem.getAttribute(attrName, 2);
   if (attrValue == null)
    attrValue = attr.nodeValue;
   destElement.setAttribute(attrName, attrValue, 0);
  }
 }
 if (sourceElem.style.cssText !== '')
  destElement.style.cssText = sourceElem.style.cssText;
}
function _aspxRemoveAllAttributes(element, excludedAttributes) {
 var excludedAttributesHashTable = {};
 if (excludedAttributes)
  excludedAttributesHashTable = _aspxCreateHashTableFromArray(excludedAttributes);
 if (element.attributes) {
  var attrArray = element.attributes;
  for (var i = 0; i < attrArray.length; i++) {
   var attrName = attrArray[i].name;
   if (!_aspxIsExists(excludedAttributesHashTable[attrName.toLowerCase()])) {
    try {
     attrArray.removeNamedItem(attrName);
    } catch (e) { }
   }
  }
 }
}
function _aspxRemoveStyleAttribute(element, attrName) {
 if (element.style) {
  if (__aspxFirefox && element.style[attrName])
   element.style[attrName] = "";
  if (element.style.removeAttribute && element.style.removeAttribute != "")
   element.style.removeAttribute(attrName);
  else if (element.style.removeProperty && element.style.removeProperty != "")
   element.style.removeProperty(attrName);
 }
}
function _aspxRemoveAllStyles(element) {
 if (element.style) {
  for(var key in element.style)
   _aspxRemoveStyleAttribute(element, key);
    _aspxRemoveAttribute(element, "style");
 }
}
function _aspxChangeTabIndexAttribute(element){
 var attribute = _aspxGetTabIndexAttribute();
 if(_aspxGetAttribute(element, attribute) != -1)
    _aspxChangeAttribute(element, attribute, -1);
}
function _aspxSaveTabIndexAttributeAndReset(element) {
 var attribute = _aspxGetTabIndexAttribute();
 _aspxSaveAttribute(element, attribute, element, "saved" + attribute);
 _aspxSetAttribute(element, attribute, -1);
}
function _aspxRestoreTabIndexAttribute(element){
 var attribute = _aspxGetTabIndexAttribute();
 if(_aspxIsExistsAttribute(element, attribute)) {
  if(_aspxGetAttribute(element, attribute) == -1) {
   if(_aspxIsExistsAttribute(element, "saved" + attribute)){
    var oldValue = _aspxGetAttribute(element, "saved" + attribute);
    if(oldValue != __aspxEmptyAttributeValue)
     _aspxSetAttribute(element, attribute, oldValue);
    else {
     if(__aspxWebKitFamily)
      _aspxSetAttribute(element, attribute, 0);
     _aspxRemoveAttribute(element, attribute);
    }
    _aspxRemoveAttribute(element, "saved" + attribute);
   }
  }
 }
}
function _aspxGetTabIndexAttribute(){
 return __aspxIE  ? "tabIndex" : "tabindex";
}
function _aspxChangeAttributesMethod(enabled){
 return enabled ? _aspxRestoreAttribute : _aspxResetAttribute;
}
function _aspxInitiallyChangeAttributesMethod(enabled){
 return enabled ? _aspxChangeAttribute : _aspxResetAttribute;
}
function _aspxChangeStyleAttributesMethod(enabled){
 return enabled ? _aspxRestoreStyleAttribute : _aspxResetStyleAttribute;
}
function _aspxInitiallyChangeStyleAttributesMethod(enabled){
 return enabled ? _aspxChangeStyleAttribute : _aspxResetStyleAttribute;
}
function _aspxChangeEventsMethod(enabled){
 return enabled ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
}
function _aspxChangeDocumentEventsMethod(enabled){
 return enabled ? _aspxAttachEventToDocument : _aspxDetachEventFromDocument;
}
function _aspxTrimStart(str) {
 return _aspxTrimImpl(str, true);
}
function _aspxTrimEnd(str) {
 return _aspxTrimImpl(str, false, true);
}
function _aspxTrim(str) {
 return _aspxTrimImpl(str, true, true);
}
function _aspxTrimImpl(source, trimStart, trimEnd) {
 var len = source.length;
 if(!len)
  return source;
 if(len < 0xBABA1) {
  var result = source;
  if(trimStart) {
   result = result.replace(/^\s+/, "");
  }
  if(trimEnd) {
   result = result.replace(/\s+$/, "");
  }
  return result;
 } else {
  var start = 0;
  if(trimEnd) {
   while(len > 0 && ASPxWhiteSpaces[source.charCodeAt(len - 1)]) {
    len--;
   }
  }
  if(trimStart && len > 0) {
   while(start < len && ASPxWhiteSpaces[source.charCodeAt(start)]) {
    start++;
   }
  }
  return source.substring(start, len);
 }
}
function _aspxInsert(str, subStr, index) {
 var leftText = str.slice(0, index);
 var rightText = str.slice(index);
 return leftText + subStr + rightText;
}
function _aspxInsertEx(str, subStr, startIndex, endIndex) {
 var leftText = str.slice(0, startIndex);
 var rightText = str.slice(endIndex);
 return leftText + subStr + rightText;
}
function _aspxNavigateUrl(url, target) {
 var javascriptPrefix = "javascript:";
 if(url == "")
  return;
 else if(url.indexOf(javascriptPrefix) != -1)
  eval(url.substr(javascriptPrefix.length));
 else {
  try{
   if(target != "")
    _aspxNavigateTo(url, target);
   else
    location.href = url;
  }
  catch(e){
  }
 }
}
function _aspxNavigateByLink(linkElement) {
 _aspxNavigateUrl(_aspxGetAttribute(linkElement, "href"), linkElement.target);
}
function _aspxNavigateTo(url, target) {
 var lowerCaseTarget = target.toLowerCase();
 if("_top" == lowerCaseTarget)
  top.location.href = url;
 else if("_self" == lowerCaseTarget)
  location.href = url;
 else if("_search" == lowerCaseTarget)
  window.open(url, '_blank');
 else if("_media" == lowerCaseTarget)
  window.open(url, '_blank');
 else if("_parent" == lowerCaseTarget)
  window.parent.location.href = url;
 else if("_blank" == lowerCaseTarget)
  window.open(url, '_blank');
 else {
  var frame = _aspxGetFrame(top.frames, target);
  if(frame != null)
   frame.location.href = url;
  else
   window.open(url, '_blank');
 }
}
function _aspxGetFrame(frames, name) {
 if(frames[name])
  return frames[name];
 for(var i = 0; i < frames.length; i++) {
  try {
   var frame = frames[i];
   if(frame.name == name)
    return frame;
   frame = _aspxGetFrame(frame.frames, name);
   if(frame != null)
    return frame;
  } catch(e) {
  }
 }
 return null;
}
function _aspxToHex(d) {
 return (d < 16) ? ("0" + d.toString(16)) : d.toString(16);
}
function _aspxColorToHexadecimal(colorValue) {
 if (typeof(colorValue) == "number") {
  var r = colorValue & 0xFF;
  var g = (colorValue >> 8) & 0xFF;
  var b = (colorValue >> 16) & 0xFF;
  return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
 }
 if (colorValue && (colorValue.substr(0, 3).toLowerCase() == "rgb")) {
  var re = /rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/;
  var regResult = colorValue.toLowerCase().match(re);
  if (regResult) {
   var r = parseInt(regResult[1]);
   var g = parseInt(regResult[2]);
   var b = parseInt(regResult[3]);
   return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
  }
  return null;
 }
 if (colorValue && (colorValue.charAt(0) == "#"))
  return colorValue;
 return null;
}
function _aspxFormatCallbackArg(prefix, arg) {
 if(prefix == null && arg == null)
  return "";
 if(prefix == null) prefix = "";
 if(arg == null) arg = "";
 if(arg != null && !_aspxIsExists(arg.length) && _aspxIsExists(arg.value))
  arg = arg.value;
 arg = arg.toString();
 return [prefix, '|', arg.length, '|' , arg].join('');
}
function _aspxFormatCallbackArgs(callbackData) {
 var sb = [ ];
 for(var i = 0; i < callbackData.length; i++)
  sb.push(_aspxFormatCallbackArg(callbackData[i][0], callbackData[i][1]));
 return sb.join("");
}
function _aspxIsValidElement(element) {
 if(!element)
  return false;
 if(!(__aspxFirefox && __aspxBrowserVersion < 4)) {
  if(element.ownerDocument && element.ownerDocument.body.compareDocumentPosition)
   return element.ownerDocument.body.compareDocumentPosition(element) % 2 === 0;
 }
 if(!__aspxOpera && !(__aspxIE && __aspxBrowserVersion < 9) && element.offsetParent && element.parentNode.tagName)
  return true;
 while(element != null){
  if(element.tagName == "BODY")
   return true;
  element = element.parentNode;
 }
 return false;
}
function _aspxIsValidElements(elements) {
 if (!elements)
  return false;
 for(var i = 0; i < elements.length; i++) {
  if(elements[i] && !_aspxIsValidElement(elements[i]))
   return false;
 }
 return true;
}
function _aspxIsExistsElement(element) {
 return element && _aspxIsValidElement(element);
}
function _aspxFindParentByTestFunc(element, testFunc){
 if (!testFunc) return null;
 while(element != null && element.tagName != "BODY"){
  if(testFunc(element))
   return element;
  element = element.parentNode;
 }
 return null;
}
function _aspxCorrectJSFloatNumber(number) {
 var ret = 21;
 var numString = number.toPrecision(21);
 numString = numString.replace("-", "");
 var integerDigitsCount = numString.indexOf(__aspxPossibleNumberDecimalSeparators[0]);
 if (integerDigitsCount < 0)
  integerDigitsCount = numString.indexOf(__aspxPossibleNumberDecimalSeparators[1]);
 var floatDigitsCount = numString.length - integerDigitsCount - 1;
 if(floatDigitsCount < 10)
  return number;
 if (integerDigitsCount > 0) {
  ret = integerDigitsCount + 12;
 }
 var toPrecisionNumber = Math.min(ret, 21);
 var newValueString = number.toPrecision(toPrecisionNumber);
 return parseFloat(newValueString, 10);
}
function _aspxToJson(param){
 var paramType = typeof(param);
 if((paramType == "undefined") || (param == null))
  return null;
 if((paramType == "object") && (typeof(param.__toJson) == "function"))
  return param.__toJson();
 if((paramType == "number") || (paramType == "boolean"))
  return param;
 if(param.constructor == Date)
  return _aspxDateToJson(param);
 if(paramType == "string") {
  var result = param.replace(/\\/g, "\\\\");
  result = result.replace(/"/g, "\\\"");
  result = result.replace(/</g, "\\u003c");
  result = result.replace(/>/g, "\\u003e");
  return "\"" + result + "\"";
 }
 if(param.constructor == Array){
  var values = [];
  for(var i = 0; i < param.length; i++) {
   var jsonValue = _aspxToJson(param[i]);
   if(jsonValue === null)
    jsonValue = "null";
   values.push(jsonValue);
  }
  return "[" + values.join(",") + "]";
 }
 var exceptKeys = {};
 if(ASPxIdent.IsArray(param.__toJsonExceptKeys))
  exceptKeys = _aspxCreateHashTableFromArray(param.__toJsonExceptKeys);
 exceptKeys["__toJsonExceptKeys"] = 1;
 var values = [];
 for(var key in param){
  if(_aspxIsFunction(param[key]))
   continue;
  if(exceptKeys[key] == 1)
   continue;
  values.push(_aspxToJson(key) + ":" + _aspxToJson(param[key]));
 }
 return "{" + values.join(",") + "}";
}
function _aspxDateToJson(date) {
 var result = [
  date.getFullYear(),
  date.getMonth(),
  date.getDate()
 ];
 var time = {
  h: date.getHours(),
  m: date.getMinutes(),
  s: date.getSeconds(),
  ms: date.getMilliseconds()
 };
 if(time.h || time.m || time.s || time.ms)
  result.push(time.h);
 if(time.m || time.s || time.ms)
  result.push(time.m);
 if(time.s || time.ms)
  result.push(time.s);
 if(time.ms)
  result.push(time.ms);
 return "new Date(" + result.join() + ")";
}
function _aspxEmulateDocumentOnMouseDown(evt) {
 _aspxEmulateOnMouseDown(document, evt);
}
function _aspxEmulateOnMouseDown(element, evt) {
 if(__aspxIE && __aspxBrowserVersion < 9)
  element.fireEvent("onmousedown", evt);
 else if(!__aspxWebKitFamily){
  var emulatedEvt = document.createEvent("MouseEvents");
  emulatedEvt.initMouseEvent("mousedown", true, true, window, 0, evt.screenX, evt.screenY,
   evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
  element.dispatchEvent(emulatedEvt);
 }
}
function _aspxCreateHtmlElementFromString(str) {
 var dummy = document.createElement("DIV");
 dummy.innerHTML = str;
 return dummy.firstChild;
}
function _aspxDelayedFunctionCall(object, functionName) {
 var callTimerIdPropertyName = "delayed" + functionName + "CallTimerId";
 var additionalCallRequiredPropertyName = "delayed" + functionName + "AdditionalCallRequired";
 if(!object[callTimerIdPropertyName] || object[callTimerIdPropertyName] == -1) {
  var timeoutFunction = function() {
   object[functionName]();
   object[callTimerIdPropertyName] = _aspxClearTimer(object[callTimerIdPropertyName]);
   if(object[additionalCallRequiredPropertyName]) {
    object[additionalCallRequiredPropertyName] = false;
    object[callTimerIdPropertyName] = _aspxSetTimeout(timeoutFunction, 0);
   }
  };
  object[callTimerIdPropertyName] = _aspxSetTimeout(timeoutFunction, 0);
 }
 else
  object[additionalCallRequiredPropertyName] = true;
}
function _aspxRestoreElementOriginalWidth(element) {
 if(!_aspxIsExistsElement(element))
  return;
 element.style.width = element.dxOrigWidth = _aspxGetElementOriginalWidth(element);
}
function _aspxGetElementOriginalWidth(element) {
 if(!_aspxIsExistsElement(element))
  return null;
 var width;
 if(!_aspxIsExists(element.dxOrigWidth)) {
   width = String(element.style.width).length > 0
  ? element.style.width
  : element.offsetWidth + "px";
 } else {
  width = element.dxOrigWidth;
 }
 return width;
}
function _aspxDropElementOriginalWidth(element) {
 if(_aspxIsExists(element.dxOrigWidth))
  element.dxOrigWidth = null;
}
function _aspxPrepareStringForFilter(s){
 s = s.toLowerCase();
 if(__aspxWebKitFamily) {
  return s.replace(new RegExp(__aspxGreekSLFSigmaChar, "g"), __aspxGreekSLSigmaChar);
 }
 return s;
}
function _aspxGetObjectKeys(obj) {
 if (Object.keys)
  return Object.keys(obj);
 var keys = [];
 for (var key in obj) {
  if (obj.hasOwnProperty(key))
   keys.push(key);
 }
 return keys;
}
Function.prototype.aspxBind = function(scope) {
 var func = this;
 return function() {
  return func.apply(scope, arguments);
 };
};
ASPxScrollBarMode = { Hidden: 0, Visible: 1, Auto: 2 };
ASPxColumnResizeMode = { None: 0, Control: 1, NextColumn: 2 };
ASPxSimpleHiddenField = { };
ASPxSimpleHiddenField.Separator = "|";
ASPxSimpleHiddenField.GetBag = function(key, input) {
 if(!key || !input)
  return { "keyIndex": -1 };
 var keyString = key.toString();
 if(keyString.length == 0)
  return { "keyIndex": -1 };
 var value = input.value;
 var keyIndex = value.indexOf(keyString);
 if(keyIndex < 0)
  return { "keyIndex": -1 };
 var sepIndex = value.indexOf(ASPxSimpleHiddenField.Separator, keyIndex + keyString.length);
 var count = Number(value.slice(keyIndex + keyString.length, sepIndex));
 return {
  "keyIndex": keyIndex,
  "valueIndex": sepIndex + 1,
  "count": count,
  "inputValue": value
 };
};
ASPxSimpleHiddenField.Get = function(key, input) {
 var bag = ASPxSimpleHiddenField.GetBag(key, input);
 if(bag.keyIndex < 0) return;
 return bag.inputValue.substr(bag.valueIndex, bag.count);
};
ASPxSimpleHiddenField.Set = function(key, value, input) {
 var value = _aspxIsExists(value) ? value.toString() : "";
 var newValue = key.toString() + value.length + ASPxSimpleHiddenField.Separator + value;
 var bag = ASPxSimpleHiddenField.GetBag(key, input);
 if(bag.keyIndex < 0) {
  input.value += newValue;
  return;
 }
 var prevValue = bag.inputValue.slice(bag.keyIndex, bag.valueIndex + bag.count);
 input.value = bag.inputValue.replace(prevValue, newValue);
};
(function(){
 window.ASPxMouseScroller = window.ASPxMouseScroller || { };
 ASPxMouseScroller.MinimumOffset = 10;
 ASPxMouseScroller.Create = function(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp) {
  var element = getElement();
  if(!element)
   return;
  if(!element.dxMouseScroller)
   element.dxMouseScroller = new ASPxMouseScroller.Extender(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp);
  return element.dxMouseScroller;
 }
 ASPxMouseScroller.Extender = function(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp) {
  this.getElement = getElement;
  this.getScrollXElement = getScrollXElement;
  this.getScrollYElement = getScrollYElement;
  this.needPreventScrolling = needPreventScrolling;
  this.vertRecursive = !!vertRecursive;
  this.createHandlers(onMouseDown || function(){ }, onMouseMove || function(){ }, onMouseUp || function(){ });
  this.update()
 };
 ASPxMouseScroller.Extender.prototype = {
  update: function() {
   if(this.element)
    _aspxDetachEventFromElement(this.element, ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownHandler);
   this.element = this.getElement();
   _aspxAttachEventToElement(this.element, ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownHandler);
   _aspxAttachEventToElement(this.element, "click", this.mouseClickHandler);
   if(__aspxMSTouchUI && this.element.className.indexOf(ASPxClientTouchUI.msTouchDraggableClassName) < 0)
    this.element.className += " " + ASPxClientTouchUI.msTouchDraggableClassName;
   this.scrollXElement = this.getScrollXElement();
   this.scrollYElement = this.getScrollYElement();
  },
  createHandlers: function(onMouseDown, onMouseMove, onMouseUp) {
   this.onMouseDown = onMouseDown;
   this.onMouseMove = onMouseMove;
   this.onMouseUp = onMouseUp;
   this.mouseDownHandler = function(e) {
    if(this.needPreventScrolling && this.needPreventScrolling(_aspxGetEventSource(e)))
     return;
    this.scrollableTreeLine = this.GetScrollableElements();
    this.firstX = this.prevX = _aspxGetEventX(e);
    this.firstY = this.prevY = this.GetEventY(e);
    _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseMoveHandler);
    _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, this.mouseUpHandler);
    this.onMouseDown(e);
   }.aspxBind(this);
   this.mouseMoveHandler = function(e) {
    if(ASPxClientTouchUI.isGesture)
     return;
    var x = _aspxGetEventX(e);
    var y = this.GetEventY(e);
    var xDiff = this.prevX - x;
    var yDiff = this.prevY - y;
    if(this.vertRecursive) {
     var isTopDirection = yDiff < 0;
     this.scrollYElement = this.GetElementForVertScrolling(isTopDirection, this.prevIsTopDirection, this.scrollYElement);
     this.prevIsTopDirection = isTopDirection;
    }
    if(this.scrollXElement && xDiff != 0)
     this.scrollXElement.scrollLeft += xDiff;
    if(this.scrollYElement && yDiff != 0)
     this.scrollYElement.scrollTop += yDiff;
    this.prevX = x;
    this.prevY = y;
    e.preventDefault();
    this.onMouseMove(e);
   }.aspxBind(this);
   this.mouseUpHandler = function(e) {
    _aspxDetachEventFromDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseMoveHandler);
    _aspxDetachEventFromDocument(ASPxClientTouchUI.touchMouseUpEventName, this.mouseUpHandler);
    this.scrollableTreeLine = [ ];
    this.prevIsTopDirection = null;
    this.onMouseUp(e);
   }.aspxBind(this);
   this.mouseClickHandler = function(e){
    if(this.needPreventScrolling && this.needPreventScrolling(_aspxGetEventSource(e)))
     return;
    var xDiff = this.firstX - _aspxGetEventX(e);
    var yDiff = this.firstY - _aspxGetEventY(e);
    if(xDiff > ASPxMouseScroller.MinimumOffset || yDiff > ASPxMouseScroller.MinimumOffset)
     return _aspxPreventEventAndBubble(e);
   }.aspxBind(this);
  },
  GetEventY: function(e) {
   return _aspxGetEventY(e) - _aspxGetDocumentScrollTop();
  },
  GetScrollableElements: function() {
   var result = [ ];
   var el = this.element;
   while(el && el != document && this.vertRecursive) {
    if(this.CanVertScroll(el) || el.tagName == "HTML")
     result.push(el);
    el = el.parentNode;
   }
   return result;
  },
  CanVertScroll: function(element) {
   var style = _aspxGetCurrentStyle(element);
   return style.overflow == "scroll" || style.overflow == "auto" || style.overflowY == "scroll" || style.overflowY == "auto";
  },
  GetElementForVertScrolling: function(currentIsTop, prevIsTop, prevElement) {
   if(prevElement && currentIsTop === prevIsTop && this.GetVertScrollExcess(prevElement, currentIsTop) > 0)
    return prevElement;
   for(var i = 0; i < this.scrollableTreeLine.length; i++) {
    var element = this.scrollableTreeLine[i];
    var excess = this.GetVertScrollExcess(element, currentIsTop);
    if(excess > 0)
     return element;
   }
   return null;
  },
  GetVertScrollExcess: function(element, isTop) {
   if(isTop)
    return element.scrollTop;
   return element.scrollHeight - element.clientHeight - element.scrollTop;
  }
 }
})();
function _aspxIsInteractiveControl(element, extremeParent) {
 return _aspxArrayIndexOf(["A", "INPUT", "SELECT", "OPTION", "TEXTAREA", "BUTTON", "IFRAME"], element.tagName) > -1;
}
ASPxClientUtils = {};
ASPxClientUtils.agent = __aspxUserAgent;
ASPxClientUtils.opera = __aspxOpera;
ASPxClientUtils.opera9 = __aspxOpera && __aspxBrowserMajorVersion == 9;
ASPxClientUtils.safari = __aspxSafari;
ASPxClientUtils.safari3 = __aspxSafari && __aspxBrowserMajorVersion == 3;
ASPxClientUtils.safariMacOS = __aspxSafari && __aspxMacOSPlatform;
ASPxClientUtils.chrome = __aspxChrome;
ASPxClientUtils.ie = __aspxIE;
;
ASPxClientUtils.ie7 = __aspxIE && __aspxBrowserMajorVersion == 7;
ASPxClientUtils.firefox = __aspxFirefox;
ASPxClientUtils.firefox3 = __aspxFirefox && __aspxBrowserMajorVersion == 3;
ASPxClientUtils.mozilla = __aspxMozilla;
ASPxClientUtils.netscape = __aspxNetscape;
ASPxClientUtils.browserVersion = __aspxBrowserVersion;
ASPxClientUtils.browserMajorVersion = __aspxBrowserMajorVersion;
ASPxClientUtils.macOSPlatform = __aspxMacOSPlatform;
ASPxClientUtils.windowsPlatform = __aspxWindowsPlatform;
ASPxClientUtils.webKitFamily = __aspxWebKitFamily;
ASPxClientUtils.netscapeFamily = __aspxNetscapeFamily;
ASPxClientUtils.touchUI = __aspxTouchUI;
ASPxClientUtils.webKitTouchUI = __aspxWebKitTouchUI;
ASPxClientUtils.msTouchUI = __aspxMSTouchUI;
ASPxClientUtils.iOSPlatform = __aspxMacOSMobilePlatform;
ASPxClientUtils.androidPlatform = __aspxAndroidMobilePlatform;
ASPxClientUtils.ArrayInsert = _aspxArrayInsert;
ASPxClientUtils.ArrayRemove = _aspxArrayRemove;
ASPxClientUtils.ArrayRemoveAt = _aspxArrayRemoveAt;
ASPxClientUtils.ArrayClear = _aspxArrayClear;
ASPxClientUtils.ArrayIndexOf = _aspxArrayIndexOf;
ASPxClientUtils.AttachEventToElement = _aspxAttachEventToElement;
ASPxClientUtils.DetachEventFromElement = _aspxDetachEventFromElement;
ASPxClientUtils.GetEventSource = _aspxGetEventSource;
ASPxClientUtils.GetEventX = _aspxGetEventX;
ASPxClientUtils.GetEventY = _aspxGetEventY;
ASPxClientUtils.GetKeyCode = _aspxGetKeyCode;
ASPxClientUtils.PreventEvent = _aspxPreventEvent;
ASPxClientUtils.PreventEventAndBubble = _aspxPreventEventAndBubble;
ASPxClientUtils.PreventDragStart = _aspxPreventDragStart;
ASPxClientUtils.ClearSelection = _aspxClearSelection;
ASPxClientUtils.IsExists = _aspxIsExists;
ASPxClientUtils.IsFunction = _aspxIsFunction;
ASPxClientUtils.GetAbsoluteX = _aspxGetAbsoluteX;
ASPxClientUtils.GetAbsoluteY = _aspxGetAbsoluteY;
ASPxClientUtils.SetAbsoluteX = _aspxSetAbsoluteX;
ASPxClientUtils.SetAbsoluteY = _aspxSetAbsoluteY;
ASPxClientUtils.GetDocumentScrollTop = _aspxGetDocumentScrollTop;
ASPxClientUtils.GetDocumentScrollLeft = _aspxGetDocumentScrollLeft;
ASPxClientUtils.GetDocumentClientWidth = _aspxGetDocumentClientWidth;
ASPxClientUtils.GetDocumentClientHeight = _aspxGetDocumentClientHeight;
ASPxClientUtils.GetIsParent = _aspxGetIsParent;
ASPxClientUtils.GetParentById = _aspxGetParentById;
ASPxClientUtils.GetParentByTagName = _aspxGetParentByTagName;
ASPxClientUtils.GetParentByClassName = _aspxGetParentByPartialClassName;
ASPxClientUtils.GetChildById = _aspxGetChildById;
ASPxClientUtils.GetChildByTagName = _aspxGetChildByTagName;
ASPxClientUtils.SetCookie = _aspxSetCookie;
ASPxClientUtils.GetCookie = _aspxGetCookie;
ASPxClientUtils.DeleteCookie = _aspxDelCookie;
ASPxClientUtils.GetShortcutCode = _aspxGetShortcutCode;
ASPxClientUtils.GetShortcutCodeByEvent = _aspxGetShortcutCodeByEvent;
ASPxClientUtils.StringToShortcutCode = _aspxParseShortcutString;
ASPxClientUtils.Trim = _aspxTrim;
ASPxClientUtils.TrimStart = _aspxTrimStart;
ASPxClientUtils.TrimEnd = _aspxTrimEnd;

var __aspxClassesScriptParsed = false;
var __aspxDocumentLoaded = false;
ASPxClientEvent = _aspxCreateClass(null, {
 constructor: function() {
  this.handlerInfoList = [];
 },
 AddHandler: function(handler, executionContext) {
  if(typeof(executionContext) == "undefined")
   executionContext = null;
  this.RemoveHandler(handler, executionContext);
  var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
  this.handlerInfoList.push(handlerInfo);
 },
 RemoveHandler: function(handler, executionContext) {
  this.removeHandlerByCondition(function(handlerInfo) {
   return handlerInfo.handler == handler &&
    (!executionContext || handlerInfo.executionContext == executionContext);
  });
 },
 removeHandlerByCondition: function(predicate) {
   for(var i = this.handlerInfoList.length - 1; i >= 0; i--) {
   var handlerInfo = this.handlerInfoList[i];
   if(predicate(handlerInfo))
    _aspxArrayRemoveAt(this.handlerInfoList, i);
  }
 },
 removeHandlerByControlName: function(controlName) {
  this.removeHandlerByCondition(function(handlerInfo) {
   return handlerInfo.executionContext &&
    handlerInfo.executionContext.name === controlName;
  });
 },
 ClearHandlers: function() {
  this.handlerInfoList.length = 0;
 },
 FireEvent: function(obj, args) {
  for(var i = 0; i < this.handlerInfoList.length; i++) {
   var handlerInfo = this.handlerInfoList[i];
   handlerInfo.handler.call(handlerInfo.executionContext, obj, args);
  }
 },
 InsertFirstHandler: function(handler, executionContext){
  if(typeof(executionContext) == "undefined")
   executionContext = null;
  var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
  _aspxArrayInsert(this.handlerInfoList, handlerInfo, 0);
 },
 IsEmpty: function() {
  return this.handlerInfoList.length == 0;
 }
});
ASPxClientEvent.CreateHandlerInfo = function(handler, executionContext) {
 return {
  handler: handler,
  executionContext: executionContext
 };
};
ASPxClientEventArgs = _aspxCreateClass(null, {
 constructor: function() {
 }
});
ASPxClientEventArgs.Empty = new ASPxClientEventArgs();
ASPxClientCancelEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.cancel = false;
 }
});
ASPxClientProcessingModeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(processOnServer){
  this.constructor.prototype.constructor.call(this);
  this.processOnServer = processOnServer;
 }
});
ASPxClientProcessingModeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.cancel = false;
 }
});
ASPxClientBeginCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this);
  this.command = command;
 }
});
ASPxClientEndCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
 }
});
ASPxClientCustomDataCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(result) {
  this.constructor.prototype.constructor.call(this);
  this.result = result;
 }
});
ASPxClientCallbackErrorEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(message){
  this.constructor.prototype.constructor.call(this);
  this.message = message;
  this.handled = false;
 }
});
ASPxClientControlsInitializedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(isCallback) {
  this.isCallback = isCallback;
 }
});
ASPxClientAdaptiveLayoutChangingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.isAdaptiveView = false;
 }
});
ASPxClientControlCollection = _aspxCreateClass(null, {
 constructor: function(){
  this.elements = new Object();
  this.prevWndWidth = "";
  this.prevWndHeight = "";
  this.BeforeInitCallback = new ASPxClientEvent();
  this.ControlsInitialized = new ASPxClientEvent();
 },
 Add: function(element){
  this.elements[element.name] = element;
 },
 Remove: function(element) {
  this.elements[element.name] = null;
 },
 Get: function(name){
  return this.elements[name];
 },
 GetGlobal: function(name) {
  var result = window[name];
  return result && result.isASPxClientControl
   ? result
   : null;
 },
 GetByName: function(name){
  return this.Get(name) || this.GetGlobal(name);
 },
 ForEachControl: function(processFunc, context) {
  if(!context)
   context = this;
  for(var name in this.elements) {
   var control = this.elements[name];
   if(ASPxIdent.IsASPxClientControl(control))
    if(processFunc.call(context, control))
     return;
  }
 },
 forEachControlHierarchy: function(container, context, collapseControls, processFunc) {
  context = context || this;
  var controlTree = new ASPxClientControlTree(this, container);
  controlTree.forEachControl(collapseControls, function(control) {
   processFunc.call(context, control);
  });
 },
 AdjustControls: function(container, collapseControls) {
  container = container || null;
  window.setTimeout(function() {
   this.AdjustControlsCore(container, collapseControls);
  }.aspxBind(this), 0);
 },
 AdjustControlsCore: function(container, collapseControls) {
  this.forEachControlHierarchy(container, this, collapseControls, function(control) {
   control.AdjustControl();
  });
 },
 CollapseControls: function(container) {
  this.ProcessControlsInContainer(container, function(control) {
   if(control.isASPxClientEdit)
    control.CollapseEditor();
  });
 },
 AtlasInitialize: function(isCallback) {
  if(__aspxIE && __aspxBrowserMajorVersion < 9) {
   var func = function() {
    if(_aspxIsLinksLoaded())
     _aspxProcessScriptsAndLinks("", isCallback);
    else
     setTimeout(func, 100);
   }
   func();
  }
  else
   _aspxProcessScriptsAndLinks("", isCallback);
 },
 DOMContentLoaded: function() {
  this.ForEachControl(function(control){
    control.DOMContentLoaded();
  });
 },
 Initialize: function() {
  this.InitializeElements(false );
  if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
   var checkIsInitialized = function() {
    if(Sys.Application.get_isInitialized())
     Sys.Application.add_load(aspxCAInit);
    else
     setTimeout(checkIsInitialized, 0);
   }
   checkIsInitialized();
  }
  this.InitWindowSizeCache();
 },
 InitializeElements: function(isCallback) {
  this.ForEachControl(function(control){
   if(!control.isInitialized)
    control.Initialize();
  });
  if(typeof(_aspxGetEditorStretchedInputElementsManager) != "undefined")
   _aspxGetEditorStretchedInputElementsManager().Initialize();
  this.AfterInitializeElements(true);
  this.AfterInitializeElements(false);
  this.RaiseControlsInitialized(isCallback);
 },
 AfterInitializeElements: function(leadingCall) {
  this.ForEachControl(function(control){
   if (control.leadingAfterInitCall && leadingCall || !control.leadingAfterInitCall && !leadingCall) {
    if(!control.isInitialized)
     control.AfterInitialize();
   }
  });
 },
 DoFinalizeCallback: function() {
  this.ForEachControl(function(control){
   control.DoFinalizeCallback();
  });
 },
 ProcessControlsInContainer: function(container, processFunc) {
  this.ForEachControl(function(control){
   if(!container || this.IsControlInContainer(container, control))
    processFunc(control);
  });
 },
 IsControlInContainer: function(container, control) {
  if(control.GetMainElement) {
   var mainElement = control.GetMainElement();
   if(mainElement && (mainElement != container)) {
    if(_aspxGetIsParent(container, mainElement))
     return true;
   }
  }
  return false;
 },
 RaiseControlsInitialized: function(isCallback) {
  if(!this.ControlsInitialized.IsEmpty()){
   if(typeof(isCallback) == "undefined")
    isCallback = true;
   var args = new ASPxClientControlsInitializedEventArgs(isCallback);
   this.ControlsInitialized.FireEvent(this, args);
  }
 },
 Before_WebForm_InitCallback: function(callbackOwnerID){
  var args = new ASPxClientBeforeInitCallbackEventArgs(callbackOwnerID);
  this.BeforeInitCallback.FireEvent(this, args);
 },
 InitWindowSizeCache: function(){
  this.prevWndWidth = _aspxGetDocumentClientWidth();
  this.prevWndHeight = _aspxGetDocumentClientHeight();
 },
 BrowserWindowSizeChanged: function(){
  var wndWidth = _aspxGetDocumentClientWidth();
  var wndHeight = _aspxGetDocumentClientHeight();
  var browserWindowSizeChanged = (this.prevWndWidth != wndWidth) || (this.prevWndHeight != wndHeight);
  if(browserWindowSizeChanged){
   this.prevWndWidth = wndWidth;
   this.prevWndHeight = wndHeight;
   return true;
  }
  return false;
 },
 OnBrowserWindowResize: function(evt){
  var shouldIgnoreNestedEvents = __aspxIE && __aspxBrowserMajorVersion == 8;
  if(shouldIgnoreNestedEvents) {
   if(this.prevWndWidth === "" || this.prevWndHeight === "" || this.browserWindowResizeLocked)
    return;
   this.browserWindowResizeLocked = true;
  }
  this.OnBrowserWindowResizeCore(evt);
  if(shouldIgnoreNestedEvents)
   this.browserWindowResizeLocked = false;
 },
 OnBrowserWindowResizeCore: function(evt){
  if(this.BrowserWindowSizeChanged()) {
   this.forEachControlHierarchy(null, this, true, function(control) {
    if(control.IsDOMInitialized())
     control.OnBrowserWindowResizeInternal(evt);
   });
  }
 }
});
ASPxClientControlTree = _aspxCreateClass(null, {
 constructor: function(controlCollection, container) {
  this.container = container;
  this.domMap = { };
  this.rootNode = this.createNode(null, null);
  this.createControlTree(controlCollection, container);
 },
 forEachControl: function(collapseControls, processFunc) {
  var observer = _aspxGetDomObserver();
  observer.pause(this.container, true);
  var documentScrollInfo;
  if(collapseControls) {
   documentScrollInfo = _aspxGetOuterScrollPosition(document.body);
   this.collapseControls(this.rootNode);
  }
  var adjustNodes = [],
   autoHeightNodes = [];
  var requireReAdjust = this.forEachControlCore(this.rootNode, collapseControls, processFunc, adjustNodes, autoHeightNodes);
  if(requireReAdjust)
   this.forEachControlsBackward(adjustNodes, collapseControls, processFunc);
  else {
   for(var i = 0, node; node = autoHeightNodes[i]; i++)
    node.control.AdjustAutoHeight();
  }
  if(collapseControls)
   _aspxRestoreOuterScrollPosition(documentScrollInfo);
  observer.resume(this.container, true);
 },
 forEachControlCore: function(node, collapseControls, processFunc, adjustNodes, autoHeightNodes) {
  var requireReAdjust = false,
   size, newSize;
  if(node.control) {
   var checkReadjustment = collapseControls && node.control.IsControlCollapsed() && node.control.CanCauseReadjustment();
   if(checkReadjustment)
    size = node.control.GetControlPercentMarkerSize(false, true);
   if(node.control.IsControlCollapsed() && !node.control.IsExpandableByAdjustment())
    node.control.ExpandControl();
   processFunc(node.control);
   if(checkReadjustment) {
    newSize = node.control.GetControlPercentMarkerSize(false, true);
    requireReAdjust = size.width !== newSize.width;
   }
   if(node.control.sizingConfig.supportAutoHeight)
    autoHeightNodes.push(node);
   node.control.ResetControlPercentMarkerSize();
  }
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   requireReAdjust = this.forEachControlCore(childNode, collapseControls, processFunc, adjustNodes, autoHeightNodes) || requireReAdjust;
  adjustNodes.push(node);
  return requireReAdjust;
 },
 forEachControlsBackward: function(adjustNodes, collapseControls, processFunc) {
  for(var i = 0, node; node = adjustNodes[i]; i++)
   this.forEachControlsBackwardCore(node, collapseControls, processFunc);
 },
 forEachControlsBackwardCore: function(node, collapseControls, processFunc) {
  if(node.control)
   processFunc(node.control);
  if(node.children.length > 1) {
   for(var i = 0, childNode; childNode = node.children[i]; i++)
    processFunc(childNode.control);
  }
 },
 collapseControls: function(node) {
  for(var childNode, i = 0; childNode = node.children[i]; i++)
   this.collapseControls(childNode);
  if(node.control && node.control.NeedCollapseControl())
   node.control.CollapseControl();
 },
 createControlTree: function(controlCollection, container) {
  controlCollection.ProcessControlsInContainer(container, function(control) {
   control.RegisterInControlTree(this);
  }.aspxBind(this));
  for(var domElementID in this.domMap) {
   if(!this.domMap.hasOwnProperty(domElementID)) continue;
   var node = this.domMap[domElementID];
   var parentNode = this.findParentNode(domElementID);
   parentNode = parentNode || this.rootNode;
   var childNode = node.mainNode || node;
   this.addChildNode(parentNode, childNode);
  }
 },
 findParentNode: function(id) {
  var element = document.getElementById(id).parentNode;
  while(element && element.tagName !== "BODY") {
   if(element.id) {
    var parentNode = this.domMap[element.id];
    if(parentNode)
     return parentNode;
   }
   element = element.parentNode;
  }
  return null;
 },
 addChildNode: function(node, childNode) {
  if(!childNode.parentNode) {
   node.children.push(childNode);
   childNode.parentNode = node;
  }
 },
 addRelatedNode: function(node, relatedNode) {
  this.addChildNode(node, relatedNode);
  relatedNode.mainNode = node;
 },
 createNode: function(domElementID, control) {
  var node = {
   control: control,
   children: [],
   parentNode: null,
   mainNode: null
  };
  if(domElementID)
   this.domMap[domElementID] = node;
  return node;
 }
});
ASPxClientControl = _aspxCreateClass(null, {
 constructor: function(name){
  this.isASPxClientControl = true;
  this.name = name;
  this.uniqueID = name;
  this.encodeHtml = true;
  this.enabled = true;
  this.clientEnabled = true;
  this.clientVisible = true;
  this.rtl = false;
  this.autoPostBack = false;
  this.allowMultipleCallbacks = true;
  this.callBack = null;
  this.enableCallbackAnimation = false;
  this.enableSlideCallbackAnimation = false;
  this.slideAnimationDirection = null;
  this.beginCallbackAnimationProcessing = false;
  this.endCallbackAnimationProcessing = false;
  this.savedCallbackResult = null;
  this.savedCallbacks = null;
  this.isCallbackAnimationPrevented = false;
  this.lpDelay = 300;
  this.lpTimer = -1;
  this.isNative = false;
  this.requestCount = 0;
  this.enableSwipeGestures = false;
  this.supportGestures = false;
  this.repeatedGestureValue = 0;
  this.repeatedGestureCount = 0;
  this.isInitialized = false;
  this.isControlCollapsed = false;
  this.initialFocused = false;
  this.leadingAfterInitCall = false;
  this.adjustedSizes = { };
  this.adjustedHeight = 0;
  this.serverEvents = [];
  this.dialogContentHashTable = { };
  this.loadingPanelElement = null;
  this.loadingDivElement = null;
  this.hasPhantomLoadingElements = false;
  this.mainElement = null;
  this.renderIFrameForPopupElements = false;
  this.widthValueSetInPercentage = false;
  this.heightValueSetInPercentage = false;
  this.touchUIMouseScroller = null;
  this.verticalAlignedElements = { };
  this.wrappedTextContainers = { };
  this.scrollPositionState = { };
  this.sizingConfig = {
   allowSetWidth: true,
   allowSetHeight: true,
   correction : false,
   adjustControl : false,
   supportPercentHeight: false,
   supportAutoHeight: false
  };
  this.percentSizeConfig = {
   width: -1,
   height: -1,
   markerWidth: -1,
   markerHeight: -1
  };
  this.Init = new ASPxClientEvent();
  this.BeginCallback = new ASPxClientEvent();
  this.EndCallback = new ASPxClientEvent();
  this.EndCallbackAnimationStart = new ASPxClientEvent();
  this.CallbackError = new ASPxClientEvent();
  this.CustomDataCallback = new ASPxClientEvent();
  this.LayoutChanging = new ASPxClientEvent();
  aspxGetControlCollection().Add(this);
 },
 HtmlEncode: function(text) {
  return this.encodeHtml ? _aspxEncodeHtml(text) : text;
 },
 Initialize: function() {
  if(this.callBack != null)
   this.InitializeCallBackData();
 },
 InlineInitialize: function() {
  this.InitializeDOM();
 },
 InitializeGestures: function() {
  if(this.enableSwipeGestures && this.supportGestures) {
   ASPxGesturesHelper.AddSwipeGestureHandler(this.name,
    function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
    function(evt) { return this.CanHandleGestureCore(evt); }.aspxBind(this),
    function(value) { return this.AllowStartGesture(); }.aspxBind(this),
    function(value) { return this.StartGesture(); }.aspxBind(this),
    function(value) { return this.AllowExecuteGesture(value); }.aspxBind(this),
    function(value) { this.ExecuteGesture(value); }.aspxBind(this),
    function(value) { this.CancelGesture(value); }.aspxBind(this)
   );
   if(__aspxMSTouchUI)
    this.touchUIMouseScroller = ASPxMouseScroller.Create(
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function() { return null; },
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function(element) { return this.NeedPreventTouchUIMouseScrolling(element); }.aspxBind(this),
     true
    );
  }
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return false;
 },
 InitailizeFocus: function() {
  if(this.initialFocused && this.IsVisible())
   this.Focus();
 },
 AfterCreate: function() {
  this.InlineInitialize();
  this.InitializeGestures();
  if(!this.CanInitializeAdjustmentOnDOMContentLoaded() || __aspxStartupScriptsRunning)
   this.InitializeAdjustment();
 },
 DOMContentLoaded: function() {
  if(this.CanInitializeAdjustmentOnDOMContentLoaded())
   this.InitializeAdjustment();
 },
 CanInitializeAdjustmentOnDOMContentLoaded: function() {
  return !__aspxIE || __aspxBrowserVersion >= 10;
 },
 InitializeAdjustment: function() {
  this.UpdateAdjustmentFlags();
  this.AdjustControl();
 },
 AfterInitialize: function() {
  this.AdjustControl();
  this.InitailizeFocus();
  this.isInitialized = true;
  this.RaiseInit();
  if(this.savedCallbacks) {
   for(var i = 0; i < this.savedCallbacks.length; i++)
    this.CreateCallbackInternal(this.savedCallbacks[i].arg, this.savedCallbacks[i].command,
     false, this.savedCallbacks[i].callbackInfo);
   this.savedCallbacks = null;
  }
 },
 InitializeCallBackData: function() {
 },
 RenderExistsOnPage: function() {
  return _aspxIsExistsElement(this.GetMainElement());
 },
 IsStateControllerEnabled: function(){
  return typeof(aspxGetStateController) != "undefined" && aspxGetStateController();
 },
 InitializeDOM: function() {
  var mainElement = this.GetMainElement();
  if(mainElement)
   mainElement["dxinit"] = true;
 },
 IsDOMInitialized: function() {
  var mainElement = this.GetMainElement();
  return mainElement && mainElement["dxinit"];
 },
 GetWidth: function() {
  return this.GetMainElement().offsetWidth;
 },
 GetHeight: function() {
  return this.GetMainElement().offsetHeight;
 },
 SetWidth: function(width) {
  if(this.sizingConfig.allowSetWidth)
   this.SetSizeCore("width", width, "GetWidth", false);
 },
 SetHeight: function(height) {
  if(this.sizingConfig.allowSetHeight)
   this.SetSizeCore("height", height, "GetHeight", false);
 },
 SetSizeCore: function(sizePropertyName, size, getFunctionName, corrected) {
  if(size < 0)
   return;
  this.GetMainElement().style[sizePropertyName] = size + "px";
  this.UpdateAdjustmentFlags();
  if(this.sizingConfig.adjustControl)
   this.AdjustControl(true);
  if(this.sizingConfig.correction && !corrected) {
   var realSize = this[getFunctionName]();
   if(realSize != size) {
    var correctedSize = size - (realSize - size);
    this.SetSizeCore(sizePropertyName, correctedSize, getFunctionName, true);
   }
  }
 },
 AdjustControl: function(nestedCall) {
  if(this.IsAdjustmentRequired() && (!ASPxClientControl.adjustControlLocked || nestedCall)) {
   ASPxClientControl.adjustControlLocked = true;
   try {
    if(!this.IsAdjustmentAllowed())
     return;
    this.AdjustControlCore();
    this.UpdateAdjustedSizes();
    this.percentMarkerSize = undefined;
   }
   finally {
    delete ASPxClientControl.adjustControlLocked;
   }
  }
  this.TryShowPhantomLoadingElements();
 },
 ResetControlAdjustment: function () {
  this.adjustedSizes = { };
 },
 UpdateAdjustmentFlags: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = _aspxGetCurrentStyle(mainElement);
   this.UpdatePercentSizeConfig([mainElementStyle.width, mainElement.style.width], [mainElementStyle.height, mainElement.style.height]);
  }
 },
 UpdatePercentSizeConfig: function(widths, heights) {
  this.widthValueSetInPercentage = false;
  this.heightValueSetInPercentage = false;
  for(var i = 0; i < widths.length; i++) {
   if(_aspxIsPercentageSize(widths[i])) {
    this.percentSizeConfig.width = widths[i];
    this.widthValueSetInPercentage = true;
    break;
   }
  }
  for(var i = 0; i < heights.length; i++) {
   if(_aspxIsPercentageSize(heights[i])) {
    this.percentSizeConfig.height = heights[i];
    this.heightValueSetInPercentage = true;
    break;
   }
  }
  this.ResetControlPercentMarkerSize();
 },
 GetAdjustedSizes: function() {
  var mainElement = this.GetMainElement();
  if(mainElement)
   return { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
  return { width: 0, height: 0 };
 },
 IsAdjusted: function() {
  return (this.adjustedSizes.width && this.adjustedSizes.width > 0) && (this.adjustedSizes.height && this.adjustedSizes.height > 0);
 },
 IsAdjustmentRequired: function() {
  if(!this.IsAdjusted())
   return true;
  if(this.widthValueSetInPercentage)
   return true;
  if(this.heightValueSetInPercentage)
   return true;
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes){
   if(this.adjustedSizes[name] !== sizes[name])
    return true;
  }
  return false;
 },
 IsAdjustmentAllowed: function() {
  var mainElement = this.GetMainElement();
  return mainElement && this.IsDisplayed() && !this.IsHidden() && this.IsDOMInitialized();
 },
 UpdateAdjustedSizes: function() {
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes)
   this.adjustedSizes[name] = sizes[name];
 },
 AdjustControlCore: function() {
 },
 AdjustAutoHeight: function() {
 },
 IsControlCollapsed: function() {
  return this.isControlCollapsed;
 },
 NeedCollapseControl: function() {
  return this.NeedCollapseControlCore() && this.IsAdjustmentRequired() && this.IsAdjustmentAllowed();
 },
 NeedCollapseControlCore: function() {
  return false;
 },
 CollapseEditor: function() {
 },
 CollapseControl: function() {
  this.SaveScrollPositions();
  var mainElement = this.GetMainElement(),
   marker = this.GetControlPercentSizeMarker(),
   scrollHeight = mainElement.scrollHeight;
  if(this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight && scrollHeight <= mainElement.offsetHeight)
   marker.style.height = this.percentSizeConfig.height;
  else
   marker.style.height = scrollHeight + "px";
  mainElement.style.display = "none";
  this.isControlCollapsed = true;
 },
 ExpandControl: function() {
  var mainElement = this.GetMainElement();
  mainElement.style.display = "";
  this.GetControlPercentSizeMarker().style.height = "0px";
  this.isControlCollapsed = false;
  this.RestoreScrollPositions();
 },
 CanCauseReadjustment: function() {
  return this.NeedCollapseControlCore();
 },
 IsExpandableByAdjustment: function() {
  return false;
 },
 SaveScrollPositions: function() {
  var mainElement = this.GetMainElement();
  this.scrollPositionState.outer = _aspxGetOuterScrollPosition(mainElement.parentNode);
  this.scrollPositionState.inner = _aspxGetInnerScrollPositions(mainElement);
 },
 RestoreScrollPositions: function() {
  _aspxRestoreOuterScrollPosition(this.scrollPositionState.outer);
  _aspxRestoreInnerScrollPositions(this.scrollPositionState.inner);
 },
 GetControlPercentSizeMarker: function() {
  if(this.percentSizeMarker === undefined) {
   this.percentSizeMarker = _aspxCreateHtmlElementFromString("<div style='height:0px;font-size:0px;line-height:0;width:100%;'></div>");
   _aspxInsertElementAfter(this.percentSizeMarker, this.GetMainElement());
  }
  return this.percentSizeMarker;
 },
 KeepControlPercentSizeMarker: function(needCollapse, needCalculateHeight) {
  var mainElement = this.GetMainElement(),
   marker = this.GetControlPercentSizeMarker(),
   markerHeight;
  if(needCollapse)
   this.CollapseControl();
  if(this.widthValueSetInPercentage && marker.style.width !== this.percentSizeConfig.width)
   marker.style.width = this.percentSizeConfig.width;
  if(needCalculateHeight) {
   if(this.IsControlCollapsed())
    markerHeight = marker.style.height;
   marker.style.height = this.percentSizeConfig.height;
  }
  this.percentSizeConfig.markerWidth = marker.offsetWidth;
  if(needCalculateHeight) {
   this.percentSizeConfig.markerHeight = marker.offsetHeight;
   if(this.IsControlCollapsed())
    marker.style.height = markerHeight;
   else
    marker.style.height = "0px";
  }
  if(needCollapse)
   this.ExpandControl();
 },
 ResetControlPercentMarkerSize: function() {
  this.percentSizeConfig.markerWidth = -1;
  this.percentSizeConfig.markerHeight = -1;
 },
 GetControlPercentMarkerSize: function(hideControl, force) {
  var needCalculateHeight = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight;
  if(force || this.percentSizeConfig.markerWidth < 1 || (needCalculateHeight && this.percentSizeConfig.markerHeight < 1))
   this.KeepControlPercentSizeMarker(hideControl && !this.IsControlCollapsed(), needCalculateHeight);
  return {
   width: this.percentSizeConfig.markerWidth,
   height: this.percentSizeConfig.markerHeight
  };
 },
 OnBrowserWindowResize: function(evt) {
 },
 OnBrowserWindowResizeInternal: function(evt){
  if(this.BrowserWindowResizeSubscriber())
   this.OnBrowserWindowResize(evt);
 },
 BrowserWindowResizeSubscriber: function() {
  return this.widthValueSetInPercentage;
 },
 CorrectWrappedText: function(getElements, key, reCorrect) {
  var elements = this.GetCachedElements(getElements, this.wrappedTextContainers, key);
  for(var i = 0; i < elements.length; i++)
   this.CorrectWrappedTextInContainer(elements[i], reCorrect);
 },
 CorrectWrappedTextInContainer: function(container, reCorrect) {
  if(!container || (container.dxWrappedTextCorrected && !reCorrect) || container.offsetWidth === 0) return;
  _aspxAdjustWrappedTextInContainer(container);
  container.dxWrappedTextCorrected = true;
 },
 CorrectVerticalAlignment: function(alignMethod, getElements, key, reAlign) {
  var elements = this.GetCachedElements(getElements, this.verticalAlignedElements, key);
  for(var i = 0; i < elements.length; i++)
   this.CorrectElementVerticalAlignment(alignMethod, elements[i], reAlign);
 },
 CorrectElementVerticalAlignment: function(alignMethod, element, reAlign) {
  if(!element || (element.dxVerticalAligned && !reAlign) || element.offsetHeight === 0) return;
  alignMethod(element);
  element.dxVerticalAligned = true;
 },
 ClearVerticalAlignedElementsCache: function() {
  this.verticalAlignedElements = {};
 },
 ClearWrappedTextContainersCache: function() {
  this.wrappedTextContainers = {};
 },
 GetCachedElements: function(getElements, cache, key) {
  if(!key) key = "elements";
  if(!cache[key] || !_aspxIsValidElements(cache[key])){
   var elements = getElements.call(this);
   if(!ASPxIdent.IsArray(elements))
    elements = [elements];
   cache[key] = elements;
  }
  return cache[key];
 },
 AdjustPagerControls: function() {
  if(typeof(aspxGetPagersCollection) != "undefined")
   aspxGetPagersCollection().AdjustControls(this.GetMainElement());
 },
 OnAdaptiveLayoutChanging: function(isAdaptiveView) {
 },
 RaiseAdaptiveLayoutChanging: function(isAdaptiveView) {
  if(!this.LayoutChanging.IsEmpty()){
   var args = new ASPxClientAdaptiveLayoutChangingEventArgs(isAdaptiveView);
   this.LayoutChanging.FireEvent(this, args);
   return args.isAdaptiveView;
  }
  return isAdaptiveView;
 },
 SetAdaptiveClassNames: function(prevClassName, newClassName) {
  var maiElement = this.GetMainElement();
  if(maiElement) {
   _aspxRemoveClassNameFromElement(maiElement, prevClassName);
   _aspxAddClassNameToElement(maiElement, newClassName);
  }
 },
 RegisterInControlTree: function(tree) {
  var mainElement = this.GetMainElement();
  if(mainElement && mainElement.id)
   tree.createNode(mainElement.id, this);
 },
 RegisterServerEventAssigned: function(eventNames){
  for(var i = 0; i < eventNames.length; i++)
   this.serverEvents[eventNames[i]] = true;
 },
 IsServerEventAssigned: function(eventName){
  return !!this.serverEvents[eventName];
 },
 GetChild: function(idPostfix){
  var mainElement = this.GetMainElement();
  return mainElement ? _aspxGetChildById(mainElement, this.name + idPostfix) : null;
 },
 GetItemElementName: function(element) {
  var name = "";
  if(element.id)
   name = element.id.substring(this.name.length + 1);
  return name;
 },
 GetLinkElement: function(element) {
  if (element == null) return null;
  return (element.tagName == "A") ? element : _aspxGetChildByTagName(element, "A", 0);
 },
 GetInternalHyperlinkElement: function(parentElement, index) {
  var element = _aspxGetChildByTagName(parentElement, "A", index);
  if (element == null)
   element = _aspxGetChildByTagName(parentElement, "SPAN", index);
  return element;
 },
 GetParentForm: function(){
  return _aspxGetParentByTagName(this.GetMainElement(), "FORM");
 },
 GetMainElement: function(){
  if(!_aspxIsExistsElement(this.mainElement))
   this.mainElement = _aspxGetElementById(this.name);
  return this.mainElement;
 },
 OnControlClick: function(clickedElement, htmlEvent) {
 },
 IsLoadingContainerVisible: function(){
  return this.IsVisible();
 },
 GetLoadingPanelElement: function(){
  return _aspxGetElementById(this.name + "_LP");
 },
 GetClonedLoadingPanel: function(){
  return document.getElementById(this.GetLoadingPanelElement().id + "V");
 },
 CloneLoadingPanel: function(element, parent) {
  var clone = element.cloneNode(true);
  clone.id = element.id + "V";
  parent.appendChild(clone);
  return clone;
 },
 CreateLoadingPanelWithoutBordersInsideContainer: function(container) {
  var loadingPanel = this.CreateLoadingPanelInsideContainer(container, false, true, true);
  var contentStyle = _aspxGetCurrentStyle(container);
  if(!loadingPanel || !contentStyle)
   return;
  var elements = [ ];
  elements.push(loadingPanel.tagName == "TABLE" ? loadingPanel : _aspxGetChildByTagName(loadingPanel, "TABLE", 0));
  var cells = _aspxGetElementsByTagName(loadingPanel, "TD");
  if(!cells) cells = [ ];
  for(var i = 0; i < cells.length; i++)
   elements.push(cells[i]);
  for(var i = 0; i < elements.length; i++) {
   var el = elements[i];
   el.style.backgroundColor = contentStyle.backgroundColor;
   _aspxRemoveBordersAndShadows(el);
  }
 },
 CreateLoadingPanelInsideContainer: function(parentElement, hideContent, collapseHeight, collapseWidth) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if (element != null){
   var width = collapseWidth ? 0 : _aspxGetClearClientWidth(parentElement);
   var height = collapseHeight ? 0 : _aspxGetClearClientHeight(parentElement);
   if(hideContent){
    for(var i = parentElement.childNodes.length - 1; i > -1; i--){
     if(parentElement.childNodes[i].style)
      parentElement.childNodes[i].style.display = "none";
     else if(parentElement.childNodes[i].nodeType == 3)
      parentElement.removeChild(parentElement.childNodes[i]);
    }
   }
   else
    parentElement.innerHTML = "";
   var table = document.createElement("TABLE");
   parentElement.appendChild(table);
   table.border = 0;
   table.cellPadding = 0;
   table.cellSpacing = 0;
   _aspxSetStyles(table, {
    width: (width > 0) ? width : "100%",
    height: (height > 0) ? height : "100%"
   });
   var tbody = document.createElement("TBODY");
   table.appendChild(tbody);
   var tr = document.createElement("TR");
   tbody.appendChild(tr);
   var td = document.createElement("TD");
   tr.appendChild(td);
   td.align = "center";
   td.vAlign = "middle";
   element = this.CloneLoadingPanel(element, td);
   _aspxSetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  } else
   parentElement.innerHTML = "&nbsp;";
  return null;
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   _aspxSetStyles(element, {
    position: "absolute",
    display: ""
   });
   this.SetLoadingPanelLocation(offsetElement, element);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 CreateLoadingPanelInline: function(parentElement){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   _aspxSetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 ShowLoadingPanel: function() {
 },
 ShowLoadingElements: function() {
  if(this.InCallback() || this.lpTimer > -1) return;
  this.ShowLoadingDiv();
  if(this.IsCallbackAnimationEnabled())
   this.StartBeginCallbackAnimation();
  else
   this.ShowLoadingElementsInternal();
 },
 ShowLoadingElementsInternal: function() {
  if(this.lpDelay > 0 && !this.IsCallbackAnimationEnabled())
   this.lpTimer = _aspxSetTimeout(function() {
    this.ShowLoadingPanelOnTimer();
   }.aspxBind(this), this.lpDelay);
  else {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 GetLoadingPanelOffsetElement: function (baseElement) {
  if(this.IsCallbackAnimationEnabled()) {
   var element = this.GetLoadingPanelCallbackAnimationOffsetElement();
   if(element) {
    var container = typeof(ASPxAnimationHelper) != "undefined" ? ASPxAnimationHelper.findSlideAnimationContainer(element) : null;
    if(container)
     return container.parentNode.parentNode;
    else
     return element;
   }
  }
  return baseElement;
 },
 GetLoadingPanelCallbackAnimationOffsetElement: function () {
  return this.GetCallbackAnimationElement();
 },
 IsCallbackAnimationEnabled: function () {
  return (this.enableCallbackAnimation || this.enableSlideCallbackAnimation) && !this.isCallbackAnimationPrevented;
 },
 StartBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = true;
  this.isCallbackFinished = false;
  var element = this.GetCallbackAnimationElement();
  if(element && this.enableSlideCallbackAnimation && this.slideAnimationDirection)
   ASPxAnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeginCallbackAnimation.aspxBind(this));
  else if(element && this.enableCallbackAnimation)
   ASPxAnimationHelper.fadeOut(element, this.FinishBeginCallbackAnimation.aspxBind(this));
  else
   this.FinishBeginCallbackAnimation();
 },
 FinishBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = false;
  if(!this.isCallbackFinished)
   this.ShowLoadingElementsInternal();
  else {
   this.DoCallback(this.savedCallbackResult);
   this.savedCallbackResult = null;
  }
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  if(this.beginCallbackAnimationProcessing) {
   this.savedCallbackResult = callbackResult;
   this.isCallbackFinished = true;
   return true;
  }
  return false;
 },
 StartEndCallbackAnimation: function () {
  this.HideLoadingPanel();
  this.SetInitialLoadingDivOpacity();
  this.RaiseEndCallbackAnimationStart();
  this.endCallbackAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(element && this.enableSlideCallbackAnimation && this.slideAnimationDirection)
   ASPxAnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishEndCallbackAnimation.aspxBind(this));
  else if(element && this.enableCallbackAnimation)
   ASPxAnimationHelper.fadeIn(element, this.FinishEndCallbackAnimation.aspxBind(this));
  else
   this.FinishEndCallbackAnimation();
  this.slideAnimationDirection = null;
 },
 FinishEndCallbackAnimation: function () {
  this.DoEndCallback();
  this.endCallbackAnimationProcessing = false;
  this.CheckRepeatGesture();
 },
 CheckEndCallbackAnimationNeeded: function() {
  if(!this.endCallbackAnimationProcessing && this.requestCount == 1) {
   this.StartEndCallbackAnimation();
   return true;
  }
  return false;
 },
 PreventCallbackAnimation: function() {
  this.isCallbackAnimationPrevented = true;
 },
 GetCallbackAnimationElement: function() {
  return null;
 },
 AssignSlideAnimationDirectionByPagerArgument: function(arg, currentPageIndex) {
  this.slideAnimationDirection = null;
  if(this.enableSlideCallbackAnimation && typeof(ASPxAnimationHelper) != "undefined") {
   if (arg == ASPxClientPagerCommands.Next || arg == ASPxClientPagerCommands.Last)
    this.slideAnimationDirection = ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
   else if (arg == ASPxClientPagerCommands.First || arg == ASPxClientPagerCommands.Prev)
    this.slideAnimationDirection = ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION;
   else if(!isNaN(currentPageIndex) && arg.indexOf(ASPxClientPagerCommands.PageNumber) == 0) {
    var newPageIndex = parseInt(arg.substring(2));
    if(!isNaN(newPageIndex))
     this.slideAnimationDirection = newPageIndex < currentPageIndex ? ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION : ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
   }
  }
 },
 TryShowPhantomLoadingElements: function () {
  if (this.hasPhantomLoadingElements && this.InCallback()) {
   this.ShowLoadingDivAndPanel();
   this.hasPhantomLoadingElements = false;
  }
 },
 ShowLoadingDivAndPanel: function () {
  this.ShowLoadingDiv();
  this.RestoreLoadingDivOpacity();
  this.ShowLoadingPanel();
 },
 HideLoadingElements: function() {
  this.HideLoadingPanel();
  this.HideLoadingDiv();
 },
 ShowLoadingPanelOnTimer: function() {
  this.ClearLoadingPanelTimer();
  if(this.RenderExistsOnPage()) {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 ClearLoadingPanelTimer: function() {
  this.lpTimer = _aspxClearTimer(this.lpTimer);
 },
 HideLoadingPanel: function() {
  this.ClearLoadingPanelTimer();
  this.hasPhantomLoadingElements = false;
  if(_aspxIsExistsElement(this.loadingPanelElement)) {
   _aspxRemoveElement(this.loadingPanelElement);
   this.loadingPanelElement = null;
  }
 },
 SetLoadingPanelLocation: function(offsetElement, loadingPanel, x, y, offsetX, offsetY) {
  if(!_aspxIsExists(x) || !_aspxIsExists(y)){
   var x1 = _aspxGetAbsoluteX(offsetElement);
   var y1 = _aspxGetAbsoluteY(offsetElement);
   var x2 = x1;
   var y2 = y1;
   if(offsetElement == document.body){
    x2 += _aspxGetDocumentMaxClientWidth();
    y2 += _aspxGetDocumentMaxClientHeight();
   }
   else{
    x2 += offsetElement.offsetWidth;
    y2 += offsetElement.offsetHeight;
   }
   if(x1 < _aspxGetDocumentScrollLeft())
    x1 = _aspxGetDocumentScrollLeft();
   if(y1 < _aspxGetDocumentScrollTop())
    y1 = _aspxGetDocumentScrollTop();
   if(x2 > _aspxGetDocumentScrollLeft() + _aspxGetDocumentClientWidth())
    x2 = _aspxGetDocumentScrollLeft() + _aspxGetDocumentClientWidth();
   if(y2 > _aspxGetDocumentScrollTop() + _aspxGetDocumentClientHeight())
    y2 = _aspxGetDocumentScrollTop() + _aspxGetDocumentClientHeight();
   x = x1 + ((x2 - x1 - loadingPanel.offsetWidth) / 2);
   y = y1 + ((y2 - y1 - loadingPanel.offsetHeight) / 2);
  }
  if(_aspxIsExists(offsetX) && _aspxIsExists(offsetY)){
   x += offsetX;
   y += offsetY;
  }
  x = _aspxPrepareClientPosForElement(x, loadingPanel, true);
  y = _aspxPrepareClientPosForElement(y, loadingPanel, false);
  if(__aspxIE && __aspxBrowserVersion > 8 && (y - Math.floor(y) === 0.5))
   y = Math.ceil(y);
  _aspxSetStyles(loadingPanel, { left: x, top: y });
 },
 GetLoadingDiv: function(){
  return _aspxGetElementById(this.name + "_LD");
 },
 CreateLoadingDiv: function(parentElement, offsetElement){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingDiv();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var div = this.GetLoadingDiv();
  if(div != null){
   div = div.cloneNode(true);
   parentElement.appendChild(div);
   _aspxSetElementDisplay(div, true);
   _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseDownEventName, _aspxPreventEvent);
   _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseMoveEventName, _aspxPreventEvent);
   _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseUpEventName, _aspxPreventEvent);
   this.SetLoadingDivBounds(offsetElement, div);
   this.loadingDivElement = div;
   this.SetInitialLoadingDivOpacity();
   return div;
  }
  return null;
 },
 SetInitialLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  _aspxSaveStyleAttribute(this.loadingDivElement, "opacity");
  _aspxSaveStyleAttribute(this.loadingDivElement, "filter");
  _aspxSetElementOpacity(this.loadingDivElement, 0.01);
 },
 RestoreLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  _aspxRestoreStyleAttribute(this.loadingDivElement, "opacity");
  _aspxRestoreStyleAttribute(this.loadingDivElement, "filter");
 },
 SetLoadingDivBounds: function(offsetElement, loadingDiv) {
  var absX = (offsetElement == document.body) ? 0 : _aspxGetAbsoluteX(offsetElement);
  var absY = (offsetElement == document.body) ? 0 : _aspxGetAbsoluteY(offsetElement);
  _aspxSetStyles(loadingDiv, {
   left: _aspxPrepareClientPosForElement(absX, loadingDiv, true),
   top: _aspxPrepareClientPosForElement(absY, loadingDiv, false)
  });
  var width = (offsetElement == document.body) ? _aspxGetDocumentWidth() : offsetElement.offsetWidth;
  var height = (offsetElement == document.body) ? _aspxGetDocumentHeight() : offsetElement.offsetHeight;
  if(height < 0)
   height = 0;
  _aspxSetStyles(loadingDiv, { width: width, height: height });
  var correctedWidth = 2 * width - loadingDiv.offsetWidth;
  if(correctedWidth <= 0) correctedWidth = width;
  var correctedHeight = 2 * height - loadingDiv.offsetHeight;
  if (correctedHeight <= 0) correctedHeight = height;
  _aspxSetStyles(loadingDiv, { width: correctedWidth, height: correctedHeight });
 },
 ShowLoadingDiv: function() {
 },
 HideLoadingDiv: function() {
  this.hasPhantomLoadingElements = false;
  if(_aspxIsExistsElement(this.loadingDivElement)){
   _aspxRemoveElement(this.loadingDivElement);
   this.loadingDivElement = null;
  }
 },
 CanHandleGesture: function(evt) {
  return false;
 },
 CanHandleGestureCore: function(evt) {
  var source = _aspxGetEventSource(evt);
  if(_aspxGetIsParent(this.loadingPanelElement, source) || _aspxGetIsParent(this.loadingDivElement, source))
   return true;
  var callbackAnimationElement = this.GetCallbackAnimationElement();
  if(!callbackAnimationElement)
   return false;
  var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(callbackAnimationElement, false, false);
  if(animationContainer && _aspxGetIsParent(animationContainer, source) && !_aspxGetIsParent(animationContainer.childNodes[0], source))
   return true;
  return this.CanHandleGesture(evt);
 },
 AllowStartGesture: function() {
  return !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing;
 },
 StartGesture: function() {
 },
 AllowExecuteGesture: function(value) {
  return false;
 },
 ExecuteGesture: function(value) {
 },
 CancelGesture: function(value) {
  if(this.repeatedGestureCount === 0) {
   this.repeatedGestureValue = value;
   this.repeatedGestureCount = 1;
  }
  else {
   if(this.repeatedGestureValue * value > 0)
    this.repeatedGestureCount++;
   else
    this.repeatedGestureCount--;
   if(this.repeatedGestureCount === 0)
    this.repeatedGestureCount = 0;
  }
 },
 CheckRepeatGesture: function() {
  if(this.repeatedGestureCount !== 0) {
   if(this.AllowExecuteGesture(this.repeatedGestureValue))
    this.ExecuteGesture(this.repeatedGestureValue, this.repeatedGestureCount);
   this.repeatedGestureValue = 0;
   this.repeatedGestureCount = 0;
  }
 },
 AllowExecutePagerGesture: function (pageIndex, pageCount, value) {
  if(pageIndex < 0) return false;
  if(pageCount <= 1) return false;
  if(value > 0 && pageIndex === 0) return false;
  if(value < 0 && pageIndex === pageCount - 1) return false;
  return true;
 },
 ExecutePagerGesture: function(pageIndex, pageCount, value, count, method) {
  if(!count) count = 1;
  var pageIndex = pageIndex + (value < 0 ? count : -count);
  if(pageIndex < 0) pageIndex = 0;
  if(pageIndex > pageCount - 1) pageIndex = pageCount - 1;
  method(ASPxClientPagerCommands.PageNumber + pageIndex);
 },
 RaiseInit: function(){
  if(!this.Init.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.Init.FireEvent(this, args);
  }
 },
 RaiseBeginCallbackInternal: function(command){
  if(!this.BeginCallback.IsEmpty()){
   var args = new ASPxClientBeginCallbackEventArgs(command);
   this.BeginCallback.FireEvent(this, args);
  }
 },
 RaiseBeginCallback: function(command){
  this.RaiseBeginCallbackInternal(command);
  if(typeof(aspxGetGlobalEvents) != "undefined")
   aspxGetGlobalEvents().OnBeginCallback(this, command);
 },
 RaiseEndCallback: function(){
  if(!this.EndCallback.IsEmpty()){
   var args = new ASPxClientEndCallbackEventArgs();
   this.EndCallback.FireEvent(this, args);
  }
  if(typeof(aspxGetGlobalEvents) != "undefined")
   aspxGetGlobalEvents().OnEndCallback(this);
 },
 RaiseEndCallbackAnimationStart: function(){
  if(!this.EndCallbackAnimationStart.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EndCallbackAnimationStart.FireEvent(this, args);
  }
 },
 RaiseCallbackError: function(message) {
  if(!this.CallbackError.IsEmpty()) {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   this.CallbackError.FireEvent(this, args);
   if(args.handled)
    return { isHandled: true, errorMessage: args.message };
  }
  if(typeof(aspxGetGlobalEvents) != "undefined") {
   var args = new ASPxClientCallbackErrorEventArgs(message);
   aspxGetGlobalEvents().OnCallbackError(this, args);
   if(args.handled)
    return { isHandled: true, errorMessage: args.message };
  }
  return { isHandled: false, errorMessage: message };
 },
 IsVisible: function() {
  var element = this.GetMainElement();
  return _aspxElementIsVisible(element);
 },
 IsDisplayed: function() {
  var element = this.GetMainElement();
  while(element && element.tagName != "BODY") {
   if(!_aspxGetElementDisplay(element))
    return false;
   element = element.parentNode;
  }
  return true;
 },
 IsHidden: function() {
  var element = this.GetMainElement();
  return element.offsetWidth == 0 && element.offsetHeight == 0;
 },
 Focus: function() {
 },
 GetClientVisible: function(){
  return this.GetVisible();
 },
 SetClientVisible: function(visible){
  this.SetVisible(visible);
 },
 GetVisible: function(){
  return this.clientVisible;
 },
 SetVisible: function(visible){
  if(this.clientVisible != visible){
   this.clientVisible = visible;
   _aspxSetElementDisplay(this.GetMainElement(), visible);
   if (visible) {
    this.AdjustControl();
    var mainElement = this.GetMainElement();
    if(mainElement)
     aspxGetControlCollection().AdjustControls(mainElement);
   }
  }
 },
 GetEnabled: function() {
  return this.clientEnabled;
 },
 SetEnabled: function(enabled) {
  this.clientEnabled = enabled;
  if(ASPxClientControl.setEnabledLocked)
   return;
  else
   ASPxClientControl.setEnabledLocked = true;
  aspxGetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function(control) {
   if(_aspxIsFunction(control.SetEnabled))
    control.SetEnabled(enabled);
  });
  delete ASPxClientControl.setEnabledLocked;
 },
 InCallback: function() {
  return this.requestCount > 0;
 },
 DoBeginCallback: function(command) {
  this.RaiseBeginCallback(command || "");
  aspxGetControlCollection().Before_WebForm_InitCallback(this.name);
  if(typeof(WebForm_InitCallback) != "undefined" && WebForm_InitCallback) {
   __theFormPostData = "";
   __theFormPostCollection = [ ];
   this.ClearPostBackEventInput("__EVENTTARGET");
   this.ClearPostBackEventInput("__EVENTARGUMENT");
   WebForm_InitCallback();
   this.savedFormPostData = __theFormPostData;
   this.savedFormPostCollection = __theFormPostCollection;
  }
 },
 ClearPostBackEventInput: function(id){
  var element = _aspxGetElementById(id);
  if(element != null) element.value = "";
 },
 PerformDataCallback: function(arg, handler) {
  this.CreateCustomDataCallback(arg, "", handler);
 },
 CreateCallback: function(arg, command) {
  var callbackInfo = this.CreateCallbackInfo(ASPxCallbackType.Common, null);
  this.CreateCallbackByInfo(arg, command, callbackInfo);
 },
 CreateCustomDataCallback: function(arg, command, handler) {
  var callbackInfo = this.CreateCallbackInfo(ASPxCallbackType.Data, handler);
  this.CreateCallbackByInfo(arg, command, callbackInfo);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  if(!this.CanCreateCallback()) return;
  if(typeof(WebForm_DoCallback) != "undefined" && WebForm_DoCallback && __aspxDocumentLoaded)
   this.CreateCallbackInternal(arg, command, true, callbackInfo);
  else {
   if(!this.savedCallbacks)
    this.savedCallbacks = [];
   var callbackInfo = { arg: arg, command: command, callbackInfo: callbackInfo };
   if(this.allowMultipleCallbacks)
    this.savedCallbacks.push(callbackInfo);
   else
    this.savedCallbacks[0] = callbackInfo;
  }
 },
 CreateCallbackInternal: function(arg, command, viaTimer, callbackInfo) {
  this.requestCount++;
  this.DoBeginCallback(command);
  if(typeof(arg) == "undefined")
   arg = "";
  if(typeof(command) == "undefined")
   command = "";
  var callbackID = this.SaveCallbackInfo(callbackInfo);
  if(viaTimer)
   window.setTimeout("aspxCreateCallback('" + this.name + "', '" + escape(arg) + "', '" + escape(command) + "', " + callbackID + ");", 0);
  else
   this.CreateCallbackCore(arg, command, callbackID);
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  var callBackMethod = this.GetCallbackMethod(command);
  __theFormPostData = this.savedFormPostData;
  __theFormPostCollection = this.savedFormPostCollection;
  callBackMethod.call(this, this.GetSerializedCallbackInfoByID(callbackID) + arg);
 },
 GetCallbackMethod: function(command){
  return this.callBack;
 },
 CanCreateCallback: function() {
  return !this.InCallback() || (this.allowMultipleCallbacks && !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing);
 },
 DoLoadCallbackScripts: function() {
  _aspxProcessScriptsAndLinks(this.name, true);
 },
 DoEndCallback: function() {
  if(this.IsCallbackAnimationEnabled() && this.CheckEndCallbackAnimationNeeded())
   return;
  this.requestCount--;
  if(this.HideLoadingPanelOnCallback() && this.requestCount < 1)
   this.HideLoadingElements();
  if(this.enableSwipeGestures && this.supportGestures) {
   ASPxGesturesHelper.UpdateSwipeAnimationContainer(this.name);
   if(this.touchUIMouseScroller)
    this.touchUIMouseScroller.update();
  }
  this.isCallbackAnimationPrevented = false;
  this.OnCallbackFinalized();
  this.RaiseEndCallback();
 },
 DoFinalizeCallback: function() {
 },
 OnCallbackFinalized: function() {
 },
 HideLoadingPanelOnCallback: function() {
  return true;
 },
 ShouldHideExistingLoadingElements: function() {
  return true;
 },
 EvalCallbackResult: function(resultString){
  return eval(resultString)
 },
 DoCallback: function(result) {
  if(this.IsCallbackAnimationEnabled() && this.CheckBeginCallbackAnimationInProgress(result))
   return;
  result = _aspxTrim(result);
  if(result.indexOf(__aspxCallbackResultPrefix) != 0)
   this.ProcessCallbackGeneralError(result);
  else {
   var resultObj = null;
   try {
    resultObj = this.EvalCallbackResult(result);
   }
   catch(e) {
   }
   if(resultObj) {
    if(resultObj.redirect){
     if(!__aspxIE)
      window.location.href = resultObj.redirect;
     else {
      var fakeLink = document.createElement("a");
      fakeLink.href = resultObj.redirect;
      document.body.appendChild(fakeLink);
      fakeLink.click();
     }
    }
    else if(resultObj.generalError){
     this.ProcessCallbackGeneralError(resultObj.generalError);
    }
    else {
     var errorObj = resultObj.error;
     if(errorObj)
      this.ProcessCallbackError(errorObj);
     else {
      if(resultObj.cp) {
       for(var name in resultObj.cp)
        this[name] = resultObj.cp[name];
      }
      var callbackInfo = this.DequeueCallbackInfo(resultObj.id);
      if(callbackInfo.type == ASPxCallbackType.Data)
       this.ProcessCustomDataCallback(resultObj.result, callbackInfo);
      else
       this.ProcessCallback(resultObj.result);
     }
    }
   }
  }
  this.DoLoadCallbackScripts();
 },
 DoCallbackError: function(result) {
  this.HideLoadingElements();
  this.ProcessCallbackGeneralError(result);
 },
 DoControlClick: function(evt) {
  this.OnControlClick(_aspxGetEventSource(evt), evt);
 },
 ProcessCallback: function(result) {
  this.OnCallback(result);
 },
 ProcessCustomDataCallback: function(result, callbackInfo) {
  if(callbackInfo.handler != null)
   callbackInfo.handler(this, result);
  this.RaiseCustomDataCallback(result);
 },
 RaiseCustomDataCallback: function(result) {
  if(!this.CustomDataCallback.IsEmpty()) {
   var arg = new ASPxClientCustomDataCallbackEventArgs(result);
   this.CustomDataCallback.FireEvent(this, arg);
  }
 },
 OnCallback: function(result) {
 },
 CreateCallbackInfo: function(type, handler) {
  return { type: type, handler: handler };
 },
 GetSerializedCallbackInfoByID: function(callbackID) {
  return this.GetCallbackInfoByID(callbackID).type + callbackID + __aspxCallbackSeparator;
 },
 SaveCallbackInfo: function(callbackInfo) {
  var activeCallbacksInfo = this.GetActiveCallbacksInfo();
  for(var i = 0; i < activeCallbacksInfo.length; i++) {
   if(activeCallbacksInfo[i] == null) {
    activeCallbacksInfo[i] = callbackInfo;
    return i;
   }
  }
  activeCallbacksInfo.push(callbackInfo);
  return activeCallbacksInfo.length - 1;
 },
 GetActiveCallbacksInfo: function() {
  var persistentProperties = this.GetPersistentProperties();
  if(!persistentProperties.activeCallbacks)
   persistentProperties.activeCallbacks = [ ];
  return persistentProperties.activeCallbacks;
 },
 GetPersistentProperties: function() {
  var storage = _aspxGetPersistentControlPropertiesStorage();
  var persistentProperties = storage[this.name];
  if(!persistentProperties) {
   persistentProperties = { };
   storage[this.name] = persistentProperties;
  }
  return persistentProperties;
 },
 GetCallbackInfoByID: function(callbackID) {
  return this.GetActiveCallbacksInfo()[callbackID];
 },
 DequeueCallbackInfo: function(index) {
  var activeCallbacksInfo = this.GetActiveCallbacksInfo();
  if(index < 0 || index >= activeCallbacksInfo.length)
   return null;
  var result = activeCallbacksInfo[index];
  activeCallbacksInfo[index] = null;
  return result;
 },
 ProcessCallbackError: function(errorObj) {
  var data = _aspxIsExists(errorObj.data) ? errorObj.data : null;
  var result = this.RaiseCallbackError(errorObj.message);
  if(result.isHandled)
   this.OnCallbackErrorAfterUserHandle(result.errorMessage, data);
  else
   this.OnCallbackError(result.errorMessage, data);
 },
 OnCallbackError: function(errorMessage, data) {
  if(errorMessage)
   alert(errorMessage);
 },
 OnCallbackErrorAfterUserHandle: function(errorMessage, data) {
 },
 ProcessCallbackGeneralError: function(errorMessage) {
  var result = this.RaiseCallbackError(errorMessage);
  if(!result.isHandled)
   this.OnCallbackGeneralError(result.errorMessage);
 },
 OnCallbackGeneralError: function(errorMessage) {
  this.OnCallbackError(errorMessage, null);
 },
 SendPostBack: function(params) {
  if(typeof(__doPostBack) != "undefined")
   __doPostBack(this.uniqueID, params);
  else{
   var form = this.GetParentForm();
   if(form) form.submit();
  }
 }
});
ASPxClientControl.AdjustControls = function(container, collapseControls){
 aspxGetControlCollection().AdjustControls(container, collapseControls);
};
ASPxClientControl.Cast = function(obj) {
 if(typeof obj == "string")
  return window[obj];
 return obj;
};
ASPxClientControl.GetControlCollection = function(){
 return aspxGetControlCollection();
}
var __aspxControlCollection = null;
function aspxGetControlCollection(){
 if(__aspxControlCollection == null)
  __aspxControlCollection = new ASPxClientControlCollection();
 return __aspxControlCollection;
}
var __aspxPersistentControlPropertiesStorage = null;
function _aspxGetPersistentControlPropertiesStorage() {
 if(__aspxPersistentControlPropertiesStorage == null)
  __aspxPersistentControlPropertiesStorage = { };
 return __aspxPersistentControlPropertiesStorage;
}
function _aspxFunctionIsInCallstack(currentCallee, targetFunction, depthLimit) {
 var candidate = currentCallee;
 var depth = 0;
 while(candidate && depth <= depthLimit) {
  candidate = candidate.caller;
  if(candidate == targetFunction)
   return true;
  depth++;
 }
 return false;
}
function aspxCAInit() {
 var isAppInit = typeof(Sys$_Application$initialize) != "undefined" &&
  _aspxFunctionIsInCallstack(arguments.callee, Sys$_Application$initialize, 10 );
 aspxGetControlCollection().AtlasInitialize(!isAppInit);
}
function aspxCreateCallback(name, arg, command, callbackID){
 var control = aspxGetControlCollection().Get(name);
 if(control != null)
  control.CreateCallbackCore(unescape(arg), unescape(command), callbackID);
}
function aspxCallback(result, context){
 var collection = aspxGetControlCollection();
 collection.DoFinalizeCallback();
 var control = collection.Get(context);
 if(control != null)
  control.DoCallback(result);
}
function aspxCallbackError(result, context){
 var control = aspxGetControlCollection().Get(context);
 if(control != null)
  control.DoCallbackError(result, false);
}
function aspxCClick(name, evt) {
 var control = aspxGetControlCollection().Get(name);
 if(control != null) control.DoControlClick(evt);
}
_aspxAttachEventToElement(window, "resize", aspxGlobalWindowResize);
function aspxGlobalWindowResize(evt){
 aspxGetControlCollection().OnBrowserWindowResize(evt);
}
_aspxAttachEventToElement(window.document, "DOMContentLoaded", aspxClassesDOMContentLoaded);
function aspxClassesDOMContentLoaded(evt){
 aspxGetControlCollection().DOMContentLoaded();
}
_aspxAttachEventToElement(window, "load", aspxClassesWindowOnLoad);
function aspxClassesWindowOnLoad(evt){
 __aspxDocumentLoaded = true;
 _aspxSweepDuplicatedLinks();
 ASPxResourceManager.SynchronizeResources();
 aspxGetControlCollection().Initialize();
 _aspxInitializeScripts();
 _aspxInitializeLinks();
 _aspxInitializeFocus();
}
ASPxIdent = { };
ASPxIdent.IsDate = function(obj) {
 return obj && obj.constructor == Date;
};
ASPxIdent.IsRegExp = function(obj) {
 return obj && obj.constructor === RegExp;
};
ASPxIdent.IsArray = function(obj) {
 return obj && obj.constructor == Array;
};
ASPxIdent.IsASPxClientControl = function(obj) {
 return obj && obj.isASPxClientControl;
};
ASPxIdent.IsASPxClientEdit = function(obj) {
 return obj && obj.isASPxClientEdit;
};
ASPxIdent.IsASPxClientRadioButtonList = function(obj) {
 return obj && obj.isASPxClientRadioButtonList;
};
ASPxClientPagerCommands = {
 Next : "PBN",
 Prev : "PBP",
 Last : "PBL",
 First : "PBF",
 PageNumber : "PN",
 PageSize : "PSP"
};
if(_aspxIsFunction(window.WebForm_InitCallbackAddField)) {
 (function() {
  var original = window.WebForm_InitCallbackAddField;
  window.WebForm_InitCallbackAddField = function(name, value) {
   if(typeof(name) == "string" && name)
    original.apply(null, arguments);
  };
 })();
}
function aspxFireDefaultButton(evt, buttonID) {
 if(_aspxIsDefaultButtonEvent(evt, buttonID)) {
  var defaultButton = _aspxGetElementById(buttonID);
  if(defaultButton && defaultButton.click) {
   if(_aspxIsFocusable(defaultButton))
    defaultButton.focus();
   _aspxDoElementClick(defaultButton);
   _aspxPreventEventAndBubble(evt);
   return false;
  }
 }
 return true;
}
function _aspxIsDefaultButtonEvent(evt, defaultButtonID) {
 if(evt.keyCode != ASPxKey.Enter)
  return false;
 var srcElement = _aspxGetEventSource(evt);
 if(!srcElement || srcElement.id === defaultButtonID)
  return true;
 var tagName = srcElement.tagName;
 var type = srcElement.type;
 return tagName != "TEXTAREA" && tagName != "BUTTON" && tagName != "A" &&
  (tagName != "INPUT" || type != "checkbox" && type != "radio" && type != "button" && type != "submit" && type != "reset");
}
ASPxPostHandler = _aspxCreateClass(null, {
 constructor: function() {
  this.Post = new ASPxClientEvent();
  this.PostFinalization = new ASPxClientEvent();
  this.observableForms = [];
  this.ReplaceGlobalPostFunctions();
  this.HandleDxCallbackBeginning();
  this.HandleMSAjaxRequestBeginning();
 },
 Update: function() {
  this.ReplaceFormsSubmit(true);
 },
 OnPost: function(ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
  var args = new ASPxClientPostHandlerOnPostEventArgs(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
  this.Post.FireEvent(this, args);
  if(args.cancel)
   return false;
  this.PostFinalization.FireEvent(this, ASPxClientEventArgs.Empty);
  return true;
 },
 ReplaceGlobalPostFunctions: function() {
  if(_aspxIsFunction(window.__doPostBack))
   this.ReplaceDoPostBack();
  if(_aspxIsFunction(window.WebForm_DoCallback))
   this.ReplaceDoCallback();
  this.ReplaceFormsSubmit();
 },
 HandleDxCallbackBeginning: function() {
  aspxGetControlCollection().BeforeInitCallback.AddHandler(function(s, e) {
   _aspxRaisePostHandlerOnPost(e.callbackOwnerID, true, false, true);
  });
 },
 HandleMSAjaxRequestBeginning: function() {
  if(window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager && Sys.WebForms.PageRequestManager.getInstance) {
   var pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
   if(pageRequestManager != null && ASPxIdent.IsArray(pageRequestManager._onSubmitStatements)) {
    pageRequestManager._onSubmitStatements.unshift(function() {
     var postbackSettings = Sys.WebForms.PageRequestManager.getInstance()._postBackSettings;
     var postHandler = aspxGetPostHandler();
     _aspxRaisePostHandlerOnPost(postbackSettings.asyncTarget, true, true);
     return !postHandler.cancelPostProcessing;
    });
   }
  }
 },
 ReplaceDoPostBack: function() {
  var original = __doPostBack;
  __doPostBack = function(eventTarget, eventArgument) {
   var postHandler = aspxGetPostHandler();
   _aspxRaisePostHandlerOnPost(eventTarget);
   if(postHandler.cancelPostProcessing)
    return;
   original(eventTarget, eventArgument);
  };
 },
 ReplaceDoCallback: function() {
  var original = WebForm_DoCallback;
  WebForm_DoCallback = function(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync) {
   var postHandler = aspxGetPostHandler();
   if(postHandler.dxCallbackHandled)
    delete postHandler.dxCallbackHandled;
   else
    _aspxRaisePostHandlerOnPost(eventTarget, true);
   if(postHandler.cancelPostProcessing)
    return;
   return original(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync);
  };
 },
 ReplaceFormsSubmit: function(checkObservableCollection) {
  for(var i = 0; i < document.forms.length; i++) {
   var form = document.forms[i];
   if(checkObservableCollection && _aspxArrayIndexOf(this.observableForms, form) >= 0)
    continue;
   if(form.submit)
    this.ReplaceFormSubmit(form);
   this.ReplaceFormOnSumbit(form);
   this.observableForms.push(form);
  }
 },
 ReplaceFormSubmit: function(form) {
  var originalSubmit = form.submit;
  form.submit = function() {
   var postHandler = aspxGetPostHandler();
   _aspxRaisePostHandlerOnPost();
   if(postHandler.cancelPostProcessing)
    return false;
   var callee = arguments.callee;
   this.submit = originalSubmit;
   var submitResult = this.submit();
   this.submit = callee;
   return submitResult;
  };
  form = null;
 },
 ReplaceFormOnSumbit: function(form) {
  var originalSubmit = form.onsubmit;
  form.onsubmit = function() {
   var postHandler = aspxGetPostHandler();
   if(postHandler.msAjaxRequestBeginningHandled)
    delete postHandler.msAjaxRequestBeginningHandled;
   else
    _aspxRaisePostHandlerOnPost();
   if(postHandler.cancelPostProcessing)
    return false;
   return _aspxIsFunction(originalSubmit)
    ? originalSubmit.apply(this, arguments)
    : true;
  };
  form = null;
 }
});
function _aspxRaisePostHandlerOnPost(ownerID, isCallback, isMSAjaxRequestBeginning, isDXCallbackBeginning) {
 var postHandler = aspxGetPostHandler();
 if(isMSAjaxRequestBeginning)
  postHandler.msAjaxRequestBeginningHandled = true;
 else if(isDXCallbackBeginning)
  postHandler.dxCallbackHandled = true;
 postHandler.cancelPostProcessing = !postHandler.OnPost(ownerID, isCallback, isMSAjaxRequestBeginning, isDXCallbackBeginning);
}
function aspxGetPostHandler() {
 if (!window.__aspxPostHandler)
  window.__aspxPostHandler = new ASPxPostHandler();
 return window.__aspxPostHandler;
}
ASPxClientBeforeInitCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(callbackOwnerID){
  this.constructor.prototype.constructor.call(this);
  this.callbackOwnerID = callbackOwnerID;
 }
});
ASPxClientPostHandlerOnPostEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(ownerID, isCallback, isMSAjaxCallback, isDXCallback){
  this.constructor.prototype.constructor.call(this);
  this.ownerID = ownerID;
  this.isCallback = !!isCallback;
  this.isDXCallback = !!isDXCallback;
  this.isMSAjaxCallback = !!isMSAjaxCallback;
 }
});
ASPxResourceManager = {
 HandlerStr: "DXR.axd?r=",
 ResourceHashes: {},
 SynchronizeResources: function(method){
  if(!method){
   method = function(name, resource) {
    this.UpdateInputElements(name, resource);
   }.aspxBind(this);
  }
  var resources = this.GetResourcesData();
  for(var name in resources)
   method(name, resources[name]);
 },
 GetResourcesData: function(){
  return {
   DXScript: this.GetResourcesElementsString(_aspxGetIncludeScripts(), "src", "DXScript"),
   DXCss: this.GetResourcesElementsString(_aspxGetLinks(), "href", "DXCss")
  };
 },
 GetResourcesElementsString: function(elements, urlAttr, id){
  if(!this.ResourceHashes[id])
   this.ResourceHashes[id] = {};
  var hash = this.ResourceHashes[id];
  for(var i = 0; i < elements.length; i++) {
   var resourceUrl = _aspxGetAttribute(elements[i], urlAttr);
   if(resourceUrl) {
    var pos = resourceUrl.indexOf(this.HandlerStr);
    if(pos > -1){
     var list = resourceUrl.substr(pos + this.HandlerStr.length);
     var ampPos = list.lastIndexOf("-");
     if(ampPos > -1)
      list = list.substr(0, ampPos);
     var indexes = list.split(",");
     for(var j = 0; j < indexes.length; j++)
      hash[indexes[j]] = indexes[j];
    }
    else
     hash[resourceUrl] = resourceUrl;
   }
  }
  var array = [];
  for(var key in hash)
   array.push(key);
  return array.join(",");
 },
 UpdateInputElements: function(typeName, list){
  for(var i = 0; i < document.forms.length; i++){
   var inputElement = document.forms[i][typeName];
   if(!inputElement)
    inputElement = this.CreateInputElement(document.forms[i], typeName);
   inputElement.value = list;
  }
 },
 CreateInputElement: function(form, typeName){
  var inputElement = _aspxCreateHiddenField(typeName, typeName);
  form.appendChild(inputElement);
  return inputElement;
 }
};
var __aspxIncludeScriptPrefix = "dxis_";
var __aspxStartupScriptPrefix = "dxss_";
var __aspxIncludeScriptsCache = {};
var __aspxCreatedIncludeScripts = [];
var __aspxAppendedScriptsCount = 0;
var __aspxCallbackOwnerNames = [];
var __aspxScriptsRestartHandlers = { };
function _aspxGetScriptCode(script) {
 var useFirstChildElement = __aspxChrome && __aspxBrowserVersion < 11
  || __aspxSafari && __aspxBrowserVersion < 5;
 var text = useFirstChildElement ? script.firstChild.data : script.text;
 var comment = "<!--";
 var pos = text.indexOf(comment);
 if(pos > -1)
  text = text.substr(pos + comment.length);
 return text;
}
function _aspxAppendScript(script) {
 var parent = document.getElementsByTagName("head")[0];
 if(!parent)
  parent = document.body;
 if(parent)
  parent.appendChild(script);
}
function _aspxIsKnownIncludeScript(script) {
 return !!__aspxIncludeScriptsCache[script.src];
}
function _aspxCacheIncludeScript(script) {
 __aspxIncludeScriptsCache[script.src] = 1;
}
function _aspxProcessScriptsAndLinks(ownerName, isCallback) {
 if(!__aspxDocumentLoaded) return;
 _aspxProcessScripts(ownerName, isCallback);
 _aspxSweepDuplicatedLinks();
 _aspxMoveLinkElements();
 __aspxCachedRules = { };
}
function _aspxGetStartupScripts() {
 return _aspxGetScriptsCore(__aspxStartupScriptPrefix);
}
function _aspxGetIncludeScripts() {
 return _aspxGetScriptsCore(__aspxIncludeScriptPrefix);
}
function _aspxGetScriptsCore(prefix) {
 var result = [];
 var scripts = document.getElementsByTagName("SCRIPT");
 for(var i = 0; i < scripts.length; i++) {
  if (scripts[i].id.indexOf(prefix) == 0)
   result.push(scripts[i]);
 }
 return result;
}
function _aspxGetLinks() {
 var result = [];
 var links = document.getElementsByTagName("LINK");;
 for(var i = 0; i < links.length; i++)
  result[i] = links[i];
 return result;
}
function _aspxIsLinksLoaded() {
 var links = _aspxGetLinks();
 for(var i = 0, link; link = links[i]; i++) {
  if(link.readyState && link.readyState.toLowerCase() == "loading")
    return false;
  }
 return true;
}
function _aspxInitializeLinks() {
 var links = _aspxGetLinks();
 for(var i = 0; i < links.length; i++)
  links[i].loaded = true;
}
function _aspxInitializeScripts() {
 var scripts = _aspxGetIncludeScripts();
 for(var i = 0; i < scripts.length; i++)
  _aspxCacheIncludeScript(scripts[i]);
 var startupScripts = _aspxGetStartupScripts();
 for(var i = 0; i < startupScripts.length; i++)
  startupScripts[i].executed = true;
}
function _aspxSweepDuplicatedLinks() {
 var hash = { };
 var links = _aspxGetLinks();
 for(var i = 0; i < links.length; i++) {
  var href = links[i].href;
  if(!href)
   continue;
  if(hash[href]){
   if((__aspxIE || !hash[href].loaded) && links[i].loaded) {
    _aspxRemoveElement(hash[href]);
    hash[href] = links[i];
   }
   else
    _aspxRemoveElement(links[i]);
  }
  else
   hash[href] = links[i];
 }
}
function _aspxSweepDuplicatedScripts() {
 var hash = { };
 var scripts = _aspxGetIncludeScripts();
 for(var i = 0; i < scripts.length; i++) {
  var src = scripts[i].src;
  if(!src) continue;
  if(hash[src])
   _aspxRemoveElement(scripts[i]);
  else
   hash[src] = scripts[i];
 }
}
function _aspxProcessScripts(ownerName, isCallback) {
 var scripts = _aspxGetIncludeScripts();
 var previousCreatedScript = null;
 var firstCreatedScript = null;
 for(var i = 0; i < scripts.length; i++) {
  var script = scripts[i];
  if(script.src == "") continue;
  if(_aspxIsKnownIncludeScript(script))
   continue;
  var createdScript = document.createElement("script");
  createdScript.type = "text/javascript";
  createdScript.src = script.src;
  createdScript.id = script.id;
  function AreScriptsEqual(script1, script2) {
   return script1.src == script2.src;
  }
  if(_aspxArrayIndexOf(__aspxCreatedIncludeScripts, createdScript, AreScriptsEqual) >= 0)
   continue;
  __aspxCreatedIncludeScripts.push(createdScript);
  _aspxRemoveElement(script);
  if(__aspxIE && __aspxBrowserVersion < 9) {
   createdScript.onreadystatechange = new Function("_aspxOnScriptReadyStateChangedCallback(this, " + isCallback + ");");
  } else if(__aspxWebKitFamily || (__aspxFirefox && __aspxBrowserVersion >= 4) || __aspxIE && __aspxBrowserVersion >= 9) {
   createdScript.onload = new Function("_aspxOnScriptLoadCallback(this, " + isCallback + ");");
   if(firstCreatedScript == null)
    firstCreatedScript = createdScript;
   createdScript.nextCreatedScript = null;
   if(previousCreatedScript != null)
    previousCreatedScript.nextCreatedScript = createdScript;
   previousCreatedScript = createdScript;
  } else {
   createdScript.onload = new Function("_aspxOnScriptLoadCallback(this);");
   _aspxAppendScript(createdScript);
   _aspxCacheIncludeScript(createdScript);
  }
 }
 if(firstCreatedScript != null) {
  _aspxAppendScript(firstCreatedScript);
  _aspxCacheIncludeScript(firstCreatedScript);
 }
 if(isCallback)
  __aspxCallbackOwnerNames.push(ownerName);
 if(__aspxCreatedIncludeScripts.length == 0)
  _aspxFinalizeScriptProcessing(isCallback);
}
function _aspxFinalizeScriptProcessing(isCallback) {
 __aspxCreatedIncludeScripts = [];
 __aspxAppendedScriptsCount = 0;
 _aspxSweepDuplicatedScripts();
 _aspxRunStartupScripts(isCallback);
 ASPxResourceManager.SynchronizeResources();
}
var __aspxStartupScriptsRunning = false;
function _aspxRunStartupScripts(isCallback) {
 __aspxStartupScriptsRunning = true;
 try {
  _aspxRunStartupScriptsCore();
 }
 finally {
  __aspxStartupScriptsRunning = false;
 }
 if(__aspxDocumentLoaded) {
  aspxGetControlCollection().InitializeElements(isCallback);
  for(var key in __aspxScriptsRestartHandlers)
   __aspxScriptsRestartHandlers[key]();
  _aspxRunEndCallbackScript();
 }
}
function _aspxRunStartupScriptsCore() {
 var scripts = _aspxGetStartupScripts();
 var code;
 for(var i = 0; i < scripts.length; i++){
  if(!scripts[i].executed) {
   code = _aspxGetScriptCode(scripts[i]);
   eval(code);
   scripts[i].executed = true;
  }
 }
}
function _aspxRunEndCallbackScript() {
 while(__aspxCallbackOwnerNames.length > 0) {
  var callbackOwnerName = __aspxCallbackOwnerNames.pop();
  var callbackOwner = aspxGetControlCollection().Get(callbackOwnerName);
  if(callbackOwner)
   callbackOwner.DoEndCallback();
 }
}
function _aspxOnScriptReadyStateChangedCallback(scriptElement, isCallback) {
 if(scriptElement.readyState == "loaded") {
  _aspxCacheIncludeScript(scriptElement);
  for(var i = 0; i < __aspxCreatedIncludeScripts.length; i++) {
   var script = __aspxCreatedIncludeScripts[i];
   if(_aspxIsKnownIncludeScript(script)) {
    if(!script.executed) {
     script.executed = true;
     _aspxAppendScript(script);
     __aspxAppendedScriptsCount++;
    }
   } else
    break;
  }
  if(__aspxCreatedIncludeScripts.length == __aspxAppendedScriptsCount)
   _aspxFinalizeScriptProcessing(isCallback);
 }
}
function _aspxOnScriptLoadCallback(scriptElement, isCallback) {
 __aspxAppendedScriptsCount++;
 if(scriptElement.nextCreatedScript) {
  _aspxAppendScript(scriptElement.nextCreatedScript);
  _aspxCacheIncludeScript(scriptElement.nextCreatedScript);
 }
 if(__aspxCreatedIncludeScripts.length == __aspxAppendedScriptsCount)
  _aspxFinalizeScriptProcessing(isCallback);
}
function _aspxAddScriptsRestartHandler(objectName, handler) {
 __aspxScriptsRestartHandlers[objectName] = handler;
}
function _aspxMoveLinkElements() {
 var head = _aspxGetElementsByTagName(document, "head")[0];
 var bodyLinks = _aspxGetElementsByTagName(document.body, "link");
 if(head && bodyLinks.length > 0){
  var headLinks = _aspxGetElementsByTagName(head, "link");
  var dxLinkAnchor = head.firstChild;
  for(var i = 0; i < headLinks.length; i++){
   if(headLinks[i].href.indexOf(ASPxResourceManager.HandlerStr) > -1)
    dxLinkAnchor = headLinks[i].nextSibling;
  }
  while(bodyLinks.length > 0)
   head.insertBefore(bodyLinks[0], dxLinkAnchor);
 }
}
ASPxIFrame = _aspxCreateClass(null, {
 constructor: function(params) {
  this.params = params || {};
  this.params.src = this.params.src || "";
  this.CreateElements();
 },
 CreateElements: function() {
  var elements = ASPxIFrame.Create(this.params);
  this.containerElement = elements.container;
  this.iframeElement = elements.iframe;
  this.AttachOnLoadHandler(this, this.iframeElement);
  this.SetLoading(true);
  if(this.params.onCreate)
   this.params.onCreate(this.containerElement, this.iframeElement);
 },
 AttachOnLoadHandler: function(instance, element) {
  _aspxAttachEventToElement(element, "load", function() {
   instance.OnLoad(element);
  });
 },
 OnLoad: function(element) {
  this.SetLoading(false, element);
  if(!element.preventCustomOnLoad && this.params.onLoad)
   this.params.onLoad();
 },
 IsLoading: function(element) {
  element = element || this.iframeElement;
  if(element)
   return element.loading;
  return false;
 },
 SetLoading: function(value, element) {
  element = element || this.iframeElement;
  if(element)
   element.loading = value;
 },
 GetContentUrl: function() {
  return this.params.src;
 },
 SetContentUrl: function(url, preventBrowserCaching) {
  if(url) {
   this.params.src = url;
   if(preventBrowserCaching)
    url = ASPxIFrame.AddRandomParamToUrl(url);
   this.SetLoading(true);
   this.iframeElement.src = url;
  }
 },
 RefreshContentUrl: function() {
  if(this.IsLoading())
   return;
  this.SetLoading(true);
  var oldContainerElement = this.containerElement;
  var oldIframeElement = this.iframeElement;
  var postfix = "_del" + Math.floor(Math.random()*100000).toString();
  if(this.params.id)
   oldIframeElement.id = this.params.id + postfix;
  if(this.params.name)
   oldIframeElement.name = this.params.name + postfix;
  _aspxSetStyles(oldContainerElement, { height: 0 });
  this.CreateElements();
  oldIframeElement.preventCustomOnLoad = true;
  oldIframeElement.src = ASPx.BlankUrl;
  window.setTimeout(function() {
   oldContainerElement.parentNode.removeChild(oldContainerElement);
  }, 10000);
 }
});
ASPxIFrame.Create = function(params) {
 var iframeHtmlStringParts = [ "<iframe frameborder='0'" ];
 if(params) {
  if(params.id)
   iframeHtmlStringParts.push(" id='", params.id, "'");
  if(params.name)
   iframeHtmlStringParts.push(" name='", params.name, "'");
  if(params.title)
   iframeHtmlStringParts.push(" title='", params.title, "'");
  if(params.scrolling)
   iframeHtmlStringParts.push(" scrolling='", params.scrolling, "'");
  if(params.src)
   iframeHtmlStringParts.push(" src='", params.src, "'");
 }
 iframeHtmlStringParts.push("></iframe>");
 var containerElement = _aspxCreateHtmlElementFromString("<div style='border-width: 0px; padding: 0px; margin: 0px'></div>");
 var iframeElement = _aspxCreateHtmlElementFromString(iframeHtmlStringParts.join(""));
 containerElement.appendChild(iframeElement);
 return {
  container: containerElement,
  iframe: iframeElement
 };
};
ASPxIFrame.AddRandomParamToUrl = function(url) {
 var prefix = url.indexOf("?") > -1
  ? "&"
  : "?";
 var param = prefix + Math.floor(Math.random()*100000).toString();
 var anchorIndex = url.indexOf("#");
 return anchorIndex == -1
  ? url + param
  : url.substr(0, anchorIndex) + param + url.substr(anchorIndex);
};
ASPxIFrame.GetWindow = function(name) {
 if(__aspxIE)
  return window.frames[name].window;
 else{
  var frameElement = document.getElementById(name);
  return (frameElement != null) ? frameElement.contentWindow : null;
 }
};
ASPxIFrame.GetDocument = function(name) {
 var frameElement;
 if(__aspxIE) {
  frameElement = window.frames[name];
  return (frameElement != null) ? frameElement.document : null;
 }
 else {
  frameElement = document.getElementById(name);
  return (frameElement != null) ? frameElement.contentDocument : null;
 }
};
ASPxIFrame.GetDocumentBody = function(name) {
 var doc = ASPxIFrame.GetDocument(name);
 return (doc != null) ? doc.body : null;
};
ASPxIFrame.GetElement = function(name) {
 if(__aspxIE)
  return window.frames[name].window.frameElement;
 else
  return document.getElementById(name);
};
ASPxKbdHelper = _aspxCreateClass(null, {
 constructor: function(control) {
  this.control = control;
 },
 Init: function() {
  ASPxKbdHelper.GlobalInit();
  var element = this.GetFocusableElement();
  element.tabIndex = Math.max(element.tabIndex, 0);
  var instance = this;
  _aspxAttachEventToElement(element, "click", function(e) {
   instance.HandleClick(e);
  });
  _aspxAttachEventToElement(element, "focus", function(e) {
   if(!instance.CanFocus(e))
    return true;
   ASPxKbdHelper.active = instance;
  });
  _aspxAttachEventToElement(element, "blur", function() {
   delete ASPxKbdHelper.active;
  });
 },
 GetFocusableElement: function() { return this.control.GetMainElement(); },
 CanFocus: function(e) {
  var tag = _aspxGetEventSource(e).tagName;
  if(tag == "A" || tag == "TEXTAREA" || tag == "INPUT" || tag == "SELECT" || tag == "IFRAME" || tag == "OBJECT")
   return false;
  return true;
 },
 HandleClick: function(e) {
  if(!this.CanFocus(e))
   return;
  this.Focus();
 },
 Focus: function() {
  try {
   this.GetFocusableElement().focus();
  } catch(e) {
  }
 },
 HandleKeyDown: function(e) { },
 HandleKeyPress: function(e) { },
 HandleKeyUp: function(e) { }
});
ASPxKbdHelper.GlobalInit = function() {
 if(ASPxKbdHelper.ready)
  return;
 _aspxAttachEventToDocument("keydown", ASPxKbdHelper.OnKeyDown);
 _aspxAttachEventToDocument("keypress", ASPxKbdHelper.OnKeyPress);
 _aspxAttachEventToDocument("keyup", ASPxKbdHelper.OnKeyUp);
 ASPxKbdHelper.ready = true;
};
ASPxKbdHelper.swallowKey = false;
ASPxKbdHelper.accessKeys = { };
ASPxKbdHelper.ProcessKey = function(e, actionName) {
 if(!ASPxKbdHelper.active)
  return;
 if(ASPxKbdHelper.active.GetFocusableElement() !== _aspxGetFocusedElement())
  return;
 var ctl = ASPxKbdHelper.active.control;
 if(ctl !== aspxGetControlCollection().Get(ctl.name)) {
  delete ASPxKbdHelper.active;
  return;
 }
 if(!ASPxKbdHelper.swallowKey)
  ASPxKbdHelper.swallowKey = ASPxKbdHelper.active[actionName](e);
 if(ASPxKbdHelper.swallowKey)
  _aspxPreventEvent(e);
};
ASPxKbdHelper.OnKeyDown = function(e) {
 ASPxKbdHelper.swallowKey = false;
 if(e.ctrlKey && e.shiftKey && ASPxKbdHelper.TryAccessKey(_aspxGetKeyCode(e)))
  _aspxPreventEvent(e);
 else
  ASPxKbdHelper.ProcessKey(e, "HandleKeyDown");
};
ASPxKbdHelper.OnKeyPress = function(e) { ASPxKbdHelper.ProcessKey(e, "HandleKeyPress"); };
ASPxKbdHelper.OnKeyUp = function(e) { ASPxKbdHelper.ProcessKey(e, "HandleKeyUp"); };
ASPxKbdHelper.RegisterAccessKey = function(obj) {
 var key = obj.accessKey;
 if(!key) return;
 ASPxKbdHelper.accessKeys[key.toLowerCase()] = obj.name;
};
ASPxKbdHelper.TryAccessKey = function(code) {
 var name = ASPxKbdHelper.accessKeys[String.fromCharCode(code).toLowerCase()];
 if(!name) return false;
 var obj = aspxGetControlCollection().Get(name);
 if(!obj) return false;
 var el = obj.GetMainElement();
 if(!el) return false;
 el.focus();
 return true;
};
var __aspxFocusedElement = null;
function aspxOnElementFocused(evt) {
 evt = _aspxGetEvent(evt);
 if(evt && evt.target)
  __aspxFocusedElement = evt.target;
}
function _aspxInitializeFocus() {
 if(!_aspxGetActiveElement())
  _aspxAttachEventToDocument("focus", aspxOnElementFocused);
}
function _aspxGetFocusedElement() {
 var activeElement = _aspxGetActiveElement();
 return activeElement ? activeElement : __aspxFocusedElement;
}
function _aspxChangeElementContainer(element, container, savePreviousContainer) {
 if(element.parentNode != container) {
  var parentNode = element.parentNode;
  parentNode.removeChild(element);
  container.appendChild(element);
  if(savePreviousContainer)
   element.previousContainer = parentNode;
 }
}
function _aspxRestoreElementContainer(element) {
 if(element.previousContainer) {
  _aspxChangeElementContainer(element, element.previousContainer, false);
  element.previousContainer = null;
 }
}
var ASPxCacheHelper = {};
ASPxCacheHelper.GetCachedValue = function(obj, cacheName, func, cacheObj) {
 if(!cacheObj)
  cacheObj = obj;
 if(!cacheObj.cache)
  cacheObj.cache = {};
 if(!_aspxIsExists(cacheObj.cache[cacheName]))
  cacheObj.cache[cacheName] = func.apply(obj, []);
 return cacheObj.cache[cacheName];
};
ASPxCacheHelper.DropCachedValue = function(cacheObj, cacheName) {
 cacheObj.cache[cacheName] = null;
};
ASPxClientTemporaryCache = _aspxCreateClass(null, {
 constructor: function() {
  this.cache = { };
  this.invalidateTimerID = -1;
 },
 Get: function(key, getObjectFunc, context, args) {
  if(this.invalidateTimerID < 0) {
   this.invalidateTimerID = window.setTimeout(function() {
    this.Invalidate();
   }.aspxBind(this), 0);
  }
  if(!_aspxIsExists(this.cache[key])) {
   if(!_aspxIsExists(args))
    args = [ ];
   this.cache[key] = getObjectFunc.apply(context, args);
  }
  return this.cache[key];
 },
 Invalidate: function() {
  this.cache = { };
  this.invalidateTimerID = _aspxClearTimer(this.invalidateTimerID);
 }
});
ASPxClientCheckBoxCheckState = {
 Checked : "Checked",
 Unchecked : "Unchecked",
 Indeterminate : "Indeterminate"
};
ASPxClientCheckBoxInputKey = {
 Checked : "C",
 Unchecked : "U",
 Indeterminate : "I"
};
ASPxCheckableElementStateController = _aspxCreateClass(null, {
 constructor: function(imageProperties) {
  this.checkBoxStates = [];
  this.imageProperties = imageProperties;
 },
 GetValueByInputKey: function(inputKey) {
  return this.GetFirstValueBySecondValue("Value", "StateInputKey", inputKey);
 },
 GetInputKeyByValue: function(value) {
  return this.GetFirstValueBySecondValue("StateInputKey", "Value", value);
 },
 GetImagePropertiesNumByInputKey: function(value) {
  return this.GetFirstValueBySecondValue("ImagePropertiesNumber", "StateInputKey", value);
 },
 GetNextCheckBoxValue: function(currentValue, allowGrayed) {
  var currentInputKey = this.GetInputKeyByValue(currentValue);
  var nextInputKey = '';
  switch(currentInputKey) {
   case ASPxClientCheckBoxInputKey.Checked:
    nextInputKey = ASPxClientCheckBoxInputKey.Unchecked; break;
   case ASPxClientCheckBoxInputKey.Unchecked:
    nextInputKey = allowGrayed ? ASPxClientCheckBoxInputKey.Indeterminate : ASPxClientCheckBoxInputKey.Checked; break;
   case ASPxClientCheckBoxInputKey.Indeterminate:
    nextInputKey = ASPxClientCheckBoxInputKey.Checked; break;
  }
  return this.GetValueByInputKey(nextInputKey);
 },
 GetCheckStateByInputKey: function(inputKey) {
  switch(inputKey) {
   case ASPxClientCheckBoxInputKey.Checked:
    return ASPxClientCheckBoxCheckState.Checked;
   case ASPxClientCheckBoxInputKey.Unchecked:
    return ASPxClientCheckBoxCheckState.Unchecked;
   case ASPxClientCheckBoxInputKey.Indeterminate:
    return ASPxClientCheckBoxCheckState.Indeterminate;
  }
 },
 GetValueByCheckState: function(checkState) {
  switch(checkState) {
   case ASPxClientCheckBoxCheckState.Checked:
    return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Checked);
   case ASPxClientCheckBoxCheckState.Unchecked:
    return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Unchecked);
   case ASPxClientCheckBoxCheckState.Indeterminate:
    return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Indeterminate);
  }
 },
 GetFirstValueBySecondValue: function(firstValueName, secondValueName, secondValue) {
  return this.GetValueByFunc(firstValueName,
   function(checkBoxState) { return checkBoxState[secondValueName] === secondValue; });
 },
 GetValueByFunc: function(valueName, func) {
  for(var i = 0; i < this.checkBoxStates.length; i++) {
   if(func(this.checkBoxStates[i]))
    return this.checkBoxStates[i][valueName];
  }
 },
 AssignElementClassName: function(element, cssClassPropertyKey, disabledCssClassPropertyKey, assignedClassName) {
  var classNames = [ ];
  for(var i = 0; i < this.imageProperties[cssClassPropertyKey].length; i++) {
   classNames.push(this.imageProperties[disabledCssClassPropertyKey][i]);
   classNames.push(this.imageProperties[cssClassPropertyKey][i]);
  }
  var elementClassName = element.className;
  for(var i = 0; i < classNames.length; i++) {
   var className = classNames[i];
   var index = elementClassName.indexOf(className);
   if(index > -1)
    elementClassName = elementClassName.replace((index == 0 ? '' : ' ') + className, "");
  }
  elementClassName += " " + assignedClassName;
  element.className = elementClassName;
 },
 UpdateInternalCheckBoxDecoration: function(mainElement, inputKey, enabled) {
  var imagePropertiesNumber = this.GetImagePropertiesNumByInputKey(inputKey);
  for (var imagePropertyKey in this.imageProperties) {
   var propertyValue = this.imageProperties[imagePropertyKey][imagePropertiesNumber];
   propertyValue = propertyValue || !isNaN(propertyValue) ? propertyValue : "";
   switch(imagePropertyKey) {
    case "0" : mainElement.title = propertyValue; break;
    case "1" : mainElement.style.width = propertyValue + (propertyValue != "" ? "px" : ""); break;
    case "2" : mainElement.style.height = propertyValue + (propertyValue != "" ? "px" : ""); break;
   }
   if(enabled) {
    switch(imagePropertyKey) {
     case "3" : this.SetImageSrc(mainElement, propertyValue); break;
     case "4" :
      this.AssignElementClassName(mainElement, "4", "8", propertyValue);
      break;
     case "5" : this.SetBackgroundPosition(mainElement, propertyValue, true); break;
     case "6" : this.SetBackgroundPosition(mainElement, propertyValue, false); break;
    }
   } else {
     switch(imagePropertyKey) {
     case "7" : this.SetImageSrc(mainElement, propertyValue); break;
     case "8" :
      this.AssignElementClassName(mainElement, "4", "8", propertyValue);
      break;
     case "9" : this.SetBackgroundPosition(mainElement, propertyValue, true); break;
     case "10" : this.SetBackgroundPosition(mainElement, propertyValue, false); break;
    }
   }
  }
 },
 SetImageSrc: function(mainElement, src) {
  if(src === ""){
   mainElement.style.backgroundImage = "";
   mainElement.style.backgroundPosition = "";
  }
  else{
   mainElement.style.backgroundImage = "url(" + src + ")";
   this.SetBackgroundPosition(mainElement, 0, true);
   this.SetBackgroundPosition(mainElement, 0, false);
  }
 },
 SetBackgroundPosition: function(element, value, isX) {
  if(value === "") {
   element.style.backgroundPosition = value;
   return;
  }
  if(element.style.backgroundPosition === "")
   element.style.backgroundPosition = isX ? "-" + value.toString() + "px 0px" : "0px -" + value.toString() + "px";
  else {
   var position = element.style.backgroundPosition.split(' ');
   element.style.backgroundPosition = isX ? '-' + value.toString() + "px " + position[1] :  position[0] + " -" + value.toString() + "px";
  }
 },
 AddState: function(value, stateInputKey, imagePropertiesNumber) {
  this.checkBoxStates.push({
   "Value" : value,
   "StateInputKey" : stateInputKey,
   "ImagePropertiesNumber" : imagePropertiesNumber
  });
 }
});
ASPxCheckableElementStateController.Create = function(imageProperties, valueChecked, valueUnchecked, valueGrayed, allowGrayed) {
 var stateController = new ASPxCheckableElementStateController(imageProperties);
 stateController.AddState(valueChecked, ASPxClientCheckBoxInputKey.Checked, 0);
 stateController.AddState(valueUnchecked, ASPxClientCheckBoxInputKey.Unchecked, 1);
 if(typeof(valueGrayed) != "undefined")
  stateController.AddState(valueGrayed, ASPxClientCheckBoxInputKey.Indeterminate, allowGrayed ? 2 : 1);
 stateController.allowGrayed = allowGrayed;
 return stateController;
};
ASPxCheckableElementHelper = _aspxCreateClass(null, {
 InternalCheckBoxInitialize: function(internalCheckBox) {
  this.AttachToMainElement(internalCheckBox);
  this.AttachToInputElement(internalCheckBox);
 },
 AttachToMainElement: function(internalCheckBox) {
  var instance = this;
  if(internalCheckBox.mainElement) {
    _aspxAttachEventToElement(internalCheckBox.mainElement, "click",
    function (evt) {
     instance.InvokeClick(internalCheckBox, evt);
     if(!internalCheckBox.disableCancelBubble)
      return _aspxPreventEventAndBubble(evt);
    }
   );
   _aspxAttachEventToElement(internalCheckBox.mainElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
   _aspxPreventElementDragAndSelect(internalCheckBox.mainElement, true);
  }
 },
 AttachToInputElement: function(internalCheckBox) {
  var instance = this;
  if(internalCheckBox.inputElement && internalCheckBox.mainElement) {
   _aspxAttachEventToElement(internalCheckBox.inputElement, "focus",
    function (evt) {
     if(!internalCheckBox.enabled)
      internalCheckBox.inputElement.blur();
     else
      internalCheckBox.OnFocus();
    }
   );
   _aspxAttachEventToElement(internalCheckBox.inputElement, "blur",
    function (evt) {
     internalCheckBox.OnLostFocus();
    }
   );
   _aspxAttachEventToElement(internalCheckBox.inputElement, "keyup",
    function (evt) {
     if(_aspxGetKeyCode(evt) == ASPxKey.Space)
      instance.InvokeClick(internalCheckBox, evt);
    }
   );
   _aspxAttachEventToElement(internalCheckBox.inputElement, "keydown",
    function (evt) {
     if(_aspxGetKeyCode(evt) == ASPxKey.Space)
      return _aspxPreventEvent(evt);
    }
   );
  }
 },
 IsKBSInputWrapperExist: function() {
  return __aspxOpera || __aspxWebKitFamily;
 },
 GetICBMainElementByInput: function(icbInputElement) {
  return this.IsKBSInputWrapperExist() ? icbInputElement.parentNode.parentNode : icbInputElement.parentNode;
 },
 InvokeClick: function(internalCheckBox, evt) {
   if(internalCheckBox.enabled && !internalCheckBox.readOnly) {
   var inputElementValue = internalCheckBox.inputElement.value;
   internalCheckBox.inputElement.focus();
   if(!__aspxIE)
    internalCheckBox.inputElement.value = inputElementValue;
   this.InvokeClickCore(internalCheckBox, evt)
   }
 },
 InvokeClickCore: function(internalCheckBox, evt) {
  internalCheckBox.OnClick(evt);
 }
});
ASPxCheckableElementHelper.Instance = new ASPxCheckableElementHelper();
ASPxClientCheckBoxInternal = _aspxCreateClass(null, {
 constructor: function(inputElement, stateController, allowGrayed, allowGrayedByClick, helper, container, storeValueInInput, key, disableCancelBubble) {
  this.inputElement = inputElement;
  this.mainElement = helper.GetICBMainElementByInput(this.inputElement);
  this.name = (key ? key : this.inputElement.id) + ASPxClientCheckBoxInternal.GetICBMainElementPostfix();
  this.mainElement.id = this.name;
  this.stateController = stateController;
  this.container = container;
  this.allowGrayed = allowGrayed;
  this.allowGrayedByClick = allowGrayedByClick;
  this.autoSwitchEnabled = true;
  this.storeValueInInput = !!storeValueInInput;
  this.storedInputKey = !this.storeValueInInput ? this.inputElement.value : null;
  this.disableCancelBubble = !!disableCancelBubble;
  this.focusDecoration = null;
  this.focused = false;
  this.focusLocked = false;
  this.enabled = true;
  this.readOnly = false;
  this.CheckedChanged = new ASPxClientEvent();
  this.Focus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  helper.InternalCheckBoxInitialize(this);
 },
 ChangeInputElementTabIndex: function() {
  var changeMethod = this.enabled ? _aspxRestoreTabIndexAttribute : _aspxSaveTabIndexAttributeAndReset;
  changeMethod(this.inputElement);
 },
 CreateFocusDecoration: function(focusedStyle) {
   this.focusDecoration = new ASPxClientEditStyleDecoration(this);
   this.focusDecoration.AddStyle('F', focusedStyle[0], focusedStyle[1]);
   this.focusDecoration.AddPostfix("");
 },
 UpdateFocusDecoration: function() {
  this.focusDecoration.Update();
 },
 StoreInputKey: function(inputKey) {
  if(this.storeValueInInput)
   this.inputElement.value = inputKey;
  else
   this.storedInputKey = inputKey;
 },
 GetStoredInputKey: function() {
  if(this.storeValueInInput)
   return this.inputElement.value;
  else
   return this.storedInputKey;
 },
 OnClick: function(e) {
  if(this.autoSwitchEnabled) {
   var currentValue = this.GetValue();
   var value = this.stateController.GetNextCheckBoxValue(currentValue, this.allowGrayedByClick && this.allowGrayed);
   this.SetValue(value);
  }
  this.CheckedChanged.FireEvent(this, e);
 },
 OnFocus: function() {
  if(!this.IsFocusLocked()) {
   this.focused = true;
   this.UpdateFocusDecoration();
   this.Focus.FireEvent(this, null);
  } else
   this.UnlockFocus();
 },
 OnLostFocus: function() {
   if(!this.IsFocusLocked()) {
   this.focused = false;
   this.UpdateFocusDecoration();
   this.LostFocus.FireEvent(this, null);
  }
 },
 Refocus: function() {
  if(this.focused) {
   this.LockFocus();
   this.inputElement.blur();
   _aspxSetFocus(this.inputElement);
  }
 },
 LockFocus: function() {
  this.focusLocked = true;
 },
 UnlockFocus: function() {
  this.focusLocked = false;
 },
 IsFocusLocked: function() {
  return this.focusLocked;
 },
 SetValue: function(value) {
  var currentValue = this.GetValue();
  if(currentValue !== value) {
   var newInputKey = this.stateController.GetInputKeyByValue(value);
   if(newInputKey) {
    this.StoreInputKey(newInputKey);
    this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, newInputKey, this.enabled);
   }
  }
 },
 GetValue: function() {
  return this.stateController.GetValueByInputKey(this.GetCurrentInputKey());
 },
 GetCurrentCheckState: function() {
  return this.stateController.GetCheckStateByInputKey(this.GetCurrentInputKey());
 },
 GetCurrentInputKey: function() {
  return this.GetStoredInputKey();
 },
 GetChecked: function() {
  return this.GetCurrentInputKey() === ASPxClientCheckBoxInputKey.Checked;
 },
 SetChecked: function(checked) {
  var newValue = this.stateController.GetValueByCheckState(checked ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
  this.SetValue(newValue);
 },
 SetEnabled: function(enabled) {
  if(this.enabled != enabled) {
   this.enabled = enabled;
   this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, this.GetCurrentInputKey(), this.enabled);
   this.ChangeInputElementTabIndex();
  }
 }
});
ASPxClientCheckBoxInternal.GetICBMainElementPostfix = function() {
 return "_D";
};
ASPxCheckBoxInternalCollection = _aspxCreateClass(null, {
 constructor: function(imageProperties, allowGrayed, storeValueInInput, helper, disableCancelBubble) {
  this.checkBoxes = {};
  this.stateController = allowGrayed
   ? ASPxCheckableElementStateController.Create(imageProperties, ASPxClientCheckBoxInputKey.Checked, ASPxClientCheckBoxInputKey.Unchecked, ASPxClientCheckBoxInputKey.Indeterminate, true)
   : ASPxCheckableElementStateController.Create(imageProperties, ASPxClientCheckBoxInputKey.Checked, ASPxClientCheckBoxInputKey.Unchecked);
  this.helper = helper || ASPxCheckableElementHelper.Instance;
  this.storeValueInInput = !!storeValueInInput;
  this.disableCancelBubble = !!disableCancelBubble;
 },
 Add: function(key, inputElement, container) {
  this.Remove(key);
  this.checkBoxes[key] = this.CreateInternalCheckBox(key, inputElement, container);
  return this.checkBoxes[key];
 },
 Clear: function(){
  this.checkBoxes = {};
 },
 Remove: function(key) {
  delete this.checkBoxes[key];
 },
 Get: function(id) {
  return this.checkBoxes[id];
 },
 SetImageProperties: function(imageProperties) {
  this.stateController.imageProperties = imageProperties;
 },
 CreateInternalCheckBox: function(key, inputElement, container) {
  return new ASPxClientCheckBoxInternal(inputElement, this.stateController, this.stateController.allowGrayed, false, this.helper, container, this.storeValueInInput, key, this.disableCancelBubble);
 }
});
ASPxClientEditStyleDecoration = _aspxCreateClass(null, {
 constructor: function(editor) {
  this.editor = editor;
  this.postfixList = [ ];
  this.styles = { };
  this.innerStyles = { };
 },
 GetStyleSheet: function() {
  if(!ASPxClientEditStyleDecoration.__sheet)
   ASPxClientEditStyleDecoration.__sheet = _aspxCreateStyleSheet();
  return ASPxClientEditStyleDecoration.__sheet;
 },
 AddPostfix: function(value, applyClass, applyBorders, applyBackground) {
  this.postfixList.push(value);
 },
 AddStyle: function(key, className, cssText) {
  this.styles[key] = this.CreateRule(className, cssText);
  this.innerStyles[key] = this.CreateRule("", this.FilterInnerCss(cssText));
 },
 CreateRule: function(className, cssText) {
  return _aspxTrim(className + " " + _aspxCreateImportantStyleRule(this.GetStyleSheet(), cssText));
 },
 Update: function() {
  for(var i = 0; i < this.postfixList.length; i++) {
   var postfix = this.postfixList[i];
   var inner = postfix.length > 0;
   var element = _aspxGetElementById(this.editor.name + postfix);
   if(!element) continue;
   if(this.HasDecoration("I")) {
    var isValid = this.editor.GetIsValid();
    this.ApplyDecoration("I", element, inner, !isValid);
   }
   if(this.HasDecoration("F"))
    this.ApplyDecoration("F", element, inner, this.editor.focused);
   if(this.HasDecoration("N")) {
    var apply = !this.editor.focused;
    if (apply) {
     if (this.editor.CanApplyNullTextDecoration) {
      apply = this.editor.CanApplyNullTextDecoration();
     } else {
      var value = this.editor.GetValue();
      apply = apply && (value == null || value === "");
     }
    }
    if(apply)
     _aspxChangeAttribute(element, "spellcheck", "false");
    else
     _aspxRestoreAttribute(element, "spellcheck");
    this.ApplyDecoration("N", element, inner, apply);
   }
  }
 },
 HasDecoration: function(key) {
  return !!this.styles[key];
 },
 ApplyDecoration: function(key, element, inner, active) {
  var value = inner ? this.innerStyles[key] : this.styles[key];
  element.className = element.className.replace(value, "");
  if(__aspxIE && __aspxBrowserMajorVersion >= 11)
   var reflow = element.offsetWidth;
  if(active) {
   element.className = _aspxTrim(element.className + " " + value);
   if (__aspxIE && __aspxBrowserVersion > 10 && element.border != null) {
    var border = parseInt(element.border) || 0;
    element.border = 1;
    element.border = border;
   }
  }
 },
 FilterInnerCss: function(css) {
  return css.replace(/(border|background-image)[^:]*:[^;]+/gi, "");
 }
});
var ASPxClientTouchUI = {
 isGesture: false,
 isMouseEventFromScrolling: false,
 isNativeScrollingAllowed: true,
 clickSensetivity: 10,
 documentTouchHandlers: {},
 documentEventAttachingAllowed: true,
 msTouchDraggableClassName: "dxMSTouchDraggable",
 touchMouseDownEventName: __aspxWebKitTouchUI ? "touchstart" : "mousedown",
 touchMouseUpEventName:   __aspxWebKitTouchUI ? "touchend"   : "mouseup",
 touchMouseMoveEventName: __aspxWebKitTouchUI ? "touchmove"  : "mousemove",
 isTouchEvent: function(evt) {
  return __aspxWebKitTouchUI && _aspxIsExists(evt.changedTouches);
 },
 isTouchEventName: function(eventName) {
  return __aspxWebKitTouchUI && (eventName.indexOf("touch") > -1 || eventName.indexOf("gesture") > -1);
 },
 getEventX: function(evt) {
  return evt.changedTouches[0].pageX;
 },
 getEventY: function (evt) {
  return evt.changedTouches[0].pageY;
 },
 getWebkitMajorVersion: function(){
  if(!this.webkitMajorVersion){
   var regExp = new RegExp("applewebkit/(\\d+)", "i");
   var matches = regExp.exec(__aspxUserAgent);
   if(matches && matches.index >= 1)
    this.webkitMajorVersion = matches[1];
  }
  return this.webkitMajorVersion;
 },
 getIsLandscapeOrientation: function(){
  if(__aspxMacOSMobilePlatform || __aspxAndroidMobilePlatform)
   return Math.abs(window.orientation) == 90;
  return _aspxGetDocumentClientWidth() > _aspxGetDocumentClientHeight();
 },
 nativeWebKitScrollingSupported: function() {
  return __aspxMacOSMobilePlatform && (__aspxBrowserVersion >= 5.1 || this.getWebkitMajorVersion() > 533)
   || __aspxAndroidMobilePlatform && __aspxPlaformMajorVersion >= 3;
 },
 makeScrollableIfRequired: function(element, options) {
  if(__aspxWebKitTouchUI && element) {
   var overflow = _aspxGetCurrentStyle(element).overflow;
   if (element.tagName == "DIV" &&  overflow != "hidden" && overflow != "visible" ){
    return this.MakeScrollable(element);
   }
  }
 },
 preventScrollOnEvent: function(evt){
 },
 handleFastTapIfRequired: function(evt, action, preventCommonClickEvents) {
  if(__aspxWebKitTouchUI && evt.type == 'touchstart' && action) {
   this.FastTapHelper.HandleFastTap(evt, action, preventCommonClickEvents);
   return true;
  }
  return false;
 },
 ensureDocumentSizesCorrect: function (){
  return (document.documentElement.clientWidth - document.documentElement.clientHeight) / (screen.width - screen.height) > 0;
 },
 ensureOrientationChanged: function(onOrientationChangedFunction){
  if(ASPxClientUtils.iOSPlatform || this.ensureDocumentSizesCorrect())
   onOrientationChangedFunction();
  else {
   window.setTimeout(function(){
    this.ensureOrientationChanged(onOrientationChangedFunction);
   }.aspxBind(this), 100);
  }
 },
 onEventAttachingToDocument: function(eventName, func){
  if(__aspxMacOSMobilePlatform && this.isTouchEventName(eventName)) {
   if(!this.documentTouchHandlers[eventName])
    this.documentTouchHandlers[eventName] = [];
   this.documentTouchHandlers[eventName].push(func);
   return this.documentEventAttachingAllowed;
  }
  return true;
 },
 onEventDettachedFromDocument: function(eventName, func){
  if(__aspxMacOSMobilePlatform && this.isTouchEventName(eventName)) {
   var handlers = this.documentTouchHandlers[eventName];
   if(handlers)
    _aspxArrayRemove(handlers, func);
  }
 },
 processDocumentTouchEventHandlers: function(proc) {
  var touchEventNames = ["touchstart", "touchend", "touchmove", "gesturestart", "gestureend"];
  for (var i = 0; i < touchEventNames.length; i++) {
   var eventName = touchEventNames[i];
   var handlers = this.documentTouchHandlers[eventName];
   if(handlers) {
    for (var j = 0; j < handlers.length; j++) {
     proc(eventName,handlers[j]);
    }
   }
  }
 },
 removeDocumentTouchEventHandlers: function() {
  if(__aspxMacOSMobilePlatform) {
   this.documentEventAttachingAllowed = false;
   this.processDocumentTouchEventHandlers(_aspxDetachEventFromDocumentCore);
  }
 },
 restoreDocumentTouchEventHandlers: function () {
  if(__aspxMacOSMobilePlatform) {
   this.documentEventAttachingAllowed = true;
   this.processDocumentTouchEventHandlers(_aspxAttachEventToDocumentCore);
  }
 },
 IsNativeScrolling: function() {
  return ASPxClientTouchUI.nativeWebKitScrollingSupported() && ASPxClientTouchUI.isNativeScrollingAllowed;
 },
 msTouchCreateGerturesWrapper: function(element, onTap){
  if(!window.navigator.msPointerEnabled || typeof(MSGesture) == "undefined")
   return;
  var gesture = new MSGesture();
  gesture.target = element;
  _aspxAttachEventToElement(element, "MSPointerDown", function(evt){
   gesture.addPointer(evt.pointerId);
  });
  _aspxAttachEventToElement(element, "MSPointerUp", function(evt){
   gesture.stop();
  });
  if(onTap)
   _aspxAttachEventToElement(element, "MSGestureTap", onTap);
  return gesture;
 }
};
var ASPxClientAdaptiveCore = {
 adaptiveMode: false,
 isAdaptiveView: function(){ return false; }
};
(function() {
 ASPxDomObserver = _aspxCreateClass(null, {
  constructor: function() {
   this.items = { };
  },
  subscribe: function(elementID, callbackFunc) {
   var item = this.items[elementID];
   if(item)
    this.unsubscribe(elementID);
   item = {
    elementID: elementID,
    callbackFunc: callbackFunc,
    pauseCount: 0
   };
   this.prepareItem(item);
   this.items[elementID] = item;
  },
  prepareItem: function(item) {
  },
  unsubscribe: function(elementID) {
   this.items[elementID] = null;
  },
  getItemElement: function(item) {
   var element = this.getElementById(item.elementID);
   if(element)
    return element;
   this.unsubscribe(item.elementID);
   return null;
  },
  getElementById: function(elementID) {
   var element = document.getElementById(elementID);
   return element && _aspxIsValidElement(element) ? element : null;
  },
  pause: function(element, includeSubtree) {
   this.changeItemsState(element, includeSubtree, true);
  },
  resume: function(element, includeSubtree) {
   this.changeItemsState(element, includeSubtree, false);
  },
  forEachItem: function(processFunc, context) {
   context = context || this;
   for(var itemName in this.items) {
    if(!this.items.hasOwnProperty(itemName))
     continue;
    var item = this.items[itemName];
    if(item) {
     var needBreak = processFunc.call(context, item);
     if(needBreak)
      return;
    }
   }
  },
  changeItemsState: function(element, includeSubtree, pause) {
   this.forEachItem(function(item) {
    if(!element)
     this.changeItemState(item, pause);
    else {
     var itemElement = this.getItemElement(item);
     if(itemElement && (element == itemElement || (includeSubtree && _aspxGetIsParent(element, itemElement)))) {
      this.changeItemState(item, pause);
      if(!includeSubtree)
       return true;
     }
    }
   }.aspxBind(this));
  },
  changeItemState: function(item, pause) {
   if(pause)
    this.pauseItem(item)
   else
    this.resumeItem(item);
  },
  pauseItem: function(item) {
   item.paused = true;
   item.pauseCount++;
  },
  resumeItem: function(item) {
   if(item.pauseCount > 0) {
    if(item.pauseCount == 1)
     item.paused = false;
    item.pauseCount--;
   }
  }
 });
 ASPxDomObserver.IsMutationObserverAvailable = function() {
  return !!window.MutationObserver;
 };
 ASPxTimerObserver = _aspxCreateClass(ASPxDomObserver, {
  constructor: function() {
   this.constructor.prototype.constructor.call(this);
   this.timerID = -1;
   this.observationTimeout = 300;
   this.startObserving();
  },
  startObserving: function() {
   if(this.timerID !== -1)
    window.clearTimeout(this.timerID);
   this.timerID = window.setTimeout(this.onTimeout, this.observationTimeout);
  },
  onTimeout: function() {
   var observer = _aspxGetDomObserver();
   observer.doObserve();
   observer.startObserving();
  },
  doObserve: function() {
   if(!__aspxDocumentLoaded) return;
   this.forEachItem(function(item) {
    if(!item.paused)
     this.doObserveForItem(item);
   }.aspxBind(this));
  },
  doObserveForItem: function(item) {
   var element = this.getItemElement(item);
   if(element)
    item.callbackFunc.call(this, element);
  }
 });
 ASPxMutationObserver = _aspxCreateClass(ASPxDomObserver, {
  constructor: function() {
   this.constructor.prototype.constructor.call(this);
   this.callbackTimeout = 10;
  },
  prepareItem: function(item) {
   item.callbackTimerID = -1;
   var target = this.getElementById(item.elementID);
   if(!target)
    return;
   var observerCallbackFunc = function() {
    if(item.callbackTimerID === -1) {
     var timeoutHander = function() {
      item.callbackTimerID = -1;
      item.callbackFunc.call(this, target);
     }.aspxBind(this);
     item.callbackTimerID = window.setTimeout(timeoutHander, this.callbackTimeout);
    }
   }.aspxBind(this);
   var observer = new MutationObserver(observerCallbackFunc);
   var config = { attributes: true, childList: true, characterData: true, subtree: true };
   observer.observe(target, config);
   item.observer = observer;
   item.config = config;
  },
  unsubscribe: function(elementID) {
   var item = this.items[elementID];
   if(item) {
    item.observer.disconnect();
    item.observer = null;
   }
   this.constructor.prototype.unsubscribe.call(this, elementID);
  },
  pauseItem: function(item) {
   this.constructor.prototype.pauseItem.call(this, item);
   item.observer.disconnect();
  },
  resumeItem: function(item) {
   this.constructor.prototype.resumeItem.call(this, item);
   if(!item.paused) {
    var target = this.getItemElement(item);
    if(target)
     item.observer.observe(target, item.config);
   }
  }
 });
 var __aspxDomObserver = null;
 function _aspxGetDomObserver() {
  if(__aspxDomObserver == null)
   __aspxDomObserver = ASPxDomObserver.IsMutationObserverAvailable() ? new ASPxMutationObserver() : new ASPxTimerObserver();
  return __aspxDomObserver;
 };
 window._aspxGetDomObserver = _aspxGetDomObserver;
})();
__aspxClassesScriptParsed = true;

var __aspxStateItemsExist = false;
var __aspxFocusedItemKind = "FocusedStateItem";
var __aspxHoverItemKind = "HoverStateItem";
var __aspxPressedItemKind = "PressedStateItem";
var __aspxSelectedItemKind = "SelectedStateItem";
var __aspxDisabledItemKind = "DisabledStateItem";
var __aspxCachedStatePrefix = "cached";
ASPxStateItem = _aspxCreateClass(null, {
 constructor: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink){
  this.name = name;
  this.classNames = classNames;
  this.customClassNames = [];
  this.resultClassNames = [];
  this.cssTexts = cssTexts;
  this.postfixes = postfixes;
  this.imageObjs = imageObjs;
  this.imagePostfixes = imagePostfixes;
  this.kind = kind;
  this.classNamePostfix = kind.substr(0, 1).toLowerCase();
  this.enabled = true;
  this.needRefreshBetweenElements = false;
  this.elements = null;
  this.images = null;
  this.linkColor = null;
  this.lintTextDecoration = null;
  this.disableApplyingStyleToLink = !!disableApplyingStyleToLink;
 },
 GetCssText: function(index){
  if(_aspxIsExists(this.cssTexts[index]))
   return this.cssTexts[index];
  return this.cssTexts[0];
 },
 CreateStyleRule: function(index){
  if(this.GetCssText(index) == "") return "";
  var styleSheet = _aspxGetCurrentStyleSheet();
  if(styleSheet)
   return _aspxCreateImportantStyleRule(styleSheet, this.GetCssText(index), this.classNamePostfix);
  return "";
 },
 GetClassName: function(index){
  if(_aspxIsExists(this.classNames[index]))
   return this.classNames[index];
  return this.classNames[0];
 },
 GetResultClassName: function(index){
  if(!_aspxIsExists(this.resultClassNames[index])) {
   if(!_aspxIsExists(this.customClassNames[index]))
    this.customClassNames[index] = this.CreateStyleRule(index);
   if(this.GetClassName(index) != "" && this.customClassNames[index] != "")
    this.resultClassNames[index] = this.GetClassName(index) + " " + this.customClassNames[index];
   else if(this.GetClassName(index) != "")
    this.resultClassNames[index] = this.GetClassName(index);
   else if(this.customClassNames[index] != "")
    this.resultClassNames[index] = this.customClassNames[index];
   else
    this.resultClassNames[index] = "";
  }
  return this.resultClassNames[index];
 },
 GetElements: function(element){
  if(!this.elements || !_aspxIsValidElements(this.elements)){
   if(this.postfixes && this.postfixes.length > 0){
    this.elements = [ ];
    var parentNode = element.parentNode;
    if(parentNode){
     for(var i = 0; i < this.postfixes.length; i++){
      var id = this.name + this.postfixes[i];
      this.elements[i] = _aspxGetChildById(parentNode, id);
      if(!this.elements[i])
       this.elements[i] = _aspxGetElementById(id);
     }
    }
   }
   else
    this.elements = [element];
  }
  return this.elements;
 },
 GetImages: function(element){
  if(!this.images || !_aspxIsValidElements(this.images)){
   this.images = [ ];
   if(this.imagePostfixes && this.imagePostfixes.length > 0){
    var elements = this.GetElements(element);
    for(var i = 0; i < this.imagePostfixes.length; i++){
     var id = this.name + this.imagePostfixes[i];
     for(var j = 0; j < elements.length; j++){
      if(!elements[j]) continue;
      if(elements[j].id == id)
       this.images[i] = elements[j];
      else
       this.images[i] = _aspxGetChildById(elements[j], id);
      if(this.images[i])
       break;
     }
    }
   }
  }
  return this.images;
 },
 Apply: function(element){
  if(!this.enabled) return;
  try{
   this.ApplyStyle(element);
   if(this.imageObjs && this.imageObjs.length > 0)
    this.ApplyImage(element);
   if(__aspxIE && __aspxBrowserMajorVersion >= 11)
    this.ForceRedrawAppearance(element);
  }
  catch(e){
  }
 },
 ApplyStyle: function(element){
  var elements = this.GetElements(element);
  for(var i = 0; i < elements.length; i++){
   if(!elements[i]) continue;
   var className = elements[i].className.replace(this.GetResultClassName(i), "");
   elements[i].className = _aspxTrim(className) + " " + this.GetResultClassName(i);
   if(!__aspxOpera || __aspxBrowserVersion >= 9)
    this.ApplyStyleToLinks(elements, i);
  }
 },
 ApplyStyleToLinks: function(elements, index){
  if(this.disableApplyingStyleToLink)
   return;
  var linkCount = 0;
  var savedLinkCount = -1;
  if(_aspxIsExists(elements[index]["savedLinkCount"]))
   savedLinkCount = parseInt(elements[index]["savedLinkCount"]);
  do{
   if(savedLinkCount > -1 && savedLinkCount <= linkCount)
    break;
   var link = elements[index]["link" + linkCount];
   if(!link){
    link = _aspxGetChildByTagName(elements[index], "A", linkCount);
    if(link)
     elements[index]["link" + linkCount] = link;
   }
   if(link)
    this.ApplyStyleToLinkElement(link, index);
   else
    elements[index]["savedLinkCount"] = linkCount;
   linkCount++;
  }
  while(link != null)
 },
 ApplyStyleToLinkElement: function(link, index){
  if(this.GetLinkColor(index) != "")
   _aspxChangeAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color", this.GetLinkColor(index));
  if(this.GetLinkTextDecoration(index) != "")
   _aspxChangeAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration", this.GetLinkTextDecoration(index));
 },
 ApplyImage: function(element){
  var images = this.GetImages(element);
  for(var i = 0; i < images.length; i++){
   if(!images[i] || !this.imageObjs[i]) continue;
   var useSpriteImage = typeof(this.imageObjs[i]) != "string";
   var newUrl = "", newCssClass = "", newBackground = "";
   if(useSpriteImage){
    newUrl = ASPx.EmptyImageUrl;
    if(this.imageObjs[i].spriteCssClass)
     newCssClass = this.imageObjs[i].spriteCssClass;
    if(this.imageObjs[i].spriteBackground)
     newBackground = this.imageObjs[i].spriteBackground;
   }
   else{
    newUrl = this.imageObjs[i];
    if(_aspxIsExistsAttribute(images[i].style, "background"))
     newBackground = " ";
   }
   if(newUrl != "")
    _aspxChangeAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src", newUrl);
   if(newCssClass != "")
    this.ApplyImageClassName(images[i], newCssClass);
   if(newBackground != ""){
    if(__aspxWebKitFamily) {
     var savedBackground = _aspxGetAttribute(images[i].style, "background");
     if(!useSpriteImage)
      savedBackground += " " + images[i].style["backgroundPosition"];
     _aspxSetAttribute(images[i], "saved" + this.kind + "Background", savedBackground);
     _aspxSetAttribute(images[i].style, "background", newBackground);
    }
    else
     _aspxChangeAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background", newBackground);
   }
  }
 },
 ApplyImageClassName: function(element, newClassName){
  var className = element.className.replace(newClassName, "");
  _aspxSetAttribute(element, "saved" + this.kind + "ClassName", className);
  element.className = className + " " + newClassName;
 },
 Cancel: function(element){
  if(!this.enabled) return;
  try{
   if(this.imageObjs && this.imageObjs.length > 0)
    this.CancelImage(element);
   this.CancelStyle(element);
  }
  catch(e){
  }
 },
 CancelStyle: function(element){
  var elements = this.GetElements(element);
  for(var i = 0; i < elements.length; i++){
   if(!elements[i]) continue;
   var className = _aspxTrim(elements[i].className.replace(this.GetResultClassName(i), ""));
   elements[i].className = className;
   if(!__aspxOpera || __aspxBrowserVersion >= 9)
    this.CancelStyleFromLinks(elements, i);
  }
 },
 CancelStyleFromLinks: function(elements, index){
  if(this.disableApplyingStyleToLink)
   return;
  var linkCount = 0;
  var savedLinkCount = -1;
  if(_aspxIsExists(elements[index]["savedLinkCount"]))
   savedLinkCount = parseInt(elements[index]["savedLinkCount"]);
  do{
   if(savedLinkCount > -1 && savedLinkCount <= linkCount)
    break;
   var link = elements[index]["link" + linkCount];
   if(!link){
    link = _aspxGetChildByTagName(elements[index], "A", linkCount);
    if(link)
     elements[index]["link" + linkCount] = link;
   }
   if(link)
    this.CancelStyleFromLinkElement(link, index);
   else
    elements[index]["savedLinkCount"] = linkCount;
   linkCount++;
  }
  while(link != null)
 },
 CancelStyleFromLinkElement: function(link, index){
  if(this.GetLinkColor(index) != "")
   _aspxRestoreAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color");
  if(this.GetLinkTextDecoration(index) != "")
   _aspxRestoreAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration");
 },
 CancelImage: function(element){
  var images = this.GetImages(element);
  for(var i = 0; i < images.length; i++){
   if(!images[i] || !this.imageObjs[i]) continue;
   _aspxRestoreAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src");
   this.CancelImageClassName(images[i]);
   _aspxRestoreAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background");
  }
 },
 CancelImageClassName: function(element){
  var savedClassName = _aspxGetAttribute(element, "saved" + this.kind + "ClassName");
  if(_aspxIsExists(savedClassName)) {
   element.className = savedClassName;
   _aspxRemoveAttribute(element, "saved" + this.kind + "ClassName");
  }
 },
 Clone: function(){
  return new ASPxStateItem(this.name, this.classNames, this.cssTexts, this.postfixes,
   this.imageObjs, this.imagePostfixes, this.kind, this.disableApplyingStyleToLink);
 },
 IsChildElement: function(element){
  if(element != null){
   var elements = this.GetElements(element);
   for(var i = 0; i < elements.length; i++){
    if(!elements[i]) continue;
    if(_aspxGetIsParent(elements[i], element))
     return true;
   }
  }
  return false;
 },
 ForceRedrawAppearance: function(element) {
  _aspxChangeStyleAttribute(element, "width", "0px");
  var dummy = element.offsetWidth;
  _aspxRestoreStyleAttribute(element, "width");
 },
 GetLinkColor: function(index){
  if(!_aspxIsExists(this.linkColor)){
   var rule = _aspxGetStyleSheetRule(this.customClassNames[index]);
   this.linkColor = rule ? rule.style.color : null;
   if(!_aspxIsExists(this.linkColor)){
    var rule = _aspxGetStyleSheetRule(this.GetClassName(index));
    this.linkColor = rule ? rule.style.color : null;
   }
   if(this.linkColor == null)
    this.linkColor = "";
  }
  return this.linkColor;
 },
 GetLinkTextDecoration: function(index){
  if(!_aspxIsExists(this.linkTextDecoration)){
   var rule = _aspxGetStyleSheetRule(this.customClassNames[index]);
   this.linkTextDecoration = rule ? rule.style.textDecoration : null;
   if(!_aspxIsExists(this.linkTextDecoration)){
    var rule = _aspxGetStyleSheetRule(this.GetClassName(index));
    this.linkTextDecoration = rule ? rule.style.textDecoration : null;
   }
   if(this.linkTextDecoration == null)
    this.linkTextDecoration = "";
  }
  return this.linkTextDecoration;
 }
});
ASPxClientStateEventArgs = _aspxCreateClass(null, {
 constructor: function(item, element){
  this.item = item;
  this.element = element;
  this.toElement = null;
  this.fromElement = null;
  this.htmlEvent = null;
 }
});
ASPxStateController = _aspxCreateClass(null, {
 constructor: function(){
  this.focusedItems = { };
  this.hoverItems = { };
  this.pressedItems = { };
  this.selectedItems = { };
  this.disabledItems = { };
  this.currentFocusedElement = null;
  this.currentFocusedItemName = null;
  this.currentHoverElement = null;
  this.currentHoverItemName = null;
  this.currentPressedElement = null;
  this.currentPressedItemName = null;
  this.savedCurrentPressedElement = null;
  this.savedCurrentMouseMoveSrcElement = null;
  this.AfterSetFocusedState = new ASPxClientEvent();
  this.AfterClearFocusedState = new ASPxClientEvent();
  this.AfterSetHoverState = new ASPxClientEvent();
  this.AfterClearHoverState = new ASPxClientEvent();
  this.AfterSetPressedState = new ASPxClientEvent();
  this.AfterClearPressedState = new ASPxClientEvent();
  this.AfterDisabled = new ASPxClientEvent();
  this.AfterEnabled = new ASPxClientEvent();
  this.BeforeSetFocusedState = new ASPxClientEvent();
  this.BeforeClearFocusedState = new ASPxClientEvent();
  this.BeforeSetHoverState = new ASPxClientEvent();
  this.BeforeClearHoverState = new ASPxClientEvent();
  this.BeforeSetPressedState = new ASPxClientEvent();
  this.BeforeClearPressedState = new ASPxClientEvent();
  this.BeforeDisabled = new ASPxClientEvent();
  this.BeforeEnabled = new ASPxClientEvent();
  this.FocusedItemKeyDown = new ASPxClientEvent();
 },
 AddHoverItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.hoverItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxHoverItemKind, disableApplyingStyleToLink);
  this.AddItem(this.focusedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxFocusedItemKind, disableApplyingStyleToLink);
 },
 AddPressedItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes ,disableApplyingStyleToLink){
  this.AddItem(this.pressedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxPressedItemKind, disableApplyingStyleToLink);
 },
 AddSelectedItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.selectedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxSelectedItemKind, disableApplyingStyleToLink);
 },
 AddDisabledItem: function(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink){
  this.AddItem(this.disabledItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxDisabledItemKind, disableApplyingStyleToLink);
 },
 AddItem: function(items, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind , disableApplyingStyleToLink){
  var stateItem = new ASPxStateItem(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink);
  if(postfixes && postfixes.length > 0){
   for(var i = 0; i < postfixes.length; i ++){
    items[name + postfixes[i]] = stateItem;
   }
  }
  else
   items[name] = stateItem;
  __aspxStateItemsExist = true;
 },
 RemoveHoverItem: function(name){
  this.RemoveItem(this.hoverItems, name);
  this.RemoveItem(this.focusedItems, name);
 },
 RemovePressedItem: function(name){
  this.RemoveItem(this.pressedItems, name);
 },
 RemoveSelectedItem: function(name){
  this.RemoveItem(this.selectedItems, name);
 },
 RemoveDisabledItem: function(name){
  this.RemoveItem(this.disabledItems, name);
 },
 RemoveItem: function(items, name){
  delete items[name];
 },
 GetFocusedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.focusedItems, __aspxFocusedItemKind);
 },
 GetHoverElement: function(srcElement){
  return this.GetItemElement(srcElement, this.hoverItems, __aspxHoverItemKind);
 },
 GetPressedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.pressedItems, __aspxPressedItemKind);
 },
 GetSelectedElement: function(srcElement){
  return this.GetItemElement(srcElement, this.selectedItems, __aspxSelectedItemKind);
 },
 GetDisabledElement: function(srcElement){
  return this.GetItemElement(srcElement, this.disabledItems, __aspxDisabledItemKind);
 },
 GetItemElement: function(srcElement, items, kind){
  if(srcElement && srcElement[__aspxCachedStatePrefix + kind]){
   var cachedElement = srcElement[__aspxCachedStatePrefix + kind];
   if(cachedElement != __aspxEmptyCachedValue)
    return cachedElement;
   return null;
  }
  var element = srcElement;
  while(element != null) {
   var item = items[element.id];
   if(item){
    this.CacheItemElement(srcElement, kind, element);
    element[kind] = item;
    return element;
   }
   element = element.parentNode;
  }
  this.CacheItemElement(srcElement, kind, __aspxEmptyCachedValue);
  return null;
 },
 CacheItemElement: function(srcElement, kind, value){
  if(srcElement && !srcElement[__aspxCachedStatePrefix + kind])
   srcElement[__aspxCachedStatePrefix + kind] = value;
 },
 DoSetFocusedState: function(element, fromElement){
  var item = element[__aspxFocusedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.fromElement = fromElement;
   this.BeforeSetFocusedState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetFocusedState.FireEvent(this, args);
  }
 },
 DoClearFocusedState: function(element, toElement){
  var item = element[__aspxFocusedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.toElement = toElement;
   this.BeforeClearFocusedState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearFocusedState.FireEvent(this, args);
  }
 },
 DoSetHoverState: function(element, fromElement){
  var item = element[__aspxHoverItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.fromElement = fromElement;
   this.BeforeSetHoverState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetHoverState.FireEvent(this, args);
  }
 },
 DoClearHoverState: function(element, toElement){
  var item = element[__aspxHoverItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   args.toElement = toElement;
   this.BeforeClearHoverState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearHoverState.FireEvent(this, args);
  }
 },
 DoSetPressedState: function(element){
  var item = element[__aspxPressedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   this.BeforeSetPressedState.FireEvent(this, args);
   item.Apply(element);
   this.AfterSetPressedState.FireEvent(this, args);
  }
 },
 DoClearPressedState: function(element){
  var item = element[__aspxPressedItemKind];
  if(item){
   var args = new ASPxClientStateEventArgs(item, element);
   this.BeforeClearPressedState.FireEvent(this, args);
   item.Cancel(element);
   this.AfterClearPressedState.FireEvent(this, args);
  }
 },
 SetCurrentFocusedElement: function(element){
  if(this.currentFocusedElement && !_aspxIsValidElement(this.currentFocusedElement)){
   this.currentFocusedElement = null;
   this.currentFocusedItemName = "";
  }
  if(this.currentFocusedElement != element){
   var oldCurrentFocusedElement = this.currentFocusedElement;
   var item = (element != null) ? element[__aspxFocusedItemKind] : null;
   var itemName = (item != null) ? item.name : "";
   if(this.currentFocusedItemName != itemName){
    if(this.currentHoverItemName != "")
     this.SetCurrentHoverElement(null);
    if(this.currentFocusedElement != null)
     this.DoClearFocusedState(this.currentFocusedElement, element);
    this.currentFocusedElement = element;
    item = (element != null) ? element[__aspxFocusedItemKind] : null;
    this.currentFocusedItemName = (item != null) ? item.name : "";
    if(this.currentFocusedElement != null)
     this.DoSetFocusedState(this.currentFocusedElement, oldCurrentFocusedElement);
   }
  }
 },
 SetCurrentHoverElement: function(element){
  if(this.currentHoverElement && !_aspxIsValidElement(this.currentHoverElement)){
   this.currentHoverElement = null;
   this.currentHoverItemName = "";
  }
  var item = (element != null) ? element[__aspxHoverItemKind] : null;
  if(item && !item.enabled) {
   element = this.GetItemElement(element.parentNode, this.hoverItems, __aspxHoverItemKind);
   item = (element != null) ? element[__aspxHoverItemKind] : null;
  }
  if(this.currentHoverElement != element){
   var oldCurrentHoverElement = this.currentHoverElement,
    itemName = (item != null) ? item.name : "";
   if(this.currentHoverItemName != itemName || (item != null && item.needRefreshBetweenElements)){
    if(this.currentFocusedItemName != "")
     this.SetCurrentFocusedElement(null);
    if(this.currentHoverElement != null)
     this.DoClearHoverState(this.currentHoverElement, element);
    item = (element != null) ? element[__aspxHoverItemKind] : null;
    if(item == null || item.enabled){
     this.currentHoverElement = element;
     this.currentHoverItemName = (item != null) ? item.name : "";
     if(this.currentHoverElement != null)
      this.DoSetHoverState(this.currentHoverElement, oldCurrentHoverElement);
    }
   }
  }
 },
 SetCurrentPressedElement: function(element){
  if(this.currentPressedElement && !_aspxIsValidElement(this.currentPressedElement)){
   this.currentPressedElement = null;
   this.currentPressedItemName = "";
  }
  if(this.currentPressedElement != element){
   if(this.currentPressedElement != null)
    this.DoClearPressedState(this.currentPressedElement);
   var item = (element != null) ? element[__aspxPressedItemKind] : null;
   if(item == null || item.enabled){
    this.currentPressedElement = element;
    this.currentPressedItemName = (item != null) ? item.name : "";
    if(this.currentPressedElement != null)
     this.DoSetPressedState(this.currentPressedElement);
   }
  }
 },
 SetCurrentFocusedElementBySrcElement: function(srcElement){
  var element = this.GetFocusedElement(srcElement);
  this.SetCurrentFocusedElement(element);
 },
 SetCurrentHoverElementBySrcElement: function(srcElement){
  var element = this.GetHoverElement(srcElement);
  this.SetCurrentHoverElement(element);
 },
 SetCurrentPressedElementBySrcElement: function(srcElement){
  var element = this.GetPressedElement(srcElement);
  this.SetCurrentPressedElement(element);
 },
 SetPressedElement: function (element) {
  this.SetCurrentHoverElement(null);
  this.SetCurrentPressedElementBySrcElement(element);
  this.savedCurrentPressedElement = this.currentPressedElement;
 },
 SelectElement: function (element) {
  var item = element[__aspxSelectedItemKind];
  if(item)
   item.Apply(element);
 },
 SelectElementBySrcElement: function(srcElement){
  var element = this.GetSelectedElement(srcElement);
  if(element != null) this.SelectElement(element);
 },
 DeselectElement: function(element){
  var item = element[__aspxSelectedItemKind];
  if(item)
   item.Cancel(element);
 },
 DeselectElementBySrcElement: function(srcElement){
  var element = this.GetSelectedElement(srcElement);
  if(element != null) this.DeselectElement(element);
 },
 SetElementEnabled: function(element, enable){
  if(enable)
   this.EnableElement(element);
  else
   this.DisableElement(element);
 },
 DisableElement: function(element){
  var element = this.GetDisabledElement(element);
  if(element != null) {
   var item = element[__aspxDisabledItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    this.BeforeDisabled.FireEvent(this, args);
    if(item.name == this.currentPressedItemName)
     this.SetCurrentPressedElement(null);
    if(item.name == this.currentHoverItemName)
     this.SetCurrentHoverElement(null);
    item.Apply(element);
    this.SetMouseStateItemsEnabled(item.name, item.postfixes, false);
    this.AfterDisabled.FireEvent(this, args);
   }
  }
 },
 EnableElement: function(element){
  var element = this.GetDisabledElement(element);
  if(element != null) {
   var item = element[__aspxDisabledItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    this.BeforeEnabled.FireEvent(this, args);
    item.Cancel(element);
    this.SetMouseStateItemsEnabled(item.name, item.postfixes, true);
    this.AfterEnabled.FireEvent(this, args);
   }
  }
 },
 SetMouseStateItemsEnabled: function(name, postfixes, enabled){
  if(postfixes && postfixes.length > 0){
   for(var i = 0; i < postfixes.length; i ++){
    this.SetItemsEnabled(this.hoverItems, name + postfixes[i], enabled);
    this.SetItemsEnabled(this.pressedItems, name + postfixes[i], enabled);
    this.SetItemsEnabled(this.focusedItems, name + postfixes[i], enabled);
   }
  }
  else{
   this.SetItemsEnabled(this.hoverItems, name, enabled);
   this.SetItemsEnabled(this.pressedItems, name, enabled);
   this.SetItemsEnabled(this.focusedItems, name, enabled);
  }
 },
 SetItemsEnabled: function(items, name, enabled){
  if(items[name])
   items[name].enabled = enabled;
 },
 OnFocusMove: function(evt){
  var element = _aspxGetEventSource(evt);
  aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
 },
 OnMouseMove: function(evt, checkElementChanged){
  var srcElement = _aspxGetEventSource(evt);
  if(checkElementChanged && srcElement == this.savedCurrentMouseMoveSrcElement) return;
  this.savedCurrentMouseMoveSrcElement = srcElement;
  if(__aspxIE && !_aspxGetIsLeftButtonPressed(evt) && this.savedCurrentPressedElement != null)
   this.ClearSavedCurrentPressedElement();
  if(this.savedCurrentPressedElement == null)
   this.SetCurrentHoverElementBySrcElement(srcElement);
  else{
   var element = this.GetPressedElement(srcElement);
   if(element != this.currentPressedElement){
    if(element == this.savedCurrentPressedElement)
     this.SetCurrentPressedElement(this.savedCurrentPressedElement);
    else
     this.SetCurrentPressedElement(null);
   }
  }
 },
 OnMouseDown: function(evt){
  if(!_aspxGetIsLeftButtonPressed(evt)) return;
  var srcElement = _aspxGetEventSource(evt);
  this.OnMouseDownOnElement(srcElement);
 },
 OnMouseDownOnElement: function (element) {
  if (this.GetPressedElement(element) == null) return;
  this.SetPressedElement(element);
 },
 OnMouseUp: function(evt){
  var srcElement = _aspxGetEventSource(evt);
  this.OnMouseUpOnElement(srcElement);
 },
 OnMouseUpOnElement: function(element){
  if(this.savedCurrentPressedElement == null) return;
  this.ClearSavedCurrentPressedElement();
  this.SetCurrentHoverElementBySrcElement(element);
 },
 OnMouseOver: function(evt){
  var element = _aspxGetEventSource(evt);
  if (element && element.tagName == "IFRAME")
   this.OnMouseMove(evt, true);
 },
 OnKeyDown: function(evt){
  var element = this.GetFocusedElement(_aspxGetEventSource(evt));
  if(element != null && element == this.currentFocusedElement) {
   var item = element[__aspxFocusedItemKind];
   if(item){
    var args = new ASPxClientStateEventArgs(item, element);
    args.htmlEvent = evt;
    this.FocusedItemKeyDown.FireEvent(this, args);
   }
  }
 },
 OnSelectStart: function(evt){
  if(this.savedCurrentPressedElement) {
   _aspxClearSelection();
   return false;
  }
 },
 ClearSavedCurrentPressedElement: function() {
  this.savedCurrentPressedElement = null;
  this.SetCurrentPressedElement(null);
 },
 ClearCache: function(srcElement, kind) {
  if(srcElement[__aspxCachedStatePrefix + kind])
   srcElement[__aspxCachedStatePrefix + kind] = null;
 },
 ClearElementCache: function(srcElement) {
  this.ClearCache(srcElement, __aspxFocusedItemKind);
  this.ClearCache(srcElement, __aspxHoverItemKind);
  this.ClearCache(srcElement, __aspxPressedItemKind);
  this.ClearCache(srcElement, __aspxSelectedItemKind);
  this.ClearCache(srcElement, __aspxDisabledItemKind);
 }
});
var __aspxStateController = null;
function aspxGetStateController(){
 if(__aspxStateController == null)
  __aspxStateController = new ASPxStateController();
 return __aspxStateController;
}
function aspxAddStateItems(method, namePrefix, classes, disableApplyingStyleToLink){
 for(var i = 0; i < classes.length; i ++){
  for(var j = 0; j < classes[i][2].length; j ++) {
   var name = namePrefix;
   if(classes[i][2][j])
    name += "_" + classes[i][2][j];
   var postfixes = classes[i][3] || null;
   var imageObjs = (classes[i][4] && classes[i][4][j]) || null;
   var imagePostfixes = classes[i][5] || null;
   method.call(aspxGetStateController(), name, classes[i][0], classes[i][1], postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink);
  }
 }
}
function aspxAddHoverItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddHoverItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddPressedItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddPressedItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddSelectedItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddSelectedItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddDisabledItems(namePrefix, classes, disableApplyingStyleToLink){
 aspxAddStateItems(aspxGetStateController().AddDisabledItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxRemoveStateItems(method, namePrefix, classes){
 for(var i = 0; i < classes.length; i ++){
  for(var j = 0; j < classes[i][0].length; j ++) {
   var name = namePrefix;
   if(classes[i][0][j])
    name += "_" + classes[i][0][j];
   method.call(aspxGetStateController(), name);
  }
 }
}
function aspxRemoveHoverItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveHoverItem, namePrefix, classes);
}
function aspxRemovePressedItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemovePressedItem, namePrefix, classes);
}
function aspxRemoveSelectedItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveSelectedItem, namePrefix, classes);
}
function aspxRemoveDisabledItems(namePrefix, classes){
 aspxRemoveStateItems(aspxGetStateController().RemoveDisabledItem, namePrefix, classes);
}
function aspxAddAfterClearFocusedState(handler){
 aspxGetStateController().AfterClearFocusedState.AddHandler(handler);
}
function aspxAddAfterSetFocusedState(handler){
 aspxGetStateController().AfterSetFocusedState.AddHandler(handler);
}
function aspxAddAfterClearHoverState(handler){
 aspxGetStateController().AfterClearHoverState.AddHandler(handler);
}
function aspxAddAfterSetHoverState(handler){
 aspxGetStateController().AfterSetHoverState.AddHandler(handler);
}
function aspxAddAfterClearPressedState(handler){
 aspxGetStateController().AfterClearPressedState.AddHandler(handler);
}
function aspxAddAfterSetPressedState(handler){
 aspxGetStateController().AfterSetPressedState.AddHandler(handler);
}
function aspxAddAfterDisabled(handler){
 aspxGetStateController().AfterDisabled.AddHandler(handler);
}
function aspxAddAfterEnabled(handler){
 aspxGetStateController().AfterEnabled.AddHandler(handler);
}
function aspxAddBeforeClearFocusedState(handler){
 aspxGetStateController().BeforeClearFocusedState.AddHandler(handler);
}
function aspxAddBeforeSetFocusedState(handler){
 aspxGetStateController().BeforeSetFocusedState.AddHandler(handler);
}
function aspxAddBeforeClearHoverState(handler){
 aspxGetStateController().BeforeClearHoverState.AddHandler(handler);
}
function aspxAddBeforeSetHoverState(handler){
 aspxGetStateController().BeforeSetHoverState.AddHandler(handler);
}
function aspxAddBeforeClearPressedState(handler){
 aspxGetStateController().BeforeClearPressedState.AddHandler(handler);
}
function aspxAddBeforeSetPressedState(handler){
 aspxGetStateController().BeforeSetPressedState.AddHandler(handler);
}
function aspxAddBeforeDisabled(handler){
 aspxGetStateController().BeforeDisabled.AddHandler(handler);
}
function aspxAddBeforeEnabled(handler){
 aspxGetStateController().BeforeEnabled.AddHandler(handler);
}
function aspxAddFocusedItemKeyDown(handler){
 aspxGetStateController().FocusedItemKeyDown.AddHandler(handler);
}
function aspxSetHoverState(element){
 aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
}
function aspxClearHoverState(evt){
 aspxGetStateController().SetCurrentHoverElementBySrcElement(null);
}
function aspxUpdateHoverState(evt){
 aspxGetStateController().OnMouseMove(evt, false);
}
function aspxSetFocusedState(element){
 aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
}
function aspxClearFocusedState(evt){
 aspxGetStateController().SetCurrentFocusedElementBySrcElement(null);
}
function aspxUpdateFocusedState(evt){
 aspxGetStateController().OnFocusMove(evt);
}
function aspxAssignAccessabilityEventsToChildrenLinks(container){
 var links = _aspxGetChildrenByPartialClassName(container, __aspxAccessibilityMarkerClass);
 for(var i = 0; i < links.length; i++)
  aspxAssignAccessabilityEventsToLink(links[i]);
}
function aspxAssignAccessabilityEventsToLink(link) {
 if (!_aspxElementCssClassContains(link, __aspxAccessibilityMarkerClass))
  return;
 _aspxAttachEventToElement(link, "focus", function(e) { aspxUpdateFocusedState(e); });
 _aspxAttachEventToElement(link, "blur", function(e) { aspxClearFocusedState(e); });
 if(__aspxIE && __aspxBrowserMajorVersion < 7 && link.href == __aspxAccessibilityEmptyUrl)
  _aspxAttachEventToElement(link, "click", function() { return false; });
}
_aspxAttachEventToDocument("mousemove", aspxClassesDocumentMouseMove);
function aspxClassesDocumentMouseMove(evt) {
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseMove(evt, true);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxClassesDocumentMouseDown);
function aspxClassesDocumentMouseDown(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseDown(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, aspxClassesDocumentMouseUp);
function aspxClassesDocumentMouseUp(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseUp(evt);
}
_aspxAttachEventToDocument("mouseover", aspxClassesDocumentMouseOver);
function aspxClassesDocumentMouseOver(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnMouseOver(evt);
}
_aspxAttachEventToDocument("keydown", aspxClassesDocumentKeyDown);
function aspxClassesDocumentKeyDown(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  aspxGetStateController().OnKeyDown(evt);
}
_aspxAttachEventToDocument("selectstart", aspxClassesDocumentSelectStart);
function aspxClassesDocumentSelectStart(evt){
 if(__aspxClassesScriptParsed && __aspxStateItemsExist)
  return aspxGetStateController().OnSelectStart(evt);
}

_aspxEnableCssAnimation = true;
aspxAnimationUtils = {
 CanUseCssTransition: function () { return _aspxEnableCssAnimation && this.CurrentTransition },
 CanUseCssTransform: function () { return this.CanUseCssTransition() && this.CurrentTransform },
 CurrentTransition: (function () {
  if (__aspxIE)
   return null;
  var transitions = [
   { property: "webkitTransition", event: "webkitTransitionEnd" },
   { property: "MozTransition", event: "transitionend" },
   { property: "OTransition", event: "oTransitionEnd" },
   { property: "transition", event: "transitionend" }
  ]
  var fakeElement = document.createElement("DIV");
  for (var i = 0; i < transitions.length; i++)
   if (transitions[i].property in fakeElement.style)
    return transitions[i];
 })(),
 CurrentTransform: (function () {
  var transforms = ["transform", "MozTransform", "-webkit-transform", "msTransform", "OTransform"];
  var fakeElement = document.createElement("DIV");
  for (var i = 0; i < transforms.length; i++)
   if (transforms[i] in fakeElement.style)
    return transforms[i];
 })(),
 SetTransformValue: function (element, position, isTop) {
  if (this.CanUseCssTransform())
   element.style[this.CurrentTransform] = this.GetTransformCssText(position, isTop);
  else
   element.style[!isTop ? "left" : "top"] = position + "px";
 },
 GetTransformValue: function (element, isTop) {
  if (this.CanUseCssTransform()) {
   var cssValue = element.style[this.CurrentTransform];
   return cssValue ? Number(cssValue.replace('matrix(1, 0, 0, 1,', '').replace(')', '').split(',')[!isTop ? 0 : 1]) : 0;
  }
  else
   return !isTop ? element.offsetLeft : element.offsetTop;
 },
 GetTransformCssText: function (position, isTop) {
  return "matrix(1, 0, 0, 1," + (!isTop ? position : 0) + ", " + (!isTop ? 0 : position) + ")";
 }
}
aspxAnimationTransitionBase = _aspxCreateClass(null, {
 constructor: function (element, options) {
  if (element) {
   aspxAnimationTransitionBase.Cancel(element);
   this.element = element;
   this.element.aspxTransition = this;
  }
  this.duration = options.duration || aspxAnimationTransitionBase.Durations.DEFAULT;
  this.transition = options.transition || aspxAnimationTransitionBase.Transitions.SINE;
  this.property = options.property;
  this.unit = options.unit || "";
  this.onComplete = options.onComplete;
  this.to = null;
  this.from = null;
 },
 Start: function (from, to) {
  if (to != undefined) {
   this.to = to;
   this.from = from;
   this.SetValue(this.from);
  }
  else
   this.to = from;
 },
 Cancel: function () {
  if (!this.element)
   return;
  try {
   delete this.element.aspxTransition;
  } catch (e) {
   this.element.aspxTransition = undefined;
  }
 },
 GetValue: function () {
  return this.getValueInternal(this.element, this.property);
 },
 SetValue: function (value) {
  this.setValueInternal(this.element, this.property, this.unit, value);
 },
 setValueInternal: function (element, property, unit, value) {
  if (property == "opacity")
   ASPxAnimationHelper.setOpacity(element, value);
  else
   element.style[property] = value + unit;
 },
 getValueInternal: function (element, property) {
  if (property == "opacity")
   return _aspxGetElementOpacity(element);
  var value = parseFloat(element.style[property]);
  return isNaN(value) ? 0 : value;
 },
 performOnComplete: function () {
  if (this.onComplete)
   this.onComplete(this.element);
 },
 getTransition: function () {
  return this.transition;
 }
});
aspxAnimationTransitionBase.Cancel = function (element) {
 if (element.aspxTransition)
  element.aspxTransition.Cancel();
};
aspxAnimationTransitionBase.Durations = {
 SHORT: 200,
 DEFAULT: 400,
 LONG: 600
};
aspxAnimationTransitionBase.Transitions = {
 LINER: {
  Css: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
  Js: function (progress) { return progress; }
 },
 SINE: {
  Css: "cubic-bezier(0.470, 0.000, 0.745, 0.715)",
  Js: function (progress) { return Math.sin(progress * 1.57); }
 },
 POW: {
  Css: "cubic-bezier(0.755, 0.050, 0.855, 0.060)",
  Js: function (progress) { return Math.pow(progress, 4); }
 },
 POW_EASE_OUT: {
  Css: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
  Js: function (progress) { return 1 - aspxAnimationTransitionBase.Transitions.POW.Js(1 - progress); }
 }
};
aspxJsAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.fps = 60;
  this.startTime = null;
 },
 Start: function (from, to) {
  aspxAnimationTransitionBase.prototype.Start.call(this, from, to);
  this.initTimer();
 },
 Cancel: function () {
  aspxAnimationTransitionBase.prototype.Cancel.call(this);
  if (this.timerId)
   clearInterval(this.timerId);
 },
 initTimer: function () {
  this.startTime = new Date();
  this.timerId = window.setInterval(function () { this.onTick(); }.aspxBind(this), 1000 / this.fps);
 },
 onTick: function () {
  var progress = (new Date() - this.startTime) / this.duration;
  if (progress >= 1)
   this.complete();
  else
   this.update(progress);
 },
 update: function (progress) {
  this.SetValue(this.gatCalculatedValue(this.from, this.to, progress));
 },
 complete: function () {
  this.Cancel();
  this.update(1);
  this.performOnComplete();
 },
 gatCalculatedValue: function (from, to, progress) {
  if (progress == 1)
   return to;
  return from + (to - from) * this.getTransition()(progress);
 },
 getTransition: function () {
  return this.transition.Js;
 }
});
aspxSimpleAnimationTransition = _aspxCreateClass(aspxJsAnimationTransition, {
 constructor: function (options) {
  this.constructor.prototype.constructor.call(this, null, options);
  this.transition = aspxAnimationTransitionBase.Transitions.POW_EASE_OUT;
  this.onUpdate = options.onUpdate;
  this.lastValue = 0;
 },
 SetValue: function (value) {
  this.onUpdate(value - this.lastValue);
  this.lastValue = value;
 },
 performOnComplete: function () {
  if (this.onComplete)
   this.onComplete();
 }
});
aspxMultipleJsAnimationTransition = _aspxCreateClass(aspxJsAnimationTransition, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.properties = {};
 },
 Start: function (properties) {
  this.initProperties(properties);
  this.initTimer();
 },
 initProperties: function (properties) {
  this.properties = properties;
  for (var propName in this.properties)
   if (properties[propName].from == undefined)
    properties[propName].from = this.getValueInternal(this.element, propName);
 },
 update: function (progress) {
  for (var propName in this.properties) {
   var property = this.properties[propName];
   if (property.from != property.to)
    this.setValueInternal(this.element, propName, property.unit, this.gatCalculatedValue(property.from, property.to, progress));
  }
 }
});
aspxCssAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.transitionPropertyName = aspxAnimationUtils.CurrentTransition.property;
  this.eventName = aspxAnimationUtils.CurrentTransition.event;
 },
 Start: function (from, to) {
  aspxAnimationTransitionBase.prototype.Start.call(this, from, to);
  _aspxSetTimeout(function () {
   var isHidden = this.element.offsetHeight == 0 && this.element.offsetWidth == 0;
   if (!isHidden)
    this.prepareElementBeforeAnimation();
   this.SetValue(this.to);
   if (isHidden)
    this.onTransitionEnd();
  }.aspxBind(this), 0);
 },
 Cancel: function () {
  aspxAnimationTransitionBase.prototype.Cancel.call(this);
  _aspxDetachEventFromElement(this.element, this.eventName, aspxCssAnimationTransition.transitionEnd);
  this.stopAnimation();
  this.setValueInternal(this.element, this.transitionPropertyName, "", "");
 },
 prepareElementBeforeAnimation: function () {
  _aspxAttachEventToElement(this.element, this.eventName, aspxCssAnimationTransition.transitionEnd);
  var tmpH = this.element.offsetHeight;
  this.element.style[this.transitionPropertyName] = this.getTransitionCssString();
 },
 stopAnimation: function () {
  this.SetValue(_aspxGetCurrentStyle(this.element)[this.property]);
 },
 onTransitionEnd: function () {
  this.Cancel();
  this.performOnComplete();
 },
 getTransition: function () {
  return this.transition.Css;
 },
 getTransitionCssString: function () {
  return this.getTransitionCssStringInternal(this.getCssName(this.property));
 },
 getTransitionCssStringInternal: function (cssProperty) {
  return cssProperty + " " + this.duration + "ms " + this.getTransition();
 },
 getCssName: function (property) {
  switch (property) {
   case "marginLeft":
    return "margin-left";
   case "marginTop":
    return "margin-top"
  }
  return property;
 }
});
aspxMultipleCssAnimationTransition = _aspxCreateClass(aspxCssAnimationTransition, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.properties = null;
 },
 Start: function (properties) {
  this.properties = properties;
  this.prepareElementBeforeAnimation();
  this.forEachProperties(function (property, propName) {
   this.setValueInternal(this.element, propName, property.unit, property.to);
  }.aspxBind(this));
 },
 stopAnimation: function () {
  var style = _aspxGetCurrentStyle(this.element);
  this.forEachProperties(function (property, propName) {
   this.setValueInternal(this.element, propName, "", style[propName]);
  }.aspxBind(this));
 },
 getTransitionCssString: function () {
  var str = "";
  this.forEachProperties(function (property, propName) {
   str += this.getTransitionCssStringInternal(this.getCssName(propName)) + ",";
  }.aspxBind(this));
  str = str.substring(0, str.length - 1);
  return str;
 },
 forEachProperties: function (func) {
  for (var propName in this.properties) {
   var property = this.properties[propName];
   if (property.from == undefined)
    property.from = this.getValueInternal(this.element, propName);
   if (property.from != property.to)
    func(property, propName);
  }
 }
});
aspxCssAnimationTransition.transitionEnd = function (evt) {
 var element = evt.target;
 if (element && element.aspxTransition)
  element.aspxTransition.onTransitionEnd();
}
aspxPositionAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
 constructor: function (element, options) {
  this.constructor.prototype.constructor.call(this, element, options);
  this.direction = options.direction;
  this.animationTransition = this.createAnimationTransition();
  ASPxAnimationHelper.appendWKAnimationClassNameIfRequired(this.element);
 },
 Start: function (to) {
  var from = this.GetValue();
  if (aspxAnimationUtils.CanUseCssTransform()) {
   from = this.convertPosToCssTransformPos(from);
   to = this.convertPosToCssTransformPos(to);
  }
  this.animationTransition.Start(from, to);
 },
 SetValue: function (value) {
  aspxAnimationUtils.SetTransformValue(this.element, value, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
 },
 GetValue: function () {
  return aspxAnimationUtils.GetTransformValue(this.element, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
 },
 createAnimationTransition: function () {
  var transition = aspxAnimationUtils.CanUseCssTransform() ? this.createTransformAnimationTransition() : this.createPositionAnimationTransition();
  transition.transition = aspxAnimationTransitionBase.Transitions.POW_EASE_OUT;
  return transition;
 },
 createTransformAnimationTransition: function () {
  return new aspxCssAnimationTransition(this.element, {
   property: aspxAnimationUtils.CanUseCssTransform(),
   duration: this.duration,
   onComplete: this.onComplete
  });
 },
 createPositionAnimationTransition: function () {
  return ASPxAnimationHelper.createAnimationTransition(this.element, {
   property: this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION ? "top" : "left",
   unit: "px",
   duration: this.duration,
   onComplete: this.onComplete
  });
 },
 convertPosToCssTransformPos: function (position) {
  return aspxAnimationUtils.GetTransformCssText(position, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
 }
});
var ASPxAnimationHelper = {
 SLIDE_HORIZONTAL_DIRECTION: 0,
 SLIDE_VERTICAL_DIRECTION: 1,
 SLIDE_TOP_DIRECTION: 0,
 SLIDE_RIGHT_DIRECTION: 1,
 SLIDE_BOTTOM_DIRECTION: 2,
 SLIDE_LEFT_DIRECTION: 3,
 SLIDE_CONTAINER_CLASS: "dxAC",
 MAXIMUM_DEPTH: 3,
 createAnimationTransition: function (element, options) {
  switch (options.animationEngine) {
   case "js":
    return new aspxJsAnimationTransition(element, options);
   case "css":
    return new aspxCssAnimationTransition(element, options);
   default:
    return aspxAnimationUtils.CanUseCssTransition() ? new aspxCssAnimationTransition(element, options) : new aspxJsAnimationTransition(element, options);
  }
 },
 createMultipleAnimationTransition: function (element, options) {
  return aspxAnimationUtils.CanUseCssTransition() ? new aspxMultipleCssAnimationTransition(element, options) : new aspxMultipleJsAnimationTransition(element, options);
 },
 cancelAnimation: function (element) {
  aspxAnimationTransitionBase.Cancel(element);
 },
 fadeIn: function (element, onComplete, duration) {
  ASPxAnimationHelper.fadeTo(element, {
   from: 0, to: 1,
   onComplete: onComplete,
   duration: duration || aspxAnimationTransitionBase.Durations.DEFAULT
  });
 },
 fadeOut: function (element, onComplete, duration) {
  ASPxAnimationHelper.fadeTo(element, {
   from: _aspxGetElementOpacity(element), to: 0,
   onComplete: onComplete,
   duration: duration || aspxAnimationTransitionBase.Durations.DEFAULT
  });
 },
 fadeTo: function (element, options) {
  options.property = "opacity";
  if (!options.duration)
   options.duration = aspxAnimationTransitionBase.Durations.SHORT;
  var transition = ASPxAnimationHelper.createAnimationTransition(element, options);
  if (!_aspxIsExists(options.from))
   options.from = transition.GetValue();
  transition.Start(options.from, options.to);
 },
 slideIn: function (element, direction, onComplete) {
  ASPxAnimationHelper.setOpacity(element, 1);
  var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(element, true, true);
  var pos = ASPxAnimationHelper.getSlideInStartPos(animationContainer, direction);
  var transition = ASPxAnimationHelper.createSlideTransition(animationContainer, direction,
   function (el) {
    ASPxAnimationHelper.resetSlideAnimationContainerSize(animationContainer);
    if (onComplete)
     onComplete(el);
   });
  transition.Start(pos, 0);
 },
 slideOut: function (element, direction, onComplete) {
  var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(element, true, true);
  var pos = ASPxAnimationHelper.getSlideOutFinishPos(animationContainer, direction);
  var transition = ASPxAnimationHelper.createSlideTransition(animationContainer, direction,
   function (el) {
    ASPxAnimationHelper.setOpacity(el.firstChild, 0);
    if (onComplete)
     onComplete(el);
   });
  transition.Start(pos);
 },
 slideTo: function (element, options) {
  if (!_aspxIsExists(options.direction))
   options.direction = ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
  var transition = new aspxPositionAnimationTransition(element, options);
  transition.Start(options.to);
 },
 setOpacity: function (element, value) {
  if (__aspxIE && __aspxBrowserVersion < 8)
   element.style.zoom = 1;
  _aspxSetElementOpacity(element, value);
 },
 appendWKAnimationClassNameIfRequired: function (element) {
  if (aspxAnimationUtils.CanUseCssTransform() && __aspxWebKitFamily && !_aspxElementHasCssClass(element, "dx-wbv"))
   element.className += " dx-wbv";
 },
 findSlideAnimationContainer: function (element) {
  var container = element
  for (var i = 0; i < ASPxAnimationHelper.MAXIMUM_DEPTH; i++) {
   if (container.tagName == "BODY")
    return null;
   if (_aspxElementHasCssClass(container, ASPxAnimationHelper.SLIDE_CONTAINER_CLASS))
    return container;
   container = container.parentNode;
  }
  return null;
 },
 createSlideAnimationContainer: function (element) {
  var rootContainer = document.createElement("DIV");
  _aspxSetStyles(rootContainer, {
   className: ASPxAnimationHelper.SLIDE_CONTAINER_CLASS,
   overflow: "hidden"
  });
  var elementContainer = document.createElement("DIV");
  rootContainer.appendChild(elementContainer);
  var parentNode = element.parentNode;
  parentNode.insertBefore(rootContainer, element);
  elementContainer.appendChild(element);
  return rootContainer;
 },
 getSlideAnimationContainer: function (element, create, fixSize) {
  if (!element) return;
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  var container;
  if (element.className == ASPxAnimationHelper.SLIDE_CONTAINER_CLASS)
   container = element;
  if (!container)
   container = ASPxAnimationHelper.findSlideAnimationContainer(element);
  if (!container && create)
   container = ASPxAnimationHelper.createSlideAnimationContainer(element);
  if (container && fixSize) {
   _aspxSetStyles(container, {
    width: width, height: height
   });
   _aspxSetStyles(container.firstChild, {
    width: width, height: height
   });
  }
  return container;
 },
 resetSlideAnimationContainerSize: function (container) {
  _aspxSetStyles(container, {
   width: "", height: ""
  });
  _aspxSetStyles(container.firstChild, {
   width: "", height: ""
  });
 },
 getModifyProperty: function (direction) {
  if (direction == ASPxAnimationHelper.SLIDE_TOP_DIRECTION || direction == ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION)
   return "marginTop";
  return "marginLeft";
 },
 createSlideTransition: function (animationContainer, direction, complete) {
  return ASPxAnimationHelper.createAnimationTransition(animationContainer.firstChild, {
   unit: "px",
   property: ASPxAnimationHelper.getModifyProperty(direction),
   onComplete: complete
  });
 },
 getSlideInStartPos: function (animationContainer, direction) {
  switch (direction) {
   case ASPxAnimationHelper.SLIDE_TOP_DIRECTION:
    return animationContainer.offsetHeight;
   case ASPxAnimationHelper.SLIDE_LEFT_DIRECTION:
    return animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION:
    return -animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION:
    return -animationContainer.offsetHeight;
  }
 },
 getSlideOutFinishPos: function (animationContainer, direction) {
  switch (direction) {
   case ASPxAnimationHelper.SLIDE_TOP_DIRECTION:
    return -animationContainer.offsetHeight;
   case ASPxAnimationHelper.SLIDE_LEFT_DIRECTION:
    return -animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION:
    return animationContainer.offsetWidth;
   case ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION:
    return animationContainer.offsetHeight;
  }
 }
};
var ASPxGesturesHelper = {
 handlers: {},
 activeHandler: null,
 isAttachedEvents: false,
 isExecutedGesture: false,
 AddSwipeGestureHandler: function (id, getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel) {
  this.handlers[id] = new ASPxSwipeGestureHandler(getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel);
 },
 UpdateSwipeAnimationContainer: function (id) {
  if (this.handlers[id])
   this.handlers[id].UpdateAnimationContainer();
 },
 AddSwipeSlideGestureHandler: function (id, getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
  if (updatePosition)
   this.handlers[id] = new ASPxSwipeSimpleSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition);
  else
   this.handlers[id] = new ASPxSwipeSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback);
 },
 OnDocumentMouseDown: function (evt) {
  if (!_aspxGetIsLeftButtonPressed(evt))
   return;
  ASPxGesturesHelper.activeHandler = ASPxGesturesHelper.FindHandler(evt);
  if (ASPxGesturesHelper.activeHandler)
   ASPxGesturesHelper.activeHandler.OnMouseDown(evt);
 },
 OnDocumentMouseMove: function (evt) {
  if (ASPxGesturesHelper.activeHandler) {
   ASPxGesturesHelper.isExecutedGesture = true;
   ASPxGesturesHelper.activeHandler.OnMouseMove(evt);
  }
 },
 OnDocumentMouseUp: function (evt) {
  if (ASPxGesturesHelper.activeHandler) {
   ASPxGesturesHelper.activeHandler.OnMouseUp(evt);
   ASPxGesturesHelper.activeHandler = null;
   _aspxSetTimeout(function () { ASPxGesturesHelper.isExecutedGesture = false; }, 0);
  }
 },
 AttachEvents: function () {
  if (!ASPxGesturesHelper.isAttachedEvents) {
   ASPxGesturesHelper.Attach(_aspxAttachEventToElement);
   ASPxGesturesHelper.isAttachedEvents = true;
  }
 },
 DetachEvents: function () {
  if (ASPxGesturesHelper.isAttachedEvents) {
   ASPxGesturesHelper.Attach(_aspxDetachEventFromElement);
   ASPxGesturesHelper.isAttachedEvents = false;
  }
 },
 Attach: function (changeEventsMethod) {
  changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseDownEventName, ASPxGesturesHelper.OnDocumentMouseDown);
  changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseMoveEventName, ASPxGesturesHelper.OnDocumentMouseMove);
  changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseUpEventName, ASPxGesturesHelper.OnDocumentMouseUp);
 },
 FindHandler: function (evt) {
  var handlers = [];
  for (var id in ASPxGesturesHelper.handlers) {
   var handler = ASPxGesturesHelper.handlers[id];
   if (handler.CanHandleEvent(evt))
    handlers.push(handler);
  }
  if (!handlers.length)
   return null;
  handlers.sort(function (a, b) {
   return _aspxGetIsParent(a.getAnimationElement(), b.getAnimationElement()) ? 1 : -1;
  });
  return handlers[0];
 },
 IsExecutedGesture: function () {
  return ASPxGesturesHelper.isExecutedGesture;
 }
};
ASPxGesturesHelper.AttachEvents();
ASPxGestureHandler = _aspxCreateClass(null, {
 constructor: function (getAnimationElement, canHandle, allowStart) {
  this.getAnimationElement = getAnimationElement;
  this.canHandle = canHandle;
  this.allowStart = allowStart;
  this.startMousePosX = 0;
  this.startMousePosY = 0;
  this.startTime = null;
  this.isEventsPrevented = false;
  this.savedElements = [];
 },
 OnMouseDown: function (evt) {
  if (!__aspxTouchUI && !this.IsTextElement(evt))
   _aspxPreventEvent(evt);
  this.startMousePosX = _aspxGetEventX(evt);
  this.startMousePosY = _aspxGetEventY(evt);
  this.startTime = new Date();
 },
 OnMouseMove: function (evt) {
  if (!__aspxTouchUI)
   _aspxClearSelection();
  if (Math.abs(this.GetCurrentDistanceX(evt)) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE && Math.abs(this.GetCurrentDistanceY(evt)) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE)
   ASPxGesturesHelper.isExecutedGesture = false;
 },
 OnMouseUp: function (evt) {
 },
 CanHandleEvent: function (evt) {
  return !this.canHandle || this.canHandle(evt);
 },
 IsStartAllowed: function (value) {
  return !this.allowStart || this.allowStart(value);
 },
 RollbackGesture: function () {
 },
 GetRubberPosition: function (position) {
  return position / ASPxGestureHandler.FACTOR_RUBBER;
 },
 GetCurrentDistanceX: function (evt) {
  return _aspxGetEventX(evt) - this.startMousePosX;
 },
 GetCurrentDistanceY: function (evt) {
  return _aspxGetEventY(evt) - this.startMousePosY;
 },
 GetDistanceLimit: function () {
  return (new Date() - this.startTime) < ASPxGestureHandler.MAX_TIME_SPAN ? ASPxGestureHandler.MIN_DISTANCE_LIMIT : ASPxGestureHandler.MAX_DISTANCE_LIMIT;
 },
 IsTextElement: function (evt) {
  var element = _aspxGetEventSource(evt);
  return element.tagName == "TEXTAREA" || element.tagName == "INPUT" && _aspxGetAttribute(element, "type") == "text";
 },
 GetContainerElement: function () {
 },
 AttachPreventEvents: function (evt) {
  if (!this.isEventsPrevented) {
   var element = _aspxGetEventSource(evt);
   var container = this.GetContainerElement();
   while (element && element != container) {
    _aspxAttachEventToElement(element, "mouseup", _aspxPreventEvent);
    _aspxAttachEventToElement(element, "click", _aspxPreventEvent);
    this.savedElements.push(element);
    element = element.parentNode;
   }
   this.isEventsPrevented = true;
  }
 },
 DetachPreventEvents: function () {
  if (this.isEventsPrevented) {
   _aspxSetTimeout(function () {
    while (this.savedElements.length > 0) {
     var element = this.savedElements.pop();
     _aspxDetachEventFromElement(element, "mouseup", _aspxPreventEvent);
     _aspxDetachEventFromElement(element, "click", _aspxPreventEvent);
    }
   }.aspxBind(this), 0);
   this.isEventsPrevented = false;
  }
 }
});
ASPxGestureHandler.MAX_DISTANCE_LIMIT = 70;
ASPxGestureHandler.MIN_DISTANCE_LIMIT = 10;
ASPxGestureHandler.MIN_START_DISTANCE = 0;
ASPxGestureHandler.SLIDER_MIN_START_DISTANCE = 5;
ASPxGestureHandler.MAX_TIME_SPAN = 300;
ASPxGestureHandler.FACTOR_RUBBER = 4;
ASPxGestureHandler.RETURN_ANIMATION_DURATION = 150;
ASPxSwipeSlideGestureHandler = _aspxCreateClass(ASPxGestureHandler, {
 constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, move) {
  this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle);
  this.slideElement = this.getAnimationElement();
  this.container = this.slideElement.parentNode;
  this.direction = direction;
  this.backward = backward;
  this.forward = forward;
  this.rollback = rollback;
  this.slideElementSize = 0;
  this.containerElementSize = 0;
  this.startSliderElementPosition = 0;
  this.centeredSlideElementPosition = 0;
 },
 OnMouseDown: function (evt) {
  ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
  this.slideElementSize = this.GetElementSize();
  this.startSliderElementPosition = this.GetElementPosition();
  this.containerElementSize = this.GetContainerElementSize();
  if (this.slideElementSize <= this.containerElementSize)
   this.centeredSlideElementPosition = (this.containerElementSize - this.slideElementSize) / 2;
 },
 OnMouseMove: function (evt) {
  ASPxGestureHandler.prototype.OnMouseMove.call(this, evt);
  if (!__aspxTouchUI && !_aspxGetIsParent(this.container, _aspxGetEventSource(evt))) {
   ASPxGesturesHelper.OnDocumentMouseUp(evt);
   return;
  }
  var distance = this.GetCurrentDistance(evt);
  if (Math.abs(distance) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE || ASPxClientTouchUI.isGesture)
   return;
  this.SetElementPosition(this.GetCalculatedPosition(distance));
  this.AttachPreventEvents(evt);
  _aspxPreventEvent(evt);
 },
 GetCalculatedPosition: function (distance) {
  aspxAnimationTransitionBase.Cancel(this.slideElement);
  var position = this.startSliderElementPosition + distance,
   maxPosition = -(this.slideElementSize - this.containerElementSize),
   minPosition = 0;
  if (this.centeredSlideElementPosition > 0)
   position = this.GetRubberPosition(distance) + this.centeredSlideElementPosition;
  else if (position > minPosition)
   position = this.GetRubberPosition(distance);
  else if (position < maxPosition)
   position = this.GetRubberPosition(distance) + maxPosition;
  return position;
 },
 OnMouseUp: function (evt) {
  this.DetachPreventEvents();
  if (this.GetCurrentDistance(evt) != 0)
   this.OnMouseUpCore(evt);
 },
 OnMouseUpCore: function (evt) {
  var distance = this.GetCurrentDistance(evt);
  if (this.centeredSlideElementPosition > 0 || this.CheckSlidePanelIsOutOfBounds())
   this.PerformRollback();
  else
   this.PerformAction(distance);
 },
 PerformAction: function (distance) {
  if (Math.abs(distance) < this.GetDistanceLimit())
   this.PerformRollback();
  else if (distance < 0)
   this.PerformForward();
  else
   this.PerformBackward();
 },
 PerformBackward: function () {
  this.backward();
 },
 PerformForward: function () {
  this.forward();
 },
 PerformRollback: function () {
  this.rollback();
 },
 CheckSlidePanelIsOutOfBounds: function () {
  var minOffset = -(this.slideElementSize - this.containerElementSize), maxOffset = 0;
  var position = null, slideElementPos = this.GetElementPosition();
  if (slideElementPos > maxOffset || slideElementPos < minOffset)
   return true;
  return false;
 },
 GetContainerElement: function () {
  return this.container;
 },
 GetElementSize: function () {
  return this.IsHorizontalDirection() ? this.slideElement.offsetWidth : this.slideElement.offsetHeight;
 },
 GetContainerElementSize: function () {
  return this.IsHorizontalDirection() ? _aspxGetClearClientWidth(this.container) : _aspxGetClearClientHeight(this.container);
 },
 GetCurrentDistance: function (evt) {
  return this.IsHorizontalDirection() ? this.GetCurrentDistanceX(evt) : this.GetCurrentDistanceY(evt);
 },
 GetElementPosition: function () {
  return aspxAnimationUtils.GetTransformValue(this.slideElement, !this.IsHorizontalDirection());
 },
 SetElementPosition: function (position) {
  aspxAnimationUtils.SetTransformValue(this.slideElement, position, !this.IsHorizontalDirection());
 },
 IsHorizontalDirection: function () {
  return this.direction == ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
 }
});
ASPxSwipeSimpleSlideGestureHandler = _aspxCreateClass(ASPxSwipeSlideGestureHandler, {
 constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
  this.constructor.prototype.constructor.call(this, getAnimationElement, direction, canHandle, backward, forward, rollback);
  this.container = this.slideElement;
  this.updatePosition = updatePosition;
  this.prevDistance = 0;
 },
 OnMouseDown: function (evt) {
  ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
  this.prevDistance = 0;
 },
 OnMouseUpCore: function (evt) {
  this.PerformAction(this.GetCurrentDistance(evt));
 },
 PerformAction: function (distance) {
  if (Math.abs(distance) < this.GetDistanceLimit())
   this.PerformRollback();
  else if (distance < 0)
   this.PerformForward();
  else
   this.PerformBackward();
 },
 GetCalculatedPosition: function (distance) {
  var position = distance - this.prevDistance;
  this.prevDistance = distance;
  return position;
 },
 SetElementPosition: function (position) {
  this.updatePosition(position);
 }
});
ASPxSwipeGestureHandler = _aspxCreateClass(ASPxGestureHandler, {
 constructor: function (getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel) {
  this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle, allowStart);
  this.start = start;
  this.allowComplete = allowComplete;
  this.complete = complete;
  this.cancel = cancel;
  this.animationTween = null;
  this.currentDistanceX = 0;
  this.currentDistanceY = 0;
  this.tryStartGesture = false;
  this.tryStartScrolling = false;
  this.UpdateAnimationContainer();
 },
 UpdateAnimationContainer: function () {
  this.animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, false);
 },
 CanHandleEvent: function (evt) {
  if (ASPxGestureHandler.prototype.CanHandleEvent.call(this, evt))
   return true;
  return this.animationTween && this.animationContainer && _aspxGetIsParent(this.animationContainer, _aspxGetEventSource(evt));
 },
 OnMouseDown: function (evt) {
  ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
  if (this.animationTween)
   this.animationTween.Cancel();
  this.currentDistanceX = 0;
  this.currentDistanceY = 0;
  this.tryStartGesture = false;
  this.tryStartScrolling = false;
 },
 OnMouseMove: function (evt) {
  ASPxGestureHandler.prototype.OnMouseMove.call(this, evt);
  this.currentDistanceX = this.GetCurrentDistanceX(evt);
  this.currentDistanceY = this.GetCurrentDistanceY(evt);
  if (!this.animationTween && !this.tryStartScrolling && (Math.abs(this.currentDistanceX) > ASPxGestureHandler.MIN_START_DISTANCE || Math.abs(this.currentDistanceY) > ASPxGestureHandler.MIN_START_DISTANCE)) {
   if (Math.abs(this.currentDistanceY) < Math.abs(this.currentDistanceX)) {
    this.tryStartGesture = true;
    if (this.IsStartAllowed(this.currentDistanceX)) {
     this.animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, true);
     this.animationTween = ASPxAnimationHelper.createSlideTransition(this.animationContainer, ASPxAnimationHelper.SLIDE_LEFT_DIRECTION,
      function () {
       ASPxAnimationHelper.resetSlideAnimationContainerSize(this.animationContainer);
       this.animationContainer = null;
       this.animationTween = null;
      }.aspxBind(this));
     this.PerformStart(this.currentDistanceX);
     this.AttachPreventEvents(evt);
    }
   }
   else
    this.tryStartScrolling = true;
  }
  if (this.animationTween) {
   if (this.allowComplete && !this.allowComplete(this.currentDistanceX))
    this.currentDistanceX = this.GetRubberPosition(this.currentDistanceX);
   this.animationTween.SetValue(this.currentDistanceX);
  }
  if (!this.tryStartScrolling && !ASPxClientTouchUI.isGesture && evt.touches && evt.touches.length < 2)
   _aspxPreventEvent(evt);
 },
 OnMouseUp: function (evt) {
  if (!this.animationTween) {
   if (this.tryStartGesture)
    this.PerformCancel(this.currentDistanceX);
  }
  else {
   if (Math.abs(this.currentDistanceX) < this.GetDistanceLimit())
    this.RollbackGesture();
   else {
    if (this.IsCompleteAllowed(this.currentDistanceX)) {
     this.PerformComplete(this.currentDistanceX);
     this.animationContainer = null;
     this.animationTween = null;
    }
    else
     this.RollbackGesture();
   }
  }
  this.DetachPreventEvents();
  this.tryStartGesture = false;
  this.tryStartScrolling = false;
 },
 PerformStart: function (value) {
  if (this.start)
   this.start(value);
 },
 IsCompleteAllowed: function (value) {
  return !this.allowComplete || this.allowComplete(value);
 },
 PerformComplete: function (value) {
  if (this.complete)
   this.complete(value);
 },
 PerformCancel: function (value) {
  if (this.cancel)
   this.cancel(value);
 },
 RollbackGesture: function () {
  this.animationTween.Start(this.currentDistanceX, 0);
 },
 GetContainerElement: function () {
  return this.animationContainer;
 }
});
ASPxClientTreeView = _aspxCreateClass(ASPxClientControl, {
 DisabledCssClassName: "dxtvDisabled",
 ElbowCssClassName: "dxtv-elb",
 ElbowWithoutLineCssClassName: "dxtv-elbNoLn",
 ButtonCssClassName: "dxtv-btn",
 NodeCssClassName: "dxtv-nd",
 LineCssClassName: "dxtv-ln",
 NodeCheckboxCssClassName: "dxtv-ndChk",
 NodeImageCssClassName: "dxtv-ndImg",
 NodeTextSpanCssClassName: "dxtv-ndTxt",
 NodeTemplateCssClassName: "dxtv-ndTmpl",
 RtlCssClassName: "dxtvRtl",
 IndexPathSeparator: "_",
 NodeIDPrefix: "_N",
 NodeImageIDPostfix: "I",
 NodeLoadingPanelIDPostfix: "NLP",
 SampleExpandButtonIDPostfix: "_SEB",
 SampleCollapseButtonIDPostfix: "_SCB",
 SampleNodeLoadingPanelIDPostfix: "_SNLP",
 NodesStateHiddenInputIDPostfix: "_NSHF",
 ControlContentDivIDPostfix: "_CD",
 NodeCheckboxIDPostfix: "_CHK",
 ExpandNodeCommand: "E",
 ExpandAllNodesCommand: "EA",
 CheckNodeRecursiveCommand: "CHKNR",
 RaiseNodeClickEventCommand: "NCLK",
 RaiseExpandedChangingEventCommand: "ECHANGING",
 RaiseCheckedChangedEventCommand: "CCHNGD",
 PostRequestArgsSeparator: "|",
 NodeClickServerEventName: "NodeClick",
 ExpandedChangingServerEventName: "ExpandedChanging",
 CheckedChangedServerEventName: "CheckedChanged",
 WidthMeasurementIncrement: 1000,
 IE6WidthMeasurementDivWidth: 99999,
 AnimationDuration: 300,
 MinAnimationDuration: 200,
 HoverCorrectionDelay: 50,
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.enableAnimation = true;
  this.nodesInfo = null;
  this.nodesUrls = null;
  this.contentBoundsMode = true;
  this.checkNodesRecursive = false;
  this.allowSelectNode = false;
  this.virtualMode = false;
  this.imageProperties = null;
  this.icbFocusedStyle = [];
  this.requireWidthRecalculationOnHover = false;
  this.nodeLoadingPanelWidth = 0;
  this.nodeLoadingPanelHeight = 0;
  var instance = this;
  this.expandCollapseHandler = function (e) { instance.HandleExpandButtonClick(e); };
  this.nodeClickHandler = function (e) { instance.HandleNodeClick(e); };
  this.nodeDblClickHandler = function (e) { instance.HandleNodeDblClick(e); };
  this.rootNode = new ASPxClientTreeViewNode(this);
  this.selectedNodeContentElementID = null;
  this.requireRaiseExpandedChangedList = [];
  this.initialControlWidth = 0;
  this.NodeClick = new ASPxClientEvent();
  this.ExpandedChanged = new ASPxClientEvent();
  this.ExpandedChanging = new ASPxClientEvent();
  this.CheckedChanged = new ASPxClientEvent();
 },
 ReplaceElementWithSampleElement: function (srcElement, sampleElement, copySrcInnerHtml) {
  var newElement = sampleElement.cloneNode(true);
  newElement.id = srcElement.id;
  _aspxSetElementDisplay(newElement, true);
  if (copySrcInnerHtml && srcElement.innerHTML)
   _aspxSetInnerHtml(newElement, srcElement.innerHTML);
  srcElement.parentNode.replaceChild(newElement, srcElement);
  return newElement;
 },
 ToggleExpandButtonClickHandler: function (attach, button) {
  var method = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
  method(button, "click", this.expandCollapseHandler);
 },
 AddElementCssClass: function (element, className) {
  this.RemoveElementCssClass(element, className);
  element.className = element.className + " " + className;
 },
 RemoveElementCssClass: function (element, className) {
  var newElementClassName = element.className.replace(className, "");
  element.className = _aspxTrim(newElementClassName);
 },
 RemoveEmptyTextNodes: function (element) {
  var nonEmptyTextPattern = /\S/;
  var textNodeType = 3;
  var elementNodeType = 1;
  for (var i = 0; i < element.childNodes.length; i++) {
   if (element.childNodes[i].nodeType == textNodeType &&
    !nonEmptyTextPattern.test(element.childNodes[i].nodeValue)) {
    element.removeChild(element.childNodes[i]);
    i--;
   } else if (element.childNodes[i].nodeType == elementNodeType)
    this.RemoveEmptyTextNodes(element.childNodes[i]);
  }
 },
 GetNodeIDByContentElementID: function (contentElementID) {
  return _aspxTrim(contentElementID.replace(this.name + "_", ""));
 },
 GetNodeIndexPathByContentElementID: function (contentElementID) {
  return _aspxTrim(contentElementID.replace(this.name + this.NodeIDPrefix, ""));
 },
 CreatePostRequestArgs: function (command, arg1, arg2) {
  var args = command + this.PostRequestArgsSeparator + arg1;
  if (arg2 || arg2 === "")
   args += this.PostRequestArgsSeparator + arg2;
  return args;
 },
 MergeNodesData: function (srcData, destData) {
  for (var key in srcData)
   destData[key] = srcData[key];
 },
 GetNodeListItem: function (clientNode) {
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  return _aspxGetParentByTagName(contentElement, "LI");
 },
 SerializeBooleanValue: function (value) {
  return value ? "T" : "";
 },
 GetContentElementByNodeID: function (nodeID) {
  return _aspxGetElementById(this.name + "_" + nodeID);
 },
 GetListItems: function (list) {
  var listNodes = _aspxGetElementNodes(list);
  var listItems = [];
  if (!listNodes)
   return null;
  for (var i = 0; i < listNodes.length; i++) {
   if (listNodes[i].tagName == "LI")
    listItems.push(listNodes[i]);
  }
  return listItems;
 },
 GetNodesStateHiddenInput: function () {
  return _aspxGetElementById(this.name + this.NodesStateHiddenInputIDPostfix);
 },
 GetClickedContentElementByEventArgs: function (e) {
  var clickedElement = _aspxGetEventSource(e);
  var contentElement = _aspxGetParentByClassName(clickedElement, this.NodeCssClassName);
  if (_aspxElementCssClassContains(clickedElement, this.NodeCheckboxCssClassName)) {
   if (__aspxFirefox) {
    _aspxPreventEventAndBubble(e);
    var instance = this;
    var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
    window.setTimeout(function () {
     ASPxCheckableElementHelper.Instance.InvokeClick(internalCheckBox, e);
    });
   }
   return null;
  }
  if (!contentElement || _aspxElementCssClassContains(contentElement, this.DisabledCssClassName))
   return null;
  return contentElement;
 },
 IsRightToLeft: function () {
  return _aspxIsElementRightToLeft(this.GetMainElement());
 },
 InlineInitialize: function () {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.SetInitialControlWidth();
  if(this.imageProperties)
   this.CreateInternalCheckBoxCollection();
  this.InitializeControlElements();
 },
 Initialize: function () {
  ASPxClientControl.prototype.Initialize.call(this);
  this.InitLoadingPanelSize();
 },
 AdjustControlCore: function () {
  this.CorrectControlWidth();
 },
 CreateInternalCheckBoxCollection: function() {
    this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.imageProperties, true);
 },
 AddInternalCheckBoxToCollection: function(icbInputElement, contentElement) {
  var instance = this;
  var internalCheckBox = this.internalCheckBoxCollection.Add(contentElement.id, icbInputElement);
  internalCheckBox.SetEnabled(!this.IsNodeDisabled(contentElement));
  internalCheckBox.readOnly = this.readOnly;
  internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  internalCheckBox.CheckedChanged.AddHandler(
   function(s, e) {
    instance.UpdateCheckedInNodesState(s.inputElement);
    instance.OnNodeCheckboxClick(s.inputElement);
   }
  );
 },
 InitLoadingPanelSize: function () {
  var panel = this.GetSampleNodeLoadingPanel();
  if(panel) {
   this.nodeLoadingPanelWidth = panel.offsetWidth;
   this.nodeLoadingPanelHeight = panel.offsetHeight;
   _aspxSetElementDisplay(panel, false);
   panel.style.visibility = "";
   panel.style.position = "";
  }
 },
 InitializeControlElements: function () {
  var mainElement = this.GetMainElement();
  if (__aspxIE && __aspxBrowserVersion == 6)
   this.RemoveEmptyTextNodes(mainElement);
  if (_aspxElementCssClassContains(mainElement, this.DisabledCssClassName))
   return;
  var rootList = _aspxGetChildByTagName(mainElement, "UL", 0);
  this.InitializeNodeContainerElements(rootList, "", null);
  this.InitializeNodeSelection();
 },
 InitializeNodeSelection: function () {
  var contentElement = this.GetContentElementByNodeID(this.GetSelectedNodeIDFromState());
  if (contentElement)
   this.ApplySelectionToNode(contentElement);
 },
 GetNodeIndexPath: function (listItemIndex, parentIndexPath) {
  if (!parentIndexPath)
   return listItemIndex.toString();
  return parentIndexPath + this.IndexPathSeparator + listItemIndex.toString();
 },
 GetElementID: function (IDPrefix, indexPath) {
  return this.name + IDPrefix + indexPath;
 },
 ApplyServerProvidedClientNodeInfo: function (clientNode, indexPath) {
  if (!this.nodesInfo[indexPath])
   return;
  clientNode.clientEnabled = !!this.nodesInfo[indexPath][0];
  clientNode.clientVisible = !!this.nodesInfo[indexPath][1];
  clientNode.name = this.nodesInfo[indexPath][2];
  clientNode.navigateUrl = this.nodesInfo[indexPath][3];
  clientNode.target = this.nodesInfo[indexPath][4];
 },
 CreateClientNode: function (index, parentClientNode, indexPath) {
  if (!this.nodesInfo)
   return null;
  var clientNode = new ASPxClientTreeViewNode();
  clientNode.treeView = this;
  clientNode.parent = parentClientNode;
  clientNode.index = index;
  this.ApplyServerProvidedClientNodeInfo(clientNode, indexPath, null);
  if (parentClientNode)
   parentClientNode.nodes.push(clientNode);
  else
   this.rootNode.nodes.push(clientNode);
  return clientNode;
 },
 GetServerProvidedNodeIndex: function (listItem) {
  var nodeContentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (!nodeContentElement || !nodeContentElement.id)
   return null;
  var nodeIndexPath = this.GetNodeIndexPathByContentElementID(nodeContentElement.id);
  var nodeIndices = nodeIndexPath.split(this.IndexPathSeparator);
  return parseInt(nodeIndices[nodeIndices.length - 1]);
 },
 InitializeNodeContainerElements: function (nodeContainer, parentIndexPath, parentClientNode) {
  var listItems = this.GetListItems(nodeContainer);
  if (!listItems)
   return;
  for (var i = 0, nodeIndex = 0; i < listItems.length; i++, nodeIndex++) {
   var serverProvidedNodeIndex = this.GetServerProvidedNodeIndex(listItems[i]);
   if (serverProvidedNodeIndex)
    nodeIndex = serverProvidedNodeIndex;
   var nodeIndexPath = this.GetNodeIndexPath(nodeIndex, parentIndexPath);
   var clientNode = this.CreateClientNode(i, parentClientNode, nodeIndexPath);
   if (clientNode)
    clientNode.last = i == listItems.length - 1;
   this.InitializeNodeContent(listItems[i], nodeIndexPath, clientNode);
   this.InitializeExpandButton(listItems[i]);
   if (clientNode) {
    if (!clientNode.clientVisible)
     this.SetNodeClientVisible(clientNode, false);
    if (!clientNode.clientEnabled)
     this.SetNodeClientEnabled(clientNode, false);
   }
   var subnodesList = _aspxGetChildByTagName(listItems[i], "UL", 0);
   if (subnodesList)
    this.InitializeNodeContainerElements(subnodesList, nodeIndexPath, clientNode);
  }
 },
 InitializeExpandButton: function (listItem) {
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  if (button && !_aspxElementCssClassContains(button, this.DisabledCssClassName))
   this.ToggleExpandButtonClickHandler(true, button);
 },
 InitializeNodeContent: function (listItem, nodeIndexPath, clientNode) {
  var nodeContentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (!nodeContentElement)
   return;
  var contentElementID = this.GetElementID(this.NodeIDPrefix, nodeIndexPath);
  if (clientNode) {
   clientNode.enabled = !this.IsNodeDisabled(nodeContentElement);
   clientNode.contentElementID = contentElementID;
   var textSpan = _aspxGetChildrenByPartialClassName(nodeContentElement, this.NodeTextSpanCssClassName)[0];
   clientNode.text = textSpan ? _aspxGetInnerText(textSpan) : "";
  }
  nodeContentElement.id = contentElementID;
  if(clientNode && clientNode.last && __aspxIE && __aspxBrowserVersion > 7) {
   var listItem = _aspxGetParentByTagName(nodeContentElement, "LI");
   var clearElement = _aspxGetChildByTagName(listItem, "B", 0);
   if(clearElement && clearElement.style.display == "inline")
    clearElement.style.display = "";
  }
  aspxAssignAccessabilityEventsToLink(nodeContentElement);
  if (this.contentBoundsMode) {
   _aspxAttachEventToElement(nodeContentElement, "click", this.nodeClickHandler);
   _aspxAttachEventToElement(nodeContentElement, "dblclick", this.nodeDblClickHandler);
   var instance = this;
   _aspxAttachEventToElement(nodeContentElement, "mousemove", function(evt) {
    instance.CorrectControlWidthOnHover(evt.target);
   });
  }
  this.InitializeNodeImage(nodeContentElement, clientNode);
  var icbMainElement = _aspxGetChildrenByPartialClassName(nodeContentElement, this.NodeCheckboxCssClassName)[0];
  if (icbMainElement) {
   var icbInputElement = _aspxGetChildByTagName(icbMainElement, "input", 0);
   icbInputElement.id = this.GetElementID(this.NodeCheckboxIDPostfix, nodeIndexPath);
   if(this.imageProperties)
    this.AddInternalCheckBoxToCollection(icbInputElement, nodeContentElement);
  }
 },
 IsNodeDisabled: function(nodeContentElement) {
  return _aspxElementCssClassContains(nodeContentElement, this.DisabledCssClassName);
 },
 InitializeNodeImage: function (nodeContentElement, clientNode) {
  var nodeImage = _aspxGetChildrenByPartialClassName(nodeContentElement, this.NodeImageCssClassName)[0];
  if (!nodeImage)
   return;
  nodeImage.id = nodeContentElement.id + this.NodeImageIDPostfix;
  if(!__aspxIE) {
   var nodeImageLoaded = nodeImage.naturalWidth !== 0 && nodeImage.naturalHeight !== 0 && nodeImage.complete;
   if(!nodeImageLoaded) {
    var instance = this;
    _aspxAttachEventToElement(nodeImage, "load", function(evt) {
     instance.CorrectControlWidth();
    });
    if(__aspxWebKitFamily)
     _aspxAttachEventToElement(nodeImage, "error", function(evt) {
      instance.CorrectControlWidth();
     });
   }
  }
  if (clientNode)
   clientNode.imageUrl = nodeImage.src;
 },
 GetControlContentDiv: function () {
  return _aspxGetElementById(this.name + this.ControlContentDivIDPostfix);
 },
 SetInitialControlWidth: function () {
  var mainElement = this.GetMainElement();
  if(mainElement.style.width && !_aspxIsPercentageSize(mainElement.style.width))
   this.initialControlWidth = mainElement.offsetWidth;
 },
 CorrectControlWidthOnHover: function (nodeElement) {
  if (!this.requireWidthRecalculationOnHover)
   return;
  if (__aspxIE && __aspxBrowserVersion < 9) {
   var instance = this;
   window.setTimeout(function() {
    instance.CorrectControlWidth();
   }, 0);
   return;
  }
  if(nodeElement.lastCorrectionOnHover && (new Date().getTime() - nodeElement.lastCorrectionOnHover <= this.HoverCorrectionDelay))
   return;
  this.CorrectControlWidth();
  nodeElement.lastCorrectionOnHover = new Date().getTime();
 },
 CorrectControlWidth: function() {
  var mainElement = this.GetMainElement();
  var controlContentDiv = this.GetControlContentDiv();
  var rootNodesList = _aspxGetChildByTagName(controlContentDiv, "UL", 0);
  if (!rootNodesList)
   return;
  if (this.IsRightToLeft() && __aspxIE && __aspxBrowserVersion <= 7)
   this.RemoveElementCssClass(mainElement, this.RtlCssClassName);
  mainElement.style.overflow = "hidden";
  _aspxSetElementFloat(rootNodesList, "left");
  var prevListWidth = 0;
  if (__aspxIE && __aspxBrowserVersion == 6)
   _aspxSetOffsetWidth(controlContentDiv, this.IE6WidthMeasurementDivWidth);
  else {
   do {
    prevListWidth = rootNodesList.offsetWidth;
    _aspxSetOffsetWidth(controlContentDiv, controlContentDiv.offsetWidth + this.WidthMeasurementIncrement);
    if (__aspxOpera) {
     rootNodesList.style.width = "100%";
     var dummy = rootNodesList.offsetWidth;
     rootNodesList.style.width = "";
    }
   } while (prevListWidth != rootNodesList.offsetWidth);
  }
  if (rootNodesList.offsetWidth > this.initialControlWidth){
   var roundingCorrection = __aspxBrowserWithHardwareAcceleration ? 1 : 0;
   mainElement.style.width = rootNodesList.offsetWidth + roundingCorrection + "px";
  }
  _aspxSetElementFloat(rootNodesList, "");
  mainElement.style.overflow = "";
  controlContentDiv.style.width = "";
  if (this.IsRightToLeft() && __aspxIE && __aspxBrowserVersion <= 7)
   this.AddElementCssClass(mainElement, this.RtlCssClassName);
 },
 GetPreviousSiblingNodeListItem: function (clientNode) {
  var previousNodeIndex = clientNode.index - 1;
  if (previousNodeIndex < 0)
   return null;
  var previousClientNode = clientNode.parent ? clientNode.parent.GetNode(previousNodeIndex) :
   this.rootNode.nodes[previousNodeIndex];
  return this.GetNodeListItem(previousClientNode);
 },
 GetListItemElbowSpan: function (listItem) {
  return _aspxGetChildrenByPartialClassName(listItem, this.ElbowCssClassName)[0] ||
      _aspxGetChildrenByPartialClassName(listItem, this.ElbowWithoutLineCssClassName)[0];
 },
 SetNodeClientVisible: function (clientNode, clientVisible) {
  if(this.IsRootNode(clientNode))
   return;
  var listItem = this.GetNodeListItem(clientNode);
  _aspxSetElementDisplay(listItem, clientVisible);
  this.CorrectControlWidth();
  if (!clientNode.last)
   return;
  var previousNodeListItem = this.GetPreviousSiblingNodeListItem(clientNode);
  if (!previousNodeListItem)
   return;
  var previousNodeElbowSpan = this.GetListItemElbowSpan(previousNodeListItem);
  if (_aspxElementCssClassContains(previousNodeElbowSpan, this.ElbowWithoutLineCssClassName))
   return;
  this.InitializeExpandButton(previousNodeListItem);
  if (clientVisible)
   this.AddElementCssClass(previousNodeListItem, this.LineCssClassName);
  else
   this.RemoveElementCssClass(previousNodeListItem, this.LineCssClassName);
 },
 SetNodeClientEnabled: function (clientNode, clientEnabled) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  aspxGetStateController().SetElementEnabled(contentElement, clientEnabled);
  if(this.internalCheckBoxCollection) {
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox)
    internalCheckBox.SetEnabled(clientEnabled);
  }
  var listItem = _aspxGetParentByTagName(contentElement, "LI");
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  if (button) {
   this.ToggleExpandButtonClickHandler(clientEnabled, button);
   button.style.cursor = clientEnabled ? "pointer" : "default";
  }
 },
 SetNodeText: function (clientNode, text) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var textSpan = _aspxGetChildrenByPartialClassName(contentElement, this.NodeTextSpanCssClassName)[0];
  if (textSpan) {
   _aspxSetInnerHtml(textSpan, text);
   this.CorrectControlWidth();
  }
 },
 SetNodeImageUrl: function (clientNode, url) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var nodeImage = _aspxGetChildrenByPartialClassName(contentElement, this.NodeImageCssClassName)[0];
  if (nodeImage)
   nodeImage.src = url;
 },
 GetNodeLinkElement: function (clientNode) {
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  if (_aspxElementCssClassContains(contentElement, this.NodeTemplateCssClassName))
   return null;
  return contentElement.tagName == "A" ? contentElement : _aspxGetChildByTagName(contentElement, "A", 0);
 },
 GetNodeNavigateUrl: function (clientNode) {
  if (this.contentBoundsMode || this.IsRootNode(clientNode))
   return clientNode.navigateUrl || "";
  var nodeLink = this.GetNodeLinkElement(clientNode);
  return nodeLink ? nodeLink.href : "";
 },
 SetNodeNavigateUrl: function (clientNode, url) {
  if(this.IsRootNode(clientNode))
   return;
  var nodeLink = this.GetNodeLinkElement(clientNode);
  if (nodeLink){
   nodeLink.href = url;
   clientNode.navigateUrl = url;
  }
 },
 UpdateCheckedInNodesState: function (checkbox) {
  var contentElement = _aspxGetParentByClassName(checkbox, this.NodeCssClassName);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  var value = internalCheckBox.GetCurrentInputKey();
  var nodesState = this.GetNodesState();
  var nodeID = this.GetNodeIDByContentElementID(contentElement.id);
  nodesState[2][nodeID] = value;
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 UpdateRecursiveCheckedNodesStateOnCallback: function (checkState, nodeIDs) {
  this.HideLoadingPanel();
  var nodesState = this.GetNodesState();
  for (var i = 0; i < nodeIDs.length; i++) {
   if(nodesState[2][nodeIDs[i]] != checkState)
    nodesState[2][nodeIDs[i]] = checkState;
  }
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 CreateRecursiveNodeCheckRequest: function (contentElement) {
  var requestArgs = this.CreatePostRequestArgs(this.CheckNodeRecursiveCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
  if (this.autoPostBack) {
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  if (this.callBack) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   this.CreateCallback(requestArgs);
  }
 },
 OnNodeCheckboxClick: function (checkbox) {
  var contentElement = _aspxGetParentByClassName(checkbox, this.NodeCssClassName);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  if (this.checkNodesRecursive) {
   var checkBoxState = internalCheckBox.GetCurrentInputKey();
   this.UpdateCheckedStateRecursive(checkbox, checkBoxState);
  }
  var processOnServer = this.RaiseCheckedChanged(contentElement);
  if (this.checkNodesRecursive && !this.virtualMode && (this.autoPostBack || this.callBack))
   this.CreateRecursiveNodeCheckRequest(contentElement);
  else if (processOnServer) {
   var requestArgs = this.CreatePostRequestArgs(this.RaiseCheckedChangedEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
  }
 },
 UpdateCheckedStateRecursive: function (checkbox, state) {
  var listItem = _aspxGetParentByTagName(checkbox, "LI");
  this.UpdateDescendantsCheckedState(listItem, state);
  this.UpdateAncestorsCheckedState(listItem);
 },
 UpdateDescendantsCheckedState: function (listItem, state) {
  var subnodesList = _aspxGetChildByTagName(listItem, "UL", 0);
  if (!subnodesList) {
   listItem.requireUpdateCheckedState = true;
   listItem.checkedState = state;
   return;
  }
  var descendantListItems = this.GetListItems(subnodesList);
  for (var i = 0; i < descendantListItems.length; i++) {
   var contentElement = _aspxGetChildrenByPartialClassName(descendantListItems[i], this.NodeCssClassName)[0];
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox) {
    internalCheckBox.SetValue(state);
    this.UpdateCheckedInNodesState(internalCheckBox.inputElement);
   }
   this.UpdateDescendantsCheckedState(descendantListItems[i], state);
  }
 },
 UpdateAncestorsCheckedState: function (listItem) {
  var parentSubnodesList = _aspxGetParentByTagName(listItem, "UL");
  var parentListItem = _aspxGetParentByTagName(parentSubnodesList, "LI");
  if (!parentListItem || !_aspxGetParentById(parentListItem, this.name))
   return;
  var parentChecked = true;
  var parentUnchecked = true;
  var siblingListItems = this.GetListItems(parentSubnodesList);
  for (var i = 0; i < siblingListItems.length; i++) {
   var contentElement = _aspxGetChildrenByPartialClassName(siblingListItems[i], this.NodeCssClassName)[0];
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox) {
    var currentCheckBoxState = internalCheckBox.GetCurrentInputKey();
    if(currentCheckBoxState != ASPxClientCheckBoxInputKey.Checked)
     parentChecked = false;
    if(currentCheckBoxState != ASPxClientCheckBoxInputKey.Unchecked)
     parentUnchecked = false;
   }
  }
  var parentCheckboxContentElement = _aspxGetChildrenByPartialClassName(parentListItem, this.NodeCssClassName)[0];
  if (parentCheckboxContentElement) {
   var parentCheckBoxState = parentChecked ? ASPxClientCheckBoxInputKey.Checked : (parentUnchecked ? ASPxClientCheckBoxInputKey.Unchecked : ASPxClientCheckBoxInputKey.Indeterminate);
   var parentInternalCheckBox = this.internalCheckBoxCollection.Get(parentCheckboxContentElement.id);
   if(parentInternalCheckBox) {
    parentInternalCheckBox.SetValue(parentCheckBoxState);
    this.UpdateCheckedInNodesState(parentInternalCheckBox.inputElement);
   }
  }
  this.UpdateAncestorsCheckedState(parentListItem);
 },
 SetNodeState: function (clientNode, state) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var checkbox = _aspxGetChildrenByPartialClassName(contentElement, this.NodeCheckboxCssClassName)[0];
  var stateKey = ASPxClientCheckBoxInputKey[state];
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  if(internalCheckBox) {
   internalCheckBox.SetValue(stateKey);
   this.UpdateCheckedInNodesState(internalCheckBox.inputElement);
  }
  if (this.checkNodesRecursive && checkbox)
   this.UpdateCheckedStateRecursive(checkbox, stateKey);
 },
 GetNodeState: function (clientNode) {
  if(!this.internalCheckBoxCollection)
   return ASPxClientCheckBoxCheckState.Unchecked;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  return internalCheckBox ? internalCheckBox.GetCurrentCheckState() : ASPxClientCheckBoxCheckState.Unchecked;
 },
 GetSelectedNodeIDFromState: function () {
  var nodesState = this.GetNodesState();
  return nodesState ? nodesState[1] : "";
 },
 SetSelectedNodeIDToState: function (nodeID) {
  var nodesState = this.GetNodesState();
  if (!nodesState || !_aspxIsExists(nodesState[1]))
   return;
  nodesState[1] = nodeID;
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 NavigateToNodeLink: function (contentElementID) {
  var navigateUrl = null;
  var target = null;
  if (this.rootNode.nodes.length > 0) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElementID);
   navigateUrl = clientNode.navigateUrl;
   target = clientNode.target;
  } else {
   var nodeIndexPath = this.GetNodeIndexPathByContentElementID(contentElementID);
   if (!this.nodesUrls[nodeIndexPath])
    return;
   navigateUrl = this.nodesUrls[nodeIndexPath][0];
   target = this.nodesUrls[nodeIndexPath][1];
  }
  if (navigateUrl)
   _aspxNavigateUrl(navigateUrl, target || "");
 },
 ApplySelectionToNode: function (contentElement) {
  var previouslySelectedContentElement = _aspxGetElementById(this.selectedNodeContentElementID);
  if (previouslySelectedContentElement)
   aspxGetStateController().DeselectElementBySrcElement(previouslySelectedContentElement);
  if (contentElement) {
   aspxGetStateController().SelectElementBySrcElement(contentElement);
   this.CorrectControlWidth();
   this.selectedNodeContentElementID = contentElement.id;
  } else
   this.selectedNodeContentElementID = null;
 },
 HandleNodeClick: function (e) {
  var contentElement = this.GetClickedContentElementByEventArgs(e);
  if (!contentElement)
   return;
  if (this.allowSelectNode && this.selectedNodeContentElementID != contentElement.id) {
   this.SetSelectedNodeIDToState(this.GetNodeIDByContentElementID(contentElement.id));
   aspxClearHoverState();
   this.ApplySelectionToNode(contentElement);
   aspxUpdateHoverState(e);
  }
  var processEventOnServer = this.RaiseNodeClick(contentElement, e);
  if (contentElement.tagName != "A")
   this.NavigateToNodeLink(contentElement.id);
  if (processEventOnServer) {
   var postbackArgs = this.CreatePostRequestArgs(this.RaiseNodeClickEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
   if (this.isInitialized)
    this.SendPostBack(postbackArgs);
  }
 },
 OnCallback: function (resultObj) {
  if (!resultObj)
   return;
  switch (resultObj[0]) {
   case this.ExpandNodeCommand:
    if(resultObj[1])
     this.ProcessNodeExpandingOnCallback(resultObj[1], resultObj[2], resultObj[3], resultObj[4]);
    else
     this.ProcessAllNodesExpandingOnCallback(resultObj[2], resultObj[3], resultObj[4]);
    break;
   case this.CheckNodeRecursiveCommand:
    this.UpdateRecursiveCheckedNodesStateOnCallback(resultObj[1], resultObj[2]);
    break;
  }
 },
 GetSampleNodeLoadingPanel: function () {
  return _aspxGetElementById(this.name + this.SampleNodeLoadingPanelIDPostfix);
 },
 GetNodeLoadingPanelID: function (nodeID) {
  return this.name + this.NodeLoadingPanelIDPostfix + nodeID;
 },
 ShowNodeLoadingPanel: function (button, nodeID) {
  var sampleLoadingPanel = this.GetSampleNodeLoadingPanel();
  if (!sampleLoadingPanel || !button) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   return;
  }
  var elbowSpan = _aspxGetParentByTagName(button, "SPAN");
  var panel = this.CloneNodeLoadingPanel(sampleLoadingPanel, nodeID, elbowSpan);
  _aspxSetElementDisplay(panel, true);
  this.SetNodeLoadingPanelPosition(panel, button, elbowSpan);
  _aspxSetElementDisplay(button, false);
 },
 HideNodeLoadingPanel: function (nodeID) {
  var panel = _aspxGetElementById(this.GetNodeLoadingPanelID(nodeID));
  if (panel)
   _aspxRemoveElement(panel);
 },
 SetNodeLoadingPanelPosition: function (panel, button, elbowSpan) {
  elbowSpan.style.position = "relative";
  var buttonStyle = _aspxGetCurrentStyle(button);
  var marginLeft = parseInt(buttonStyle.marginLeft);
  var marginTop = parseInt(buttonStyle.marginTop);
  var leftOffset = marginLeft - Math.round((this.nodeLoadingPanelWidth - button.offsetWidth) / 2);
  var topOffset = marginTop - Math.round((this.nodeLoadingPanelHeight - button.offsetHeight) / 2);
  elbowSpan.style.position = "";
  if (this.IsRightToLeft())
   panel.style.marginRight = elbowSpan.offsetWidth - this.nodeLoadingPanelWidth - leftOffset + "px";
  else
   panel.style.marginLeft = leftOffset + "px";
  panel.style.marginTop = topOffset + "px";
 },
 CloneNodeLoadingPanel: function (sampleLoadingPanel, nodeID, elbowSpan) {
  var clonedPanel = sampleLoadingPanel.cloneNode(true);
  clonedPanel.id = this.GetNodeLoadingPanelID(nodeID);
  clonedPanel.dir = "ltr";
  elbowSpan.appendChild(clonedPanel);
  return clonedPanel;
 },
 GetSampleExpandButton: function () {
  return _aspxGetElementById(this.name + this.SampleExpandButtonIDPostfix);
 },
 GetSampleCollapseButton: function () {
  return _aspxGetElementById(this.name + this.SampleCollapseButtonIDPostfix);
 },
 SetExpandedToState: function (nodeID, expanded) {
  var nodesState = this.GetNodesState();
  nodesState[0][nodeID] = this.SerializeBooleanValue(expanded);
  this.SaveNodesState(_aspxToJson(nodesState));
 },
 GetExpandedDataFromState: function () {
  return this.GetNodesState()[0];
 },
 HandleNodeDblClick: function (e) {
  var contentElement = this.GetClickedContentElementByEventArgs(e);
  if (!contentElement)
   return;
  var listItem = _aspxGetParentByTagName(contentElement, "LI");
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  var expandedState = this.GetExpandedDataFromState();
  var nodeID = this.GetNodeIDByContentElementID(contentElement.id);
  if (!button && !_aspxIsExists(expandedState[nodeID]))
   return;
  this.ProcessUserInitiatedExpandCollapse(button, listItem);
 },
 InsertSubnodesListMarkup: function (listItem, subnodesListMarkup) {
  var fakeDiv = document.createElement("DIV");
  _aspxSetInnerHtml(fakeDiv, subnodesListMarkup);
  while (fakeDiv.childNodes.length != 0)
   listItem.appendChild(fakeDiv.childNodes[0]);
 },
 ProcessAllNodesExpandingOnCallback: function (subnodesListMarkup, nodesData, nodeNames) {
  this.HideLoadingPanel();
  var nodesState = this.GetNodesState();
  for(var nodeIndexPath in nodesData)
   nodesState[0][this.NodeIDPrefix.replace("_", "") + nodeIndexPath] = 'T';
  this.SaveNodesState(_aspxToJson(nodesState));
  this.MergeRetrievedOnCallbackNodeInfo(nodesData, nodeNames);
  var contentDiv = this.GetControlContentDiv();
  contentDiv.innerHTML = subnodesListMarkup;
  var subnodesList = _aspxGetChildByTagName(contentDiv, "UL", 0);
  this.rootNode.nodes = [];
  this.InitializeNodeContainerElements(subnodesList, "", null);
  this.InitializeNodeSelection();
  this.AdjustControl();
 },
 MergeRetrievedOnCallbackNodeInfo: function (nodesData, nodeNames) {
  if (nodesData) {
   var destData = this.nodesInfo || this.nodesUrls;
   this.MergeNodesData(nodesData, destData);
  }
  if (nodeNames) {
   var nodesState = this.GetNodesState();
   this.MergeNodesData(nodeNames, nodesState[3]);
   this.SaveNodesState(_aspxToJson(nodesState));
  }
 },
 ProcessNodeExpandingOnCallback: function (nodeID, subnodesListMarkup, nodesData, nodeNames) {
  this.MergeRetrievedOnCallbackNodeInfo(nodesData, nodeNames);
  var contentElement = this.GetContentElementByNodeID(nodeID);
  contentElement.performingExpandNodeRequest = false;
  this.HideNodeLoadingPanel(this.GetNodeIDByContentElementID(contentElement.id));
  var listItem = _aspxGetParentByTagName(contentElement, "LI");
  this.InsertSubnodesListMarkup(listItem, subnodesListMarkup);
  var subnodesList = _aspxGetChildByTagName(listItem, "UL", 0);
  var nodeIndexPath = this.GetNodeIndexPathByContentElementID(contentElement.id);
  var clientNode = null;
  if (this.rootNode.nodes.length > 0)
   clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  if (__aspxIE && __aspxBrowserVersion == 6)
   this.RemoveEmptyTextNodes(subnodesList);
  this.InitializeNodeContainerElements(subnodesList, nodeIndexPath, clientNode);
  this.InitializeNodeSelection();
  if (listItem.requireUpdateCheckedState)
   this.UpdateDescendantsCheckedState(listItem, listItem.checkedState);
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  this.PerformNodeExpand(subnodesList, button);
 },
 HandleExpandButtonClick: function (e) {
  var button = _aspxGetEventSource(e);
  var listItem = _aspxGetParentByTagName(button, "LI");
  this.ProcessUserInitiatedExpandCollapse(button, listItem);
 },
 ProcessUserInitiatedExpandCollapse: function (button, listItem) {
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (contentElement.performingExpandNodeRequest)
   return;
  var expandedChangingResults = this.RaiseExpandedChanging(listItem);
  if (expandedChangingResults.cancel)
   return;
  this.ToggleNodeExpandCollapse(listItem, button, true, expandedChangingResults.processOnServer);
 },
 ToggleNodeExpandCollapse: function (listItem, button, requireRaiseExpandedChanged, processOnServer) {
  var subnodesList = _aspxGetChildByTagName(listItem, "UL", 0);
  var expanding = !subnodesList || subnodesList.style.display == "none";
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (processOnServer) {
   var requestArgs = this.CreatePostRequestArgs(this.RaiseExpandedChangingEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id), this.SerializeBooleanValue(expanding));
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  this.SetExpandedToState(this.GetNodeIDByContentElementID(contentElement.id), expanding);
  if (requireRaiseExpandedChanged)
   this.requireRaiseExpandedChangedList.push(contentElement.id);
  if (subnodesList) {
   if (expanding)
    this.PerformNodeExpand(subnodesList, button);
   else
    this.PerformNodeCollapse(subnodesList, button);
   return;
  }
  contentElement.performingExpandNodeRequest = true;
  this.SendExpandNodePostRequest(contentElement.id, button);
 },
 SendExpandNodePostRequest: function (contentElementID, button) {
  var requestArgs = this.CreatePostRequestArgs(this.ExpandNodeCommand,
   this.GetNodeIDByContentElementID(contentElementID));
  if (this.autoPostBack || !this.callBack) {
   if (this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  this.ShowNodeLoadingPanel(button, this.GetNodeIDByContentElementID(contentElementID));
  this.CreateCallback(requestArgs);
 },
 StartExpandCollapseAnimation: function (subnodesList, expanding) {
  var height = subnodesList.offsetHeight;
  if (expanding)
   _aspxSetOffsetHeight(subnodesList, 0);
  ASPxAnimationHelper.createAnimationTransition(subnodesList, {
   animationEngine: "js",
   property: "height", unit: "px",
   duration: height > 120 ? this.AnimationDuration : this.MinAnimationDuration,
   onComplete: function (el) {
    this.OnCompleteAnimation(el, expanding);
   }.aspxBind(this)
  }).Start(expanding ? 0 : height, expanding ? height : 0);
 },
 OnCompleteAnimation: function (element, expanding) {
  element.style.height = "";
  if (!expanding) {
   _aspxSetElementDisplay(element, false);
   this.CorrectControlWidth();
  }
  this.RaiseExpandedChanged(element);
 },
 ReplaceExpandButtonWithSampleButton: function (button, sampleButton) {
  var newButton = this.ReplaceElementWithSampleElement(button, sampleButton, false);
  var listItem = _aspxGetParentByTagName(newButton, "LI");
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  if (!_aspxElementCssClassContains(contentElement, this.DisabledCssClassName))
   this.ToggleExpandButtonClickHandler(true, newButton);
  else
   newButton.style.cursor = "default";
 },
 AccomplishExpandCollapse: function (expandButton, sampleButton, subnodesList) {
  if (expandButton)
   this.ReplaceExpandButtonWithSampleButton(expandButton, sampleButton);
  if (!this.enableAnimation)
   this.RaiseExpandedChanged(subnodesList);
 },
 PerformNodeExpand: function (subnodesList, expandButton) {
  _aspxSetElementDisplay(subnodesList, true);
  this.CorrectControlWidth();
  if (this.enableAnimation)
   this.StartExpandCollapseAnimation(subnodesList, true);
  this.AccomplishExpandCollapse(expandButton, this.GetSampleCollapseButton(), subnodesList);
 },
 PerformNodeCollapse: function (subnodesList, expandButton) {
  if (this.enableAnimation)
   this.StartExpandCollapseAnimation(subnodesList, false);
  else {
   _aspxSetElementDisplay(subnodesList, false);
   this.CorrectControlWidth();
  }
  this.AccomplishExpandCollapse(expandButton, this.GetSampleExpandButton(), subnodesList);
 },
 GetNodeExpanded: function (clientNode) {
  if(this.IsRootNode(clientNode))
   return true;
  var expandedState = this.GetExpandedDataFromState();
  var nodeID = this.GetNodeIDByContentElementID(clientNode.contentElementID);
  if (_aspxIsExists(expandedState[nodeID]))
   return !!expandedState[nodeID];
  return false;
 },
 SetNodeExpanded: function (clientNode) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = _aspxGetElementById(clientNode.contentElementID);
  if(contentElement.performingExpandNodeRequest)
   return;
  var listItem = this.GetNodeListItem(clientNode);
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  var nodeID = this.GetNodeIDByContentElementID(clientNode.contentElementID);
  var expandedState = this.GetExpandedDataFromState();
  if (!button && !_aspxIsExists(expandedState[nodeID]))
   return;
  this.ToggleNodeExpandCollapse(listItem, button, false, false);
 },
 GetNodesState: function() {
  var nodesStateInput = this.GetNodesStateHiddenInput();
  return eval("(" + nodesStateInput.value + ");");
 },
 SaveNodesState: function(state) {
  var nodesStateInput = this.GetNodesStateHiddenInput();
  nodesStateInput.value = state;
  if(this.cookieName) {
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, state);
  }
 },
 AreChildNodesLoaded: function(node) {
  var listItem = this.GetNodeListItem(node);
  var button = _aspxGetChildrenByPartialClassName(listItem, this.ButtonCssClassName)[0];
  return !button || !!_aspxGetChildByTagName(listItem, "UL", 0);
 },
 RaiseNodeClick: function (contentElement, htmlEvent) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.NodeClickServerEventName);
  if (!this.NodeClick.IsEmpty()) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
   var args = new ASPxClientTreeViewNodeClickEventArgs(processOnServer, clientNode,
    contentElement, htmlEvent);
   this.NodeClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseExpandedChanged: function (subnodesList) {
  if (this.ExpandedChanged.IsEmpty())
   return;
  var listItem = _aspxGetParentByTagName(subnodesList, "LI");
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  var nodeIndex = _aspxArrayIndexOf(this.requireRaiseExpandedChangedList, contentElement.id);
  if (nodeIndex < 0)
   return;
  this.requireRaiseExpandedChangedList.splice(nodeIndex, 1);
  var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  var args = new ASPxClientTreeViewNodeEventArgs(clientNode);
  this.ExpandedChanged.FireEvent(this, args);
 },
 RaiseExpandedChanging: function (listItem) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.ExpandedChangingServerEventName);
  var contentElement = _aspxGetChildrenByPartialClassName(listItem, this.NodeCssClassName)[0];
  var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  var args = new ASPxClientTreeViewNodeCancelEventArgs(processOnServer, clientNode);
  if (!this.ExpandedChanging.IsEmpty())
   this.ExpandedChanging.FireEvent(this, args);
  return args;
 },
 RaiseCheckedChanged: function (contentElement) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.CheckedChangedServerEventName);
  if (!this.CheckedChanged.IsEmpty()) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
   var args = new ASPxClientTreeViewNodeProcessingModeEventArgs(processOnServer, clientNode);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetNode: function (index) {
  return this.rootNode.GetNode(index);
 },
 GetNodeByName: function (name) {
  return this.rootNode.GetNodeByName(name);
 },
 GetNodeByText: function (text) {
  return this.rootNode.GetNodeByText(text);
 },
 GetNodeCount: function () {
  return this.rootNode.GetNodeCount();
 },
 GetSelectedNode: function () {
  return this.rootNode.GetNodeByContentElementID(this.selectedNodeContentElementID);
 },
 SetSelectedNode: function (node) {
  if(node && (node.treeView != this || this.IsRootNode(node)) || !this.allowSelectNode)
   return;
  var contentElement = node ? _aspxGetElementById(node.contentElementID) : null;
  var selectedNodeID = contentElement ? this.GetNodeIDByContentElementID(contentElement.id) : "";
  this.SetSelectedNodeIDToState(selectedNodeID);
  this.ApplySelectionToNode(contentElement);
 },
 GetRootNode: function () {
  return this.rootNode;
 },
 IsRootNode: function(clientNode) {
  return clientNode == this.rootNode;
 },
 ExpandCollapseNodesRecursive: function (clientNodes, expand) {
  for (var i = 0; i < clientNodes.length; i++) {
   clientNodes[i].SetExpanded(expand);
   if (clientNodes[i].nodes.length > 0)
    this.ExpandCollapseNodesRecursive(clientNodes[i].nodes, expand);
  }
 },
 CollapseAll: function () {
  if (this.rootNode.nodes.length == 0)
   return;
  this.ExpandCollapseNodesRecursive(this.rootNode.nodes, false);
 },
 ExpandAll: function () {
  if (this.rootNode.nodes.length == 0)
   return;
  var postRequestArgs = this.CreatePostRequestArgs(this.ExpandAllNodesCommand, "");
  if (this.autoPostBack) {
   if (this.isInitialized)
    this.SendPostBack(postRequestArgs);
   return;
  }
  if (this.callBack) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   this.CreateCallback(postRequestArgs);
   return;
  }
  this.ExpandCollapseNodesRecursive(this.rootNode.nodes, true);
 }
});
ASPxClientTreeView.Cast = ASPxClientControl.Cast;
ASPxClientTreeViewNode = _aspxCreateClass(null, {
 constructor: function (treeView, parent, index, name) {
  this.treeView = treeView;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.enabled = true;
  this.clientEnabled = true;
  this.clientVisible = true;
  this.navigateUrl = null;
  this.target = null;
  this.text = null;
  this.imageUrl = null;
  this.nodes = [];
  this.contentElementID = null;
  this.last = false;
 },
 GetNodeCount: function () {
  return this.nodes.length;
 },
 GetNode: function (index) {
  return (index >= 0 && index < this.nodes.length) ? this.nodes[index] : null;
 },
 GetNodeBySelector: function (selector) {
  for (var i = 0; i < this.nodes.length; i++) {
   if (selector(this.nodes[i]))
    return this.nodes[i];
   var foundNode = this.nodes[i].GetNodeBySelector(selector);
   if (foundNode)
    return foundNode;
  }
  return null;
 },
 GetNodeByContentElementID: function (contentElementID) {
  return this.GetNodeBySelector(function (node) { return node.contentElementID == contentElementID; });
 },
 SetCheckState: function (value) {
  this.treeView.SetNodeState(this, value);
 },
 GetNodeByName: function (name) {
  return this.GetNodeBySelector(function (node) { return node.name == name; });
 },
 GetNodeByText: function (text) {
  return this.GetNodeBySelector(function (node) { return node.GetText() == text });
 },
 GetExpanded: function () {
  return this.treeView.GetNodeExpanded(this);
 },
 SetExpanded: function (value) {
  if (this.GetExpanded() == value)
   return;
  this.treeView.SetNodeExpanded(this);
 },
 GetChecked: function () {
  return this.GetCheckState() == ASPxClientCheckBoxCheckState.Checked;
 },
 SetChecked: function (value) {
  this.SetCheckState(value ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
 },
 GetCheckState: function () {
  return this.treeView.GetNodeState(this);
 },
 GetEnabled: function () {
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function (value) {
  this.clientEnabled = value;
  this.treeView.SetNodeClientEnabled(this, this.clientEnabled);
 },
 GetImageUrl: function () {
  return this.imageUrl || "";
 },
 SetImageUrl: function (value) {
  this.imageUrl = value;
  this.treeView.SetNodeImageUrl(this, value);
 },
 GetNavigateUrl: function () {
  return this.treeView.GetNodeNavigateUrl(this);
 },
 SetNavigateUrl: function (value) {
  this.treeView.SetNodeNavigateUrl(this, value);
 },
 GetText: function () {
  var nbspChar = String.fromCharCode(160)
  return this.text ? this.text.replace(new RegExp(nbspChar, "g"), " ") : "";
 },
 SetText: function (value) {
  this.text = value;
  this.treeView.SetNodeText(this, value);
 },
 GetVisible: function () {
  return this.clientVisible;
 },
 SetVisible: function (value) {
  this.clientVisible = value;
  this.treeView.SetNodeClientVisible(this, this.clientVisible);
 },
 GetHtmlElement: function () {
  return _aspxGetElementById(this.contentElementID);
 }
});
ASPxClientTreeViewNodeProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function (processOnServer, node) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.node = node;
 }
});
ASPxClientTreeViewNodeClickEventArgs = _aspxCreateClass(ASPxClientTreeViewNodeProcessingModeEventArgs, {
 constructor: function (processOnServer, node, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer, node);
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientTreeViewNodeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function (node) {
  this.node = node;
 }
});
ASPxClientTreeViewNodeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function (processOnServer, node) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.node = node;
 }
});
ASPxClientCallbackPanel = _aspxCreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.touchUIScroller = null;
  this.hideContentOnCallback = true;
  this.isLoadingPanelTextEmpty = false;
 },
 Initialize: function () {
  this.touchUIScroller = ASPxClientTouchUI.makeScrollableIfRequired(this.GetMainElement());
 },
 GetContentElement: function () {
  var element = this.GetMainElement();
  return element && element.tagName == "TABLE" ? element.rows[0].cells[0] : element;
 },
 OnCallback: function (result) {
  _aspxSetInnerHtml(this.GetContentElement(), result);
  if (this.touchUIScroller)
   this.touchUIScroller.ChangeElement(this.GetMainElement());
 },
 ShowLoadingPanel: function () {
  var element = this.GetContentElement();
  var mainElement = (element.tagName == "TD") ? this.GetMainElement() : element;
  if(!this.hideContentOnCallback)
   this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, mainElement);
  else
   this.CreateLoadingPanelInsideContainer(element, true, true, false);
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetContentElement());
 },
 GetCallbackAnimationElement: function() {
  return this.GetContentElement();
 },
 PerformCallback: function (parameter) {
  this.CreateCallback(parameter);
 },
 CreateCallback: function (arg, command, callbackInfo) {
  this.ShowLoadingElements();
  ASPxClientControl.prototype.CreateCallback.call(this, arg, command);
 },
 GetLoadingPanelTextLabelID: function () {
  return this.name + "_TL";
 },
 GetLoadingPanelTextLabel: function () {
  return _aspxGetElementById(this.GetLoadingPanelTextLabelID());
 },
 GetLoadingPanelText: function () {
  var textLabel = this.GetLoadingPanelTextLabel();
  if(textLabel && !this.isLoadingPanelTextEmpty)
   return textLabel.innerHTML;
  return "";
 },
 SetLoadingPanelText: function (text) {
  this.isLoadingPanelTextEmpty = text == null || text == "";
  var textLabel = this.GetLoadingPanelTextLabel();
  if(textLabel)
   textLabel.innerHTML = this.isLoadingPanelTextEmpty ? "&nbsp;" : text;
 },
 GetContentHtml: function () {
  return this.GetContentElement().innerHTML;
 },
 SetContentHtml: function (html, useAnimation) {
  this.GetContentElement().innerHTML = html;
  if(useAnimation && typeof(ASPxAnimationHelper) != "undefined")
   ASPxAnimationHelper.fadeIn(this.GetContentElement());
 }
});
ASPxClientCallbackPanel.Cast = ASPxClientControl.Cast;
var ASPxClientPopupUtils = {
 NotSetAlignIndicator: "NotSet",
 InnerAlignIndicator: "Sides",
 OutsideLeftAlignIndicator: "OutsideLeft",
 LeftSidesAlignIndicator: "LeftSides",
 RightSidesAlignIndicator: "RightSides",
 OutsideRightAlignIndicator: "OutsideRight",
 CenterAlignIndicator: "Center",
 IsAlignNotSet: function (align) {
  return align == ASPxClientPopupUtils.NotSetAlignIndicator;
 },
 IsInnerAlign: function (align) {
  return align.indexOf(ASPxClientPopupUtils.InnerAlignIndicator) != -1;
 },
 IsRightSidesAlign: function(align) {
  return align == ASPxClientPopupUtils.RightSidesAlignIndicator;
 },
 IsOutsideRightAlign: function(align) {
  return align == ASPxClientPopupUtils.OutsideRightAlignIndicator;
 },
 IsCenterAlign: function(align) {
  return align == ASPxClientPopupUtils.CenterAlignIndicator;
 },
 FindPopupElementById: function (id) {
  if (id == "")
   return null;
  var popupElement = _aspxGetElementById(id);
  if (!_aspxIsExistsElement(popupElement)) {
   var idParts = id.split("_");
   var uniqueId = idParts.join("$");
   popupElement = _aspxGetElementById(uniqueId);
  }
  return popupElement;
 },
 FindEventSourceParentByTestFunc: function (evt, testFunc) {
  return _aspxFindParentByTestFunc(_aspxGetEventSource(evt), testFunc);
 },
 PreventContextMenu: function (evt) {
  if(evt.stopPropagation)
   evt.stopPropagation();
  if(evt.preventDefault)
   evt.preventDefault();
  if(__aspxWebKitFamily)
   evt.returnValue = false;
 },
 IsExistsParentWithSpecPosition: function (element, positions) {
  var curEl = element.offsetParent;
  while (curEl != null) {
   for (var i = 0; i < positions.length; i++) {
    if (_aspxGetCurrentStyle(curEl).position == positions[i])
     return true;
   }
   curEl = curEl.offsetParent;
  }
  return false;
 },
 GetDocumentClientWidthForPopup: function () {
  return (__aspxWebKitTouchUI ? _aspxGetDocumentWidth() : _aspxGetDocumentClientWidth());
 },
 GetDocumentClientHeightForPopup: function() {
  return __aspxWebKitTouchUI ? _aspxGetDocumentHeight() : _aspxGetDocumentClientHeight();
 },
 AdjustPositionToClientScreen: function (element, shadowSize, pos, isX) {
  var min = isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
  var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
  var max = min + (isX ? documentClientWidth : _aspxGetDocumentClientHeight());
  max -= (isX ? element.offsetWidth + shadowSize : element.offsetHeight + shadowSize);
  if (pos > max) pos = max;
  if (pos < min) pos = min;
  return pos;
 },
 GetPopupAbsoluteX: function (element, shadowWidth, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn) {
  var width = element.offsetWidth;
  var bodyWidth = _aspxGetDocumentClientWidth();
  var elementX = _aspxGetAbsoluteX(popupElement);
  var scrollX = _aspxGetDocumentScrollLeft();
  if (hAlign == "WindowCenter") {
   var showAtPos = x != __aspxInvalidPosition && !popupElement;
   if (showAtPos)
    hAlign = "";
   else
    return new _aspxPopupPosition(Math.ceil((__aspxWebKitTouchUI ? window.innerWidth : bodyWidth) / 2 - width / 2) + scrollX + hOffset, false);
  }
  if (popupElement) {
   var leftX = elementX - width;
   var rightX = elementX + popupElement.offsetWidth;
   var innerLeftX = elementX;
   var innerRightX = elementX + popupElement.offsetWidth - width;
   var isMoreFreeSpaceLeft = bodyWidth - (rightX + width) < leftX - 2 * scrollX;
  }
  else
   hAlign = "";
  var isInverted = false;
  if (hAlign == ASPxClientPopupUtils.OutsideLeftAlignIndicator) {
   isInverted = isPopupFullCorrectionOn && (!(leftX - scrollX > 0 || isMoreFreeSpaceLeft));
   if (isInverted)
    x = rightX - hOffset;
   else
    x = leftX + hOffset;
  }
  else if (hAlign == ASPxClientPopupUtils.LeftSidesAlignIndicator) {
   x = innerLeftX + hOffset;
   if (isPopupFullCorrectionOn)
    x = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowWidth, x, true);
  }
  else if (hAlign == ASPxClientPopupUtils.CenterAlignIndicator) {
   x = elementX + Math.round((popupElement.offsetWidth - width) / 2) + hOffset;
  }
  else if (hAlign == ASPxClientPopupUtils.RightSidesAlignIndicator) {
   x = innerRightX + hOffset;
   if (isPopupFullCorrectionOn)
    x = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowWidth, x, true);
  }
  else if (hAlign == ASPxClientPopupUtils.OutsideRightAlignIndicator) {
   isInverted = isPopupFullCorrectionOn && (!(rightX + width < bodyWidth + scrollX || !isMoreFreeSpaceLeft));
   if (isInverted)
    x = leftX - hOffset;
   else
    x = rightX + hOffset;
  }
  else {
   if (rtl) {
    if (!_aspxGetIsValidPosition(x)) {
     if (popupElement)
      x = innerRightX;
     else if (hOffset)
      x = 0;
     else
      x = left;
    }
    else
     x -= width;
    isInverted = isPopupFullCorrectionOn && (x < scrollX && x - scrollX < bodyWidth / 2);
    if (isInverted)
     x = x + width + hOffset;
    else
     x = x - hOffset;
   } else {
    if (!_aspxGetIsValidPosition(x)) {
     if (popupElement)
      x = elementX;
     else if (hOffset)
      x = 0;
     else
      x = left;
    }
    isInverted = isPopupFullCorrectionOn && (x - scrollX + width > bodyWidth && x - scrollX > bodyWidth / 2);
    if (isInverted)
     x = x - width - hOffset;
    else
     x = x + hOffset;
   }
  }
  return new _aspxPopupPosition(x, isInverted);
 },
 GetPopupAbsoluteY: function (element, shadowHeight, popupElement, vAlign, vOffset, y, top, isPopupFullCorrectionOn) {
  var height = element.offsetHeight;
  var bodyHeight = _aspxGetDocumentClientHeight();
  var elementY = _aspxGetAbsoluteY(popupElement);
  var scrollY = _aspxGetDocumentScrollTop();
  if (vAlign == "WindowCenter") {
   var showAtPos = y != __aspxInvalidPosition && !popupElement;
   if (showAtPos)
    hAlign = "";
   else
    return new _aspxPopupPosition(Math.ceil((__aspxWebKitTouchUI ? window.innerHeight : bodyHeight) / 2 - height / 2) + scrollY + vOffset, false);
  }
  if (popupElement) {
   var bottomY = elementY + popupElement.offsetHeight;
   var topY = elementY - height;
   var innerBottomY = elementY + popupElement.offsetHeight - height;
   var innerTopY = elementY;
   var isMoreFreeSpaceAbove = bodyHeight - (bottomY + height) < topY - 2 * scrollY;
  }
  else
   vAlign = "";
  var isInverted = false;
  if (vAlign == "Above") {
   isInverted = isPopupFullCorrectionOn && (!(topY - scrollY > 0 || isMoreFreeSpaceAbove));
   if (isInverted)
    y = bottomY - vOffset;
   else
    y = topY + vOffset;
  }
  else if (vAlign == "TopSides") {
   y = innerTopY + vOffset;
   if (isPopupFullCorrectionOn)
    y = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowHeight, y, false);
  }
  else if (vAlign == "Middle") {
   y = elementY + Math.round((popupElement.offsetHeight - height) / 2) + vOffset;
  }
  else if (vAlign == "BottomSides") {
   y = innerBottomY + vOffset;
   if (isPopupFullCorrectionOn)
    y = ASPxClientPopupUtils.AdjustPositionToClientScreen(element, shadowHeight, y, false);
  }
  else if (vAlign == "Below") {
   isInverted = isPopupFullCorrectionOn && (!(bottomY + height < bodyHeight + scrollY || !isMoreFreeSpaceAbove));
   if (isInverted)
    y = topY - vOffset;
   else
    y = bottomY + vOffset;
  }
  else {
   if (!_aspxGetIsValidPosition(y)) {
    if (popupElement)
     y = _aspxGetAbsoluteY(popupElement);
    else if (vOffset)
     y = 0;
    else
     y = top;
   }
   isInverted = isPopupFullCorrectionOn && (y - _aspxGetDocumentScrollTop() + height > bodyHeight && y - _aspxGetDocumentScrollTop() > bodyHeight / 2);
   if (isInverted)
    y = y - height - vOffset;
   else
    y = y + vOffset;
  }
  return new _aspxPopupPosition(y, isInverted);
 },
 RemoveFocus: function (parent) {
  var div = document.createElement('div');
  div.tabIndex = "-1";
  ASPxClientPopupUtils.ConcealDivElement(div);
  parent.appendChild(div);
  if (_aspxIsFocusable(div))
   div.focus();
  _aspxRemoveElement(div);
 },
 ConcealDivElement: function (div) {
  div.style.position = "absolute";
  div.style.left = 0;
  div.style.top = 0;
  if (__aspxWebKitFamily) {
   div.style.opacity = 0;
   div.style.width = 1;
   div.style.height = 1;
  } else {
   div.style.border = 0;
   div.style.width = 0;
   div.style.height = 0;
  }
 },
 InitAnimationDiv: function (element, x, y, onAnimStopCallString, skipSizeInit) {
  ASPxClientPopupUtils.InitAnimationDivCore(element);
  element.popuping = true;
  element.onAnimStopCallString = onAnimStopCallString;
  if (!skipSizeInit)
   _aspxSetStyles(element, { width: element.offsetWidth, height: element.offsetHeight });
  _aspxSetStyles(element, { left: x, top: y });
 },
 InitAnimationDivCore: function (element) {
  if (__aspxIE && __aspxBrowserVersion < 8 && element.tagName == "TABLE") {
   var mainDiv = _aspxGetDescendantNodesByClassName(element, "dxpc-mainDiv")[0];
   _aspxSetStyles(mainDiv, {
    position: "relative"
   });
   var animationWrapper = _aspxGetDescendantNodesByClassName(element, "dxpc-animationWrapper")[0];
   _aspxSetStyles(animationWrapper, {
    overflow: "hidden",
    position: "relative"
   });
  }
  _aspxSetStyles(element, {
   overflow: "hidden",
   position: "absolute"
  });
 },
 StartSlideAnimation: function (animationDivElement, element, iframeElement, duration) {
  if (iframeElement) {
   var endLeft = _aspxPxToInt(iframeElement.style.left);
   var endTop = _aspxPxToInt(iframeElement.style.top);
   var startLeft = _aspxPxToInt(element.style.left) < 0 ? endLeft : animationDivElement.offsetLeft + animationDivElement.offsetWidth;
   var startTop = _aspxPxToInt(element.style.top) < 0 ? endTop : animationDivElement.offsetTop + animationDivElement.offsetHeight;
   ASPxAnimationHelper.createMultipleAnimationTransition(iframeElement, {
    duration: duration
   }).Start({
    left: { from: startLeft, to: endLeft, unit: "px" },
    top: { from: startTop, to: endTop, unit: "px" },
    width: { to: element.offsetWidth, unit: "px" },
    height: { to: element.offsetHeight, unit: "px" }
   });
  }
  ASPxAnimationHelper.createMultipleAnimationTransition(element, {
   duration: duration,
   onComplete: function () { ASPxClientPopupUtils.AnimationFinished(animationDivElement, element); }
  }).Start({
   left: { to: 0, unit: "px" },
   top: { to: 0, unit: "px" }
  });
 },
 AnimationFinished: function (animationDivElement, element) {
  if(ASPxClientPopupUtils.StopAnimation(animationDivElement, element) && _aspxIsExists(animationDivElement.onAnimStopCallString) &&
   animationDivElement.onAnimStopCallString !== "") {
   window.setTimeout(animationDivElement.onAnimStopCallString, 0);
  }
 },
 StopAnimation: function (animationDivElement, element) {
  if(animationDivElement.popuping) {
   ASPxAnimationHelper.cancelAnimation(element);
   animationDivElement.popuping = false;
   animationDivElement.style.overflow = "visible";
   if(__aspxIE && __aspxBrowserVersion < 8 && animationDivElement.tagName == "TABLE") {
    var mainDiv = _aspxGetDescendantNodesByClassName(animationDivElement, "dxpc-mainDiv")[0];
    _aspxSetStyles(mainDiv, {
     position: "static"
    });
    var animationWrapper = _aspxGetDescendantNodesByClassName(animationDivElement, "dxpc-animationWrapper")[0];
    _aspxSetStyles(animationWrapper, {
     overflow: "visible",
     position: "static"
    });
   }
   return true;
  }
  return false;
 },
 GetAnimationHorizontalDirection: function (popupPosition, horizontalAlign, verticalAlign, rtl) {
  if (ASPxClientPopupUtils.IsInnerAlign(horizontalAlign)
   && !ASPxClientPopupUtils.IsInnerAlign(verticalAlign)
   && !ASPxClientPopupUtils.IsAlignNotSet(verticalAlign))
   return 0;
  var toTheLeft = (horizontalAlign == "OutsideLeft" || horizontalAlign == "RightSides" || (horizontalAlign == "NotSet" && rtl)) ^ popupPosition.isInverted;
  return toTheLeft ? 1 : -1;
 },
 GetAnimationVerticalDirection: function (popupPosition, horizontalAlign, verticalAlign) {
  if (ASPxClientPopupUtils.IsInnerAlign(verticalAlign)
   && !ASPxClientPopupUtils.IsInnerAlign(horizontalAlign)
   && !ASPxClientPopupUtils.IsAlignNotSet(horizontalAlign))
   return 0;
  var toTheTop = (verticalAlign == "Above" || verticalAlign == "BottomSides") ^ popupPosition.isInverted;
  return toTheTop ? 1 : -1;
 },
 IsVerticalScrollExists: function () {
  var scrollIsNotHidden = _aspxGetCurrentStyle(document.body).overflowY !== "hidden" && _aspxGetCurrentStyle(document.documentElement).overflowY !== "hidden";
  return (scrollIsNotHidden && _aspxGetDocumentHeight() > _aspxGetDocumentClientHeight()) || __aspxIE && __aspxBrowserVersion < 8;
 },
 WindowResizedByBodyScrollToggle: function () {
  if (aspxGetPopupControlCollection)
   aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
  var docWidth = document.documentElement.clientWidth;
  if (aspxGetPopupControlCollection)
   aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
 },
 CoordinatesInDocumentRect: function (x, y) {
  var docScrollLeft = _aspxGetDocumentScrollLeft();
  var docScrollTop = _aspxGetDocumentScrollTop();
  return (x > docScrollLeft && y > docScrollTop &&
   x < _aspxGetDocumentClientWidth() + docScrollLeft &&
   y < _aspxGetDocumentClientHeight() + docScrollTop);
 },
 GetElementZIndexArray: function (element) {
  var currentElement = element;
  var zIndexesArray = [0];
  while (currentElement && currentElement.tagName != "BODY") {
   if (currentElement.style) {
    if (typeof (currentElement.style.zIndex) != "undefined" && currentElement.style.zIndex != "")
     zIndexesArray.unshift(currentElement.style.zIndex);
   }
   currentElement = currentElement.parentNode;
  }
  return zIndexesArray;
 },
 IsHigher: function (higherZIndexArrat, zIndexArray) {
  if (zIndexArray == null) return true;
  var count = (higherZIndexArrat.length >= zIndexArray.length) ? higherZIndexArrat.length : zIndexArray.length;
  for (var i = 0; i < count; i++)
   if (typeof (higherZIndexArrat[i]) != "undefined" && typeof (zIndexArray[i]) != "undefined") {
    var higherZIndexArrayCurrentElement = parseInt(higherZIndexArrat[i].toString());
    var zIndexArrayCurrentElement = parseInt(zIndexArray[i].toString());
    if (higherZIndexArrayCurrentElement != zIndexArrayCurrentElement)
     return higherZIndexArrayCurrentElement > zIndexArrayCurrentElement;
   } else return typeof (zIndexArray[i]) == "undefined";
  return true;
 },
 TestIsPopupElement: function (element) {
  return !!element.DXPopupElementControl;
 }
}
ASPxClientPopupUtils.OverControl = {
 GetPopupElementByEvt: function (evt) {
  return ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, ASPxClientPopupUtils.TestIsPopupElement);
 },
 OnMouseEvent: function (evt, mouseOver) {
  var popupElement = ASPxClientPopupUtils.OverControl.GetPopupElementByEvt(evt);
  if (mouseOver)
   popupElement.DXPopupElementControl.OnPopupElementMouseOver(evt, popupElement);
  else
   popupElement.DXPopupElementControl.OnPopupElementMouseOut(evt, popupElement);
 },
 OnMouseOut: function (evt) {
  ASPxClientPopupUtils.OverControl.OnMouseEvent(evt, false);
 },
 OnMouseOver: function (evt) {
  ASPxClientPopupUtils.OverControl.OnMouseEvent(evt, true);
 }
}
ASPxClientPopupUtils.BodyScrollHelper = (function () {
 var windowScrollLock = {};
 function lockWindowScroll(windowId) {
  windowScrollLock[windowId] = true;
 }
 function unlockWindowScroll(windowId) {
  windowScrollLock[windowId] = false;
 }
 function isAnyWindowScrollLocked() {
  for(var key in windowScrollLock)
   if(windowScrollLock[key])
    return true;
  return false;
 }
 function fixScrollsBug() {
  var scrollTop = document.body.scrollTop;
  var scrollLeft = document.body.scrollLeft;
  document.body.scrollTop++;
  document.body.scrollTop--;
  document.body.scrollLeft++;
  document.body.scrollLeft--;
  document.body.scrollLeft = scrollLeft;
  document.body.scrollTop = scrollTop;
 }
 return {
  HideBodyScroll: function(windowId) {
   if(isAnyWindowScrollLocked()) {
    lockWindowScroll(windowId);
    return;
   }
   lockWindowScroll(windowId);
   var verticalScrollMustBeReplacedByMargin = ASPxClientPopupUtils.IsVerticalScrollExists();
   if (__aspxIE) {
    _aspxChangeAttribute(document.body, "scroll", "no");
    _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
   } else if (__aspxFirefox && __aspxBrowserVersion < 3) {
    var scrollTop = document.documentElement.scrollTop;
    _aspxChangeStyleAttribute(document.body, "overflow", "hidden");
    document.documentElement.scrollTop = scrollTop;
   } else {
    _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
    var documentHeight = _aspxGetDocumentHeight();
    var documentWidth = _aspxGetDocumentWidth();
    if (window.pageYOffset > 0 && _aspxPxToInt(window.getComputedStyle(document.body, null)) != documentHeight)
     _aspxChangeStyleAttribute(document.body, "height", documentHeight + "px");
    if (window.pageXOffset > 0 && _aspxPxToInt(window.getComputedStyle(document.body, null)) != documentWidth)
     _aspxChangeStyleAttribute(document.body, "width", documentWidth + "px");
    if (__aspxChrome) {
     fixScrollsBug();
    }
   }
   if (verticalScrollMustBeReplacedByMargin)
    _aspxChangeStyleAttribute(document.body, "margin-right", _aspxGetVerticalScrollBarWidth() + "px");
   if (__aspxIE && __aspxBrowserVersion == 7)
    ASPxClientPopupUtils.WindowResizedByBodyScrollToggle();
  },
  RestoreBodyScroll: function (windowId) {
   unlockWindowScroll(windowId);
   if (isAnyWindowScrollLocked())
    return;
   if (__aspxIE) {
    _aspxRestoreAttribute(document.body, "scroll");
    _aspxRestoreStyleAttribute(document.documentElement, "overflow");
   } else {
    _aspxRestoreStyleAttribute(document.documentElement, "overflow");
   }
   _aspxRestoreStyleAttribute(document.body, "margin-right");
   _aspxRestoreStyleAttribute(document.body, "height");
   _aspxRestoreStyleAttribute(document.body, "width");
   if (__aspxWebKitFamily) {
    fixScrollsBug();
   }
   if (__aspxIE && __aspxBrowserVersion == 7)
    ASPxClientPopupUtils.WindowResizedByBodyScrollToggle();
  }
 }
})();
function _aspxPopupPosition(position, isInverted) {
 this.position = position;
 this.isInverted = isInverted;
}
function _aspxSize(width, height) {
 this.width = width;
 this.height = height;
}
var __aspxPCWIdSuffix = "_PW";
function ASPxPCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset) {
 this.horizontalDirection = horizontalDirection;
 this.verticalDirection = verticalDirection;
 this.horizontalOffset = horizontalOffset;
 this.verticalOffset = verticalOffset;
 this.course = verticalDirection + horizontalDirection;
}
ASPxClientPopupControlCssClasses = {};
ASPxClientPopupControlCssClasses.Prefix = "dxpc-";
ASPxClientPopupControlCssClasses.SizeGripLiteCssClassName = ASPxClientPopupControlCssClasses.Prefix + "sizeGrip";
ASPxClientPopupControlCssClasses.LinkCssClassName = ASPxClientPopupControlCssClasses.Prefix + "link";
ASPxClientPopupControlCssClasses.ShadowLiteCssClassName = ASPxClientPopupControlCssClasses.Prefix + "shadow";
ASPxClientPopupControlCssClasses.MainDivLiteCssClass = ASPxClientPopupControlCssClasses.Prefix + "mainDiv";
ASPxClientPopupControlCssClasses.ContentWrapperCssClassName = ASPxClientPopupControlCssClasses.Prefix + "contentWrapper";
ASPxClientPopupControlCssClasses.ContentCssClassName = ASPxClientPopupControlCssClasses.Prefix + "content";
ASPxClientPopupControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.leadingAfterInitCall = true;
  this.adjustInnerControlsSizeOnShow = true;
  this.slideAnimationDuration = 80;
  this.fadeAnimationDuration = 400;
  this.appearAfter = 300;
  this.disappearAfter = 500;
  this.allowResize = false;
  this.popupAnimationType = "none";
  this.closeAnimationType = "none";
  this.enableAnimation = true;
  this.animationLockCount = 0;
  this.shadowVisible = true;
  this.allowCorrectYOffsetPosition = true;
  this.contentUrl = "";
  this.contentUrlArray = [];
  this.contentLoadingMode = "Default"
  this.loadingPanels = [];
  this.loadingDivs = [];
  this.lpTimers = [];
  this.windowRequestCount = [];
  this.callbackAnimationProcessings = [];
  this.savedCallbackResults = [];
  this.isCallbackFinishedStates = [];
  this.savedCallbackWindowIndex = null;
  this.cookieName = "";
  this.closeAction = "OuterMouseClick";
  this.popupAction = "LeftMouseClick";
  this.closeActionArray = [];
  this.popupActionArray = [];
  this.windowsPopupElementIDList = [];
  this.windowsPopupElementList = [];
  this.windowsLastUsedPopupElementInfoList = [];
  this.windowsIsPopupedList = [];
  this.windowsPopupReasonMouseEventList = [];
  this.defaultWindowPopupElementIDList = [];
  this.defaultWindowPopupElementList = [];
  this.defaultLastUsedPopupElementInfo = {};
  this.defaultIsPopuped = false;
  this.defaultPopupReasonMouseEvent = null;
  this.showOnPageLoad = false;
  this.showOnPageLoadArray = [];
  this.popupHorizontalAlign = ASPxClientPopupUtils.NotSetAlignIndicator;
  this.popupVerticalAlign = ASPxClientPopupUtils.NotSetAlignIndicator;
  this.popupHorizontalOffset = 0;
  this.popupVerticalOffset = 0;
  this.windows = [];
  this.windowCount = 0;
  this.isDragged = false;
  this.isResized = false;
  this.zIndex = -1;
  this.left = 0;
  this.top = 0;
  this.iframeLoading = false;
  this.isDraggedArray = [];
  this.isResizedArray = [];
  this.zIndexArray = [];
  this.leftArray = [];
  this.topArray = [];
  this.height = 0;
  this.width = 0;
  this.minHeight = null;
  this.minWidth = null;
  this.maxHeight = null;
  this.maxWidth = null;
  this.shownArray = [];
  this.heightArray = [];
  this.widthArray = [];
  this.minHeightArray = [];
  this.minWidthArray = [];
  this.maxHeightArray = [];
  this.maxWidthArray = [];
  this.iframeLoadingArray = [];
  this.isLiveResizingMode = true;
  this.isPopupPositionCorrectionOn = true;
  this.isPopupFullCorrectionOn = true;
  this.windowElements = new Object();
  this.hideBodyScrollWhenModal = true;
  this.hideBodyScrollWhenModalArray = [];
  this.hideBodyScrollWhenMaximized = true;
  this.autoUpdatePosition = false;
  this.autoUpdatePositionArray = [];
  this.cachedSize = null;
  this.cachedSizeArray = [];
  this.fakeDragDiv = null;
  this.headerHeight = 0;
  this.headerHeightArray = [];
  this.footerHeight = 0;
  this.footerHeightArray = [];
  this.ResizeBorderSize = __aspxTouchUI ? 10 : 6;
  this.ResizeCornerBorderSize = 20;
  this.allowDragging = false;
  this.isWindowDragging = false;
  this.enableContentScrolling = false;
  this.contentOverflowX = "None";
  this.contentOverflowY = "None";
  this.isPinned = false;
  this.isPinnedArray = [];
  this.pinX = 0;
  this.pinXArray = [];
  this.pinY = 0;
  this.pinYArray = [];
  this.lockScroll = 0;
  this.isCollapsed = false;
  this.isCollapsedArray = [];
  this.isCollapsedInit = false;
  this.isCollapsedInitArray = [];
  this.collapseExecutingLockCount = 0;
  this.isMaximized = false;
  this.isMaximizedArray = [];
  this.isMaximizedInit = false;
  this.isMaximizedInitArray = [];
  this.maximizationExecutingLockCount = 0;
  this.restoredWindowValues = {};
  this.restoredWindowValuesArray = [];
  this.browserResizingForMaxWindowLockCount = 0;
  this.updateRestoredWindowSizeLockCount = 0;
  this.iframeAdjustingPostponedArray = [];
  this.iframeAdjustingPostponed = false;
  this.touchUIScrollers = {};
  this.prohibitClearSelectionOnMouseDown = false;
  this.CloseButtonClick = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.Closing = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.Resize = new ASPxClientEvent();
  this.Shown = new ASPxClientEvent();
  this.BeforeResizing = new ASPxClientEvent();
  this.AfterResizing = new ASPxClientEvent();
  this.PinnedChanged = new ASPxClientEvent();
  aspxGetPopupControlCollection().Add(this);
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeArrayCores();
 },
 Initialize: function() {
  aspxGetPopupControlCollection().EnsureSaveScrollState();
  this.InitializeBeforeAnyShow();
  if(this.HasDefaultWindow())
   this.InitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.InitializeWindow(i);
  this.InitializeScrollbars();
  this.constructor.prototype.Initialize.call(this);
 },
 InitializeBeforeAnyShow: function(){
  this.enableContentScrolling = this.contentOverflowX != "None" || this.contentOverflowY != "None";
 },
 InitializeScrollbars: function() {
  if(!__aspxWebKitTouchUI || !this.enableContentScrolling)
   return;
  var options = {
   showHorizontalScrollbar: this.contentOverflowX == "Auto" || this.contentOverflowX == "Scroll",
   showVerticalScrollbar: this.contentOverflowY == "Auto" || this.contentOverflowY == "Scroll"
  };
  var indicies = [];
  for(var i = 0; i < this.GetWindowCount(); i++)
   indicies.push(i);
  if(this.HasDefaultWindow());
   indicies.push(-1);
  for(var i = 0; i < indicies.length; i++) {
   var windowIndex = indicies[i];
   var scrollElement = this.GetContentContainer(windowIndex);
   if(scrollElement)
    this.touchUIScrollers[windowIndex] = ASPxClientTouchUI.MakeScrollable(scrollElement, options);
  }
 },
 UpdateScrollbar: function(index) {
  var touchUIScroller = this.touchUIScrollers[index];
  if(!touchUIScroller)
   return;
  var scrollElement = this.GetContentContainer(index);
  if(scrollElement)
   touchUIScroller.ChangeElement(scrollElement);
 },
 AfterInitialize: function() {
  if(this.HasDefaultWindow())
   this.AfterInitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.AfterInitializeWindow(i);
  this.constructor.prototype.AfterInitialize.call(this);
 },
 InitializeArrayCores: function() {
  if(this.GetWindowCountCore() > 0) {
   this.InitializeWindowPopupElementList();
   this.InitializeWindowPopupElementIDList();
   this.InitializeWindowLastUsedPopupElementInfoList();
   this.InitializeArray(this.shownArray);
   this.InitializeArray(this.windowsPopupReasonMouseEventList, null);
   this.InitializeArray(this.windowsIsPopupedList, false);
   this.InitializeArray(this.contentUrlArray, "");
   this.InitializeArray(this.popupActionArray, this.popupAction);
   this.InitializeArray(this.closeActionArray, this.closeAction);
   this.InitializeArray(this.showOnPageLoadArray, false);
   this.InitializeArray(this.isDraggedArray, false);
   this.InitializeArray(this.isPinnedArray, false);
   this.InitializeArray(this.isCollapsedArray, false);
   this.InitializeArray(this.isCollapsedInitArray, false);
   this.InitializeArray(this.isMaximizedArray, false);
   this.InitializeArray(this.isMaximizedInitArray, false);
   this.InitializeArray(this.restoredWindowValuesArray, {});
   this.InitializeArray(this.iframeAdjustingPostponedArray, {});
   this.InitializeArray(this.isResizedArray, false);
   this.InitializeArray(this.zIndexArray, -1);
   this.InitializeArray(this.leftArray, 0);
   this.InitializeArray(this.topArray, 0);
   this.InitializeArray(this.widthArray, 0);
   this.InitializeArray(this.heightArray, 0);
   this.InitializeArray(this.pinXArray, 0);
   this.InitializeArray(this.pinYArray, 0);
   this.InitializeArray(this.minWidthArray, null);
   this.InitializeArray(this.minHeightArray, null);
   this.InitializeArray(this.maxWidthArray, null);
   this.InitializeArray(this.maxHeightArray, null);
   this.InitializeArray(this.cachedSizeArray, null);
   this.InitializeArray(this.iframeLoadingArray, false);
   this.InitializeArray(this.autoUpdatePositionArray, false);
   this.InitializeArray(this.hideBodyScrollWhenModalArray, true);
   if(__aspxIE) {
    this.InitializeArray(this.headerHeightArray, -1);
    this.InitializeArray(this.footerHeightArray, -1);
   }
  }
 },
 InitializeArray: function(array, defaultValue) {
  if(array.length == 0) {
   for(var i = 0; i < this.GetWindowCountCore(); i++)
    array[i] = defaultValue;
  }
 },
 InitializeWindowPopupElementIDList: function() {
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   if(!this.windowsPopupElementIDList[i])
    this.windowsPopupElementIDList[i] = [];
  }
 },
 InitializeWindowPopupElementList: function() {
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   if(!this.windowsPopupElementList[i])
    this.windowsPopupElementList[i] = [];
  }
 },
 InitializeWindowLastUsedPopupElementInfoList: function() {
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   if(!this.windowsLastUsedPopupElementInfoList[i])
    this.windowsLastUsedPopupElementInfoList[i] = {};
  }
 },
 WindowElementIDAssignmentMap: [
  { cssClass: "dxpc-header", prefix: "_PWH" },
  { cssClass: "dxpc-headerText", prefix: "_PWH", postfix: "T" },
  { cssClass: "dxpc-headerImg", prefix: "_PWH", postfix: "I" },
  { cssClass: "dxpc-closeBtn", prefix: "_HCB" },
  { cssClass: "dxpc-pinBtn", prefix: "_HPB" },
  { cssClass: "dxpc-refreshBtn", prefix: "_HRB" },
  { cssClass: "dxpc-collapseBtn", prefix: "_HMNB" },
  { cssClass: "dxpc-maximizeBtn", prefix: "_HMXB" },
  { cssClass: "dxpc-content", prefix: "_PWC" },
  { cssClass: "dxpc-iFrame", prefix: "_CIF" },
  { cssClass: "dxpc-footer", prefix: "_PWF" },
  { cssClass: "dxpc-footerText", prefix: "_PWF", postfix: "T" },
  { cssClass: "dxpc-footerImg", prefix: "_PWF", postfix: "I" }
 ],
 SetMsTouchDefAction: function(index){
  var element = this.GetContentContainer(index);
  if (element && __aspxIE && __aspxBrowserVersion>=10 && window.navigator.msPointerEnabled){
   element.style['-ms-touch-action'] = 'none';
  }
 },
 AssignElementID: function(element, index, prefix, postfix) {
  element.id = this.name + prefix + index + (postfix ? postfix : "");
 },
 AssignWindowElementsID: function(index, windowElement) {
  for(var i = 0; i < this.WindowElementIDAssignmentMap.length; i++) {
   var elementClass = this.WindowElementIDAssignmentMap[i].cssClass;
   var elements = _aspxGetDescendantNodesByClassName(windowElement, elementClass);
   for(var j = 0; j < elements.length; j++) {
    var element = elements[j];
    if(this.GetFirstParentWindow(element) === windowElement)
     this.AssignElementID(element, index, this.WindowElementIDAssignmentMap[i].prefix, this.WindowElementIDAssignmentMap[i].postfix);
   }
  }
 },
 GetFirstParentWindow: function(el) {
  while(el && el.tagName != "BODY") {
   if(el.nodeType == 1 && el.className.indexOf("dxpclW") > -1 && !isNaN(this.GetWindowIndex(el)))
    return el;
   el = el.parentNode;
  }
 },
 PreventHeaderButtonMouseDownBubbling: function(evt, hdrButton) {
  if(hdrButton) {
   var source = _aspxGetEventSource(evt);
   if(_aspxGetIsParent(hdrButton, source)) {
    aspxPWHMDown(evt);
    return true;
   }
  }
  return false;
 },
 GetWindowElementMouseDownEventHandler: function(index) {
  var instance = this,
   interactiveTagNames = ['INPUT', 'BUTTON', 'TEXTAREA', 'SELECT', 'OPTION', 'A', 'IFRAME'];
  return function(evt) {
   var content = instance.GetWindowContentElement(index),
    target = _aspxGetEventSource(evt);
   if(target && _aspxGetIsParent(content, target) && _aspxArrayIndexOf(interactiveTagNames, target.tagName) > -1)
    return true;
   if(!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
    aspxPWMDown(evt, instance.name, index, instance.isWindowDragging);
  }
 },
 GetWindowElementMouseMoveEventHandler: function(index) {
  var instance = this;
  return function(evt) { aspxPWMMove(evt, instance.name, index); };
 },
 GetWindowHeaderElementMouseDownEventHandler: function(index) {
  var instance = this;
  return function(evt) {
   if(!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
    aspxPWDGMDown(evt, instance.name, index);
  }
 },
 AssignWindowElementsEvents: function(index, element) {
  var instance = this;
  var mdEventName = ASPxClientTouchUI.touchMouseDownEventName;
  _aspxAttachEventToElement(element, mdEventName, this.GetWindowElementMouseDownEventHandler(index), true);
  if(this.allowResize) {
   var mmEventName = ASPxClientTouchUI.touchMouseMoveEventName;
   _aspxAttachEventToElement(element, mmEventName, this.GetWindowElementMouseMoveEventHandler(index));
  }
  var header = this.GetWindowHeaderElement(index);
  if(header && this.allowDragging && !this.isWindowDragging) {
   _aspxAttachEventToElement(header, mdEventName, this.GetWindowHeaderElementMouseDownEventHandler(index), true);
  }
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(sizeGrip) {
   _aspxAttachEventToElement(sizeGrip, mdEventName, function(evt) {
    aspxPWGripMDown(evt, instance.name, index);
    _aspxPreventEvent(evt);
   });
  }
  this.AttachClickToHeaderButton(index, this.GetWindowCloseButton(index), "aspxPWCBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowPinButton(index), "aspxPWPBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowRefreshButton(index), "aspxPWRBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowCollapseButton(index), "aspxPWMNBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowMaximizeButton(index), "aspxPWMXBClick");
 },
 AttachClickToHeaderButton: function(index, headerButton, eventFuncName) {
  var instance = this;
  if(headerButton) {
   _aspxAttachEventToElement(headerButton, "click", function(evt) {
    eval(eventFuncName)(evt, instance.name, index);
   });
  }
 },
 InitializeWindow: function(index) {
  var modalElement = this.GetWindowModalElement(index);
  if(modalElement)
   _aspxAttachEventToElement(modalElement, "mousedown", aspxPWMEMDown);
  this.RemoveWindowAllPopupElements(index);
  this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.AssignWindowElementsID(index, element);
   this.AssignWindowElementsEvents(index, element);
   element.DXPopupWindowElement = true;
   _aspxAttachEventToElement(element, "resize", this.CreateWindowResizeHandler(this.name, index));
   if(__aspxIE)
    this.AttachOnDragStartEventToWindowImages(index);
   var contentUrl = this.GetWindowContentIFrameUrl(index);
   if(contentUrl != "")
    this.SetWindowContentUrlInternal(index, contentUrl);
   element.isHiding = false;
   element.isContentHeightInit = false;
   element.isPopupPositionCorrectionOn = this.isPopupPositionCorrectionOn || !this.GetShowOnPageLoad(index);
   if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) > 0) {
    this.FirstShowWindow(index, false);
    aspxGetPopupControlCollection().SetWindowElementZIndex(element, this.GetZIndex(index));
    element.isPopupPositionCorrectionOn = true;
   }
  }
  this.SetMsTouchDefAction(index);
 },
 CreateWindowResizeHandler: function(name, index) {
  return function() {
   var pc = aspxGetPopupControlCollection().Get(name);
   if(pc)
    pc.ResizeWindowIFrame(index);
  };
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(evt) {
  window.setTimeout(this.SetPopupMaximizedPositionOnBrowserResize.aspxBind(this), 0);
 },
 SetPopupMaximizedPositionOnBrowserResize: function() {
  if(this.HasDefaultWindow())
   this.SetMaximizedPositionOnBrowserResize(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.SetMaximizedPositionOnBrowserResize(i);
 },
 SetMaximizedPositionOnBrowserResize: function(index) {
  var element = this.GetWindowElement(index);
  if(element && this.GetIsMaximized(index) && this.InternalIsWindowVisible(index)) {
   var left = this.GetMaximizedPosition(element, true);
   var top = this.GetMaximizedPosition(element, false);
   this.SetWindowPos(index, element, left, top);
  }
 },
 InitIFrame: function(index) {
  var contentIFrameElement = this.GetWindowContentIFrameElement(index);
  if(contentIFrameElement) {
   contentIFrameElement.popupControlName = this.name;
   contentIFrameElement.pcWndIndex = index;
   _aspxAttachEventToElement(contentIFrameElement, "load", aspxPCIframeLoad);
  }
 },
 InitCollapsedWindows: function(index) {
  if ((this.isCollapsedInit && index == -1) || (index >= 0 && index < this.isCollapsedInitArray.length && this.isCollapsedInitArray[index])){
   if (this.InternalIsWindowVisible(index)){
    this.DoCollapse(index, true);
    if (index == -1)
     this.isCollapsedInit = false;
    else
     this.isCollapsedInitArray[index] = false;
   }
  }
 },
 InitMaximizedWindows: function(index) {
  if ((this.isMaximizedInit && index == -1) || (index >= 0 && index < this.isMaximizedInitArray.length && this.isMaximizedInitArray[index])){
   if (this.InternalIsWindowVisible(index)){
    this.DoMaximize(index, true);
    if (index == -1)
     this.isMaximizedInit = false;
    else
     this.isMaximizedInitArray[index] = false;
   }
  }
 },
 InitPinnedWindows: function(index) {
  if ((this.isPinned && index == -1) || (index >= 0 && index < this.isPinnedArray.length && this.isPinnedArray[index]))
   this.HoldPosition(index, true);
 },
 AfterInitializeWindow: function(index) {
  if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) < 0) {
   this.FirstShowWindow(index, true);
   var element = this.GetWindowElement(index);
   if(element != null)
    element.isPopupPositionCorrectionOn = true;
  }
  this.EnsureContent(index, true);
  this.InitPinnedWindows(index);
  this.InitMaximizedWindows(index);
  this.InitCollapsedWindows(index);
 },
 AttachOnDragStartEventToWindowImages: function(index) {
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowHeaderElement(index));
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowFooterElement(index));
 },
 AttachChildImagesPreventDragStartEvent: function(parentElem) {
  var images = parentElem == null ? null : _aspxGetElementsByTagName(parentElem, "img");
  if(images != null) {
   for(var i = 0; i < images.length; i++)
    _aspxAttachEventToElement(images[i], "dragstart", _aspxPreventDragStart);
  }
 },
 FirstShowWindow: function(index, allowChangeZIndex) {
  var isFreeWindow = this.GetIsDragged(index);
  var x = __aspxInvalidPosition;
  var y = __aspxInvalidPosition;
  if(isFreeWindow) {
   x = this.GetWindowLeft(index);
   y = this.GetWindowTop(index);
   var popupHorizontalOffsetBackup = this.popupHorizontalOffset;
   var popupVerticalOffsetBackup = this.popupVerticalOffset;
   this.popupHorizontalOffset = 0;
   this.popupVerticalOffset = 0;
  }
  this.LockAnimation();
  this.DoShowWindowAtPos(index, x, y, isFreeWindow ? -1 : 0, false, allowChangeZIndex);
  this.UnlockAnimation();
  if(isFreeWindow) {
   this.popupHorizontalOffset = popupHorizontalOffsetBackup;
   this.popupVerticalOffset = popupVerticalOffsetBackup;
  }
  this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
 },
 GetIsDragged: function(index) {
  if(0 <= index && index < this.isDraggedArray.length)
   return this.isDraggedArray[index];
  return this.isDragged;
 },
 SetIsDragged: function(index, value) {
  if(0 <= index && index < this.isDraggedArray.length)
   this.isDraggedArray[index] = value;
  else
   this.isDragged = value;
 },
 GetIsPinned: function(index) {
  if(0 <= index && index < this.isPinnedArray.length)
   return this.isPinnedArray[index];
  return this.isPinned;
 },
 SetIsPinned: function(index, value) {
  if(0 <= index && index < this.isPinnedArray.length)
   this.isPinnedArray[index] = value;
  else
   this.isPinned = value;
 },
 GetPinPosX: function(index) {
  if(0 <= index && index < this.pinXArray.length)
   return this.pinXArray[index];
  return this.pinX;
 },
 SetPinPosX: function(index, pinX) {
  if(0 <= index && index < this.pinXArray.length)
   this.pinXArray[index] = pinX;
  else
   this.pinX = pinX;
 },
 GetPinPosY: function(index) {
  if(0 <= index && index < this.pinYArray.length)
   return this.pinYArray[index];
  return this.pinY;
 },
 SetPinPosY: function(index, pinY) {
  if(0 <= index && index < this.pinYArray.length)
   this.pinYArray[index] = pinY;
  else
   this.pinY = pinY;
 },
 GetIsCollapsed: function(index) {
  if(0 <= index && index < this.isCollapsedArray.length)
   return this.isCollapsedArray[index];
  return this.isCollapsed;
 },
 SetIsCollapsed: function(index, value) {
  if(0 <= index && index < this.isCollapsedArray.length)
   this.isCollapsedArray[index] = value;
  else
   this.isCollapsed = value;
 },
 GetIsMaximized: function(index) {
  if(0 <= index && index < this.isMaximizedArray.length)
   return this.isMaximizedArray[index];
  return this.isMaximized;
 },
 GetIsMaximizedOnWebKitTouch: function(index) {
  return this.GetIsMaximized(index) && __aspxWebKitTouchUI;
 },
 SetIsMaximized: function(index, value) {
  if(0 <= index && index < this.isMaximizedArray.length)
   this.isMaximizedArray[index] = value;
  else
   this.isMaximized = value;
 },
 GetRestoredWindowData: function(index) {
  if(0 <= index && index < this.restoredWindowValuesArray.length)
   return this.restoredWindowValuesArray[index];
  return _aspxCloneObject(this.restoredWindowValues);
 },
 SetRestoredWindowData: function(index, value) {
  if(0 <= index && index < this.restoredWindowValuesArray.length)
   this.restoredWindowValuesArray[index] = value;
  else
   this.restoredWindowValues = value;
 },
 GetIsResized: function(index) {
  if(0 <= index && index < this.isResizedArray.length)
   return this.isResizedArray[index];
  return this.isResized;
 },
 SetIsResized: function(index, value) {
  if(0 <= index && index < this.isResizedArray.length)
   this.isResizedArray[index] = value;
  else
   this.isResized = value;
 },
 GetHorizontalAlign: function() {
  return this.popupHorizontalAlign;
 },
 GetVerticalAlign: function() {
  return this.popupVerticalAlign;
 },
 GetPopupHorizontalOffset: function() {
  return this.popupHorizontalOffset;
 },
 SetPopupHorizontalOffset: function(offset) {
  this.popupHorizontalOffset = offset;
 },
 SetPopupVerticalOffset: function(offset) {
  this.popupVerticalOffset = offset;
 },
 GetPopupVerticalOffset: function() {
  return this.popupVerticalOffset;
 },
 IeWithoutSupportDisplayTable: function () {
  return __aspxIE && __aspxBrowserVersion < 8;
 },
 HasDefaultWindow: function() {
  return this.GetWindowCountCore() == 0;
 },
 GetCurrentLeft: function(index) {
  return this.GetPosition(index, true);
 },
 GetCurrentTop: function(index) {
  return this.GetPosition(index, false);
 },
 GetHeaderHeight: function(index) {
  if(0 <= index && index < this.headerHeightArray.length)
   return this.headerHeightArray[index];
  return this.headerHeight;
 },
 GetFooterHeight: function(index) {
  if(0 <= index && index < this.footerHeightArray.length)
   return this.footerHeightArray[index];
  return this.footerHeight;
 },
 GetWindowFooterHeightLite: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(footer)
   return footer.offsetHeight;
  return null;
 },
 SetHeaderHeight: function(index, height) {
  if(0 <= index && index < this.headerHeightArray.length)
   this.headerHeightArray[index] = height;
  else
   this.headerHeight = height;
 },
 SetFooterHeight: function(index, height) {
  if(0 <= index && index < this.footerHeightArray.length)
   return this.footerHeightArray[index] = height;
  else
   this.footerHeight = height;
 },
 GetPosition: function(index, isLeft) {
  if(0 <= index && index < this.GetWindowCountCore())
   return isLeft ? this.leftArray[index] : this.topArray[index];
  return isLeft ? this.left : this.top;
 },
 SetPopupElementReference: function(index, popupElement, popupElementIndex, attach) {
  if(!_aspxIsExistsElement(popupElement)) return;
  var setReferenceFunction = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
  var windowPopupAction = this.GetWindowPopupAction(index);
  if(windowPopupAction == "LeftMouseClick")
   setReferenceFunction(popupElement, "mouseup", aspxPEMEvent);
  else if(windowPopupAction == "RightMouseClick")
   setReferenceFunction(popupElement, "contextmenu", aspxPEMEvent);
  else if(windowPopupAction == "MouseOver") {
   var windowElement = this.GetWindowElement(index);
   setReferenceFunction(popupElement, "mouseover", ASPxClientPopupUtils.OverControl.OnMouseOver);
   setReferenceFunction(windowElement, "mouseover", aspxPWEMOver);
   if(attach)
    this.SetMSTouchMouseOverReference(popupElement, windowElement, this.name, index, this.appearAfter);
  }
  if(windowPopupAction == "LeftMouseClick" || windowPopupAction == "RightMouseClick") {
   setReferenceFunction(popupElement, "mousedown", aspxPEMEvent);
  }
  if(attach) {
   popupElement.DXPopupElementControl = this;
   popupElement.DXPopupWindowIndex = index;
   popupElement.DXPopupElementIndex = popupElementIndex;
  } else
   popupElement.DXPopupElementControl = popupElement.DXPopupWindowIndex = popupElement.DXPopupElementIndex = undefined;
 },
 SetMSTouchMouseOverReference: function(popupElement, windowElement, popupName, index, appearAfter){
  if(!window.navigator.msPointerEnabled) return;
  popupElement.dxMsTouchGesture = popupElement.dxMsTouchGesture ||
   ASPxClientTouchUI.msTouchCreateGerturesWrapper(popupElement, function(evt){
    window.setTimeout(function(){
     aspxGetPopupControlCollection().SetAppearTimer(popupName, index, popupElement.DXPopupElementIndex, appearAfter, evt);
    }, 0);
   });
  windowElement.dxMsTouchGesture = windowElement.dxMsTouchGesture || ASPxClientTouchUI.msTouchCreateGerturesWrapper(windowElement, function(evt){
   window.setTimeout(function(){
    aspxGetPopupControlCollection().ClearDisappearTimer();
   }, 0);
  });
 },
 PopulatePopupElements: function(index) {
  var ids = this.GetPopupElementIDList(index);
  for(var i = 0; i < ids.length; i++) {
   var popupElement = ASPxClientPopupUtils.FindPopupElementById(ids[i]);
   if(popupElement)
    this.AddWindowPopupElement(index, popupElement);
  }
 },
 GetPopupElement: function(index, popupElementIndex) {
  var popupElement = this.GetPopupElementList(index)[popupElementIndex];
  return popupElement ? popupElement : null;
 },
 GetPopupElementIDList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementIDList[index];
  return this.defaultWindowPopupElementIDList;
 },
 GetPopupElementList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementList[index];
  return this.defaultWindowPopupElementList;
 },
 SetPopupElementIDs: function(index, ids) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupElementIDList[index] = ids;
  this.defaultWindowPopupElementIDList = ids;
 },
 AddPopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(!popupElements[i]) {
    popupElements[i] = element;
    return i;
   }
  }
  popupElements.push(element);
  return popupElements.length - 1;
 },
 RemovePopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(popupElements[i] == element) {
    popupElements[i] = null;
    return;
   }
  }
 },
 AddPopupElement: function(popupElement) {
  this.AddWindowPopupElement(-1, popupElement);
 },
 AddWindowPopupElement: function(index, popupElement) {
  var popupElementIndex = this.AddPopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, popupElementIndex, true);
 },
 RemovePopupElement: function(popupElement) {
  this.RemoveWindowPopupElement(-1, popupElement);
 },
 RemoveWindowPopupElement: function(index, popupElement) {
  this.RemovePopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, null, false);
 },
 RemoveAllPopupElements: function() {
  this.RemoveWindowAllPopupElements(-1);
 },
 RemoveWindowAllPopupElements: function(index) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++)
   this.RemoveWindowPopupElement(index, popupElements[i]);
 },
 GetIsPopuped: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsIsPopupedList[index];
  return this.defaultIsPopuped;
 },
 SetIsPopuped: function(index, isPopuped) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsIsPopupedList[index] = isPopuped;
  this.defaultIsPopuped = isPopuped;
 },
 GetLastShownPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return _aspxGetDefinedValue(info.shownPEIndex, 0);
 },
 SetLastShownPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.shownPEIndex = popupElementIndex;
 },
 GetLastOverPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return _aspxGetDefinedValue(info.overPEIndex, -1);
 },
 SetLastOverPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.overPEIndex = popupElementIndex;
 },
 GetLastUsedPopupElementInfo: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsLastUsedPopupElementInfoList[index];
  return this.defaultLastUsedPopupElementInfo;
 },
 SetWindowPopUpReasonMouseEvent: function(index, evt) {
  evt = _aspxCloneObject(evt);
  if(evt === undefined)
   evt = null;
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupReasonMouseEventList[index] = evt;
  this.defaultPopupReasonMouseEvent = evt;
 },
 GetPopUpReasonMouseEvent: function() {
  return this.GetWindowPopUpReasonMouseEvent(null);
 },
 GetWindowPopUpReasonMouseEvent: function(window) {
  var index = (window != null) ? window.index : -1;
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupReasonMouseEventList[index];
  return this.defaultPopupReasonMouseEvent;
 },
 GetShadowWidth: function() {
  return this.shadowVisible ? __aspxPopupShadowWidth : 0;
 },
 GetShadowHeight: function() {
  return this.shadowVisible ? __aspxPopupShadowHeight : 0;
 },
 GetShowOnPageLoad: function(index) {
  if(0 <= index && index < this.showOnPageLoadArray.length)
   return this.showOnPageLoadArray[index];
  return this.showOnPageLoad;
 },
 GetWindowCountCore: function() {
  return (this.windows.length > 0) ? this.windows.length : this.windowCount;
 },
 GetWindowIFrame: function(index) {
  var element = this.GetWindowElement(index);
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.FindWindowIFrame(index);
   element.overflowElement = iFrame;
  }
  return iFrame;
 },
 FindWindowIFrame: function(index) {
  return _aspxGetElementById(this.name + "_DXPWIF" + index);
 },
 GetWindowModalElement: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return;
  var modalElement = element.modalElement;
  if(!modalElement) {
   modalElement = this.FindWindowModalElement(index);
   element.modalElement = modalElement;
   if(modalElement) {
    modalElement.DXModalPopupControl = this;
    modalElement.DXModalPopupWindowIndex = index;
   }
  }
  return modalElement;
 },
 GetModalElementEndAnimationOpacity: function(index) {
  if(typeof(this.modalElementOpacity) == "undefined")
   this.modalElementOpacity = [];
  if(typeof(this.modalElementOpacity[index]) == "undefined")
   this.modalElementOpacity[index] = _aspxGetElementOpacity(this.GetWindowModalElement(index));
  return this.modalElementOpacity[index];
 },
 FindWindowModalElement: function(index) {
  return _aspxGetElementById(this.name + "_DXPWMB" + index);
 },
 GetWindowElementId: function(index) {
  return this.name + __aspxPCWIdSuffix + index;
 },
 WindowIsModal: function(index) {
  return !!this.GetWindowModalElement(index);
 },
 GetWindowElement: function(index) {
  if(!_aspxIsExistsElement(this.windowElements[index]))
   this.windowElements[index] = _aspxGetElementById(this.GetWindowElementId(index));
  return this.windowElements[index];
 },
 GetWindowCloseButton: function(index) {
  return _aspxGetElementById(this.name + "_HCB" + index);
 },
 GetWindowPinButton: function(index) {
  return _aspxGetElementById(this.name + "_HPB" + index);
 },
 GetWindowRefreshButton: function(index) {
  return _aspxGetElementById(this.name + "_HRB" + index);
 },
 GetWindowCollapseButton: function(index) {
  return _aspxGetElementById(this.name + "_HMNB" + index);
 },
 GetWindowMaximizeButton: function(index) {
  return _aspxGetElementById(this.name + "_HMXB" + index);
 },
 GetWindowChild: function(index, idPostfix) {
  var elem = this.GetWindowElement(index);
  if (elem)
   return _aspxGetChildById(elem, this.name + idPostfix);
  return null;
 },
 GetWindowContentIFrameDivElementID: function(index) {
  return this.name + "_CIFD" + index;
 },
 GetWindowContentIFrameDivElement: function(index) {
  return this.GetWindowChild(index, "_CIFD" + index);
 },
 GetWindowScrollDiv: function(index) {
  return this.GetWindowChild(index, "_CSD" + index);
 },
 GetWindowContentIFrameElementId: function(index) {
  return this.name + "_CIF" + index;
 },
 GetWindowContentIFrameElement: function(index) {
  return this.GetWindowChild(index, "_CIF" + index);
 },
 GetWindowContentIFrameUrl: function(index) {
  if(0 <= index && index < this.contentUrlArray.length)
   return this.contentUrlArray[index];
  return this.contentUrl;
 },
 GetWindowPopupAction: function(index) {
  if(0 <= index && index < this.popupActionArray.length)
   return this.popupActionArray[index];
  return this.popupAction;
 },
 GetWindowCloseAction: function(index) {
  if(0 <= index && index < this.closeActionArray.length)
   return this.closeActionArray[index];
  return this.closeAction;
 },
 SetWindowContentIFrameUrl: function(index, url) {
  if(0 <= index && index < this.contentUrlArray.length)
   this.contentUrlArray[index] = url;
  else
   this.contentUrl = url;
 },
 ShowWindowContentUrl: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  this.LoadWindowContentUrl(index);
  if(contentIFrame && contentIFrame.DXReloadAfterShowRequired) {
   this.RefreshWindowContentUrl(this.GetWindow(index));
   contentIFrame.DXReloadAfterShowRequired = false;
  }
 },
 LoadWindowContentUrl: function(index) {
  var url = this.GetWindowContentIFrameUrl(index);
  this.LoadWindowContentFromUrl(index, url);
 },
 LoadWindowContentFromUrl: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  if(element && element.src != url && element.DXSrcRaw != url) {
   this.SetSrcToIframeElement(index, element, url);
   this.SetWindowContentIFrameUrl(index, element.src);
  }
 },
 SetSrcToIframeElement: function(index, iframeElement, src) {
  this.SetIframeLoading(index, true);
  iframeElement.src = src;
  if(__aspxChrome && src.indexOf("#"))
   this.PreventScrollingAfterIframeLoaded(iframeElement)
  iframeElement.DXSrcRaw = src;
 },
 PreventScrollingAfterIframeLoaded: function(iframeElement){
  var docScrollTop = _aspxGetDocumentScrollTop();
  var onIframeLoadedHandler = function(){
   window.setTimeout(function() {
    _aspxSetDocumentScrollTop(docScrollTop);
    _aspxDetachEventFromElement(iframeElement, "load", onIframeLoadedHandler);
   }, 0);
  };
  _aspxAttachEventToElement(iframeElement, "load", onIframeLoadedHandler);
 },
 GetWindowContentElement: function(index) {
  return this.GetWindowChild(index, "_PWC" + index);
 },
 GetWindowHeaderElement: function(index) {
  return this.GetWindowChild(index, "_PWH" + index);
 },
 GetWindowHeaders: function() {
  var elements = [];
  if(this.HasDefaultWindow())
   elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetWindowElement(-1), "dxpc-header"));
  for(var i = 0; i < this.GetWindowCount(); i++)
   elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetWindowElement(i), "dxpc-header"));
  return elements;
 },
 GetWindowSizeGripElement: function(index) {
  return this.GetWindowSizeGripLite(index);
 },
 GetWindowSizeGripLite: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(!footer)
   return null;
  var descendants = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.SizeGripLiteCssClassName);
  return descendants.length > 0 ? descendants[0] : null;
 },
 GetWindowFooterElement: function(index) {
  return this.GetWindowChild(index, "_PWF" + index);
 },
 GetContentContainer: function(index) {
  return this.GetWindowContentElement(index);
 },
 GetWindowIndex: function(element) {
  var id = element.id;
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  return parseInt(id.substr(pos + __aspxPCWIdSuffix.length));
 },
 HaveSpecialDivForAnimation: function() {
  return this.enableAnimation;
 },
 GetWindowMainCell: function (element) {
  if(this.IeWithoutSupportDisplayTable() && this.HaveSpecialDivForAnimation())
   return _aspxGetDescendantNodesByClassName(element, ASPxClientPopupControlCssClasses.MainDivLiteCssClass)[0];
  return this.HaveSpecialDivForAnimation() ? _aspxGetChildByTagName(element, "DIV", 0) : element;
 },
 GetWindowMainTable: function(element) {
  return this.GetWindowMainCell(element);
 },
 GetWindowShadowTable: function(index){
  var shadowTable = this.HaveSpecialDivForAnimation() ? this.GetWindowShadowTableCore(index) : this.GetWindowElement(index);
  if (!shadowTable) return null;
  if(shadowTable.tagName != "TABLE")
   shadowTable = this.GetWindowShadowTableCore(index);
  return (shadowTable && shadowTable.tagName == "TABLE") ? shadowTable : null;
 },
 GetWindowShadowTableCore: function(index) {
  return this.GetWindowChild(index, "_PWST" + index);
 },
 GetWindowClientTable: function(index) {
  return this.GetWindowElement(index);
 },
 GetWindowIsShown: function (index) {
  if (0 <= index && index < this.shownArray.length)
   return this.shownArray[index];
  return this.shown;
 },
 SetWindowIsShown: function (index, shown) {
  if (0 <= index && index < this.shownArray.length)
   this.shownArray[index] = shown;
  else
   this.shown = shown;
 },
 GetWindowLeft: function(index) {
  if(0 <= index && index < this.leftArray.length)
   return this.leftArray[index];
  return this.left;
 },
 SetWindowLeft: function(index, left) {
  if(0 <= index && index < this.leftArray.length)
   this.leftArray[index] = left;
  else
   this.left = left;
 },
 GetWindowHeightInternal: function(index) {
  if(0 <= index && index < this.heightArray.length)
   return this.heightArray[index];
  return this.height;
 },
 GetWindowMinHeight: function(index) {
  if(0 <= index && index < this.minHeightArray.length)
   return this.minHeightArray[index];
  return this.minHeight;
 },
 GetWindowMaxHeight: function(index) {
  if(0 <= index && index < this.maxHeightArray.length)
   return this.maxHeightArray[index];
  return this.maxHeight;
 },
 SetWindowHeight: function(index, height) {
  if(0 <= index && index < this.heightArray.length)
   this.heightArray[index] = height;
  else
   this.height = height;
 },
 GetWindowWidthInternal: function(index) {
  if(0 <= index && index < this.widthArray.length)
   return this.widthArray[index];
  return this.width;
 },
 GetWindowMinWidth: function(index) {
  if(0 <= index && index < this.minWidthArray.length)
   return this.minWidthArray[index];
  return this.minWidth;
 },
 GetWindowMaxWidth: function(index) {
  if(0 <= index && index < this.maxWidthArray.length)
   return this.maxWidthArray[index];
  return this.maxWidth;
 },
 SetWindowWidth: function(index, width) {
  if(0 <= index && index < this.widthArray.length)
   this.widthArray[index] = width;
  else
   this.width = width;
 },
 GetWindowTop: function(index) {
  if(0 <= index && index < this.topArray.length)
   return this.topArray[index];
  return this.top;
 },
 SetWindowTop: function(index, top) {
  if(0 <= index && index < this.topArray.length)
   return this.topArray[index] = top;
  else
   return this.top = top;
 },
 GetWindowsStateInputElement: function() {
  return _aspxGetElementById(this.name + "WS");
 },
 GetZIndex: function(index) {
  if(0 <= index && index < this.zIndexArray.length)
   return this.zIndexArray[index];
  return this.zIndex;
 },
 GetCurrentZIndex: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(element.style.zIndex != "")
    return element.style.zIndex;
   if(0 <= index && index < this.GetWindowCountCore())
    return this.zIndexArray[index];
   return this.zIndex;
  }
 },
 GetMainWindowWidth: function(index, noCache){
  return this.GetClientWindowWidth(index, true, noCache);
 },
 GetClientWindowWidth: function(index, outerSize, noCache) {
  if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))){
   var cachedSize = this.GetWindowCachedSize(index);
   if (cachedSize != null)
    return cachedSize.width;
  }
  var element = this.GetWindowElement(index);
  if(element != null)
   return element.offsetWidth;
 },
 GetMainWindowHeight: function(index, noCache){
  return this.GetClientWindowHeight(index, true, noCache);
 },
 GetClientWindowHeight: function(index, outerSize, noCache) {
  if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))){
   var cachedSize = this.GetWindowCachedSize(index);
   if (cachedSize != null)
    return cachedSize.height;
  }
  var element = this.GetWindowElement(index);
  if(element != null)
   return element.offsetHeight;
 },
 GetIframeLoading: function(index) {
  if(0 <= index && index < this.iframeLoadingArray.length)
   return this.iframeLoadingArray[index];
  return this.iframeLoading;
 },
 SetIframeLoading: function(index, value) {
  if(0 <= index && index < this.iframeLoadingArray.length)
   this.iframeLoadingArray[index] = value;
  else
   this.iframeLoading = value;
 },
 GetAutoUpdatePosition: function(index) {
  if(0 <= index && index < this.autoUpdatePositionArray.length)
   return this.autoUpdatePositionArray[index];
  return this.autoUpdatePosition;
 },
 GetHideBodyScrollWhenModal: function(index) {
  if(0 <= index && index < this.hideBodyScrollWhenModalArray.length)
   return this.hideBodyScrollWhenModalArray[index];
  return this.hideBodyScrollWhenModal;
 },
 SetHideBodyScrollWhenModal: function(index, value) {
  if(0 <= index && index < this.hideBodyScrollWhenModalArray.length)
   this.hideBodyScrollWhenModalArray[index] = value;
  else
   this.hideBodyScrollWhenModal = value;
 },
 GetClientPopupPos: function(element, popupElement, pos, isX, isDragged) {
  var index = this.GetWindowIndex(element);
  var popupPosition = null;
  if(this.GetIsMaximizedOnWebKitTouch(index))
   return new _aspxPopupPosition(_aspxPrepareClientPosForElement(0, element, isX), false);
  if(isDragged)
   popupPosition = new _aspxPopupPosition(pos == __aspxInvalidPosition ? this.GetPosition(index, isX) : pos, false);
  else
   popupPosition = isX ? this.GetClientPopupPosX(element, popupElement, pos) : this.GetClientPopupPosY(element, popupElement, pos);
  popupPosition.position = _aspxPrepareClientPosForElement(popupPosition.position, element, isX);
  if(__aspxFirefox && __aspxBrowserVersion < 3 && this.GetWindowModalElement(index))
   popupPosition.position -= isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
  return popupPosition;
 },
 GetClientPopupPosX: function(element, popupElement, x) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPxClientPopupUtils.GetPopupAbsoluteX(mainElement, this.GetShadowWidth(), popupElement, this.popupHorizontalAlign, this.popupHorizontalOffset,
   x, this.GetWindowLeft(this.GetWindowIndex(element)), this.rtl, this.isPopupFullCorrectionOn);
  return this.CorrectPopupPositionForClientWindow(element, popupPosition, true);
 },
 GetClientPopupPosY: function(element, popupElement, y) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPxClientPopupUtils.GetPopupAbsoluteY(mainElement, this.GetShadowHeight(), popupElement, this.popupVerticalAlign, this.popupVerticalOffset,
   y, this.GetWindowTop(this.GetWindowIndex(element)), this.isPopupFullCorrectionOn);
  return (this.allowCorrectYOffsetPosition ? this.CorrectPopupPositionForClientWindow(element, popupPosition, false) : popupPosition);
 },
 CorrectPopupPositionForClientWindow: function(element, popupPosition, isX) {
  if(element.isPopupPositionCorrectionOn && this.isPopupFullCorrectionOn) {
   popupPosition.position = ASPxClientPopupUtils.AdjustPositionToClientScreen(element,
    isX ? this.GetShadowWidth() : this.GetShadowHeight(), popupPosition.position, isX);
  }
  return popupPosition;
 },
 DoShowWindow: function(index, popupElementIndex, evt) {
  if(!this.InternalIsWindowVisible(index)) {
   var x = _aspxGetEventX(evt);
   var y = _aspxGetEventY(evt);
   this.DoShowWindowAtPos(index, x, y, popupElementIndex, true, true, evt);
  }
 },
 AdjustContentOnShow: function(index) {
  var windowElement = this.GetWindowElement(index);
  if(this.adjustInnerControlsSizeOnShow)
   aspxGetControlCollection().AdjustControls(windowElement);
 },
 DoShowWindowAtPos: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt) {
  if(!this.isInitialized)
   this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.StopCloseAnimation(index);
   if(this.adjustInnerControlsSizeOnShow) {
    var windowContent = this.GetContentContainer(index);
    var collection = aspxGetControlCollection();
    collection.CollapseControls(windowContent);
   }
   this.FFTextCurFixShow(index, true);
   if(closeOtherWindows)
    aspxGetPopupControlCollection().DoHideAllWindows(element, this.GetWindowElementId(index), false);
   var isMoving = this.InternalIsWindowVisible(index);
   _aspxSetElementDisplay(element, true);
   element.style.display = this.HasAnyScrollBars(index) || this.IeWithoutSupportDisplayTable() ? "block" : "table";
   element.style.position = "absolute";
   var scrollDiv = this.GetWindowScrollDiv(index),
    shouldResetScrollSize = scrollDiv && this.enableContentScrolling && _aspxGetDocumentMaxClientHeight() <= element.offsetHeight,
    savedScrollDivHeight = shouldResetScrollSize && scrollDiv.style.height;
   if (shouldResetScrollSize)
    scrollDiv.style.height = 0;
   var cachedSize = this.GetWindowCachedSize(index);
   if(cachedSize != null) {
    this.SetWindowSize(this.GetWindow(index), cachedSize.width, cachedSize.height);
    this.ResetWindowCachedSize(index);
   }
   if (!this.GetWindowIsShown(index)) {
    var width = this.GetPopupWindowDimensionFromCache(index, true),
     height = this.GetPopupWindowDimensionFromCache(index, false);
    this.SetClientWindowSizeCoreLite(index, width, height);
    this.SetWindowIsShown(index, true);
   }
   this.RefreshRootDivElementSize(index);
   var popupElement = this.GetPopupElement(index, popupElementIndex);
   if(popupElement)
    this.SetLastShownPopupElementIndex(index, popupElementIndex);
   var isDragged = this.GetIsDragged(index),
    isMaximized = this.GetIsMaximized(index);
   if (isMaximized)
    this.NormalizeMaximizedWindowSize(index);
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, isDragged);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, isDragged);
   var clientX = horizontalPopupPosition.position;
   var clientY = verticalPopupPosition.position;
   this.SetWindowPos(index, element, clientX, clientY);
   if(shouldResetScrollSize)
    scrollDiv.style.height = savedScrollDivHeight;
   if(this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
    ASPxClientPopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
   this.DoShowWindowModalElement(index);
   var isAnimationNeed = this.IsAnimationAllowed() && !isMoving;
   if(isAnimationNeed) {
    if(this.popupAnimationType === 'slide')
     this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
    else
     this.StartFadeAnimation(element, index);
   } else
    _aspxSetElementVisibility(element, true);
   this.SetWindowPopUpReasonMouseEvent(index, evt);
   this.ShowWindowContentUrl(index);
   this.AdjustContentOnShow(index);
   var scrollDiv = this.GetWindowScrollDiv(index);
   if(scrollDiv && this.enableContentScrolling) {
    var dimension = null;
    var windowMainCell = this.GetWindowMainCell(element);
    if(windowMainCell.style.width && windowMainCell.style.height)
     dimension = 'both';
    else if(windowMainCell.style.width)
     dimension = 'width';
    else if(windowMainCell.style.height)
     dimension = 'height';
    if(!dimension)
     return;
    _aspxSetElementDisplay(scrollDiv, false);
    this.SetWindowScrollDivSize(scrollDiv, index, dimension);
    _aspxSetElementDisplay(scrollDiv, true);
   }
   if(!isMoving) {
    aspxGetPopupControlCollection().RegisterVisibleWindow(element, this, index);
    this.RaisePopUp(index);
    if(!this.IsAnimationAllowed())
     this.OnWindowShown(index);
   }
   if(allowChangeZIndex)
    aspxGetPopupControlCollection().ActivateWindowElement(element);
   this.CorrectWindowSizeGripPositionLite(index);
   this.CorrectWindowHeaderText(index);
   this.InitMaximizedWindows(index);
   this.InitCollapsedWindows(index);
   if (this.GetIsPinned(index)) window.setTimeout(function(){this.HoldPosition(index, true);}.aspxBind(this), 0);
   if (!this.GetShowOnPageLoad(index))
    this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
  }
 },
 GetPopupWindowDimensionFromCache: function(index, isWidth) {
  var dimension;
  if(isWidth) {
   dimension = Math.max(this.GetWindowWidthInternal(index), this.GetWindowMinWidth(index));
   var maxWidth = this.GetWindowMaxWidth(index);
   if(maxWidth)
    dimension = Math.min(dimension, maxWidth);
  }
  else {
   dimension = Math.max(this.GetWindowHeightInternal(index), this.GetWindowMinHeight(index));
   var maxHeight = this.GetWindowMaxHeight(index);
   if(maxHeight)
    dimension = Math.min(dimension, maxHeight);
  }
  return dimension;
 },
 NormalizeMaximizedWindowSize: function(index) {
  var width = this.GetPopupWindowDimensionFromCache(index, true),
   height = this.GetPopupWindowDimensionFromCache(index, false),
   documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
   documentClientHeight = ASPxClientPopupUtils.GetDocumentClientHeightForPopup();
   sizeNormalizationIsNeeded = width < documentClientWidth || height < documentClientHeight;
  if (sizeNormalizationIsNeeded)
   this.NormalizeWindowSize(index, true);
 },
 NormalizeWindowSize: function(index, isMaximized) {
  var width = this.GetClientWindowWidth(index),
   height = this.GetClientWindowHeight(index),
   normWidth = width,
   normHeight = height,
   maxWidth = this.GetWindowMaxWidth(index),
   minWidth = this.GetWindowMinWidth(index),
   maxHeight = this.GetWindowMaxHeight(index),
   minHeight = this.GetWindowMinHeight(index);
  if(maxWidth)
   normWidth = Math.min(normWidth, maxWidth);
  if(minWidth)
   normWidth = Math.max(normWidth, minWidth);
  if(maxHeight)
   normHeight = Math.min(normHeight, maxHeight);
  if(minHeight)
   normHeight = Math.max(normHeight, minHeight);
  if(normWidth !== width || normHeight !== height)
   this.SetWindowSize(this.GetWindow(index), normWidth, normHeight);
  if(isMaximized) {
   var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
   var documentClientHeight = ASPxClientPopupUtils.GetDocumentClientHeightForPopup();
   if(this.GetIsCollapsed(index)) {
    if(normWidth != documentClientWidth) {
     this.SetWindowSizeByIndexCore(index, documentClientWidth, normHeight, true);
    }
   } else {
    if(normWidth != documentClientWidth || normHeight != documentClientHeight) {
     this.SetWindowSizeByIndexCore(index, documentClientWidth, documentClientHeight, false);
    }
   }
  }
 },
 RefreshRootDivElementSize: function(index) {
  if(this.IsAnimationAllowed()) {
   var window = this.GetWindowElement(index);
   var windowMainTable = this.GetWindowMainTable(window);
   var height = windowMainTable.offsetHeight;
   var width = windowMainTable.offsetWidth;
   height -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(window);
   width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(window);
   _aspxSetStyles(window, { width: width, height: height });
  }
 },
 DoShowWindowIFrame: function(index, x, y, width, height) {
  if(!this.renderIFrameForPopupElements) return;
  var element = this.GetWindowElement(index);
  var iFrame = this.GetWindowIFrame(index);
  if(element && iFrame) {
   var cell = this.GetWindowMainCell(element);
   if(width < 0)
    width = cell.offsetWidth;
   if(height < 0)
    height = cell.offsetHeight;
   _aspxSetStyles(iFrame, { width: width, height: height });
   if (x != __aspxInvalidPosition && y != __aspxInvalidPosition)
    _aspxSetStyles(iFrame, { left: x, top: y });
   if(__aspxIE || __aspxFirefox)
    this.ClearWindowIframeBodyInnerHtml(iFrame);
   _aspxSetElementDisplay(iFrame, true);
  }
 },
 GetIframeBody: function(iFrame) {
  var document = iFrame.contentDocument || iFrame.contentWindow.document;
  if(document)
   return document.getElementsByTagName('body')[0];
 },
 ClearWindowIframeBodyInnerHtml: function(iFrame) {
  var iFrameBody = this.GetIframeBody(iFrame);
  if(iFrameBody)
   iFrameBody.innerHTML = "";
 },
 DoShowWindowModalElement: function(index) {
  var modalElement = this.GetWindowModalElement(index);
  if(modalElement) {
   var bodyScrollHasJustBeingHidden = false;
   if(this.GetHideBodyScrollWhenModal(index) && !this.IsWindowVisible(this.GetWindow(index))) {
    bodyScrollHasJustBeingHidden = true;
    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
    ASPxClientPopupUtils.BodyScrollHelper.HideBodyScroll(this.GetWindowElementId(index));
   }
   if (__aspxIE)
    _aspxAttachEventToElement(modalElement, _aspxGetMouseWheelEventName(), function (evt) { return _aspxPreventEventAndBubble(evt); });
   _aspxSetElementDisplay(modalElement, true);
   aspxGetPopupControlCollection().AdjustModalElementBounds(modalElement);
   if (this.popupAnimationType == "fade") {
    var endOpacity = this.GetModalElementEndAnimationOpacity(index);
    if (__aspxIE && __aspxBrowserMajorVersion < 9) {
     _aspxSetElementVisibility(modalElement, true);
     ASPxAnimationHelper.setOpacity(modalElement, 0);
    } else {
     ASPxAnimationHelper.setOpacity(modalElement, 0);
     _aspxSetElementVisibility(modalElement, true);
    }
    ASPxAnimationHelper.fadeTo(modalElement, { to: endOpacity });
   } else {
    _aspxSetElementVisibility(modalElement, true);
   }
   aspxGetPopupControlCollection().RegisterVisibleModalElement(modalElement);
   if(bodyScrollHasJustBeingHidden)
    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 DoHideWindowCore: function(index) {
  this.FFTextCurFixHide(index, true);
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(this.HasCloseAnimation())
    this.PrepareElementAfterCloseAnimation(element);
   element.isHiding = true;
   this.SetIsDragged(index, false);
   this.UpdateWindowsStateInputElement();
   this.UpdateWindowsStateCookie();
   element.isHiding = false;
   this.StopShowAnimation(index);
   _aspxSetElementDisplay(element, false);
   _aspxSetElementVisibility(element, false);
   if(this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
    ASPxClientPopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
   this.DoHideWindowModalElement(element);
   this.DoHideWindowIFrame(element);
   aspxGetPopupControlCollection().UnregisterVisibleWindow(element);
   this.HideWindowLoadingPanel(index);
  }
 },
 PrepareElementAfterCloseAnimation: function(element) {
  element.closeAnimationCompleted = true;
  if(this.closeAnimationType == "fade")
   _aspxSetStyles(element, { opacity: 1 });
  else
   _aspxSetStyles(this.GetWindowMainTable(element), {
    left: 0,
    top: 0
   });
 },
 HasCloseAnimation: function(){
  return this.closeAnimationType != "none";
 },
 StopCloseAnimation: function(index) {
  var element = this.GetWindowElement(index);
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted) {
   ASPxAnimationHelper.cancelAnimation(element);
   this.DoHideWindowCore(index);
  }
 },
 StopShowAnimation: function(index){
  if(this.popupAnimationType != "none") {
   var windowElement = this.GetWindowElement(index);
   if(this.popupAnimationType === 'slide')
    ASPxClientPopupUtils.StopAnimation(windowElement, this.GetWindowMainCell(windowElement));
   else
    ASPxAnimationHelper.cancelAnimation(windowElement);
  }
 },
 DoHideWindowCoreWithAnimation: function(index) {
  this.StopShowAnimation(index);
  var element = this.GetWindowElement(index);
  element.closeAnimationCompleted = false;
  if (this.closeAnimationType == "fade") {
   if (element.modalElement)
    ASPxAnimationHelper.fadeOut(element.modalElement, null, this.fadeAnimationDuration);
   ASPxAnimationHelper.fadeOut(element, function() {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index);
   }.aspxBind(this), this.fadeAnimationDuration);
  }
  else
   this.DoHideWindowWithSlideAnimation(index);
 },
 DoHideWindowWithSlideAnimation: function(index) {
  var element = this.GetWindowElement(index);
  var horizontalPopupPosition = this.GetClientPopupPos(element, null, __aspxInvalidPosition, true, true);
  var verticalPopupPosition = this.GetClientPopupPos(element, null, __aspxInvalidPosition, false, true);
  var horizontalDirection = ASPxClientPopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
  var verticalDirection = ASPxClientPopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
  ASPxClientPopupUtils.InitAnimationDivCore(element);
  ASPxAnimationHelper.createMultipleAnimationTransition(this.GetWindowMainTable(element), {
   duration: this.slideAnimationDuration,
   onComplete: function (element) {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index);
   }.aspxBind(this)
  }).Start({
   left: { to: horizontalDirection * element.offsetWidth, unit: "px" },
   top: { to: verticalDirection * element.offsetHeight, unit: "px" }
  });
 },
 DoHideWindow: function(index, dontRaiseClosing) {
  if(!this.InternalIsWindowVisible(index)) return;
  var cancel = !dontRaiseClosing && this.RaiseClosing(index);
  if(!cancel) {
   if(this.HasCloseAnimation())
    this.DoHideWindowCoreWithAnimation(index);
   else {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index);
   }
  }
  return cancel;
 },
 DoHideWindowIFrame: function(element) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   _aspxSetElementDisplay(iFrame, false);
 },
 DoHideWindowModalElement: function(element) {
  var modalElement = element.modalElement;
  if(modalElement) {
   aspxGetPopupControlCollection().UnregisterVisibleModalElement(modalElement);
   if(this.GetHideBodyScrollWhenModal(this.GetWindowIndex(element))) {
    if(__aspxWebKitFamily)
     aspxGetPopupControlCollection().LockScrollEvent();
    ASPxClientPopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
    if(__aspxWebKitFamily)
     aspxGetPopupControlCollection().UnlockScrollEvent();
   }
   _aspxSetStyles(modalElement, { width: 1, height: 1 });
   _aspxSetElementVisibility(modalElement, false);
   _aspxSetElementDisplay(modalElement, false);
  }
 },
 SetWindowDisplay: function(index, value) {
  var pcwElement = this.GetWindowElement(index);
  this.SetFFTextCurFixShowing(index, value, false);
  _aspxSetElementDisplay(pcwElement, value);
 },
 GetTextCurFixDiv: function(index) {
  return _aspxGetElementById(this.name + "_" + "TCFix" + index);
 },
 FFTextCurFixShow: function(index, isSetVisibility) {
  this.SetFFTextCurFixShowing(index, true, isSetVisibility);
 },
 FFTextCurFixHide: function(index, isSetVisibility) {
  this.SetFFTextCurFixShowing(index, false, isSetVisibility);
 },
 IsFFTextCurFixRequired: function(index) {
  return __aspxFirefox && __aspxBrowserVersion < 3 && this.GetWindowModalElement(index);
 },
 SetFFTextCurFixShowing: function(index, value, isSetVisibility) {
  if(this.IsFFTextCurFixRequired(index)) {
   var fixDiv = this.GetTextCurFixDiv(index);
   if(fixDiv) {
    if(isSetVisibility)
     _aspxSetElementVisibility(fixDiv, value);
    _aspxSetElementDisplay(fixDiv, value);
   }
  }
 },
 SetWindowPos: function (index, element, x, y) {
  _aspxSetStyles(element, { left: x, top: y });
  this.DoShowWindowIFrame(index, x, y, __aspxInvalidDimension, __aspxInvalidDimension);
  this.SetIsDragged(index, true);
  this.SetWindowLeft(index, _aspxGetAbsoluteX(element));
  this.SetWindowTop(index, _aspxGetAbsoluteY(element));
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 OnWindowShown: function(windowIndex) {
  this.EnsureContent(windowIndex, false);
  this.EnsureIFrameHeightAdjusted(windowIndex);
  this.NormalizeWindowSize(windowIndex, this.GetIsMaximized(windowIndex));
  this.RaiseShown(windowIndex);
  var loadingElementsWillNotBeShown = !this.lpTimers[windowIndex] || this.lpTimers[windowIndex] < 0;
  if(this.InWindowCallback(windowIndex) && loadingElementsWillNotBeShown) {
   this.ShowWindowLoadingElementsInternal(windowIndex);
  }
 },
 EnsureContent: function(windowIndex, isInit) {
  var element = this.GetWindowElement(windowIndex);
  if(element && !element.loaded && !element.loading) {
   var shouldLoad = this.contentLoadingMode == "OnPageLoad" || this.contentLoadingMode == "OnFirstShow" && !isInit;
   if(shouldLoad) {
    element.loading = true;
    this.CreateWindowCallback(windowIndex, windowIndex);
   } else if(this.contentLoadingMode == "Default")
    element.loaded = true;
  }
 },
 CreateWindowCallback: function(windowIndex, argument) {
  this.IncreaseWindowRequestCount(windowIndex);
  var element = this.GetWindowElement(windowIndex);
  if(this.contentLoadingMode != "OnPageLoad" || !element.loading || this.GetShowOnPageLoad(windowIndex))
   this.ShowWindowLoadingElements(windowIndex);
  this.CreateCallback(argument);
 },
 OnCallback: function(result) {
  this.OnCallbackInternal(result.html, result.index, false);
 },
 OnCallbackError: function(result, data) {
  this.OnCallbackInternal(result, _aspxIsExists(data) ? data : -1, true);
 },
 OnCallbackErrorAfterUserHandle: function(result, data) {
  this.DecreaseWindowRequestCount(data);
 },
 RaiseCallbackError: function (message) {
  var result = ASPxClientControl.prototype.RaiseCallbackError.call(this, message);
  if (result.isHandled)
   this.HideAllLoadingPanels();
  return result;
 },
 OnCallbackInternal: function(html, windowIndex, isError) {
  var element = this.GetWindowElement(windowIndex);
  element.loaded = !isError;
  element.loading = false;
  this.DecreaseWindowRequestCount(windowIndex);
  this.HideWindowLoadingPanel(windowIndex);
  this.SetWindowContentHtmlCore(windowIndex, html)
  this.savedCallbackWindowIndex = windowIndex;
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 IncreaseWindowRequestCount: function(index) {
  !this.windowRequestCount[index] ? this.windowRequestCount[index] = 1 : this.windowRequestCount[index]++;
 },
 DecreaseWindowRequestCount: function(index) {
  this.windowRequestCount[index]--;
 },
 InWindowCallback: function(windowIndex) {
  return this.windowRequestCount[windowIndex] > 0;
 },
 ShowWindowLoadingElements: function(windowIndex) {
  if(this.lpTimers[windowIndex] && this.lpTimers[windowIndex] > -1) return;
  if(this.enableCallbackAnimation)
   this.StartWindowBeginCallbackAnimation(windowIndex);
  else
   this.ShowWindowLoadingElementsInternal(windowIndex);
 },
 ShowWindowLoadingElementsInternal: function(windowIndex) {
  if(this.lpDelay > 1 && !this.enableCallbackAnimation) {
   var _this = this;
   this.lpTimers[windowIndex] = _aspxSetTimeout(function() { _this.ShowWindowLoadingPanelOnTimer(windowIndex); }, this.lpDelay);
  }
  else
   this.ShowWindowLoadingPanel(windowIndex);
 },
 StartWindowBeginCallbackAnimation: function (windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  this.isCallbackFinishedStates[windowIndex] = false;
  ASPxAnimationHelper.fadeOut(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowBeginCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowBeginCallbackAnimation: function (windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = false;
  if(!this.isCallbackFinishedStates[windowIndex])
   this.ShowWindowLoadingElementsInternal(windowIndex);
  else
   this.DoCallback(this.savedCallbackResults[windowIndex]);
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  var windowIndex = this.EvalCallbackResult(callbackResult).result.index;
  if(this.enableCallbackAnimation && this.callbackAnimationProcessings[windowIndex]) {
   this.savedCallbackResults[windowIndex] = callbackResult;
   this.isCallbackFinishedStates[windowIndex] = true;
   return true;
  }
  return false;
 },
 StartWindowEndCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  ASPxAnimationHelper.fadeIn(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowEndCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowEndCallbackAnimation: function(windowIndex) {
  this.DoEndCallback();
  this.callbackAnimationProcessings[windowIndex] = false;
 },
 CheckEndCallbackAnimationNeeded: function() {
  var windowIndex = this.savedCallbackWindowIndex;
  this.savedCallbackWindowIndex = null;
  if(windowIndex !== null && !this.callbackAnimationProcessings[windowIndex]) {
   this.StartWindowEndCallbackAnimation(windowIndex);
   return true;
  }
  return false;
 },
 CreateLoadingDiv: function(parentElement, offsetElement, windowIndex) {
  if(typeof(windowIndex) != "undefined") {
   var loadingDiv = ASPxClientControl.prototype.CreateLoadingDiv.call(this, parentElement, offsetElement);
   loadingDiv.id += windowIndex;
   return loadingDiv;
  }
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement, windowIndex) {
  if(typeof(windowIndex) != "undefined") {
   var loadingPanel = ASPxClientControl.prototype.CreateLoadingPanelWithAbsolutePosition.call(this, parentElement, offsetElement);
   loadingPanel.id += windowIndex;
   return loadingPanel;
  }
 },
 ShowWindowLoadingPanelOnTimer: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  this.ShowWindowLoadingPanel(windowIndex);
 },
 ClearWindowLoadingPanelTimer: function(windowIndex) {
  this.lpTimers[windowIndex] = _aspxClearTimer(this.lpTimers[windowIndex]);
 },
 ShowWindowLoadingPanel: function(windowIndex) {
  if (!this.IsExistLoadingPanel())
   return;
  if(!this.loadingPanels[windowIndex]) {
   var contentElement = this.GetWindowContentWrapperElement(windowIndex);
   this.loadingDivs[windowIndex] = this.CreateLoadingDiv(this.GetWindowElement(windowIndex).parentNode, contentElement, windowIndex);
   this.loadingPanels[windowIndex] = this.CreateLoadingPanelWithAbsolutePosition(this.GetWindowElement(windowIndex).parentNode, contentElement, windowIndex);
  }
 },
 HideAllLoadingPanels: function () {
  if (this.HasDefaultWindow())
   this.HideWindowLoadingPanel(-1);
  for (var i = 0; i < this.GetWindowCount() ; i++)
   this.HideWindowLoadingPanel(i);
 },
 HideWindowLoadingPanel: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  if(this.loadingDivs[windowIndex]) {
   _aspxRemoveElement(this.loadingDivs[windowIndex]);
   this.loadingDivs[windowIndex] = null;
  }
  if(this.loadingPanels[windowIndex]) {
   _aspxRemoveElement(this.loadingPanels[windowIndex]);
   this.loadingPanels[windowIndex] = null;
  }
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 IsLoadingContainerVisible: function() {
  return true;
 },
 IsExistLoadingPanel: function() {
  return !!this.GetLoadingDiv();
 },
 InitializeDOM: function() {
  if(this.HasDefaultWindow()) {
   var windowElement = this.GetWindowElement(-1);
   if(windowElement)
    windowElement["dxinit"] = true;
  }
  for(var i = 0; i < this.GetWindowCount(); i++) {
   var windowElement = this.GetWindowElement(i);
   if(windowElement)
    windowElement["dxinit"] = true;
  }
 },
 IsDOMInitialized: function() {
  if(this.HasDefaultWindow()) {
   var windowElement = this.GetWindowElement(-1);
   return windowElement && windowElement["dxinit"];
  }
  for(var i = 0; i < this.GetWindowCount(); i++) {
   var windowElement = this.GetWindowElement(i);
   if(!windowElement || !windowElement["dxinit"])
    return false;
  }
  return true;
 },
 PerformCallback: function(parameter) {
  this.PerformWindowCallback(null, parameter);
 },
 PerformWindowCallback: function(window, parameter) {
  parameter = _aspxIsExists(parameter) ? parameter.toString() : ""
  var index = (window != null) ? window.index : -1;
  if(!this.InWindowCallback(index)) {
   var windowCallbackArguments = index + ";" + parameter;
   this.CreateWindowCallback(index, windowCallbackArguments);
  }
 },
 RegisterInControlTree: function(tree) {
  var mainNode = tree.createNode(null, this);
  if(this.HasDefaultWindow())
   this.RegisterRelatedNodeForWindowElement(tree, -1, mainNode);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.RegisterRelatedNodeForWindowElement(tree, i, mainNode);
 },
 RegisterRelatedNodeForWindowElement: function(tree, windowElementIndex, mainNode) {
  var windowElement = this.GetWindowElement(windowElementIndex);
  if(windowElement) {
   var childNode = tree.createNode(windowElement.id, null);
   tree.addRelatedNode(mainNode, childNode);
  }
 },
 PrepareContentCellForHeigthCorrection: function(windowIndex) {
  if(__aspxIE)
   this.GetWindowContentElement(windowIndex).style.height = "0px";
 },
 CorrectContentCellHeight: function(element, isResizing) {
  if(__aspxIE)
   this.CorrectContentCellHeightIE(element, isResizing);
  if(__aspxOpera)
   this.CorrectContentCellHeightOpera(element, isResizing);
 },
 CorrectContentCellHeightOpera: function(element, isResizing) {
  var index = this.GetWindowIndex(element);
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  if(contentIFrame) {
   contentIFrame.style.height = "0px";
   var contentIFrameDiv = this.GetWindowContentIFrameDivElement(index);
   if(contentIFrameDiv)
    contentIFrameDiv.style.height = "0px";
   var contentCell = this.GetWindowContentElement(index);
   var height = contentCell.clientHeight;
   contentIFrame.style.height = height + "px";
   if(contentIFrameDiv)
    contentIFrameDiv.style.height = contentIFrame.style.height;
   var correction = contentCell.clientHeight - height;
   contentIFrame.style.height = (height - correction) + "px";
   if(contentIFrameDiv)
    contentIFrameDiv.style.height = contentIFrame.style.height;
  }
 },
 CorrectContentCellHeightIE: function(element, isResizing) {
  var index = this.GetWindowIndex(element);
  var clientTable = this.GetWindowClientTable(index);
  var headerCell = this.GetWindowHeaderElement(index);
  var contentCell = this.GetWindowContentElement(index);
  var footerCell = this.GetWindowFooterElement(index);
  var windowMainCell = this.GetWindowMainCell(element);
  var mainCellHeight = windowMainCell.clientHeight - this.GetTwoVerticalPaddingSize(windowMainCell);
  var headerHeight = headerCell ? _aspxGetCeilOffsetHeight(headerCell) : 0;
  var footerHeight = footerCell ? footerCell.offsetHeight : 0;
  if(isResizing) {
   headerHeight = this.GetHeaderHeight(index);
   footerHeight = this.GetFooterHeight(index);
  }
  else {
   this.SetHeaderHeight(index, headerHeight);
   this.SetFooterHeight(index, footerHeight);
  }
  var correctedHeight = Math.max(0, mainCellHeight - headerHeight - footerHeight);
  contentCell.style.height = correctedHeight + "px";
  var verticalsPaddings = contentCell.offsetHeight - correctedHeight;
  contentCell.style.height = correctedHeight - verticalsPaddings + "px";
 },
 GetTwoVerticalPaddingSize: function(element) {
  var heightWithBorders = element.clientHeight;
  var paddingTopBackup = element.style.paddingTop;
  var paddingBottomBackup = element.style.paddingBottom;
  element.style.paddingTop = "0px";
  element.style.paddingBottom = "0px";
  var heightWithoutBorders = element.clientHeight;
  element.style.paddingTop = paddingTopBackup;
  element.style.paddingBottom = paddingBottomBackup;
  return (heightWithBorders - heightWithoutBorders);
 },
 InternalIsWindowVisible: function(index) {
  var element = this.GetWindowElement(index);
  if(!element)
   return false;
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted)
   return false;
  var currentStyle = _aspxGetCurrentStyle(element);
  return ((currentStyle && currentStyle.visibility != "hidden") && _aspxGetElementDisplay(element) ? true : false);
 },
 InternalIsWindowDisplayed: function(index) {
  var element = this.GetWindowElement(index);
  return (element != null) ? _aspxGetElementDisplay(element) : false;
 },
 OnActivate: function(index, evt) {
  var element = this.GetWindowElement(index);
  if(element != null)
   aspxGetPopupControlCollection().ActivateWindowElement(element, evt);
 },
 OnAnimationStop: function(index) {
  this.OnWindowShown(index);
  if(__aspxFirefox)
   this.GetWindowElement(index).style.display = "table";
 },
 OnDragStart: function(evt, index) {
  this.SetIsDragged(index, true);
  this.ShowDragCursor(index);
  if(this.GetWindowContentIFrameElement(index))
   this.HideIframeElementBeforeDragging(index);
  this.InitDragInfo(index, evt);
 },
 InitDragInfo: function(index, evt) {
  var element = this.GetWindowElement(index);
  var gragXOffset = _aspxGetAbsoluteX(element) - _aspxGetEventX(evt);
  var gragYOffset = _aspxGetAbsoluteY(element) - _aspxGetEventY(evt);
  var xClientCorrection = _aspxGetPositionElementOffset(element, true);
  var yClientCorrection = _aspxGetPositionElementOffset(element, false);
  gragXOffset -= xClientCorrection;
  gragYOffset -= yClientCorrection;
  aspxGetPopupControlCollection().InitDragObject(this, index, gragXOffset, gragYOffset, xClientCorrection, yClientCorrection);
 },
 OnDrag: function(index, x, y, xClientCorrection, yClientCorrection) {
  var element = this.GetWindowElement(index);
  if (element != null) {
   _aspxSetStyles(element, { left: x, top: y });
   xClientCorrection = typeof(xClientCorrection) != "undefined" ? xClientCorrection : 0;
   yClientCorrection = typeof(yClientCorrection) != "undefined" ? yClientCorrection : 0;
   this.SetWindowLeft(index, x + xClientCorrection);
   this.SetWindowTop(index, y + yClientCorrection);
   var iFrame = element.overflowElement;
   if (iFrame)
    _aspxSetStyles(iFrame, { left: x, top: y });
   if(__aspxOpera)
    _aspxClearSelection();
  }
 },
 OnDragStop: function(index) {
  var element = this.GetWindowElement(index);
  this.HideDragCursor(index);
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
  if(this.GetWindowContentIFrameElement(index))
   this.ShowIframeElementAfterDragging(index);
 },
 OnPopupElementMouseOver: function(evt, popupElement) {
  if(popupElement != null) {
   var index = popupElement.DXPopupWindowIndex;
   var isVisible = this.InternalIsWindowVisible(index);
   var popupElementIndex = popupElement.DXPopupElementIndex;
   if(this.GetLastOverPopupElementIndex(index) != popupElementIndex) {
    if(aspxGetPopupControlCollection().IsAppearTimerActive())
     aspxGetPopupControlCollection().ClearAppearTimer();
    if(aspxGetPopupControlCollection().IsDisappearTimerActive())
     aspxGetPopupControlCollection().ClearDisappearTimer();
    if(isVisible) {
     this.DoHideWindow(index);
     isVisible = false;
    }
   }
   if(!isVisible) {
    aspxGetPopupControlCollection().SetAppearTimer(this.name, index, popupElement.DXPopupElementIndex, this.appearAfter, evt);
    aspxGetPopupControlCollection().InitOverObject(this, index, evt);
   }
   this.SetLastOverPopupElementIndex(index, popupElementIndex);
  }
 },
 OnPopupElementMouseOut: function(evt, popupElement) {
 },
 HideIframeElementBeforeDragging: function(index) {
  var iframeElement = this.GetWindowContentIFrameElement(index);
  if(__aspxIE) {
   this.CreateFakeDragDiv(iframeElement);
   _aspxSetElementDisplay(iframeElement, false);
  } else
   _aspxSetElementVisibility(iframeElement, false);
 },
 ShowIframeElementAfterDragging: function(index) {
  var iframeElement = this.GetWindowContentIFrameElement(index);
  if(this.fakeDragDiv != null) {
   this.RemoveFakeDragDiv(iframeElement);
   _aspxSetElementDisplay(iframeElement, true);
  } else
   _aspxSetElementVisibility(iframeElement, true);
 },
 CreateFakeDragDiv: function(iframe) {
  this.fakeDragDiv = document.createElement("div");
  _aspxSetStyles(this.fakeDragDiv, { width: iframe.offsetWidth, height: iframe.offsetHeight });
  iframe.parentElement.appendChild(this.fakeDragDiv);
 },
 RemoveFakeDragDiv: function(iframe) {
  iframe.parentElement.removeChild(this.fakeDragDiv);
  this.fakeDragDiv = null;
 },
 CreateResizePanel: function(index) {
  var element = this.GetWindowElement(index);
  var mainCell = this.GetWindowMainCell(element);
  var resizePanel = document.createElement("DIV");
  element.parentNode.appendChild(resizePanel);
  resizePanel.style.overflow = "hidden";
  resizePanel.style.position = "absolute";
  resizePanel.style.zIndex = __aspxPopupControlZIndex + aspxGetPopupControlCollection().visiblePopupWindowIds.length * 2 + 2;
  if(!this.isLiveResizingMode)
   resizePanel.style.border = "black 1px dotted";
  return resizePanel;
 },
 OnResizeStart: function(evt, index) {
  if(!aspxGetPopupControlCollection().IsResizeInint()) {
   var cursor = this.CreateResizeCursorInfo(evt, index);
   if(cursor.course != "") {
    this.SetIsResized(index, true);
    var resizePanel = this.CreateResizePanel(index);
    this.UpdateResizeCursor(resizePanel, cursor.verticalDirection, cursor.horizontalDirection);
    aspxGetPopupControlCollection().InitResizeObject(this, index, cursor, resizePanel);
    this.OnResize(evt, index, cursor, resizePanel);
   }
  }
  return aspxGetPopupControlCollection().IsResizeInint();
 },
 OnResize: function(evt, index, cursor, resizePanel) {
  this.OnResizePanelLite(evt, index, cursor, resizePanel);
  if(this.isLiveResizingMode)
   this.OnResizeWindow(index, cursor, resizePanel);
  _aspxClearSelection();
  if(__aspxWebKitTouchUI)
   evt.preventDefault();
  if (this.GetIsPinned(index))
   this.HoldPosition(index, true, resizePanel);
 },
 OnResizePanelLite: function(evt, index, cursor, resizePanel) {
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  var element = this.GetWindowElement(index);
  if(__aspxIE && __aspxBrowserVersion >= 10) {
   x = Math.round(x);
   y = Math.round(y);
  }
  var newLeft = _aspxGetAbsoluteX(element);
  var newTop = _aspxGetAbsoluteY(element);
  var newWidth = element.offsetWidth;
  var newHeight = element.offsetHeight;
  if(cursor.verticalDirection == "n") {
   if(!this.fixedBottom)
    this.fixedBottom = newTop + newHeight;
   newHeight = newHeight + (newTop - y) + cursor.verticalOffset;
   newTop = y - cursor.verticalOffset;
  }
  if(cursor.verticalDirection == "s") {
   newHeight = newHeight + (y - (newTop + newHeight)) + cursor.verticalOffset;
   this.fixedBottom = null;
  }
  if(cursor.horizontalDirection == "w") {
   if(!this.fixedRight)
    this.fixedRight = newLeft + newWidth;
   newWidth = newWidth + (newLeft - x) + cursor.horizontalOffset;
   newLeft = x - cursor.horizontalOffset;
  }
  if(cursor.horizontalDirection == "e") {
   newWidth = newWidth + (x - (newLeft + newWidth)) + cursor.horizontalOffset;
   this.fixedRight = null;
  }
  if(newWidth > 0 && newHeight > 0) {
   var minWidth = this.GetWindowMinWidth(index);
   var maxWidth = this.GetWindowMaxWidth(index);
   if(minWidth && newWidth < minWidth)
    newWidth = minWidth;
   if(maxWidth && newWidth > maxWidth)
    newWidth = maxWidth;
   var minHeight = this.GetWindowMinHeight(index);
   var maxHeight = this.GetWindowMaxHeight(index);
   if(minHeight && newHeight < minHeight)
    newHeight = minHeight;
   if(maxHeight && newHeight > maxHeight)
    newHeight = maxHeight;
   newLeft = _aspxPrepareClientPosForElement(newLeft, element, true);
   newTop = _aspxPrepareClientPosForElement(newTop, element, false);
   if(__aspxIE && __aspxBrowserVersion >= 10) {
    newLeft = Math.round(newLeft);
    newTop = Math.round(newTop);
    newHeight = Math.round(newHeight);
    newWidth = Math.round(newWidth);
   }
   var widthWithoutBorders = newWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(resizePanel);
   var heightWithoutBorders = newHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(resizePanel);
   _aspxSetStyles(resizePanel, {
    left: newLeft, top: newTop,
    width: widthWithoutBorders, height: heightWithoutBorders
   });
   this.SetWindowLeft(index, _aspxGetAbsoluteX(element));
   this.SetWindowTop(index, _aspxGetAbsoluteY(element));
  }
 },
 OnResizeWindow: function(index, cursor, resizePanel) {
  var windowElement = this.GetWindowElement(index);
  var left = _aspxGetAbsoluteX(resizePanel);
  var top = _aspxGetAbsoluteY(resizePanel);
  this.SetClientWindowSizeLite(index, resizePanel.offsetWidth, resizePanel.offsetHeight);
  var bottom = top + windowElement.offsetHeight;
  var right = left + windowElement.offsetWidth;
  if(this.fixedBottom && (bottom > this.fixedBottom || bottom < this.fixedBottom))
   top = this.fixedBottom - windowElement.offsetHeight;
  if(this.fixedRight && (right > this.fixedRight || right < this.fixedRight))
   left = this.fixedRight - windowElement.offsetWidth;
  this.fixedBottom = null;
  this.fixedRight = null;
  var styleLeft = _aspxPrepareClientPosForElement(left, windowElement, true);
  var styleTop = _aspxPrepareClientPosForElement(top, windowElement, false);
  if(__aspxIE && __aspxBrowserVersion >= 10) {
   styleLeft = Math.round(styleLeft);
   styleTop = Math.round(styleTop);
  }
  _aspxSetStyles(windowElement, {
   left: styleLeft,
   top: styleTop
  });
  if(this.InternalIsWindowVisible(index))
   this.DoShowWindowIFrame(index, left, top, __aspxInvalidDimension, __aspxInvalidDimension);
  this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
 },
 OnResizeStop: function(evt, index, cursor, resizePanel) {
  if(this.allowResize) {
   if(!this.isLiveResizingMode) {
    var windowElement = this.GetWindowElement(index);
    aspxGetControlCollection().CollapseControls(windowElement);
    this.OnResizeWindow(index, cursor, resizePanel);
   }
   this.CreateResizeCursorInfo(evt, index);
   this.UpdateWindowsStateInputElement();
   this.UpdateWindowsStateCookie();
   this.RaiseResize(index);
   if(!this.isLiveResizingMode)
    aspxGetControlCollection().AdjustControls(windowElement, true);
   this.SetWindowCachedSize(index, this.GetClientWindowWidth(index), this.GetClientWindowHeight(index));
  }
 },
 OnMouseDownModalElement: function(evt, index) {
  aspxGetPopupControlCollection().DoHideAllWindows(_aspxGetEventSource(evt), "", false);
  this.SetIsPopuped(index, true)
 },
 IsRaiseAfterResizingLocked: function(){
  return this.CollapseExecuting() || this.MaximizationExecuting();
 },
 SetClientWindowSizeLite: function(index, width, height, isWindowCollapsed) {
  this.RaiseBeforeResizing(index);
  this.SetClientWindowSizeCoreLite(index, width, height, isWindowCollapsed);
  if(!this.IsRaiseAfterResizingLocked())
   this.RaiseAfterResizing(index);
 },
 HasAnyScrollBars: function(index) {
  var contentElement = this.GetWindowContentElement(index);
  var hasBothScrollBars = contentElement.style.overflow == "scroll" || contentElement.style.overflow == "auto";
  return hasBothScrollBars || contentElement.style.overflowX == "scroll" ||
    contentElement.style.overflowY == "scroll" || contentElement.style.overflowX == "auto" ||
    contentElement.style.overflowY == "auto";
 },
 SetClientWindowSizeCoreLite: function(index, width, height, isWindowCollapsed) {
  var contentUrl = this.GetWindowContentIFrameUrl(index);
  var needToHideContent = !contentUrl;
  var element = this.GetWindowElement(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  var contentElement = this.GetWindowContentElement(index);
  if(__aspxIE) {
   var scrollTop = contentElement.scrollTop;
   var scrollLeft = contentElement.scrollLeft;
  }
  var contentIframeElement = this.GetWindowContentIFrameElement(index);
  var iframeHeightCorrectionOnFirstShow = height > 0;
  if(contentIframeElement && (this.GetWindowIsShown(index) || iframeHeightCorrectionOnFirstShow))
   contentIframeElement.style.height = "0px";
  contentWrapper.style.height = "";
  contentWrapper.style.width = "";
  contentElement.style.height = "";
  contentElement.style.width = "";
  if(needToHideContent) {
   if(__aspxIE && __aspxBrowserMajorVersion >= 7) {
    var contentElementChildren = contentElement.getElementsByTagName("*"),
     contentElementChildrenScroll = [];
    for(var i = 0; i < contentElementChildren.length; i++) {
     var child = contentElementChildren[i];
     if(!!child.scrollLeft || !!child.scrollTop)
      contentElementChildrenScroll.push([i, child.scrollLeft, child.scrollTop]);
    }
   }
   contentElement.style.display = "none";
  }
  var hasAnyScrollBars = this.HasAnyScrollBars(index);
  var elementsDisplayValue = height && hasAnyScrollBars || this.IeWithoutSupportDisplayTable() ? "block" : "table";
  element.style.display = elementsDisplayValue;
  if (!this.GetIsCollapsed(index))
   contentWrapper.style.display = elementsDisplayValue;
  if(typeof(width) != "undefined") {
   var actualWidth = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
   if(actualWidth < 0)
    actualWidth = 0;
   element.style.width = actualWidth + "px";
   if(element.offsetWidth != width){
    actualWidth += (width - element.offsetWidth);
    if(actualWidth < 0) actualWidth = 0;
    element.style.width = actualWidth + "px";
   }
   if(__aspxWebKitFamily && hasAnyScrollBars) {
    var mainDiv = this.GetWindowMainCell(element);
    var dxpcMainDiv = _aspxGetDescendantNodesByClassName(mainDiv, "dxpc-mainDiv")[0];
    var dxpcMainDivBordersAndPaddings = dxpcMainDiv ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(dxpcMainDiv) : 0;
    contentWrapper.style.width = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainDiv) - dxpcMainDivBordersAndPaddings + "px";
   }
  }
  if(typeof(height) != "undefined") {
   var actualHeight = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
   if(actualHeight < 0)
    actualHeight = 0;
   element.style.height = actualHeight + "px";
   if(element.offsetHeight != height){
    actualHeight += (height - element.offsetHeight);
    if(actualHeight < 0) actualHeight = 0;
    element.style.height = actualHeight + "px";
   }
  }
  this.CorrectWindowSizeGripPositionLite(index);
  this.CorrectWindowHeaderText(index);
  this.SetContentWrapperHeightLite(index);
  var correctContentElementSize = hasAnyScrollBars || contentElement.style.overflow == "hidden" || contentElement.style.overflowX == "hidden" || contentElement.style.overflowY == "hidden";
  if((correctContentElementSize || contentUrl || this.IeWithoutSupportDisplayTable()) && height) {
   var contentHeight = _aspxGetClearClientHeight(contentWrapper) -
    _aspxGetTopBottomBordersAndPaddingsSummaryValue(contentElement);
   if(contentHeight < 0)
    contentHeight = 0;
   if(this.IeWithoutSupportDisplayTable() && !(correctContentElementSize || contentUrl)) {
    contentElement.style.height = "";
    var heightWithoutStyle = contentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(contentElement);
    if(_aspxGetClearClientHeight(contentWrapper) < heightWithoutStyle)
     contentHeight = heightWithoutStyle;
   }
   contentElement.style.height = contentHeight + "px";
  }
  if(correctContentElementSize && width)
   _aspxSetOffsetWidth(contentElement, _aspxGetClearClientWidth(contentWrapper));
  contentElement.style.display = correctContentElementSize || contentUrl || this.IeWithoutSupportDisplayTable() ? "block" : "table-cell";
  if(this.IeWithoutSupportDisplayTable() && _aspxGetClearClientHeight(contentWrapper) < contentElement.offsetHeight) {
   contentWrapper.style.height = contentElement.offsetHeight + "px";
   contentElement.style.height = "";
   contentWrapper.style.height = "";
  }
  if(_aspxIsExists(contentElementChildrenScroll) && contentElementChildrenScroll.length > 0) {
   for(var i = 0; i < contentElementChildrenScroll.length; i++) {
    var childScroll = contentElementChildrenScroll[i],
     childIndex = childScroll[0],
     childScrollLeft = childScroll[1],
     childScrollTop = childScroll[2];
    if(!!childScrollLeft)
     contentElementChildren[childIndex].scrollLeft = childScrollLeft;
    if(!!childScrollTop)
     contentElementChildren[childIndex].scrollTop = childScrollTop;
   }
  }
  if(__aspxIE) {
   contentElement.scrollTop = scrollTop;
   contentElement.scrollLeft = scrollLeft;
  }
  if(contentIframeElement)
   contentIframeElement.style.height = "100%";
  this.SetWindowWidth(index, width);
  this.SetWindowHeight(index, height);
  if (isWindowCollapsed)
   this.ResetWindowHeight(index);
 },
 SetContentWrapperHeightLite: function(index) {
  var windowElem = this.GetWindowElement(index);
  if(!windowElem.style.height || _aspxIsPercentageSize(windowElem.style.height))
   return;
  var borderOwner;
  if (_aspxElementHasCssClass(windowElem, ASPxClientPopupControlCssClasses.MainDivLiteCssClass))
   borderOwner = windowElem;
  else
   borderOwner = _aspxGetDescendantNodesByClassName(windowElem, ASPxClientPopupControlCssClasses.MainDivLiteCssClass)[0];
  var height = windowElem.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(borderOwner);
  if (this.IeWithoutSupportDisplayTable() && height == 1)
   height = 0;
  var extenders = [
   this.GetWindowHeaderElement(index),
   this.GetWindowFooterElement(index)
  ];
  for(var i = 0; i < extenders.length; i++) {
   if(extenders[i])
    height -= extenders[i].offsetHeight;
  }
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  if(height > 0)
   contentWrapper.style.height = height + "px";
 },
 GetWindowContentWrapperElement: function(index) {
  var windowElem = this.GetWindowElement(index);
  var mainDiv = this.GetWindowMainCell(windowElem);
  var contentWrapperParent = mainDiv;
  if(this.IeWithoutSupportDisplayTable() && !this.HaveSpecialDivForAnimation()) {
   var predicate = function(e) { return e.tagName == 'TD' };
   contentWrapperParent = _aspxGetDescendantNodes(mainDiv, predicate)[0];
  }
  return _aspxGetChildNodesByClassName(contentWrapperParent, ASPxClientPopupControlCssClasses.ContentWrapperCssClassName)[0];
 },
 SetWindowScrollDivSize: function(scrollDiv, index, dimension) {
  var windowClientTable = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var height = windowClientTable.offsetHeight;
  if(headerElement)
   height -= headerElement.offsetHeight;
  height -= this.GetWindowFooterHeightLite(index);
  if(dimension == 'height' || dimension == 'both')
   _aspxSetOffsetHeight(scrollDiv, height);
  if(dimension == 'width' || dimension == 'both') {
   var width = windowClientTable.offsetWidth;
   var contentElement = this.GetWindowContentElement(index);
   width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(scrollDiv) + _aspxGetHorizontalBordersWidth(contentElement);
   if(width > -1)
    scrollDiv.style.width = width + "px";
  }
  scrollDiv.style.marginRight = "0px";
 },
 CorrectWindowSizeGripPositionLite: function(index) {
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(!sizeGrip || sizeGrip.corrected) return;
  if (this.rtl)
   sizeGrip.style.marginRight = "-"  + sizeGrip.offsetWidth + "px";
  else
   sizeGrip.style.marginLeft = "-"  + sizeGrip.offsetWidth + "px";
  sizeGrip.style.marginTop = "-"  + sizeGrip.offsetHeight + "px";
  sizeGrip.corrected = true;
 },
 CorrectWindowHeaderText: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  if(!headerElement || headerElement.corrected) return;
  var leftChildrenWidth = 0, rightChildrenWidth = 0, headerContentElement;
  for(var i = 0; i < headerElement.childNodes.length; i++){
   var child = headerElement.childNodes[i];
   if(!child.offsetWidth) continue;
   if(_aspxGetElementFloat(child) === "right")
    rightChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
   else if(_aspxGetElementFloat(child) === "left")
    leftChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
   else if(!headerContentElement)
    headerContentElement = child;
  }
  if(headerContentElement && (leftChildrenWidth > 0 || rightChildrenWidth > 0)) {
   var headerContentElementStyle = _aspxGetCurrentStyle(headerContentElement);
   var originalPaddingLeft = parseInt(headerContentElementStyle.paddingLeft);
   var originalPaddingRight = parseInt(headerContentElementStyle.paddingRight);
   _aspxSetStyles(headerContentElement, {
    paddingLeft: leftChildrenWidth + originalPaddingLeft,
    paddingRight: rightChildrenWidth + originalPaddingRight
   }, true);
   if (__aspxIE && __aspxBrowserVersion < 8)
    headerContentElement.style.zoom = 1;
  }
  headerElement.corrected = true;
 },
 GetIsSafariGreater4OrChromeGreater2: function() {
  return (__aspxSafari && __aspxBrowserVersion >= 4) || (__aspxChrome && __aspxBrowserVersion >= 2);
 },
 SetWindowCachedSize: function(index, width, height) {
  if(0 <= index && index < this.heightArray.length)
   this.cachedSizeArray[index] = new _aspxSize(width, height);
  else
   this.cachedSize = new _aspxSize(width, height);
 },
 GetWindowCachedSize: function(index) {
  if(0 <= index && index < this.heightArray.length)
   return this.cachedSizeArray[index];
  else
   return this.cachedSize;
 },
 ResetWindowCachedSize: function(index) {
  if(0 <= index && index < this.heightArray.length)
   this.cachedSizeArray[index] = null;
  else
   this.cachedSize = null;
 },
 SetWindowSizeByIndex: function(index, width, height) {
  var minWidth = this.GetWindowMinWidth(index);
  var minHeight = this.GetWindowMinHeight(index);
  var maxWidth = this.GetWindowMaxWidth(index);
  var maxHeight = this.GetWindowMaxHeight(index);
  if(minWidth)
   width = Math.max(width, minWidth);
  if(minHeight)
   height = Math.max(height, minHeight);
  if(maxWidth)
   width = Math.min(width, maxWidth);
  if(maxHeight)
   height = Math.min(height, maxHeight);
  var isWindowMaximized = this.GetIsMaximized(index);
  var isWindowCollapsed = this.GetIsCollapsed(index);
  var isWindowMaximizedAndCollapsed = (isWindowMaximized && isWindowCollapsed);
  if(this.InternalIsWindowDisplayed(index) && (!isWindowMaximizedAndCollapsed || this.ResizingForMaxWindowLocked())) {
   if (!this.CollapseExecuting() && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()){
    this.SetWindowCachedSize(index, width, height);
    this.SetIsResized(index, true);
   }
   if (isWindowCollapsed && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()){
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
    height = 0;
   }
   if (isWindowMaximized && !this.CollapseExecuting() && !this.ResizingForMaxWindowLocked()){
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
   } else {
    this.SetWindowSizeByIndexCore(index, width, height, isWindowCollapsed);
   }
  } else
   this.SetWindowCachedSize(index, width, height);
 },
 SetWindowSizeByIndexCore: function(index, width, height, isWindowCollapsed) {
  this.SetClientWindowSizeLite(index, width, height, isWindowCollapsed);
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame && !isWindowCollapsed) {
   var winElememnt = this.GetWindowElement(index);
   var realWidth = winElememnt.offsetWidth;
   var realHeight = winElememnt.offsetHeight;
   _aspxSetStyles(iFrame, { width: realWidth, height: realHeight });
  }
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 CreateResizeCursorInfo: function(evt, index) {
  var element = this.GetWindowElement(index);
  var mainCell = this.GetWindowMainCell(element);
  var clientWindow = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var left = _aspxGetAbsoluteX(mainCell);
  var top = _aspxGetAbsoluteY(mainCell);
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  var mainCellWidth = mainCell.offsetWidth;
  var mainCellHeight = mainCell.offsetHeight;
  var leftOffset = Math.abs(x - left);
  var rightOffset = Math.abs(x - left - mainCellWidth);
  var topOffset = Math.abs(y - top);
  var bottomOffset = Math.abs(y - top - mainCellHeight);
  var cursorInfo = this.CreateResizeBorderCursorInfo(index, leftOffset, rightOffset, topOffset, bottomOffset);
  var grip = this.GetWindowSizeGripElement(index);
  if(grip) {
   var gripCursorInfo = this.CreateGripCursorInfo(index, mainCell, grip, leftOffset, rightOffset, bottomOffset);
   if(gripCursorInfo)
    cursorInfo = gripCursorInfo;
  }
  this.UpdateResizeCursor(clientWindow, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  this.UpdateResizeCursor(mainCell, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  if(headerElement)
   this.UpdateResizeCursor(headerElement, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  return cursorInfo;
 },
 CreateGripCursorInfo: function(index, mainCell, grip, leftOffset, rightOffset, bottomOffset) {
  var gripWidth = this.rtl
   ? _aspxGetAbsoluteX(grip) - _aspxGetAbsoluteX(mainCell) + grip.offsetWidth
   : mainCell.offsetWidth - (_aspxGetAbsoluteX(grip) - _aspxGetAbsoluteX(mainCell));
  var gripHeight = mainCell.offsetHeight - (_aspxGetAbsoluteY(grip) - _aspxGetAbsoluteY(mainCell));
  if(gripHeight > bottomOffset) {
   if(this.rtl && gripWidth > leftOffset)
    return new ASPxPCResizeCursorInfo("w", "s", leftOffset, bottomOffset);
   if(gripWidth > rightOffset)
    return new ASPxPCResizeCursorInfo("e", "s", rightOffset, bottomOffset);
  }
  return null;
 },
 CreateResizeBorderCursorInfo: function(index, leftOffset, rightOffset, topOffset, bottomOffset) {
  var ResizeBorderSize = this.ResizeBorderSize;
  var verticalDirection = this.GetResizeVerticalCourse(ResizeBorderSize, topOffset, bottomOffset);
  ResizeBorderSize = verticalDirection != "" ? this.ResizeCornerBorderSize : this.ResizeBorderSize;
  var horizontalDirection = this.GetResizeHorizontalCourse(ResizeBorderSize, leftOffset, rightOffset);
  if(verticalDirection == "" && horizontalDirection != "")
   verticalDirection = this.GetResizeVerticalCourse(this.ResizeCornerBorderSize, topOffset, bottomOffset);
  var horizontalOffset = leftOffset < rightOffset ? leftOffset : rightOffset;
  var verticalOffset = topOffset < bottomOffset ? topOffset : bottomOffset;
  return new ASPxPCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset);
 },
 GetResizeVerticalCourse: function(ResizeBorderSize, topOffset, bottomOffset) {
  if(ResizeBorderSize > topOffset) return "n";
  if(ResizeBorderSize > bottomOffset) return "s";
  return "";
 },
 GetResizeHorizontalCourse: function(ResizeBorderSize, leftOffset, rightOffset) {
  if(ResizeBorderSize > leftOffset) return "w";
  if(ResizeBorderSize > rightOffset) return "e";
  return "";
 },
 UpdateResizeCursor: function(element, verticalDirection, horizontalDirection) {
  var cursor = verticalDirection + horizontalDirection;
  if(cursor != "") {
   cursor += "-resize";
   this.ShowTemporaryCursor(element, cursor);
  }
  else
   this.HideTemporaryCursor(element);
 },
 ShowTemporaryCursor: function(element, cursor) {
  _aspxChangeStyleAttribute(element, "cursor", cursor);
 },
 HideTemporaryCursor: function(element) {
  _aspxRestoreStyleAttribute(element, "cursor");
 },
 ResizeWindowIFrame: function(index) {
  if(!this.renderIFrameForPopupElements) return;
  if(!this.InternalIsWindowVisible(index)) return;
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame) {
   var cell = this.GetWindowMainCell(this.GetWindowElement(index));
   _aspxSetStyles(iFrame, { width: cell.offsetWidth, height: cell.offsetHeight });
  }
 },
 GetContentIFrameWindow: function() {
  var iframeElement = this.GetContentIFrame();
  return iframeElement.contentWindow;
 },
 ShowDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement)
   this.ShowTemporaryCursor(dragElement, "move");
 },
 HideDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement != null)
   this.HideTemporaryCursor(dragElement);
 },
 GetDragElement: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  var element = this.GetWindowElement(index);
  if(element != null)
   return (headerElement != null ? headerElement : this.GetWindowMainCell(element));
  return null;
 },
 OnActivateMouseDown: function(evt, index) {
  this.OnActivate(index, evt);
 },
 OnCloseButtonClick: function(index) {
  this.RaiseCloseButtonClick(index);
  if(this.GetWindowCloseAction(index) != "None")
   this.DoHideWindow(index);
 },
 OnRefreshButtonClick: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  if (contentIFrame)
   this.RefreshWindowContentUrl(this.GetWindow(index));
  else
   this.PerformWindowCallback(this.GetWindow(index));
 },
 OnPinButtonClick: function(index) {
  var value = this.GetIsPinned(index);
  this.SetPinCore(index, !value);
 },
 SetPinCore: function(index, value) {
  if (this.GetIsPinned(index) != value) {
   this.SetIsPinned(index, value);
   this.HoldPosition(index, value);
   this.UpdateWindowsStateInputElement();
   this.UpdateWindowsStateCookie();
   this.OnPinned(index, value);
  }
 },
 OnPinned: function(index, pinned) {
  this.RaisePinnedChanged(index, pinned);
 },
 HoldPosition: function(index, hold, element) {
  if (hold){
   var element = element || this.GetWindowElement(index);
   if (!element) return;
   var x = _aspxGetAbsoluteX(element);
   var y = _aspxGetAbsoluteY(element);
   scrollX = _aspxGetDocumentScrollLeft();
   scrollY = _aspxGetDocumentScrollTop();
   this.SetPinPosX(index, x - scrollX);
   this.SetPinPosY(index, y - scrollY);
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowPinButton", hold);
  this.CheckHeaderCursor(index);
 },
 GetBodyWidth: function(){
  return aspxGetPopupControlCollection().GetSavedBodyWidth();
 },
 GetBodyHeight: function(){
  return aspxGetPopupControlCollection().GetSavedBodyHeight();
 },
 GetIsOutFromViewPort: function(index){
  var element = this.GetWindowElement(index);
  if (!element) return false;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  var popupWindowWidth = this.GetClientWindowWidth(index);
  var docClientWidth = _aspxGetDocumentClientWidth();
  var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
  var popupWindowHeight = this.GetClientWindowHeight(index);
  var docClientHeight = _aspxGetDocumentClientHeight();
  var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
  return (rightOutOffset > 0 || bottomOutOffset > 0);
 },
 AdjustPinPositionWhileScroll: function(index){
  var element = this.GetWindowElement(index);
  if (!element) return;
  var x = _aspxGetAbsoluteX(element);
  var y = _aspxGetAbsoluteY(element);
  var scrollX = _aspxGetDocumentScrollLeft();
  var scrollY = _aspxGetDocumentScrollTop();
  var pinX = x - scrollX;
  var pinY = y - scrollY;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  if ((pinX != pinXTarget) || (pinY != pinYTarget)){
   this.lockScroll++;
   var xNew = pinXTarget + scrollX;
   var yNew = pinYTarget + scrollY;
   var bodyWidth = this.GetBodyWidth();
   var bodyHeight = this.GetBodyHeight();
   var popupWindowWidth = this.GetClientWindowWidth(index);
   var docClientWidth = _aspxGetDocumentClientWidth();
   var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
   var popupWindowHeight = this.GetClientWindowHeight(index);
   var docClientHeight = _aspxGetDocumentClientHeight();
   var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
   var cancelScrollX = false;
   if (xNew + (popupWindowWidth - rightOutOffset) > bodyWidth){
    xNew -= (xNew + (popupWindowWidth - rightOutOffset) - bodyWidth);
    cancelScrollX = true;
   }
   var cancelScrollY = false;
   if (yNew + (popupWindowHeight - bottomOutOffset) > bodyHeight){
    yNew -= (yNew + (popupWindowHeight - bottomOutOffset) - bodyHeight);
    cancelScrollY = true;
   }
   xNew = _aspxPrepareClientPosForElement(xNew, element, true);
   yNew = _aspxPrepareClientPosForElement(yNew, element, false);
   this.SetWindowPos(index, element, xNew, yNew);
   if (cancelScrollX){
    var scrollLeftMax = bodyWidth - _aspxGetDocumentClientWidth();
    if ((rightOutOffset > 0) && (scrollX > scrollLeftMax)){
     this.lockScroll++;
     _aspxSetDocumentScrollLeft(scrollLeftMax);
     this.lockScroll--;
    }
   }
   if (cancelScrollY){
    var scrollTopMax = bodyHeight - _aspxGetDocumentClientHeight();
    if ((bottomOutOffset > 0) && (scrollY > scrollTopMax)){
     this.lockScroll++;
     _aspxSetDocumentScrollTop(scrollTopMax);
     this.lockScroll--;
    }
   }
   this.lockScroll--;
  }
 },
 OnScroll: function(evt, index){
  if (!this.GetIsPinned(index) || (this.lockScroll > 0)) return;
  this.AdjustPinPositionWhileScroll(index);
 },
 OnCollapseButtonClick: function(index) {
  this.SetCollapsedCore(index, !this.GetIsCollapsed(index));
 },
 SetCollapsedCore: function(index, minimization) {
  if(this.GetIsCollapsed(index) == minimization) return;
  this.DoCollapse(index, minimization);
  this.OnCollapsed(index, minimization);
 },
 DoCollapse: function(index, minimization) {
  if (this.GetIsCollapsed(index) == minimization) return;
  this.StartCollapse();
  if (minimization){
   var cachedWidth = this.GetClientWindowWidth(index);
   var cachedHeight = this.GetClientWindowHeight(index);
   var shouldUpdateRestoredSize = this.ShoulUpdatedRestoredWindowSizeOnCollapse(index);
   var width = this.GetMainWindowWidth(index, !shouldUpdateRestoredSize);
   var height = this.GetMainWindowHeight(index, !shouldUpdateRestoredSize);
   this.SetWindowSizeByIndex(index, width, 0);
   this.SetWindowContentVisible(index, false);
   this.SetWindowFooterVisible(index, false);
   this.ResetWindowHeight(index);
   this.SetIsCollapsed(index, minimization);
   this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
   if(shouldUpdateRestoredSize)
    this.UpdateRestoredWindowSize(index, width, height);
  }
  else{
   if (this.MaximizationExecuting()){
    var element = this.GetWindowElement(index);
    if (element){
     element.style.left = _aspxGetDocumentScrollLeft();
     element.style.top = _aspxGetDocumentScrollTop();
    }
   }
   this.SetWindowContentVisible(index, true);
   this.SetWindowFooterVisible(index, true);
   this.SetIsCollapsed(index, minimization);
   if (this.GetIsMaximized(index)){
    var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
    var documentClientHeight = ASPxClientPopupUtils.GetDocumentClientHeightForPopup();
    this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   } else {
    var restoredWindowData = this.GetRestoredWindowData(index);
    this.SetWindowSizeByIndex(index, restoredWindowData.width, restoredWindowData.height);
   }
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowCollapseButton", minimization);
  this.EndCollapse();
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
 },
 ResetWindowHeight: function(index) {
  var element = this.GetWindowElement(index);
  if (element)
   element.style.height = "";
 },
 ShoulUpdatedRestoredWindowSizeOnCollapse: function(index) {
  return !this.GetIsMaximized(index);
 },
 OnCollapsed: function(index, value){
  if (value)
   this.RaiseCollapsed(index);
  else
   this.RaiseExpanded(index);
  this.RaiseAfterResizing(index);
 },
 OnMaximizeButtonClick: function(index) {
  this.SetMaximizedCore(index, !this.GetIsMaximized(index));
 },
 SetMaximizedCore: function(index, maximization) {
  if(this.GetIsMaximized(index) == maximization) return;
  this.DoMaximize(index, maximization);
  this.OnMaximizedChanged(index, maximization);
 },
 GetMaximizedPosition: function(element, isX) {
  if(__aspxWebKitTouchUI)
   return _aspxPrepareClientPosForElement(0, element, isX);
  return _aspxPrepareClientPosForElement(isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop(), element, isX);
 },
 DoMaximize: function(index, maximization) {
  if (this.GetIsMaximized(index) == maximization) return;
  var element = this.GetWindowElement(index);
  if (!element) return;
  this.StartMaximization();
  if (maximization){
   if(this.hideBodyScrollWhenMaximized)
    ASPxClientPopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
   if (this.GetIsCollapsed(index))
    this.DoCollapse(index, false);
   var cachedWidth = this.GetClientWindowWidth(index);
   var cachedHeight = this.GetClientWindowHeight(index);
   var restoredWindowData = this.GetInitRestoredWindowData(index);
   var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
   var documentClientHeight = ASPxClientPopupUtils.GetDocumentClientHeightForPopup();
   var currentStyle = _aspxGetCurrentStyle(element);
   var windowClientTable = this.GetWindowClientTable(index);
   var windowClientTableParent = windowClientTable.parentNode;
   childStyle = _aspxGetCurrentStyle(windowClientTableParent);
   var left = this.GetMaximizedPosition(element, true);
   var top = this.GetMaximizedPosition(element, false);
   this.SetWindowPos(index, element, left, top);
   this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
   this.SetRestoredWindowData(index, restoredWindowData);
   this.SetIsMaximized(index, maximization);
  }
  else{
   var restoredWindowData = this.GetRestoredWindowData(index);
   var width = restoredWindowData.width || this.GetMainWindowWidth(index);
   var height = restoredWindowData.height || this.GetMainWindowHeight(index);
   this.SetIsMaximized(index, maximization);
   var left = _aspxPrepareClientPosForElement(restoredWindowData.left, element, true);
   var top = _aspxPrepareClientPosForElement(restoredWindowData.top, element, false);
   this.SetWindowPos(index, element, left, top);
   this.SetWindowSizeByIndex(index, width, height);
   if (this.GetIsCollapsed(index)){
    this.SetIsCollapsed(index, false);
    this.DoCollapse(index, true);
   }
   if(this.hideBodyScrollWhenMaximized)
    ASPxClientPopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
  }
  if (this.GetIsPinned(index))
   this.HoldPosition(index, true, element);
  this.UpdateHeaderButtonSelected(index, "GetWindowMaximizeButton", maximization);
  this.EndMaximization();
  this.UpdateWindowsStateInputElement();
  this.UpdateWindowsStateCookie();
  this.CheckHeaderCursor(index);
 },
 OnMaximizedChanged: function(index, value){
  if (value)
   this.RaiseMaximized(index);
  else
   this.RaiseRestoredAfterMaximized(index);
  this.RaiseAfterResizing(index);
 },
 GetInitRestoredWindowData: function (index) {
  var restoredWindowData = this.GetRestoredWindowData(index);
  restoredWindowData.left = this.GetCurrentLeft(index);
  restoredWindowData.top = this.GetCurrentTop(index);
  restoredWindowData.width = this.GetMainWindowWidth(index);
  restoredWindowData.height = this.GetMainWindowHeight(index);
  return restoredWindowData;
 },
 UpdateMaximizedWindowSizeOnResize: function(index){
  this.StartUpdateMaximizedWindowSizeOnResize();
  var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
  var documentClientHeight = ASPxClientPopupUtils.GetDocumentClientHeightForPopup();
  if (this.GetIsCollapsed(index)) documentClientHeight = 0;
  this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
  if (this.GetIsCollapsed(index)){
   this.CorrectCollapsedSize(index);
  }
  window.setTimeout(function() { this.SetMaximizedWindowSizeAfterOnResize(index); }.aspxBind(this), 0);
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 SetMaximizedWindowSizeAfterOnResize: function(index){
  this.StartUpdateMaximizedWindowSizeOnResize();
  var documentClientWidth = ASPxClientPopupUtils.GetDocumentClientWidthForPopup();
  var documentClientHeight = ASPxClientPopupUtils.GetDocumentClientHeightForPopup();
  windowWidthCurrent = this.GetMainWindowWidth(index, true);
  windowHeightCurrent = this.GetMainWindowHeight(index, true);
  if (this.GetIsCollapsed(index))
   documentClientHeight = 0;
  if (documentClientWidth != windowWidthCurrent || documentClientHeight != windowHeightCurrent){
   this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   if (this.GetIsCollapsed(index)){
    this.CorrectCollapsedSize(index);
   }
  }
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 CorrectCollapsedSize: function(index){
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  if (contentWrapper && _aspxElementIsVisible(contentWrapper))
   contentWrapper.style.display = 'none';
 },
 UpdateHeaderButtonSelected: function(index, methodGetWindowButton, flagSelected){
  if(typeof(aspxGetStateController) != "undefined"){
   button = this[methodGetWindowButton](index);
   var method = flagSelected ? "SelectElementBySrcElement" : "DeselectElementBySrcElement";
   aspxGetStateController()[method](button);
  }
 },
 CheckHeaderCursor: function(index){
  if (!this.allowDragging) return;
  var dragElement = this.GetDragElement(index);
  if (!dragElement) return;
  var styleCursor = dragElement.style.cursor;
  var isPinned = this.GetIsPinned(index);
  var isMaximized = this.GetIsMaximized(index);
  if ((isPinned || isMaximized) && styleCursor != "default")
   dragElement.style.cursor = "default";
  else if (!isPinned && !isMaximized && styleCursor != "move")
   dragElement.style.cursor = "move";
 },
 LockAnimation: function() {
  this.animationLockCount++;
 },
 UnlockAnimation: function() {
  this.animationLockCount--;
 },
 IsAnimationLocked: function() {
  return this.animationLockCount > 0;
 },
 IsAnimationAllowed: function() {
  return this.enableAnimation && !this.IsAnimationLocked();
 },
 StartCollapse: function(){
  this.collapseExecutingLockCount++;
 },
 EndCollapse: function(){
  this.collapseExecutingLockCount--;
 },
 CollapseExecuting: function(){
  return this.collapseExecutingLockCount > 0;
 },
 StartMaximization: function(){
  this.maximizationExecutingLockCount++;
 },
 EndMaximization: function(){
  this.maximizationExecutingLockCount--;
 },
 MaximizationExecuting: function(){
  return this.maximizationExecutingLockCount > 0;
 },
 StartUpdateMaximizedWindowSizeOnResize: function(){
  this.browserResizingForMaxWindowLockCount++;
 },
 EndUpdateMaximizedWindowSizeOnResize: function(){
  this.browserResizingForMaxWindowLockCount--;
 },
 ResizingForMaxWindowLocked: function(){
  return this.browserResizingForMaxWindowLockCount > 0;
 },
 UpdateRestoredWindowSizeLock: function () {
  this.updateRestoredWindowSizeLockCount ++;
 },
 UpdateRestoredWindowSizeUnlock: function () {
  this.updateRestoredWindowSizeLockCount --;
 },
 UpdateRestoredWindowSizeLocked: function () {
  return this.updateRestoredWindowSizeLockCount > 0;
 },
 UpdateRestoredWindowSize: function (index, width, height) {
  if (!this.UpdateRestoredWindowSizeLocked()) {
   restoredMinWindowData = this.GetRestoredWindowData(index);
   restoredMinWindowData.width = width;
   restoredMinWindowData.height = height;
   this.SetRestoredWindowData(index, restoredMinWindowData);
  }
 },
 OnMouseDown: function(evt, index, isDraggingAllowed, pointOnScrollBar) {
  if(_aspxGetIsLeftButtonPressed(evt)) {
   if((this.allowResize || isDraggingAllowed) && !this.prohibitClearSelectionOnMouseDown)
    _aspxClearSelection();
   var isResizing = false;
   if(this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index)) {
    var eventSourceControl = _aspxGetEventSource(evt);
    var eventFromPopupContainer = _aspxElementHasCssClass(eventSourceControl, ASPxClientPopupControlCssClasses.ContentCssClassName) ||
     !_aspxGetParentByClassName(eventSourceControl, ASPxClientPopupControlCssClasses.ContentCssClassName) ||
     this.eventFromOwnPopupContent(eventSourceControl);
    if (eventFromPopupContainer)
     isResizing = this.OnResizeStart(evt, index);
   }
   if(isResizing && __aspxWebKitTouchUI)
    aspxGetPopupControlCollection().OverStop();
   var clickedOnScroll = pointOnScrollBar && this.enableContentScrolling;
   if(isDraggingAllowed && !isResizing && !clickedOnScroll && !this.GetIsPinned(index) && !this.GetIsMaximized(index))
    this.OnDragStart(evt, index);
  }
 },
 eventFromOwnPopupContent: function(element) {
  while(element != null) {
   if(element.tagName == "BODY")
    return false;
   if (element.style.position == "absolute") {
    var windowIndex = this.GetWindowIndex(element);
    if (!isNaN(windowIndex)) {
     if (this.GetWindowElementId(windowIndex) == element.id)
      return true;
     return false;
    }
   }
   element = element.parentNode;
  }
  return false;
 },
 OnMouseMove: function(evt, index) {
  if(this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
   this.CreateResizeCursorInfo(evt, index);
 },
 SetShadowVisibility: function(visible, index) {
  var shadowTable = this.GetWindowShadowTable(index);
  if(shadowTable && shadowTable.rows.length > 1) {
   var shadowCol = shadowTable.rows[0].cells[1];
   var shadowRow = shadowTable.rows[1];
   _aspxSetElementVisibility(shadowCol, visible);
   _aspxSetElementVisibility(shadowRow, visible);
  }
 },
 StartFadeAnimation: function(element, index) {
  if(__aspxIE && __aspxBrowserMajorVersion < 9) {
   _aspxSetElementVisibility(element, true);
   ASPxAnimationHelper.setOpacity(element, 0);
   this.SetShadowVisibility(false, index);
  } else {
   ASPxAnimationHelper.setOpacity(element, 0);
   _aspxSetElementVisibility(element, true);
  }
  var callback = function () {
   if (__aspxIE && __aspxBrowserVersion < 9 && element.style.filter) {
    if (element.style.filter)
     element.style.filter = "";
    this.SetShadowVisibility(true, index);
   }
   this.OnAnimationStop(index);
  } .aspxBind(this);
  ASPxAnimationHelper.fadeIn(element, callback, this.fadeAnimationDuration);
 },
 StartSlideAnimation: function(animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
  var element = this.GetWindowMainTable(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var args = "(\"" + this.name + "\", " + index + ")";
  var onAnimStopCallString = "aspxPCAStop" + args;
  if(__aspxFirefox)
   animationDivElement.style.display = "block";
  ASPxClientPopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, onAnimStopCallString, true);
  var horizontalDirection = ASPxClientPopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
  var verticalDirection = ASPxClientPopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
  var xPos = horizontalDirection * animationDivElement.offsetWidth;
  var yPos = verticalDirection * animationDivElement.offsetHeight;
  _aspxSetStyles(element, { left: xPos, top: yPos });
  _aspxSetElementVisibility(animationDivElement, true);
  this.DoShowWindowIFrame(index, clientX, clientY, 0, 0);
  ASPxClientPopupUtils.StartSlideAnimation(animationDivElement, element, this.GetWindowIFrame(index), this.slideAnimationDuration);
 },
 GetWindowsState: function() {
  var state = "";
  if(this.HasDefaultWindow()) {
   state += this.GetWindowState(-1);
  }
  for(var i = 0; i < this.GetWindowCountCore(); i++) {
   state += this.GetWindowState(i);
   if(i < this.GetWindowCountCore() - 1) state += ";";
  }
  return state;
 },
 GetWindowState: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   var visibleFlag = (!this.InternalIsWindowVisible(index) || element.isHiding) ? "0" : "1";
   var isDraggedFlag = this.GetIsDragged(index) ? "1" : "0";
   var zIndex = this.GetCurrentZIndex(index);
   var isResized = this.GetIsResized(index);
   var isResizedFlag = isResized ? "1" : "0";
   var width = isResized ? this.GetWindowWidthInternal(index) : __aspxInvalidDimension;
   var height = isResized ? this.GetWindowHeightInternal(index) : __aspxInvalidDimension;
   var contentWasLoaded = element.loaded ? "1" : "0";
   var left, top;
   var isMaximized = this.GetIsMaximized(index);
   if (isMaximized && !this.MaximizationExecuting()){
    var restoredWindowData = this.GetRestoredWindowData(index);
    left = restoredWindowData.left;
    top = restoredWindowData.top;
   } else {
    left = this.GetCurrentLeft(index);
    top = this.GetCurrentTop(index);
   }
   var isPinned = this.GetIsPinned(index);
   if (isPinned){
    left -= _aspxGetDocumentScrollLeft();
    top -=  _aspxGetDocumentScrollTop();
   }
   left = Math.ceil(left);
   top = Math.ceil(top);
   var pinFlag = isPinned ? "1" : "0";
   var minFlag = this.GetIsCollapsed(index) ? "1" : "0";
   var maxFlag = isMaximized ? "1" : "0";
   return [visibleFlag, isDraggedFlag, zIndex, left, top, isResizedFlag, width, height, contentWasLoaded, pinFlag, minFlag, maxFlag].join(":");
  }
  return "";
 },
 UpdateWindowsStateCookie: function() {
  if(this.cookieName == "") return;
  _aspxDelCookie(this.cookieName);
  _aspxSetCookie(this.cookieName, this.GetWindowsState());
 },
 UpdateWindowsStateInputElement: function() {
  var element = this.GetWindowsStateInputElement();
  if(element != null) element.value = this.GetWindowsState();
 },
 OnIFrameLoad: function(index) {
  this.SetIframeLoading(index, false);
 },
 OnPWHBClickCore: function(evt, index, method){
  if (ASPxClientTouchUI.handleFastTapIfRequired(evt,
   function(){ this[method](index); }.aspxBind(this), true)) {
    return;
  }
  if((__aspxIE && __aspxBrowserVersion < 9) || __aspxOpera)
   _aspxEmulateDocumentOnMouseDown(evt);
  this[method](index);
 },
 CreateWindows: function(windowsNames) {
  for(var i = 0; i < windowsNames.length; i++) {
   var window = new ASPxClientPopupWindow(this, i, windowsNames[i]);
   this.windows.push(window);
  }
 },
 RaiseCloseButtonClick: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.CloseButtonClick.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.CloseButtonClick.FireEvent(this, args);
  }
 },
 RaiseClosing: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  var cancel = false;
  if(!this.Closing.IsEmpty()) {
   var args = new ASPxClientPopupWindowCancelEventArgs(window);
   this.Closing.FireEvent(this, args);
   cancel = args.cancel;
  }
  return cancel;
 },
 RaiseCloseUp: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.CloseUp.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaisePopUp: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.PopUp.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.PopUp.FireEvent(this, args);
  }
 },
 RaiseResize: function(index, resizeState) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.Resize.IsEmpty()) {
   if(!resizeState)
    resizeState = ASPxClientPopupControlResizeState.Resized;
   var args = new ASPxClientPopupWindowResizeEventArgs(window, resizeState);
   this.Resize.FireEvent(this, args);
  }
 },
 RaiseBeforeResizing: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.BeforeResizing.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.BeforeResizing.FireEvent(this, args);
  }
 },
 RaiseAfterResizing: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.AfterResizing.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.AfterResizing.FireEvent(this, args);
  }
 },
 RaiseShown: function(index) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.Shown.IsEmpty()) {
   var args = new ASPxClientPopupWindowEventArgs(window);
   this.Shown.FireEvent(this, args);
  }
 },
 RaisePinnedChanged: function (index, pinned) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.PinnedChanged.IsEmpty()) {
   var args = new ASPxClientPopupWindowPinnedChangedEventArgs(window, pinned);
   this.PinnedChanged.FireEvent(this, args);
  }
 },
 RaiseCollapsed: function (index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Collapsed);
 },
 RaiseExpanded: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Expanded);
 },
 RaiseMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Maximized);
 },
 RaiseRestoredAfterMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.RestoredAfterMaximized);
 },
 AdjustSize: function() {
  if(this.enableContentScrolling)
   return;
  this.SetSize(0, 0);
 },
 GetHeight: function() {
  return this.GetWindowHeight(null);
 },
 GetWidth: function() {
  return this.GetWindowWidth(null);
 },
 GetContentWidth: function() {
  return this.GetWindowContentWidth(null);
 },
 GetContentHeight: function() {
  return this.GetWindowContentHeight(null);
 },
 SetSize: function(width, height) {
  this.SetWindowSize(null, width, height);
 },
 SetWidth: function(width) {
  var height = this.GetHeight();
  this.SetSize(width, height);
 },
 SetHeight: function(height) {
  var width = this.GetWidth();
  this.SetSize(width, height);
 },
 GetWindowDimensionByIndex: function(index, isWidth, forceFromCache) {
  var cachedSize = this.GetWindowCachedSize(index);
  var dimensionValue = null;
  if (forceFromCache == undefined && !this.GetWindowElement(index))
   forceFromCache = true;
  if(cachedSize && forceFromCache)
   dimensionValue = isWidth ? cachedSize.width : cachedSize.height;
  if(dimensionValue)
   return dimensionValue;
  else {
   var element = this.GetWindowElement(index);
   var sizeFromDOM = 0;
   if (this.GetIsCollapsed(index)){
    var headerCell = this.GetWindowHeaderElement(index);
    sizeFromDOM = isWidth ? headerCell.offsetWidth : headerCell.offsetHeight;
   }
   else{
    var mainCell = this.GetWindowMainCell(element);
    sizeFromDOM = isWidth ? mainCell.offsetWidth : mainCell.offsetHeight;
   }
   if(sizeFromDOM === 0 && cachedSize)
    sizeFromDOM = isWidth ? cachedSize.width : cachedSize.height;
   return sizeFromDOM;
  }
 },
 GetWindowDimension: function(window, isWidth, forceFromCache) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowDimensionByIndex(index, isWidth, forceFromCache);
 },
 GetWindowContentDimension: function(window, isWidth) {
  var index = (window != null) ? window.index : -1,
   dimension = 0,
   contentElem = this.GetWindowContentElement(index),
   dimensionHolder = contentElem.parentNode,
   paddingsHolder = contentElem;
  return isWidth ?
  (dimensionHolder.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(paddingsHolder)) :
  (dimensionHolder.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(paddingsHolder));
 },
 GetWindowContentWidth: function(window) {
  return this.GetWindowContentDimension(window, true);
 },
 GetWindowContentHeight: function(window) {
  return this.GetWindowContentDimension(window, false);
 },
 GetWindowHeight: function(window) {
  return this.GetWindowDimension(window, false);
 },
 GetWindowWidth: function(window) {
  return this.GetWindowDimension(window, true);
 },
 SetWindowSize: function(window, width, height) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowSizeByIndex(index, width, height);
 },
 GetContentHTML: function() {
  return this.GetContentHtml();
 },
 SetContentHTML: function(html) {
  this.SetContentHtml(html);
 },
 GetContentHtml: function() {
  return this.GetWindowContentHtml(null);
 },
 SetContentHtml: function(html, useAnimation) {
  this.SetWindowContentHtml(null, html, useAnimation);
 },
 GetContentIFrame: function(window) {
  return this.GetWindowContentIFrame(null);
 },
 GetContentUrl: function() {
  return this.GetWindowContentUrl(null);
 },
 SetContentUrl: function(url) {
  this.SetWindowContentUrl(null, url);
 },
 RefreshContentUrl: function() {
  this.RefreshWindowContentUrl(null);
 },
 SetWindowPopupElementID: function(window, popupElementId) {
  var index = (window != null) ? window.index : -1;
  this.RemoveWindowAllPopupElements(index);
  this.SetPopupElementIDs(index, popupElementId.split(';'));
  if(aspxGetPopupControlCollection().IsDisappearTimerActive()) {
   aspxGetPopupControlCollection().ClearDisappearTimer();
   this.Hide(index);
  }
  this.PopulatePopupElements(index);
 },
 SetPopupElementID: function(popupElementId) {
  this.SetWindowPopupElementID(null, popupElementId);
 },
 GetCurrentPopupElementIndex: function() {
  return this.GetWindowCurrentPopupElementIndex(null);
 },
 GetWindowCurrentPopupElementIndex: function(window) {
  var popupElement = this.GetWindowCurrentPopupElement(window);
  return popupElement ? popupElement.DXPopupElementIndex : -1;
 },
 GetCurrentPopupElement: function() {
  return this.GetWindowCurrentPopupElement(null);
 },
 GetWindowCurrentPopupElement: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowCurrentPopupElementByIndex(index);
 },
 GetWindowCurrentPopupElementByIndex: function(index) {
  var popupElement = this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index));
  if(popupElement && popupElement.DXPopupElementControl)
   return popupElement;
  return null;
 },
 Show: function(popupElementIndex) {
  this.ShowWindow(null, popupElementIndex);
 },
 ShowAtElement: function(htmlElement) {
  this.ShowWindowAtElement(null, htmlElement);
 },
 ShowAtElementByID: function(id) {
  var htmlElement = document.getElementById(id);
  this.ShowWindowAtElement(null, htmlElement);
 },
 ShowAtPos: function(x, y) {
  this.ShowWindowAtPos(null, Math.round(x), Math.round(y));
 },
 BringToFront: function() {
  this.BringWindowToFront(null);
 },
 Hide: function() {
  this.HideWindow(null);
 },
 IsWindowVisible: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.InternalIsWindowVisible(index);
 },
 IsVisible: function() {
  return this.InternalIsWindowVisible(-1);
 },
 GetWindow: function(index) {
  return (0 <= index && index < this.windows.length) ? this.windows[index] : null;
 },
 GetWindowByName: function(name) {
  for(var i = 0; i < this.windows.length; i++)
   if(this.windows[i].name == name) return this.windows[i];
  return null;
 },
 GetWindowCount: function() {
  return this.GetWindowCountCore();
 },
 ShowWindow: function(window, popupElementIndex) {
  var index = (window != null) ? window.index : -1;
  if(popupElementIndex === undefined)
   popupElementIndex = this.GetLastShownPopupElementIndex(index);
  this.DoShowWindowAtPos(index, __aspxInvalidPosition, __aspxInvalidPosition, popupElementIndex, false, true);
 },
 ShowWindowAtElement: function(window, htmlElement) {
  var index = (window != null) ? window.index : -1;
  var lastIndexBackup = this.GetLastShownPopupElementIndex(index);
  this.ShowWindow(window, this.AddPopupElementInternal(index, htmlElement));
  this.RemovePopupElementInternal(index, htmlElement);
  this.SetLastShownPopupElementIndex(index, lastIndexBackup);
 },
 ShowWindowAtElementByID: function(window, id) {
  var htmlElement = document.getElementById(id);
  this.ShowWindowAtElement(window, htmlElement);
 },
 ShowWindowAtPos: function(window, x, y) {
  var index = (window != null) ? window.index : -1;
  this.DoShowWindowAtPos(index, x, y, -1, false, true);
 },
 BringWindowToFront: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetWindowElement(index);
  aspxGetPopupControlCollection().ActivateWindowElement(element);
 },
 HideWindow: function(window) {
  var index = (window != null) ? window.index : -1;
  this.DoHideWindow(index);
 },
 GetWindowContentHTML: function(window) {
  return this.GetWindowContentHtml(window);
 },
 SetWindowContentHTML: function(window, html) {
  this.SetWindowContentHtml(window, html);
 },
 GetWindowContentHtml: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetContentContainer(index);
  return (element != null) ? element.innerHTML : "";
 },
 SetWindowContentHtml: function(window, html, useAnimation) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentHtmlCore(index, html, useAnimation);
 },
 SetWindowContentHtmlCore: function(index, html, useAnimation) {
  var element = this.GetContentContainer(index);
  if(element != null) {
   _aspxSetInnerHtml(element, html);
   if(this.IeWithoutSupportDisplayTable())
    element.style.zoom = 1;
   this.RecalculateWindowSize(index);
   if(useAnimation && typeof(ASPxAnimationHelper) != "undefined")
    ASPxAnimationHelper.fadeIn(element, function(){ this.ResizeWindowIFrame(index); }.aspxBind(this));
   else
    this.ResizeWindowIFrame(index);
   this.UpdateScrollbar(index);
  }
 },
 RecalculateWindowSize: function(index) {
  var window = this.GetWindowElement(index);
  var displayAfterSetSize = window.style.display;
  this.SetClientWindowSizeCoreLite(index, this.GetWindowWidthInternal(index), this.GetWindowHeightInternal(index), this.GetIsCollapsed(index));
  window.style.display = displayAfterSetSize;
 },
 GetWindowContentIFrame: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowContentIFrameElement(index);
 },
 GetWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(!this.IsWindowVisible(window))
   return this.GetWindowContentIFrameUrl(index);
  var element = this.GetWindowContentIFrameElement(index);
  return (element != null) ? element.src : "";
 },
 SetWindowContentUrl: function(window, url) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentUrlInternal(index, url);
 },
 SetWindowContentUrlInternal: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible && element != null)
   this.ShowIframeElementAfterDragging(index);
  this.SetWindowContentIFrameUrl(index, url);
  var src = !windowVisible ? ASPx.SSLSecureBlankUrl : url;
  if(element == null) {
   this.CreateWindowContentIFrameElement(index, src);
   if(_aspxElementIsVisible(this.GetWindowElement(index))) {
    var windowWidth = this.GetWindowDimensionByIndex(index, true, false);
    var windowHeight = this.GetWindowDimensionByIndex(index, false, false);
    this.SetClientWindowSizeCoreLite(index, windowWidth, windowHeight);
   }
  }
  else
   this.SetSrcToIframeElement(index, element, src);
 },
 GetPinned: function() {
  return this.GetIsPinned(-1);
 },
 SetPinned: function(value) {
  this.SetPinCore(-1, value);
 },
 GetWindowPinned: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsPinned(index);
 },
 SetWindowPinned: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetPinCore(index, value);
 },
 GetMaximized: function() {
  return this.GetIsMaximized(-1);
 },
 SetMaximized: function(value) {
  this.SetMaximizedCore(-1, value);
 },
 GetWindowMaximized: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsMaximized(index);
 },
 SetWindowMaximized: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetMaximizedCore(index, value);
 },
 GetCollapsed: function() {
  return this.GetIsCollapsed(-1);
 },
 SetCollapsed: function(value) {
  this.SetCollapsedCore(-1, value);
 },
 GetWindowCollapsed: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsCollapsed(index);
 },
 SetWindowCollapsed: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetCollapsedCore(index, value);
 },
 RefreshWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(__aspxIE)
   this.RefreshWindowContentUrlIE(index, window);
  else
   this.RefreshWindowContentUrlCommon(window);
 },
 RefreshWindowContentUrlIE: function(index, window) {
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible)
   this.RefreshWindowContentUrlIECore(index, window);
  else {
   var iframe = this.GetWindowContentIFrameElement(index);
   if(iframe)
    iframe.DXReloadAfterShowRequired = true;
  }
 },
 RefreshWindowContentUrlIECore: function(index, window) {
  try {
   if(!this.GetIframeLoading(index)) {
    var iframe = this.GetWindowContentIFrameElement(index);
    if(iframe)
     iframe.contentWindow.location.reload();
   }
  } catch(e) {
   this.RefreshWindowContentUrlCommon(window);
  }
 },
 RefreshWindowContentUrlCommon: function(window) {
  this.SetWindowContentUrl(window, this.GetWindowContentUrl(window));
 },
 SetWindowContentVisible: function(index, visible){
  var contentElement = this.GetWindowContentWrapperElement(index);
  if (contentElement)
   this.SetWindowPartVisibleCore(contentElement, "DXPopupWindowContentDisplay", visible);
 },
 SetWindowFooterVisible: function(index, visible){
  var footerElement = this.GetWindowFooterElement(index);
  if (footerElement)
   this.SetWindowPartVisibleCore(footerElement, "DXPopupWindowFooterDisplay", visible);
 },
 SetWindowPartVisibleCore: function(partElement, displayCacheName, visible){
  var nothingChanged = _aspxElementIsVisible(partElement) && visible;
  if(nothingChanged) return;
  if(!(_aspxIsExists(partElement[displayCacheName])))
   partElement[displayCacheName] = partElement.style.display;
  partElement.style.display = visible ? partElement[displayCacheName] : 'none';
 },
 UpdatePosition: function() {
  this.UpdatePositionAtElement(this.GetPopupElement(-1, this.GetLastShownPopupElementIndex(-1)));
 },
 UpdatePositionAtElement: function(popupElement) {
  this.UpdateWindowPositionAtElement(null, popupElement);
 },
 UpdateWindowPosition: function(window) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionAtElement(window, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
 },
 UpdateWindowPositionAtElement: function(window, popupElement) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionInternal(index, popupElement);
 },
 UpdateWindowPositionInternal: function(index, popupElement) {
  var element = this.GetWindowElement(index);
  if(this.InternalIsWindowVisible(index) && element != null) {
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, true, false);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, false, false);
   this.SetWindowPos(index, element, horizontalPopupPosition.position, verticalPopupPosition.position);
  } else
   this.DoShowWindowAtPos(index, __aspxInvalidDimension, __aspxInvalidDimension, this.GetLastShownPopupElementIndex(index), false, false);
 },
 TryAutoUpdatePosition: function(index) {
  if(this.GetAutoUpdatePosition(index))
   this.UpdateWindowPositionInternal(index, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
  if(this.GetIsMaximized(index))
   this.UpdateMaximizedWindowSizeOnResize(index);
 },
 CreateWindowContentIFrameElement: function(index, src) {
  var content = this.GetContentContainer(index);
  var iframeParent = content;
  content.innerHTML = "";
  content.style.display = "block";
  var iframe = this.CreateContentIFrameElement(index, src);
  this.RequireIFrameHeightAdjusting(index, iframe);
  iframeParent.appendChild(iframe);
  this.InitIFrame(index);
  return iframe;
 },
 RequireIFrameHeightAdjusting: function(index, iframe) {
  if(this.InternalIsWindowVisible(index))
   this.AdjustIFrameHeight(index, iframe);
  else
   this.PostponeIframeAdjusting(index);
 },
 EnsureIFrameHeightAdjusted: function(index) {
  if(this.GetIframeAdjustingPostponed(index)) {
   var iframe = this.GetWindowContentIFrameElement(index);
   this.AdjustIFrameHeight(index, iframe);
  }
 },
 PostponeIframeAdjusting: function(index) {
  this.SetIframeAdjustingPostponed(index, true);
 },
 SetIframeAdjustingPostponed: function(index, value) {
  if(0 <= index && index < this.iframeAdjustingPostponedArray.length)
   this.iframeAdjustingPostponedArray[index] = value;
  else
   this.iframeAdjustingPostponed = value;
 },
 GetIframeAdjustingPostponed: function(index) {
  if(0 <= index && index < this.iframeAdjustingPostponedArray.length)
   return this.iframeAdjustingPostponedArray[index];
  return this.iframeAdjustingPostponed;
 },
 AdjustIFrameHeight: function(index, iframe) {
  if(!this.InternalIsWindowVisible(index) || !iframe) return;
  this.SetIframeAdjustingPostponed(index, false);
  var content = this.GetContentContainer(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  iframe.style.verticalAlign = "text-bottom";
  var iframeHeight = contentWrapper.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(content);
  if(iframeHeight >= 0)
   iframe.style.height = iframeHeight + "px";
 },
 CreateContentIFrameElement: function(index, src) {
  var iframe = document.createElement("IFRAME");
  iframe.id = this.GetWindowContentIFrameElementId(index);
  iframe.scrolling = "auto";
  iframe.frameBorder = 0;
  iframe.style.width = "100%";
  iframe.style.height = "100%";
  iframe.style.overflow = "auto";
  this.SetSrcToIframeElement(index, iframe, src);
  return iframe;
 },
 CreateContentIFrameDivElement: function(index) {
  var iframeDiv = document.createElement("DIV");
  iframeDiv.id = this.GetWindowContentIFrameDivElementID(index);
  iframeDiv.style.width = "100%";
  iframeDiv.style.height = "100%";
  return iframeDiv;
 },
 GetWindowHeaderTextCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "T");
 },
 GetWindowHeaderImageCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "I");
 },
 GetWindowFooterTextCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "T");
 },
 GetWindowFooterImageCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "I");
 },
 GetWindowHeaderImageUrl: function(index) {
  var element = this.GetWindowHeaderImageCell(index);
  return element ? element.src : "";
 },
 SetWindowHeaderImageUrl: function(index, url) {
  var element = this.GetWindowHeaderImageCell(index);
  if(element != null)
   element.src = url;
 },
 GetWindowFooterImageUrl: function(index) {
  var element = this.GetWindowFooterImageCell(index);
  return element ? element.src : "";
 },
 SetWindowFooterImageUrl: function(index, url) {
  var element = this.GetWindowFooterImageCell(index);
  if(element != null) {
   element.src = url;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 GetWindowHeaderNavigateUrl: function(index) {
  var header = this.GetWindowHeaderElement(index);
  if(header) {
   var link = _aspxGetDescendantNodesByClassName(header, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    return link.href;
  }
  return "";
 },
 SetWindowHeaderNavigateUrl: function(index, url) {
  var header = this.GetWindowHeaderElement(index);
  if(header) {
   var link = _aspxGetDescendantNodesByClassName(header, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    link.href = url;
  }
 },
 GetWindowFooterNavigateUrl: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(footer) {
   var link = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    return link.href;
  }
  return "";
 },
 SetWindowFooterNavigateUrl: function(index, url) {
  var footer = this.GetWindowFooterElement(index);
  if(footer) {
   var link = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
   if(link)
    link.href = url;
  }
  return;
 },
 GetWindowHeaderText: function(index) {
  var element = this.GetWindowHeaderTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.innerHTML;
   else
    return element.innerHTML;
  }
  return "";
 },
 SetWindowHeaderText: function(index, text) {
  var element = this.GetWindowHeaderTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    link.innerHTML = text;
   else
    element.innerHTML = text;
   this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
  }
 },
 GetWindowFooterText: function(index) {
  var element = this.GetWindowFooterTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.innerHTML;
   else
    return element.innerHTML;
  }
  return "";
 },
 SetWindowFooterText: function(index, text) {
  var element = this.GetWindowFooterTextCell(index);
  if(element != null) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    link.innerHTML = text;
   else
    element.innerHTML = text;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 RefreshPopupElementConnection: function() {
  var index = this.HasDefaultWindow() ? -1 : 0;
  for(; index < this.GetWindowCount(); index++) {
   this.RemoveWindowAllPopupElements(index);
   this.PopulatePopupElements(index);
  }
 },
 GetHeaderImageUrl: function() {
  return this.GetWindowHeaderImageUrl(-1);
 },
 SetHeaderImageUrl: function(value) {
  this.SetWindowHeaderImageUrl(-1, value);
 },
 GetFooterImageUrl: function() {
  return this.GetWindowFooterImageUrl(-1);
 },
 SetFooterImageUrl: function(value) {
  this.SetWindowFooterImageUrl(-1, value);
 },
 GetHeaderNavigateUrl: function() {
  return this.GetWindowHeaderNavigateUrl(-1);
 },
 SetHeaderNavigateUrl: function(value) {
  this.SetWindowHeaderNavigateUrl(-1, value);
 },
 GetFooterNavigateUrl: function() {
  return this.GetWindowFooterNavigateUrl(-1);
 },
 SetFooterNavigateUrl: function(value) {
  this.SetWindowFooterNavigateUrl(-1, value);
 },
 GetHeaderText: function() {
  return this.GetWindowHeaderText(-1);
 },
 SetHeaderText: function(value) {
  this.SetWindowHeaderText(-1, value);
 },
 GetFooterText: function() {
  return this.GetWindowFooterText(-1);
 },
 SetFooterText: function(value) {
  this.SetWindowFooterText(-1, value);
 },
 GetVisible: function() {
  return this.IsVisible();
 },
 SetVisible: function(visible) {
  if(visible && !this.IsVisible())
   this.Show();
  else if(!visible && this.IsVisible())
   this.Hide();
 }
});
ASPxClientPopupControl.Cast = ASPxClientControl.Cast;
ASPxClientPopupControl.GetPopupControlCollection = function () {
 return aspxGetPopupControlCollection();
}
var ASPxClientPopupControlResizeState = {
 Resized : 0,
 Collapsed : 1,
 Expanded : 2,
 Maximized : 3,
 RestoredAfterMaximized : 4
};
ASPxClientPopupControlCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function () {
  this.constructor.prototype.constructor.call(this);
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.visibleModalElements = new Array();
  this.visiblePopupWindowIds = new Array();
  this.zIndex = __aspxPopupControlZIndex;
  this.windowResizeByBodyScrollVisibilityChangingLockCount = 0;
  this.savedBodyWidth = 0;
  this.savedBodyHeight = 0;
  this.overControl = null;
  this.overWindowIndex = -1;
  this.overXPos = __aspxInvalidPosition;
  this.overYPos = __aspxInvalidPosition;
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.scrollEventLockCount = 0;
  this.currentActiveWindowElement = null;
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.resizePanel = null;
  this.selectBanned = false;
  this.pcWindowsAreRestrictedByDocumentWindow = true;
  this.searchForTabIndexInAllElements = false;
  this.docScrollLeft = -1;
  this.docScrollTop = -1;
  this.EnsureSaveScrollState();
 },
 EnsureSaveScrollState: function () {
  if (__aspxDocumentLoaded && this.docScrollLeft < 0 && this.docScrollTop < 0)
   this.SaveScrollState();
 },
 GetPopupWindowFromID: function (id) {
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  var name = id.substring(0, pos);
  var index = id.substr(pos + __aspxPCWIdSuffix.length);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  return new _aspxPopupWindow(popupControl, index);
 },
 DoHideAllWindows: function (srcElement, excptId, applyToAll) {
  for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var id = this.visiblePopupWindowIds[i];
   if (id == excptId) continue;
   if (srcElement != null && _aspxGetParentById(srcElement, id) != null) continue;
   var popupWindow = this.GetPopupWindowFromID(id);
   var windowCloseAction = popupWindow.popupControl.GetWindowCloseAction(popupWindow.windowIndex);
   if (popupWindow.popupControl != null) {
    var popupWindowZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(popupWindow.popupControl.GetWindowElement(popupWindow.windowIndex));
    var isPopupHigherSrcElement = ASPxClientPopupUtils.IsHigher(popupWindowZIndexArray, ASPxClientPopupUtils.GetElementZIndexArray(srcElement)) || !popupWindow.popupControl.HasDefaultWindow();
   }
   if (popupWindow.popupControl != null && (
    (windowCloseAction != "CloseButton" && windowCloseAction != "None") && isPopupHigherSrcElement || applyToAll)) {
    popupWindow.popupControl.DoHideWindow(parseInt(popupWindow.windowIndex));
   }
  }
 },
 DoShowAtCurrentPos: function (name, index, popupElementIndex, evtClone) {
  var pc = this.Get(name);
  if (pc != null && !pc.InternalIsWindowVisible(index))
   pc.DoShowWindowAtPos(index, this.overXPos, this.overYPos, popupElementIndex, true, true, evtClone);
 },
 ActivateWindowElement: function (element, evt) {
  var visibleWindowsCount = this.visiblePopupWindowIds.length;
  if (__aspxPopupControlZIndex <= element.style.zIndex && element.style.zIndex != visibleWindowsCount * 2 + __aspxPopupControlZIndex) {
   this.DeleteWindowFromZIndexOrder(element);
  }
  this.SetWindowElementZIndex(element, __aspxPopupControlZIndex + visibleWindowsCount * 2);
  var pcWElementEventSource = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupWindowElement);
  if (!evt || (evt && pcWElementEventSource == element)) {
   if (this.GetCurrentActiveWindowElement() != element) {
    this.RefreshTabIndexes(false);
    this.SaveCurrentActiveWindowElement(element);
   }
  }
 },
 RefreshTabIndexes: function (forceRecalculate) {
  var topModalWindow = this.GetTopModalWindow();
  if (topModalWindow != null || forceRecalculate) {
   var topModalWindowZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(topModalWindow);
   this.CalculateTabIndexes(topModalWindowZIndexArray);
  }
 },
 ElementHasTabIndex: function (element) {
  if (__aspxIE && __aspxBrowserVersion < 8) {
   var elementHtml = element.outerHTML;
   var attributeIndex = elementHtml.indexOf('tabIndex');
   return attributeIndex != -1 && attributeIndex < elementHtml.indexOf(">");
  }
  else
   return _aspxIsExists(_aspxGetAttribute(element, "tabindex"));
 },
 IsElementCanBeActive: function (element) {
  return element.tagName === "INPUT" || element.tagName === "A" ||
   element.tagName === "BUTTON" || element.tagName === "TEXTAREA" ||
   element.tagName === "SELECT" || this.ElementHasTabIndex(element);
 },
 GetCanBeActiveElements: function () {
  var searchForTabIndexInAllElements = aspxGetPopupControlCollection().searchForTabIndexInAllElements;
  if (searchForTabIndexInAllElements) {
   var elements = document.getElementsByTagName("*");
   var canBeActiveElements = [];
   for (var i = 0; i < elements.length; i++) {
    if (this.IsElementCanBeActive(elements[i], searchForTabIndexInAllElements))
     canBeActiveElements.push(elements[i]);
   }
   return canBeActiveElements;
  } else {
   var inputs = document.getElementsByTagName("INPUT");
   var links = document.getElementsByTagName("A");
   var lists = document.getElementsByTagName("UL");
   var buttons = document.getElementsByTagName("BUTTON");
   var textareas = document.getElementsByTagName("TEXTAREA");
   var selects = document.getElementsByTagName("SELECT");
   var union = _aspxCollectionsUnionToArray(inputs, links);
   union = _aspxCollectionsUnionToArray(union, buttons);
   union = _aspxCollectionsUnionToArray(union, textareas);
   union = _aspxCollectionsUnionToArray(union, selects);
   return _aspxCollectionsUnionToArray(union, lists);
  }
 },
 CalculateTabIndexes: function (topModalWindowZIndexArray) {
  var elements = this.GetCanBeActiveElements();
  for (var i = 0; i < elements.length; i++) {
   var currentElementZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(elements[i]);
   if (ASPxClientPopupUtils.IsHigher(currentElementZIndexArray, topModalWindowZIndexArray))
    _aspxRestoreTabIndexAttribute(elements[i]);
   else
    _aspxChangeTabIndexAttribute(elements[i]);
  }
 },
 PopupWindowIsModalByVisibleIndex: function (visiblePopupWindowIndex) {
  return this.PopupWindowIsModalByID(this.visiblePopupWindowIds[visiblePopupWindowIndex]);
 },
 PopupWindowIsModalByID: function (windowElementID) {
  var popupWindow = this.GetPopupWindowFromID(windowElementID);
  return popupWindow.popupControl.WindowIsModal(popupWindow.windowIndex);
 },
 SaveCurrentActiveWindowElement: function (windowElement) {
  this.currentActiveWindowElement = windowElement;
 },
 SkipCurrentActiveWindowElement: function (element) {
  if (element == this.GetCurrentActiveWindowElement())
   this.SaveCurrentActiveWindowElement(null);
 },
 GetCurrentActiveWindowElement: function () {
  return this.currentActiveWindowElement;
 },
 GetTopModalWindow: function () {
  var topWindow = null;
  var topWindowZIndexArray = null;
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var currentWindow = _aspxGetElementById(this.visiblePopupWindowIds[i]);
   if (this.PopupWindowIsModalByVisibleIndex(i) && _aspxElementIsVisible(currentWindow)) {
    var currentWindowZIndexArray = ASPxClientPopupUtils.GetElementZIndexArray(currentWindow);
    if (topWindow == null || ASPxClientPopupUtils.IsHigher(currentWindowZIndexArray, topWindowZIndexArray)) {
     topWindow = currentWindow;
     topWindowZIndexArray = currentWindowZIndexArray;
    }
   }
  }
  return topWindow;
 },
 DeleteWindowFromZIndexOrder: function (element) {
  for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var windowElement = _aspxGetElementById(this.visiblePopupWindowIds[i]);
   if (!windowElement)
    _aspxArrayRemoveAt(this.visiblePopupWindowIds, i);
   else if (windowElement.style.zIndex > element.style.zIndex)
    this.SetWindowElementZIndex(windowElement, windowElement.style.zIndex - 2);
  }
 },
 SetWindowElementZIndex: function (element, zIndex) {
  element.style.zIndex = zIndex;
  var iFrame = element.overflowElement;
  if (iFrame)
   iFrame.style.zIndex = zIndex - 1;
  var modalElement = element.modalElement;
  if (modalElement)
   modalElement.style.zIndex = zIndex - 1;
  this.UpdateWindowsStateInputElement(element.id);
  this.UpdateWindowsStateCookie(element.id);
 },
 AdjustModalElementsBounds: function () {
  for (var i = 0; i < this.visibleModalElements.length; i++)
   this.AdjustModalElementBounds(this.visibleModalElements[i]);
 },
 AdjustModalElementBounds: function (element) {
  if (!_aspxIsExistsElement(element)) return;
  var x = _aspxPrepareClientPosForElement(0, element, true);
  var y = _aspxPrepareClientPosForElement(0, element, false);
  _aspxSetStyles(element, { left: x, top: y });
  if (__aspxNetscapeFamily && !__aspxFirefox)
   _aspxSetStyles(element, { width: 1, height: 1 });
  _aspxSetStyles(element, { width: _aspxGetDocumentWidth(), height: _aspxGetDocumentHeight() });
 },
 ClearAppearTimer: function () {
  this.appearTimerID = _aspxClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function () {
  this.disappearTimerID = _aspxClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function () {
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function () {
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function (name, index, popupElementIndex, timeout, evt) {
  var evtClone = _aspxCloneObject(evt);
  this.appearTimerID = _aspxSetTimeout(function() {
   aspxGetPopupControlCollection().DoShowAtCurrentPos(name, index, popupElementIndex, evtClone);
  }, timeout);
 },
 SetDisappearTimer: function (name, index, timeout) {
  this.disappearTimerID = _aspxSetTimeout("aspxPWDisappearTimer(\"" + name + "\", " + index + ")", timeout);
 },
 GetDocScrollDifference: function () {
  return new _aspxScrollDifference(_aspxGetDocumentScrollLeft() - this.docScrollLeft, _aspxGetDocumentScrollTop() - this.docScrollTop);
 },
 IsDocScrolled: function (scroll) {
  return scroll.horizontal != 0 || scroll.vertical != 0;
 },
 SaveScrollState: function () {
  this.docScrollLeft = _aspxGetDocumentScrollLeft();
  this.docScrollTop = _aspxGetDocumentScrollTop();
 },
 InitDragObject: function (control, index, x, y, xClientCorrection, yClientCorrection) {
  this.draggingControl = control;
  this.draggingWindowIndex = index;
  this.gragXOffset = x;
  this.gragYOffset = y;
  this.xClientCorrection = xClientCorrection;
  this.yClientCorrection = yClientCorrection;
  this.SetDocumentSelectionBan(true);
 },
 InitOverObject: function (control, index, evt) {
  this.overControl = control;
  this.overWindowIndex = index;
  if (evt)
   this.SaveCurrentMouseOverPos(evt);
 },
 InitResizeObject: function (control, index, cursor, resizePanel) {
  this.resizeControl = control;
  this.resizeIndex = index;
  this.resizeCursor = cursor;
  this.resizePanel = resizePanel;
  this.SetDocumentSelectionBan(true);
 },
 SetDocumentSelectionBan: function (value) {
  if (this.selectBanned === value)
   return;
  this.selectBanned = value;
  if (__aspxWebKitFamily) {
   if (value) {
    if (!this.webkitUserSelectBackup && document.body.style.webkitUserSelect)
     this.webkitUserSelectBackup = document.body.style.webkitUserSelect;
    document.body.style.webkitUserSelect = "none";
   } else {
    if (this.webkitUserSelectBackup) {
     document.body.style.webkitUserSelect = this.webkitUserSelectBackup;
     delete this.webkitUserSelectBackup;
    } else
     document.body.style.webkitUserSelect = "auto";
   }
  }
 },
 IsResizeInint: function () {
  return this.resizeControl != null;
 },
 ClearDragObject: function () {
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.SetDocumentSelectionBan(this.resizeControl != null);
 },
 ClearResizeObject: function () {
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.SetDocumentSelectionBan(this.draggingControl != null);
  this.resizePanel.parentNode.removeChild(this.resizePanel);
 },
 Drag: function (evt) {
  if(window["__aspxTableColumnResizing"] || window["__aspxDragHelper"])
   return;
  if (!_aspxGetIsLeftButtonPressed(evt)) return;
  var x = _aspxGetEventX(evt);
  var y = _aspxGetEventY(evt);
  if (this.pcWindowsAreRestrictedByDocumentWindow && ASPxClientPopupUtils.CoordinatesInDocumentRect(x, y)) {
   x += this.gragXOffset;
   y += this.gragYOffset;
   this.draggingControl.OnDrag(this.draggingWindowIndex, x, y, this.xClientCorrection, this.yClientCorrection, evt);
   if(__aspxWebKitTouchUI)
    evt.preventDefault();
  }
 },
 DragStop: function () {
  this.draggingControl.OnDragStop(this.draggingWindowIndex);
  this.ClearDragObject();
 },
 ResizeStop: function (evt) {
  this.resizeControl.OnResizeStop(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  aspxGetPopupControlCollection().ClearResizeObject();
 },
 OnPWMouseMove: function (evt, name, index) {
  if (this.draggingControl == null &&
   this.overControl == null &&
   this.resizeControl == null) {
   var pc = aspxGetPopupControlCollection().Get(name);
   if (pc != null) pc.OnMouseMove(evt, index);
  }
 },
 OnPWMouseOver: function (evt) {
  if (!this.overControl || this.draggingControl) return;
  if (this.IsOverPopupWindow(evt))
   this.ClearDisappearTimer();
 },
 IsOverPopupWindow: function (evt) {
  return ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement) != null;
 },
 OnDocumentMouseDown: function (evt) {
  var popupElement = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
  var excptId = popupElement == null ? "" :
   popupElement.DXPopupElementControl.GetWindowElementId(popupElement.DXPopupWindowIndex);
  this.OnMouseDownCore(evt, excptId);
 },
 OnMouseDown: function (evt) {
  this.OnMouseDownCore(evt, "");
 },
 OnMouseDownCore: function (evt, excptId) {
  var srcElement = _aspxGetEventSource(evt);
  this.DoHideAllWindows(srcElement, excptId, false);
  aspxGetPopupControlCollection().ClearAppearTimer();
 },
 OnMouseMove: function (evt) {
  if(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)
   return;
  if (this.draggingControl != null) {
   this.Drag(evt);
  }
  else if (this.overControl != null) {
   this.OnMouseOver(evt);
  }
  else if (this.resizeControl != null) {
   if (__aspxIE && !_aspxGetIsLeftButtonPressed(evt))
    this.ResizeStop(evt);
   else
    this.resizeControl.OnResize(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  }
 },
 OnMouseOver: function (evt) {
  var element = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement);
  var curPopupElement = this.overControl.GetWindowCurrentPopupElementByIndex(this.overWindowIndex);
  var popup = element != null ? element.DXPopupElementControl : null;
  var isPopupActionMouseOver = popup && popup.GetWindowPopupAction(this.overWindowIndex) == 'MouseOver';
  var isCurPopupElement = element === curPopupElement;
  var isCurPopupWindow = element != null && element.id === this.overControl.GetWindowElementId(this.overWindowIndex);
  var isCurPopupElementOrCurPopupWindow = isCurPopupElement || isCurPopupWindow || isPopupActionMouseOver;
  if(isCurPopupElementOrCurPopupWindow) {
   var clearTimer = true;
   var popup = element.DXPopupElementControl;
   if(popup && popup.GetLastShownPopupElementIndex(element.DXPopupWindowIndex) != element.DXPopupElementIndex)
    clearTimer = false;
   if(clearTimer)
    this.ClearDisappearTimer();
   this.SaveCurrentMouseOverPos(evt);
   if (__aspxTouchUI && !ASPxClientTouchUI.IsNativeScrolling())
    return;
   return _aspxCancelBubble(evt);
  }
  this.OnMouseOut();
 },
 OnMouseOut: function (evt) {
  if (!this.overControl || this.draggingControl) return;
  this.ClearAppearTimer();
  var windowCloseAction = this.overControl.GetWindowCloseAction(this.overWindowIndex);
  if (windowCloseAction == "MouseOut" && this.overControl.InternalIsWindowVisible(this.overWindowIndex)) {
   if (!this.IsDisappearTimerActive() && this.IsDisappearAllowedByMouseOut(evt))
    this.SetDisappearTimer(this.overControl.name, this.overWindowIndex, this.overControl.disappearAfter);
  }
  else
   this.OverStop();
 },
 IsDisappearAllowedByMouseOut: function (evt) {
  return __aspxFirefox ? !this.IsOverPopupWindow(evt) : true;
 },
 OnMouseUp: function (evt) {
  if (this.draggingControl != null)
   this.DragStop();
  if (this.resizeControl != null)
   this.ResizeStop(evt);
 },
 OnResize: function (evt) {
  this.AutoUpdateElementsPosition();
  this.AdjustModalElementsBounds();
 },
 OnScroll: function (evt) {
  if (this.scrollEventLockCount > 0)
   return;
  var scroll = this.GetDocScrollDifference();
  if (this.IsDocScrolled(scroll)) {
   this.CorrectPositionAtScroll(scroll);
   this.AdjustModalElementsBounds();
   this.SaveScrollState();
  }
  if (__aspxIE && __aspxBrowserVersion <= 8){
   this.CalculateDocumentDimensionsWithoutPinnedWindowsOldIE(function(){
    this.FireScrollEventToWindowsOldIE(evt);
   }.aspxBind(this), evt);
  }
  else {
   this.CalculateDocumentDimensionsWithoutPinnedWindows(evt);
   this.FireScrollEventToWindows(evt);
  }
 },
 GetSavedBodyWidth: function(){
  if (this.savedBodyWidth == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyWidth;
 },
 GetSavedBodyHeight: function(){
  if (this.savedBodyHeight == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyHeight;
 },
 HidePinnedPopupsThatOutFromViewPort: function(){
  var popupsToRestoreVisible = [];
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (!(popupControl.GetIsPinned(popupWindow.windowIndex) && popupControl.GetIsOutFromViewPort(popupWindow.windowIndex)))
    continue;
   var element = popupControl.GetWindowElement(popupWindow.windowIndex);
   if (!element) continue;
   var restoreData = {};
   restoreData.element = element;
   restoreData.display = element.style.display;
   element.style.display = "none";
   popupsToRestoreVisible.push(restoreData);
  }
  return popupsToRestoreVisible;
 },
 RestorePinnedPopupsThatOutFromViewPort: function(popupsToRestoreVisible){
  if (popupsToRestoreVisible.length > 0){
   for (var i = 0; i < popupsToRestoreVisible.length; i++) {
    var restoreData = popupsToRestoreVisible[i];
    restoreData.element.style.display = restoreData.display;
   }
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindows: function (evt) {
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && _aspxGetEventSource(evt) == document;
  if (needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.savedBodyWidth = _aspxGetDocumentWidth();
  this.savedBodyHeight = _aspxGetDocumentHeight();
  if (needToHideRestorePopupsThatOutFromViewPort)
   this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
 },
 FireScrollEventToWindows: function(evt) {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   popupControl.OnScroll(evt, popupWindow.windowIndex);
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindowsOldIE: function (onCalculateFinished, evt) {
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && _aspxGetEventSource(evt) == document;
  if (needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.scrollEventLockCount++;
  window.setTimeout(function(){
   this.savedBodyWidth = _aspxGetDocumentWidth();
   this.savedBodyHeight = _aspxGetDocumentHeight();
   if (needToHideRestorePopupsThatOutFromViewPort)
    this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
   if(onCalculateFinished)
    window.setTimeout(function(){onCalculateFinished(); }.aspxBind(this), 0);
   this.scrollEventLockCount--;
  }.aspxBind(this), 0);
 },
 FireScrollEventToWindowsOldIE: function(evt) {
  this.scrollEventLockCount++;
  this.FireScrollEventToWindows(evt);
  this.scrollEventLockCount--;
 },
 LockScrollEvent: function () {
  this.scrollEventLockCount++;
 },
 UnlockScrollEvent: function () {
  this.scrollEventLockCount--;
 },
 CorrectPositionAtScroll: function (scroll) {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex)) {
    if (popupControl.GetAutoUpdatePosition(popupWindow.windowIndex))
     popupWindow.popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
   }
  }
 },
 FFScrollEmulation: function (scroll, popupWindow) {
  var windowElement = popupWindow.popupControl.GetWindowElement(popupWindow.windowIndex);
  windowElement.style.left = (windowElement.offsetLeft - scroll.horizontal) + "px";
  windowElement.style.top = (windowElement.offsetTop - scroll.vertical) + "px";
 },
 OnSelectStart: function () {
  return !this.selectBanned;
 },
 OverStop: function () {
  this.overControl = null;
  this.overWindowIndex = -1;
 },
 OnPWDisappearTimer: function (name, index) {
  var pc = this.Get(name);
  if (pc != null) {
   if (!pc.DoHideWindow(index))
    this.OverStop();
   this.ClearDisappearTimer();
  }
 },
 SaveCurrentMouseOverPos: function (evt) {
  this.overXPos = _aspxGetEventX(evt);
  this.overYPos = _aspxGetEventY(evt);
 },
 RegisterVisibleModalElement: function (element) {
  if (_aspxArrayIndexOf(this.visibleModalElements, element) == -1)
   this.visibleModalElements.push(element);
 },
 UnregisterVisibleModalElement: function (element) {
  _aspxArrayRemove(this.visibleModalElements, element);
 },
 RegisterVisibleWindow: function (element, popupControl, index) {
  if (_aspxArrayIndexOf(this.visiblePopupWindowIds, element.id) == -1) {
   this.visiblePopupWindowIds.push(element.id);
   if (popupControl && popupControl.GetWindowCloseAction(index) == "MouseOut")
    aspxGetPopupControlCollection().InitOverObject(popupControl, index, null);
   this.OnRegisteredVisibleWindow(element);
  }
 },
 OnRegisteredVisibleWindow: function (element) {
  var elementIndex = _aspxArrayIndexOf(this.visiblePopupWindowIds, element.id);
  if (this.PopupWindowIsModalByVisibleIndex(elementIndex))
   ASPxClientPopupUtils.RemoveFocus(element);
 },
 UnregisterVisibleWindow: function (element) {
  this.DeleteWindowFromZIndexOrder(element);
  _aspxArrayRemove(this.visiblePopupWindowIds, element.id);
  var forceRecalculate = this.PopupWindowIsModalByID(element.id);
  this.RefreshTabIndexes(forceRecalculate);
  this.SkipCurrentActiveWindowElement(element);
 },
 UpdateWindowsStateCookie: function (id) {
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  var name = id.substring(0, pos);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  if (popupControl != null)
   popupControl.UpdateWindowsStateCookie(false);
 },
 UpdateWindowsStateInputElement: function (id) {
  var pos = id.lastIndexOf(__aspxPCWIdSuffix);
  var name = id.substring(0, pos);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  if (popupControl != null)
   popupControl.UpdateWindowsStateInputElement(false);
 },
 AutoUpdateElementsPosition: function () {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex))
    popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
  }
 },
 IsDocumentIsCoveredByModalElement: function () {
  for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if (popupControl && popupControl.GetWindowModalElement(popupWindow.windowIndex))
    return true;
  }
  return false;
 },
 LockWindowResizeByBodyScrollVisibilityChanging: function () {
  this.windowResizeByBodyScrollVisibilityChangingLockCount++;
 },
 UnlockWindowResizeByBodyScrollVisibilityChanging: function () {
  this.windowResizeByBodyScrollVisibilityChangingLockCount--;
 },
 WindowResizeByBodyScrollVisibilityChangingLocked: function () {
  return this.windowResizeByBodyScrollVisibilityChangingLockCount > 0;
 },
 HideAllWindows: function () {
  this.DoHideAllWindows(null, "", true);
 }
});
var __aspxPopupControlCollection = null;
function aspxGetPopupControlCollection() {
 if (__aspxPopupControlCollection == null)
  __aspxPopupControlCollection = new ASPxClientPopupControlCollection();
 return __aspxPopupControlCollection;
}
ASPxClientPopupWindow = _aspxCreateClass(null, {
 constructor: function (popupControl, index, name) {
  this.popupControl = popupControl;
  this.index = index;
  this.name = name;
 },
 GetHeaderImageUrl: function () {
  return this.popupControl.GetWindowHeaderImageUrl(this.index);
 },
 SetHeaderImageUrl: function (value) {
  this.popupControl.SetWindowHeaderImageUrl(this.index, value);
 },
 GetFooterImageUrl: function () {
  return this.popupControl.GetWindowFooterImageUrl(this.index);
 },
 SetFooterImageUrl: function (value) {
  this.popupControl.SetWindowFooterImageUrl(this.index, value);
 },
 GetHeaderNavigateUrl: function () {
  return this.popupControl.GetWindowHeaderNavigateUrl(this.index);
 },
 SetHeaderNavigateUrl: function (value) {
  this.popupControl.SetWindowHeaderNavigateUrl(this.index, value);
 },
 GetFooterNavigateUrl: function () {
  return this.popupControl.GetWindowFooterNavigateUrl(this.index);
 },
 SetFooterNavigateUrl: function (value) {
  this.popupControl.SetWindowFooterNavigateUrl(this.index, value);
 },
 GetHeaderText: function () {
  return this.popupControl.GetWindowHeaderText(this.index);
 },
 SetHeaderText: function (value) {
  this.popupControl.SetWindowHeaderText(this.index, value);
 },
 GetFooterText: function () {
  return this.popupControl.GetWindowFooterText(this.index);
 },
 SetFooterText: function (value) {
  this.popupControl.SetWindowFooterText(this.index, value);
 }
});
ASPxClientPopupWindowEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function (window) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
 }
});
ASPxClientPopupWindowCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function (window) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
 }
});
ASPxClientPopupWindowResizeEventArgs = _aspxCreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function (window, resizeState) {
  this.constructor.prototype.constructor.call(this, window);
  this.resizeState = resizeState;
 }
});
ASPxClientPopupWindowPinnedChangedEventArgs = _aspxCreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function (window, pinned) {
  this.constructor.prototype.constructor.call(this, window);
  this.pinned = pinned;
 }
});
function _aspxPopupWindow(popupControl, windowIndex) {
 this.popupControl = popupControl;
 this.windowIndex = windowIndex;
}
function _aspxScrollDifference(horizontal, vertical) {
 this.horizontal = horizontal;
 this.vertical = vertical;
}
function aspxPWDisappearTimer(name, index) {
 aspxGetPopupControlCollection().OnPWDisappearTimer(name, index);
}
function aspxPWHMDown(evt) {
 return _aspxCancelBubble(evt);
}
function aspxPWCBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCloseButtonClick");
}
function aspxPWPBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnPinButtonClick");
}
function aspxPWRBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnRefreshButtonClick");
}
function aspxPWMNBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCollapseButtonClick");
}
function aspxPWMXBClick(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnPWHBClickCore(evt, index, "OnMaximizeButtonClick");
}
function aspxPWEMOver(evt) {
 aspxGetPopupControlCollection().OnPWMouseOver(evt);
}
function aspxPWMEMDown(evt) {
 var internalScrollableModalDiv = __aspxAndroidDefaultBrowser ? _aspxGetEventSource(evt) : null;
 var modalDiv = internalScrollableModalDiv ? internalScrollableModalDiv.parentNode : _aspxGetEventSource(evt);
 if (modalDiv != null)
  modalDiv.DXModalPopupControl.OnMouseDownModalElement(evt, modalDiv.DXModalPopupWindowIndex);
}
function aspxPEMEvent(evt) {
 var element = ASPxClientPopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
 if(element != null) {
  var popupControl = element.DXPopupElementControl;
  var index = element.DXPopupWindowIndex;
  if(evt.type == "mousedown") {
   popupControl.SetIsPopuped(index, popupControl.InternalIsWindowVisible(index));
   aspxGetPopupControlCollection().OnMouseDown(evt);
  }
  else {
   var windowPopupAction = popupControl.GetWindowPopupAction(element.DXPopupWindowIndex);
   var leftMouseButtonAction = windowPopupAction == "LeftMouseClick" && _aspxGetIsLeftButtonPressed(evt);
   var rightMouseButtonAction = windowPopupAction == "RightMouseClick" && !_aspxGetIsLeftButtonPressed(evt);
   if (leftMouseButtonAction || rightMouseButtonAction) {
    if (rightMouseButtonAction)
     ASPxClientPopupUtils.PreventContextMenu(evt);
    var windowCloseAction = popupControl.GetWindowCloseAction(index);
    var isPopuped = popupControl.GetIsPopuped(index);
    var isNewPopupElement = popupControl.GetLastShownPopupElementIndex(index) != element.DXPopupElementIndex;
    if(isPopuped && isNewPopupElement) {
     popupControl.DoHideWindow(index);
     aspxGetPopupControlCollection().ClearDisappearTimer();
     isPopuped = false;
    }
    if(!(isPopuped && windowCloseAction == "OuterMouseClick")) {
     popupControl.DoShowWindow(index, element.DXPopupElementIndex, evt);
    }
    if(windowCloseAction == "MouseOut")
     aspxGetPopupControlCollection().InitOverObject(popupControl, element.DXPopupWindowIndex, evt);
    return false;
   }
  }
 }
}
function aspxPWDGMDown(evt, name, index) {
 return aspxPWMDown(evt, name, index, true);
}
function aspxPWGripMDown(evt, name, index) {
 aspxPWMDownCore(evt, name, index, false);
 return aspxPWHMDown(evt);
}
function aspxPointOnElementScrollBar(element, x, y, rtl) {
 var scrollWidth = _aspxGetVerticalScrollBarWidth();
 var hasHorizontalScroll = element.scrollWidth > element.clientWidth;
 var hasVerticalScroll = element.scrollHeight > element.clientHeight;
 var ceilX = rtl ? _aspxGetAbsoluteX(element) + scrollWidth :
  _aspxGetAbsoluteX(element) + (element.offsetWidth - _aspxGetHorizontalBordersWidth(element));
 var ceilY = _aspxGetAbsoluteY(element) + (element.offsetHeight - _aspxGetVerticalBordersWidth(element));
 return (hasVerticalScroll && x >= ceilX - scrollWidth && x <= ceilX) ||
     (hasHorizontalScroll && y >= ceilY - scrollWidth && y <= ceilY);
}
function aspxPWMDown(evt, name, index, isWindowContentDraggingAllowed) {
 var pointOnScrollBar = false;
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc && pc.enableContentScrolling) {
  var rtl = pc.rtl && (__aspxIE || __aspxFirefox || __aspxOpera);
  pointOnScrollBar = aspxPointOnElementScrollBar(pc.GetContentContainer(index), evt.clientX, evt.clientY, rtl);
 }
 aspxPWMDownCore(evt, name, index, isWindowContentDraggingAllowed, pointOnScrollBar);
 if (isWindowContentDraggingAllowed) {
  aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
  if (typeof (aspxGetDropDownCollection) == "function")
   aspxGetDropDownCollection().OnDocumentMouseDown(evt);
  if(!pointOnScrollBar) {
   if(!__aspxWebKitTouchUI && _aspxGetEventSource(evt).tagName == "IMG")
    _aspxPreventEvent(evt);
  }
 }
}
function aspxPWMDownCore(evt, name, index, isDraggingAllowed, pointOnScrollBar) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) {
  pc.OnActivateMouseDown(evt, index);
  pc.OnMouseDown(evt, index, isDraggingAllowed, pointOnScrollBar);
 }
}
function aspxPWMMove(evt, name, index) {
 aspxGetPopupControlCollection().OnPWMouseMove(evt, name, index);
}
function aspxPCAStop(name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if (pc != null) pc.OnAnimationStop(index);
}
function aspxPCIframeLoad(evt) {
 var srcElement = _aspxGetEventSource(evt);
 if (srcElement) {
  var pcName = srcElement.popupControlName;
  var pcWndIndex = srcElement.pcWndIndex;
  if (pcName) {
   var pc = aspxGetPopupControlCollection().Get(pcName);
   pc.OnIFrameLoad(pcWndIndex);
  }
 }
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxPopupControlDocumentMouseDown);
function aspxPopupControlDocumentMouseDown(evt) {
 aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, aspxPopupControlDocumentMouseUp);
function aspxPopupControlDocumentMouseUp(evt) {
 return aspxGetPopupControlCollection().OnMouseUp(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, aspxPopupControlDocumentMouseMove);
function aspxPopupControlDocumentMouseMove(evt) {
 if (typeof (aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseMove(evt);
}
_aspxAttachEventToDocument("mouseout", aspxPopupControlDocumentMouseOut);
function aspxPopupControlDocumentMouseOut(evt) {
 if (typeof (aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseOut(evt);
}
_aspxAttachEventToElement(window, "resize", aspxPopupControlWindowResize);
function aspxPopupControlWindowResize(evt) {
 aspxGetPopupControlCollection().OnResize(evt);
}
_aspxAttachEventToElement(window, "scroll", aspxPopupControlWindowScroll);
function aspxPopupControlWindowScroll(evt) {
 aspxGetPopupControlCollection().OnScroll(evt);
}
_aspxAttachEventToDocument("selectstart", aspxPopupControlDocumentSelectStart);
function aspxPopupControlDocumentSelectStart(evt) {
 var ret = aspxGetPopupControlCollection().OnSelectStart(evt);
 if (!ret) return false;
}
function aspxTestPopupWindowElement(element) {
 return !!element.DXPopupWindowElement;
}
function aspxTestPopupControlElement(element) {
 return element.DXPopupElementControl && _aspxIsExists(element.DXPopupWindowIndex);
}
function aspxTestPopupControlOverElement(element) {
 var collection = aspxGetPopupControlCollection();
 var popupControl = collection.overControl;
 var index = collection.overWindowIndex;
 var windowId = popupControl.GetWindowElementId(index);
 if(element.id == windowId)
  return true;
 var popupElements = popupControl.GetPopupElementList(index);
 for(var i = 0; i < popupElements.length; i++)
  if(popupElements[i] == element)
   return true;
 return false;
}
ASPxClientButton = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientButton = true;
  this.allowFocus = true;
  this.autoPostBackFunction = null;
  this.causesValidation = true;
  this.checked = false;
  this.clickLocked = false;
  this.groupName = "";
  this.focusElementSelected = false;
  this.pressed = false;
  this.useSubmitBehavior = true;
  this.validationGroup = "";
  this.validationContainerID = null;
  this.validateInvisibleEditors = false;
  this.originalWidth = null;
  this.originalHeight = null;
  this.needUpdateBounds = true;
  this.buttonCell = null;
  this.contentDiv = null;
  this.checkedInput = null;
  this.buttonImage = null;
  this.internalButton = null;
  this.textElement = null;
  this.textControl = null;
  this.textContainer = null;
  this.isTextEmpty = false;
  this.CheckedChanged = new ASPxClientEvent();
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Click = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  var mainElement = this.GetMainElement();
  this.originalWidth = mainElement.style.width;
  this.originalHeight = mainElement.style.height;
  this.needUpdateBounds = __aspxIE && __aspxBrowserVersion < 8 || _aspxGetCurrentStyle(mainElement).display.indexOf("table") === -1;
  if(this.needUpdateBounds)
   mainElement.className = mainElement.className.replace("dxbTSys", "");
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeElementIDs();
  this.InitializeEvents();
  this.InitializeEnabled();
  this.InitializeChecked();
  if(this.IsLink())
   this.InitializeLink();
  this.PreventButtonImageDragging();
 },
 InitializeElementIDs: function(){
  var mainElement = this.GetMainElement();
  var contentElement = _aspxGetChildByTagName(mainElement, "DIV", 0);
  if(contentElement) contentElement.id = this.name + "_CD";
  var imageElement = _aspxGetChildByTagName(mainElement, "IMG", 0);
  if(imageElement) imageElement.id = this.name + "Img";
 },
 InitializeEnabled: function(){
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 InitializeChecked: function(){
  this.SetCheckedInternal(this.checked, true);
 },
 InitializeLink: function(){
  var mainElement = this.GetMainElement();
  if(this.enabled)
   mainElement.href = "javascript:;";
  if(!this.allowFocus)
   mainElement.style.outline = 0;
  if(!this.GetTextContainer())
   mainElement.style.fontSize = "0pt";
 },
 InitializeEvents: function(){
  if (!this.isNative && !this.IsLink()) {
   var element = this.GetInternalButton();
   if(element)
    element.onfocus = null;
   var textControl = this.GetTextControl();
   if (textControl) {
    if (__aspxIE)
     _aspxAttachEventToElement(textControl, "mouseup", _aspxClearSelection);
    _aspxPreventElementDragAndSelect(textControl, false);
   }
  }
  this.onClick = function(evt) {
   var processOnServer = aspxBClick(this.name, evt);
   if(!processOnServer)
    _aspxPreventEvent(evt);
   return processOnServer;
  }.aspxBind(this);
  this.onImageMoseDown = function() { var el = _aspxGetFocusedElement(); if(el) el.blur(); };
  this.onGotFocus = function() { aspxBGotFocus(name); };
  this.onLostFocus = function() { aspxBLostFocus(name); };
  this.onKeyUp = function(evt) { aspxBKeyUp(evt, name); };
  this.onKeyDown = function(evt) { aspxBKeyDown(evt, name); };
  if(!this.isNative && !this.IsLink()) {
   this.AttachNativeHandlerToMainElement("focus", "SetFocus");
   this.AttachNativeHandlerToMainElement("click", "DoClick");
  }
 },
 AdjustControlCore: function () {
  if(this.isNative || this.IsLink()) return;
  var buttonImage = this.GetButtonImage();
  if(buttonImage && buttonImage.offsetHeight === 0 && buttonImage.offsetWidth === 0)
   buttonImage.onload = function() { this.UpdateSize(); }.aspxBind(this);
  else
   this.UpdateSize();
 },
 UpdateSize: function(){
  if(this.needUpdateBounds){
   this.UpdateWidth();
   this.UpdateHeight();
  }
  else
   this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 UpdateHeight: function(){
  if(this.isNative || this.IsLink() || this.originalHeight === null || _aspxIsPercentageSize(this.originalHeight)) return;
  var height;
  var mainElement = this.GetMainElement();
  var borderAndPadding = _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  if(!this.originalHeight) {
   mainElement.style.height = "";
   height = mainElement.offsetHeight - borderAndPadding;
  }
  else
   height = (_aspxPxToInt(this.originalHeight) - borderAndPadding);
  if(height){
   if(__aspxIE && __aspxBrowserVersion < 8 && height < 0)
    height = 0;
   mainElement.style.height = height + "px";
   var contentDiv = this.GetContentDiv();
   if(contentDiv && contentDiv.offsetHeight > 0){
    var contentDivCurrentStyle = _aspxGetCurrentStyle(contentDiv);
    var paddingTop = parseInt(contentDivCurrentStyle.paddingTop);
    if(!paddingTop) paddingTop = 0;
    var paddingBottom = parseInt(contentDivCurrentStyle.paddingBottom);
    if(!paddingBottom) paddingBottom = 0;
    var clientHeightDiff = height - contentDiv.offsetHeight;
    var verticalAlign = _aspxGetCurrentStyle(mainElement).verticalAlign;
    if(verticalAlign == "top")
     paddingBottom = paddingBottom + clientHeightDiff;
    else if(verticalAlign == "bottom")
     paddingTop = paddingTop + clientHeightDiff;
    else{
     var halfClientHeightDiff = Math.floor(clientHeightDiff / 2);
     paddingTop = paddingTop + halfClientHeightDiff;
     paddingBottom = paddingBottom + (clientHeightDiff - halfClientHeightDiff);
    }
    contentDiv.style.paddingTop = (paddingTop > 0 ? paddingTop : 0) + "px";
    contentDiv.style.paddingBottom = (paddingBottom > 0 ? paddingBottom : 0) + "px";
   }
  }
 },
 UpdateWidth: function(){
  if(this.isNative || this.IsLink() || this.originalWidth === null) return;
  if(!_aspxIsPercentageSize(this.originalWidth)) {
   var mainElement = this.GetMainElement();
   var borderAndPadding = _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
   if(__aspxIE && __aspxBrowserVersion < 8){
    mainElement.style.display = "inline";
    mainElement.style.width = "";
    if(mainElement.offsetWidth > 0)
     mainElement.style.width = (mainElement.offsetWidth + borderAndPadding) + "px";
    mainElement.style.display = "";
   }
   else {
    if(this.originalWidth && _aspxIsTextWrapped(this.GetTextContainer()))
     mainElement.style.width = (_aspxPxToInt(this.originalWidth) - borderAndPadding) + "px";
    else
     mainElement.style.width = "";
   }
   var width = mainElement.offsetWidth - borderAndPadding;
   if(this.originalWidth && width < _aspxPxToInt(this.originalWidth) - borderAndPadding)
    width = _aspxPxToInt(this.originalWidth) - borderAndPadding;
   if(width)
    mainElement.style.width = (width > 0 ? width : 0)  + "px";
  }
  this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 GetAdjustedSizes: function() {
  var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
  var image = this.GetButtonImage();
  if(image) {
   sizes.imageWidth = image.offsetWidth;
   sizes.imageHeight = image.offsetHeight;
  }
  return sizes;
 },
 PreventButtonImageDragging: function() {
  _aspxPreventImageDragging(this.GetButtonImage());
 },
 AttachNativeHandlerToMainElement: function(handlerName, correspondingMethodName) {
  var mainElement = this.GetMainElement();
  if (!_aspxIsExistsElement(mainElement))
   return;
  mainElement[handlerName] = Function("_aspxBCallButtonMethod('" + this.name + "', '" + correspondingMethodName + "')");
 },
 GetContentDiv: function(){
  if(!_aspxIsExistsElement(this.contentDiv))
   this.contentDiv = this.GetChild("_CD");
  return this.contentDiv;
 },
 GetButtonCheckedInput: function(){
  if(!_aspxIsExistsElement(this.checkedInput))
   this.checkedInput = _aspxGetElementById(this.name + "_CH");
  return this.checkedInput;
 },
 GetButtonImage: function(){
  if(!_aspxIsExistsElement(this.buttonImage))
   this.buttonImage = _aspxGetChildByTagName(this.GetMainElement(), "IMG", 0);
  return this.buttonImage;
 },
 GetInternalButton: function() {
  if(!_aspxIsExistsElement(this.internalButton))
   this.internalButton = this.isNative || this.IsLink() ? this.GetMainElement() : _aspxGetChildByTagName(this.GetMainElement(), "INPUT", 0);
  return this.internalButton;
 },
 GetTextContainer: function() {
  if (!this.textContainer) {
   if(this.isNative)
    this.textContainer = this.GetMainElement();
   else{
    var textElement = this.IsLink() ? this.GetMainElement() : this.GetContentDiv();
    this.textContainer = _aspxGetChildByTagName(textElement, "SPAN", 0);
   }
  }
  return this.textContainer;
 },
 GetTextControl: function(){
  if(!_aspxIsExistsElement(this.textControl))
   this.textControl = _aspxGetParentByTagName(this.GetContentDiv(), "DIV");
  if (!_aspxIsExistsElement(this.textControl) || (this.textControl.id == this.name))
   this.textControl = this.GetContentDiv();
  return this.textControl;
 },
 IsLink: function(){
  return this.GetMainElement().tagName === "A";
 },
 IsHovered: function(){
  var hoverElement = this.GetMainElement();
  return aspxGetStateController().currentHoverItemName == hoverElement.id;
 },
 SetEnabledInternal: function(enabled, initialization) {
  if(!this.enabled)
   return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetInternalButton();
  if(element) {
   element.disabled = !enabled;
   if(this.IsLink()){
    var method = _aspxChangeAttributesMethod(enabled);
    method(this.GetMainElement(), "href");
   }
  }
  this.ChangeEnabledEventsAttributes(_aspxChangeEventsMethod(enabled));
 },
 ChangeEnabledEventsAttributes: function(method) {
  var element = this.GetMainElement();
  method(element, "click", this.onClick);
  if (this.allowFocus){
   if (!this.isNative && !this.IsLink())
    element = this.GetInternalButton();
   if(element) {
    method(element, "focus", this.onGotFocus);
    method(element, "blur", this.onLostFocus);
    if (!this.isNative && !this.IsLink()){
     method(element, "keyup", this.onKeyUp);
     method(element, "blur", this.onKeyUp);
     method(element, "keydown", this.onKeyDown);
    }
   }
   if(__aspxFirefox){
    var image = this.GetButtonImage();
    if(image)
     method(image, "mousedown", this.onImageMoseDown);
   }
  }
 },
 ChangeEnabledStateItems: function(enabled){
  if(this.isNative) return;
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  this.UpdateFocusedStyle();
 },
 RequiredPreventDoublePostback: function(){
  return __aspxFirefox && !this.isNative;
 },
 OnFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = true;
  if(this.isInitialized)
   this.RaiseFocus();
  this.UpdateFocusedStyle();
 },
 OnLostFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = false;
  if(this.isInitialized)
   this.RaiseLostFocus();
  this.UpdateFocusedStyle();
 },
 CauseValidation: function() {
  if (this.causesValidation && typeof(ASPxClientEdit) != "undefined")
   return this.validationContainerID != null ?
    ASPxClientEdit.ValidateEditorsInContainerById(this.validationContainerID, this.validationGroup, this.validateInvisibleEditors) :
    ASPxClientEdit.ValidateGroup(this.validationGroup, this.validateInvisibleEditors);
  else
   return true;
 },
 OnClick: function(evt) {
  if(this.clickLocked) return true;
  if(this.checked && this.groupName != "" && this.GetCheckedGroupList().length > 1) return;
  this.SetFocus();
  var isValid = this.CauseValidation();
  var processOnServer = this.autoPostBack;
  if (this.groupName != "") {
   if(this.GetCheckedGroupList().length == 1)
    this.SetCheckedInternal(!this.checked, false);
   else {
    this.SetCheckedInternal(true, false);
    this.ClearButtonGroupChecked(true);
   }
   processOnServer = this.RaiseCheckedChanged();
   if (processOnServer && isValid)
    this.SendPostBack("CheckedChanged");
  }
  var params = this.RaiseClick();
  if(evt && params.cancelEventAndBubble)
   _aspxPreventEventAndBubble(evt);
  if(params.processOnServer && isValid){
   var requiredPreventDoublePostback = this.RequiredPreventDoublePostback();
   var postponePostback = __aspxAndroidMobilePlatform;
   if(requiredPreventDoublePostback || postponePostback)
    _aspxSetTimeout("_aspxBCallButtonMethod(\"" + this.name + "\", \"SendPostBack\", \"Click\" );", 0);
   else
    this.SendPostBack("Click");
   return !requiredPreventDoublePostback;
  }
  return false;
 },
 OnKeyUp: function(evt) {
    if(this.pressed)
   this.SetUnpressed();
 },
 OnKeyDown: function(evt) {
    if(evt.keyCode == ASPxKey.Enter || evt.keyCode == ASPxKey.Space)
     this.SetPressed();
 },
 GetChecked: function(){
  return this.groupName != "" ? this.GetButtonCheckedInput().value == "1" : false;
 },
 GetCheckedGroupList: function(){
  var result = [ ];
  aspxGetControlCollection().ForEachControl(function(control) {
   if (ASPxIdent.IsASPxClientButton(control) && (control.groupName == this.groupName) && control.RenderExistsOnPage())
    result.push(control);
  }, this);
  return result;
 },
 ClearButtonGroupChecked: function(raiseCheckedChanged){
  var list = this.GetCheckedGroupList();
  for(var i = 0; i < list.length; i ++){
   if(list[i] != this && list[i].checked) {
    list[i].SetCheckedInternal(false, false);
    if(raiseCheckedChanged)
     list[i].RaiseCheckedChanged();
   }
  }
 },
 ApplyCheckedStyle: function(){
  var stateController = aspxGetStateController();
  if(this.IsHovered())
   stateController.SetCurrentHoverElement(null);
  stateController.SelectElementBySrcElement(this.GetMainElement());
 },
 ApplyUncheckedStyle: function(){
  var stateController = aspxGetStateController();
  if(this.IsHovered())
   stateController.SetCurrentHoverElement(null);
  stateController.DeselectElementBySrcElement(this.GetMainElement());
 },
 SetCheckedInternal: function(checked, initialization){
  if(initialization && checked || (this.checked != checked)){
   this.checked = checked;
   var inputElement = this.GetButtonCheckedInput();
   if(inputElement)
    inputElement.value = checked ? "1" : "0";
   if(checked)
    this.ApplyCheckedStyle();
   else
    this.ApplyUncheckedStyle();
  }
 },
 ApplyPressedStyle: function(){
  aspxGetStateController().OnMouseDownOnElement(this.GetMainElement());
 },
 ApplyUnpressedStyle: function(){
  aspxGetStateController().OnMouseUpOnElement(this.GetMainElement());
 },
 SetPressed: function(){
  this.pressed = true;
  this.ApplyPressedStyle();
 },
 SetUnpressed: function(){
  this.pressed = false;
  this.ApplyUnpressedStyle();
 },
 SetFocus: function(){
  if(!this.allowFocus || this.focused)
   return;
  var element = this.GetInternalButton();
  if(element) {
   var hiddenInternalButtonRequiresVisibilityToGetFocused = __aspxWebKitFamily  && !this.isNative  && !this.IsLink();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.MakeHiddenElementFocusable(element);
   if(_aspxIsFocusable(element) && _aspxGetActiveElement() != element)
    element.focus();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.RestoreHiddenElementAppearance(element);
  }
 },
 ApplyFocusedStyle: function(){
  if(this.focusElementSelected) return;
  if(typeof(aspxGetStateController) != "undefined")
   aspxGetStateController().SelectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = true;
 },
 ApplyUnfocusedStyle: function(){
  if(!this.focusElementSelected) return;
  if(typeof(aspxGetStateController) != "undefined")
   aspxGetStateController().DeselectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = false;
 },
 UpdateFocusedStyle: function(){
  if(this.isNative || this.IsLink()) return;
  if(this.enabled && this.clientEnabled && this.allowFocus && this.focused)
   this.ApplyFocusedStyle();
  else
   this.ApplyUnfocusedStyle();
 },
 SendPostBack: function(postBackArg){
  if(!this.enabled || !this.clientEnabled)
   return;
  var arg = postBackArg || "";
  if(this.autoPostBackFunction)
   this.autoPostBackFunction(arg);
  else if(!this.useSubmitBehavior || this.IsLink())
   ASPxClientControl.prototype.SendPostBack.call(this, arg);
  if(this.useSubmitBehavior && !this.isNative)
   this.ClickInternalButton();
 },
 ClickInternalButton: function(){
  var element = this.GetInternalButton();
  if(element) {
   this.clickLocked = true;
   if (__aspxNetscapeFamily)
    this.CreateUniqueIDCarrier();
   _aspxDoElementClick(element);
   if (__aspxNetscapeFamily)
    this.RemoveUniqueIDCarrier();
   this.clickLocked = false;
  }
 },
 CreateUniqueIDCarrier: function() {
  var name = this.uniqueID;
  var id = this.GetUniqueIDCarrierID();
  var field = _aspxCreateHiddenField(name, id);
  var form = this.GetParentForm();
  if(form) form.appendChild(field);
 },
 RemoveUniqueIDCarrier: function() {
  var field = document.getElementById(this.GetUniqueIDCarrierID());
  if (field)
   field.parentNode.removeChild(field);
 },
 GetUniqueIDCarrierID: function() {
  return this.uniqueID + "_UIDC";
 },
 DoClick: function(){
  if(!this.enabled || !this.clientEnabled)
   return;
  var button = (this.isNative || this.IsLink()) ? this.GetMainElement() : this.GetInternalButton();
  if(button)
   _aspxDoElementClick(button);
  else
   this.OnClick();
 },
 GetChecked: function(){
  return this.checked;
 },
 SetChecked: function(checked){
  this.SetCheckedInternal(checked, false);
  this.ClearButtonGroupChecked(false);
 },
 GetText: function(){
  if(!this.isTextEmpty)
   return this.isNative ? this.GetTextContainer().value : this.GetTextContainer().innerHTML;
  return "";
 },
 SetText: function(text){
  this.isTextEmpty = (text == null || text == "");
  var textContainer = this.GetTextContainer();
  if(textContainer){
   if(this.isNative)
    textContainer.value = (text != null) ? text : "";
   else {
      textContainer.innerHTML = this.isTextEmpty ? "&nbsp;" : text;
    if (this.clientVisible && __aspxIE && __aspxBrowserVersion >= 9)
     _aspxSetElementDisplay(this.GetMainElement(), true);
   }
   this.UpdateSize();
  }
 },
 GetImageUrl: function(){
  var img = this.GetButtonImage();
  return img ?  img.src : "";
 },
 SetImageUrl: function(url){
  var img = this.GetButtonImage();
  if (img) {
   img.src = url;
   this.UpdateSize();
  }
 },
 SetEnabled: function(enabled){
  if (this.clientEnabled != enabled) {
   if (!enabled && this.focused)
    this.OnLostFocus();
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
  }
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 Focus: function(){
  this.SetFocus();
 },
 RaiseCheckedChanged: function(){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("CheckedChanged");
  if(!this.CheckedChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseClick: function() {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("Click");
  var cancelEventAndBubble = false;
  if(!this.Click.IsEmpty()) {
   var args = new ASPxClientButtonClickEventArgs(processOnServer, cancelEventAndBubble);
   this.Click.FireEvent(this, args);
   cancelEventAndBubble = args.cancelEventAndBubble;
   processOnServer = args.processOnServer;
  }
  return {
   processOnServer: processOnServer,
   cancelEventAndBubble: cancelEventAndBubble
  };
 }
});
var ASPxClientButtonClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, cancelEventAndBubble) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.cancelEventAndBubble = cancelEventAndBubble;
 }
});
ASPxClientButton.Cast = ASPxClientControl.Cast;
ASPxClientButton.MakeHiddenElementFocusable = function(element) {
  element.__dxHiddenElementState = {
   parentDisplay: element.parentNode.style.display,
   height: element.style.height,
   width: element.style.width
  };
  element.parentNode.style.display = "block";
  element.style.height = "1px";
  element.style.width = "1px";
};
ASPxClientButton.RestoreHiddenElementAppearance = function(element) {
 var state = element.__dxHiddenElementState;
 element.parentNode.style.display = state.parentDisplay;
 element.style.height = state.height;
 element.style.width = state.width;
 delete element.__dxHiddenElementState;
};
ASPxIdent.IsASPxClientButton = function(obj) {
 return !!obj.isASPxClientButton;
};
function _aspxBCallButtonMethod(name, methodName, arg) {
 var button = aspxGetControlCollection().Get(name);
 if (button != null)
  button[methodName](arg);
}
function aspxBGotFocus(name){
 var button = aspxGetControlCollection().Get(name);
 if(button != null)
  return button.OnFocus();
}
function aspxBLostFocus(name){
 var button = aspxGetControlCollection().Get(name);
 if(button != null)
  return button.OnLostFocus();
}
function aspxBClick(name, evt){
 var button = aspxGetControlCollection().Get(name);
 if(button != null)
  return button.OnClick(evt);
}
function aspxBKeyDown(evt,name){
 var button = aspxGetControlCollection().Get(name);
 if(button != null)
  button.OnKeyDown(evt);
}
function aspxBKeyUp(evt,name){
 var button = aspxGetControlCollection().Get(name);
 if(button != null)
  button.OnKeyUp(evt);
}

var __aspxDragHelper = null;
ASPxClientDragHelper = _aspxCreateClass(null, {
 constructor: function(e, root, clone){
  if(__aspxDragHelper != null) __aspxDragHelper.cancelDrag();
  this.dragArea = 5;
  this.clickX = _aspxGetEventX(e);
  this.clickY = _aspxGetEventY(e);
  this.centerClone = false;
  this.cachedCloneWidth = -1;
  this.cachedCloneHeight = -1;
  this.cachedOriginalX = -1;
  this.cachedOriginalY = -1;
  this.canDrag = true;
  if(typeof(root) == "string")
   root = _aspxGetParentByTagName(_aspxGetEventSource(e), root);
  this.obj = root && root != null ? root : _aspxGetEventSource(e);
  this.clone = clone;
  this.dragObj = null;
  this.additionalObj = null;
  this.onDoClick = null;
  this.onEndDrag = null;
  this.onCancelDrag = null;
  this.onDragDivCreating = null;
  this.onCloneCreating = null;
  this.onCloneCreated = null;
  this.dragDiv = null;
  __aspxDragHelper = this;
  this.clearSelectionOnce = false;
 },
 drag: function(e) {
  if(!this.canDrag) return;
  _aspxClearSelection();
  if(!this.isDragging()) {
   if(!this.isOutOfDragArea(e))
    return;
   this.startDragCore(e);
  }
  if(__aspxIE && !_aspxGetIsLeftButtonPressed(e)) {
   this.cancelDrag(e);
   return;
  }
  if(!__aspxIE)
   _aspxSetElementSelectionEnabled(document.body, false);
  this.dragCore(e);
 },
 startDragCore: function(e) {
  this.dragObj = this.clone != true ? this.obj : this.createClone(e);
 },
 dragCore: function(e) {
  this.updateDragDivPosition(e);
 },
 endDrag: function(e) {
  if(!this.isDragging() && !this.isOutOfDragArea(e)) {
   if(this.onDoClick)
    this.onDoClick(this, e);
  } else {
   if(this.onEndDrag)
    this.onEndDrag(this, e);
  }
  this.cancelDrag();
 },
 cancel: function(){
  this.cancelDrag();
 },
 cancelDrag: function() {
  if(this.dragDiv != null) {
   document.body.removeChild(this.dragDiv);
   this.dragDiv = null;
  }
  if(this.onCancelDrag)
   this.onCancelDrag(this);
  __aspxDragHelper = null;
  if(!__aspxIE)
   _aspxSetElementSelectionEnabled(document.body, true);
 },
 isDragging: function() {
  return this.dragObj != null;
 },
 updateDragDivPosition: function(e) {
  if(this.centerClone) {
   this.dragDiv.style.left = _aspxGetEventX(e) - this.cachedCloneWidth / 2 + "px";
   this.dragDiv.style.top = _aspxGetEventY(e) - this.cachedCloneHeight / 2 + "px";
  } else {
   this.dragDiv.style.left = this.cachedOriginalX + _aspxGetEventX(e) - this.clickX + "px";
   this.dragDiv.style.top = this.cachedOriginalY + _aspxGetEventY(e) - this.clickY + "px";
  }
 },
 createClone: function(e) {
  this.dragDiv = document.createElement("div");
  if(this.onDragDivCreating)
   this.onDragDivCreating(this, this.dragDiv);
  var clone = this.creatingClone();
  this.dragDiv.appendChild(clone);
  document.body.appendChild(this.dragDiv);
  this.dragDiv.style.position = "absolute";
  this.dragDiv.style.cursor = "move";
  this.dragDiv.style.borderStyle = "none";
  this.dragDiv.style.padding = "0";
  this.dragDiv.style.margin = "0";
  this.dragDiv.style.backgroundColor = "transparent";
  this.dragDiv.style.zIndex = 20000;
  if(this.onCloneCreated)
   this.onCloneCreated(clone);
  this.cachedCloneWidth = clone.offsetWidth;
  this.cachedCloneHeight = clone.offsetHeight;
  if(!this.centerClone) {
   this.cachedOriginalX = _aspxGetAbsoluteX(this.obj);
   this.cachedOriginalY = _aspxGetAbsoluteY(this.obj);
  }
  this.dragDiv.style.width = this.cachedCloneWidth + "px";
  this.dragDiv.style.height = this.cachedCloneHeight + "px";
  this.updateDragDivPosition(e);
  return this.dragDiv;
 },
 creatingClone: function() {
  var clone = this.obj.cloneNode(true);
  var scripts = _aspxGetElementsByTagName(clone, "SCRIPT");
  for(var i = scripts.length - 1; i >= 0; i--)
   _aspxRemoveElement(scripts[i]);
  if(!this.onCloneCreating) return clone;
  return this.onCloneCreating(clone);
 },
 addElementToDragDiv: function(element) {
  if(this.dragDiv == null) return;
  this.additionalObj = element.cloneNode(true);
  this.additionalObj.style.visibility = "visible";
  this.additionalObj.style.display = "";
  this.additionalObj.style.top = "";
  this.dragDiv.appendChild(this.additionalObj);
 },
 removeElementFromDragDiv: function() {
  if(this.additionalObj == null || this.dragDiv == null) return;
  this.dragDiv.removeChild(this.additionalObj);
  this.additionalObj = null;
 },
 isOutOfDragArea: function(e) {
  return Math.max(
   Math.abs(_aspxGetEventX(e) - this.clickX),
   Math.abs(_aspxGetEventY(e) - this.clickY)
  ) >= this.dragArea;
 }
});
function DragHelper_onmouseup(e) {
 if(__aspxDragHelper != null) {
  __aspxDragHelper.endDrag(e);
  return true;
 }
}
function DragHelper_cancel(e) {
 if(__aspxDragHelper != null) {
  __aspxDragHelper.cancel(e);
  return true;
 }
}
function DragHelper_onmousemove(e) {
 if(__aspxDragHelper != null && !(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)) {
  __aspxDragHelper.drag(e);
  if(ASPxClientTouchUI.isTouchEvent(e) && __aspxDragHelper.canDrag) {
   e.preventDefault();
   ASPxClientTouchUI.preventScrollOnEvent(e);
  }
  return true;
 }
}
function DragHelper_onkeydown(e) {
 if(!__aspxDragHelper) return;
 if(e.keyCode == ASPxKey.Esc)
  __aspxDragHelper.cancelDrag();
 return true;
}
function DragHelper_onkeyup(e) {
 if (!__aspxDragHelper) return;
 if(e.keyCode == ASPxKey.Esc && __aspxWebKitFamily)
  __aspxDragHelper.cancelDrag();
 return true;
}
function DragHelper_onselectstart(e) {
 var drag = __aspxDragHelper;
 if(drag && (drag.canDrag || drag.clearSelectionOnce)) {
  _aspxClearSelection();
  drag.clearSelectionOnce = false;
  return false;
 }
}
(function(){
 if(__aspxMSTouchUI)
  _aspxAttachEventToDocument("MSPointerCancel", DragHelper_cancel);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, DragHelper_onmouseup);
 _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, DragHelper_onmousemove);
 _aspxAttachEventToDocument("keydown", DragHelper_onkeydown);
 _aspxAttachEventToDocument("keyup", DragHelper_onkeyup);
 _aspxAttachEventToDocument("selectstart", DragHelper_onselectstart);
})();
var __aspxCursorTargets = null;
ASPxClientCursorTargets = _aspxCreateClass(null, {
 constructor: function() {
  this.list = [];
  this.starttargetElement = null;
  this.starttargetTag = 0;
  this.oldtargetElement = null;
  this.oldtargetTag = 0;
  this.targetElement = null;
  this.targetTag = 0;
  this.x = 0;
  this.y = 0;
  this.removedX = 0;
  this.removedY = 0;
  this.removedWidth = 0;
  this.removedHeight = 0;
  this.onTargetCreated = null;
  this.onTargetChanging = null;
  this.onTargetChanged = null;
  this.onTargetAdding = null;
  this.onTargetAllowed = null;
  __aspxCursorTargets = this;
 },
 addElement: function(element) {
  if(!this.canAddElement(element)) return null;
  var target = new ASPxClientCursorTarget(element);
  this.onTargetCreated && this.onTargetCreated(this, target);
  this.list.push(target);
  return target;
 },
 removeElement: function(element) {
  for(var i = 0; i < this.list.length; i++) {
   if(this.list[i].element == element) {
    this.list.splice(i, 1);
    return;
   }
  }
 },
 addParentElement: function(parent, child) {
  var target = this.addElement(parent);
  if(target != null) {
   target.targetElement = child;
  }
  return target;
 },
 RegisterTargets: function(element, idPrefixArray) {
  this.addFunc = this.addElement;
  this.RegisterTargetsCore(element, idPrefixArray);
 },
 UnregisterTargets: function(element, idPrefixArray) {
  this.addFunc = this.removeElement;
  this.RegisterTargetsCore(element, idPrefixArray);
 },
 RegisterTargetsCore: function(element, idPrefixArray) {
  if(element == null) return;
  for(var i = 0; i < idPrefixArray.length; i++)
   this.RegisterTargetCore(element, idPrefixArray[i]);
 },
 RegisterTargetCore: function(element, idPrefix) {
  if(!_aspxIsExists(element.id)) return;
  if(element.id.indexOf(idPrefix) > -1)
   this.addFunc(element);
  for(var i = 0; i < element.childNodes.length; i++)
   this.RegisterTargetCore(element.childNodes[i], idPrefix);
 },
 canAddElement: function(element) {
  if(element == null || !_aspxGetElementDisplay(element))
   return false;
  for(var i = 0; i < this.list.length; i++) {
   if(this.list[i].targetElement == element) return false;
  }
  if(this.onTargetAdding != null && !this.onTargetAdding(this, element)) return false;
  return element.style.visibility != "hidden";
 },
 removeInitialTarget: function(x, y) {
  var el = this.getTarget(x + _aspxGetDocumentScrollLeft(), y + _aspxGetDocumentScrollTop());
  if(el == null) return;
  this.removedX = _aspxGetAbsoluteX(el);
  this.removedY = _aspxGetAbsoluteY(el);
  this.removedWidth = el.offsetWidth;
  this.removedHeight = el.offsetHeight;
 },
 getTarget: function(x, y) {
  for(var i = 0; i < this.list.length; i++) {
   var record = this.list[i];
   if(record.contains(x, y)) {
    if(!this.onTargetAllowed || this.onTargetAllowed(record.targetElement, x, y))
     return record.targetElement;
   }
  }
  return null;
 },
 targetChanged: function(element, tag) {
  this.targetElement = element;
  this.targetTag = tag;
  if(this.onTargetChanging)
   this.onTargetChanging(this);
  if(this.oldtargetElement != this.targetElement || this.oldtargetTag != this.targetTag) {
   if(this.onTargetChanged)
    this.onTargetChanged(this);
   this.oldtargetElement = this.targetElement;
   this.oldtargetTag = this.targetTag;
  }
 },
 cancelChanging: function() {
  this.targetElement = this.oldtargetElement;
  this.targetTag = this.oldtargetTag;
 },
 isLeftPartOfElement: function() {
  if(this.targetElement == null) return true;
  var left = this.x - this.targetElementX();
  return left < this.targetElement.offsetWidth / 2;
 },
 isTopPartOfElement: function() {
  if(this.targetElement == null) return true;
  var top = this.y - this.targetElementY();
  return top < this.targetElement.offsetHeight / 2;
 },
 targetElementX: function() {
  return this.targetElement != null ? _aspxGetAbsoluteX(this.targetElement) : 0;
 },
 targetElementY: function() {
  return this.targetElement != null ? _aspxGetAbsoluteY(this.targetElement) : 0;
 },
 onmousemove: function(e) {
  this.doTargetChanged(e);
 },
 onmouseup: function(e) {
  this.doTargetChanged(e);
  __aspxCursorTargets = null;
 },
 doTargetChanged: function(e) {
  this.x = _aspxGetEventX(e);
  this.y = _aspxGetEventY(e);
  if(this.inRemovedBounds(this.x, this.y)) return;
  this.targetChanged(this.getTarget(this.x, this.y), 0);
 },
 inRemovedBounds: function(x, y) {
  if(this.removedWidth == 0) return false;
  return x > this.removedX && x < (this.removedX + this.removedWidth) &&
   y > this.removedY && y < (this.removedY + this.removedHeight);
 }
});
ASPxClientCursorTarget = _aspxCreateClass(null, {
 constructor: function(element) {
  this.element = element;
  this.targetElement = element;
  this.UpdatePosition();
 },
 contains: function(x, y) {
  return x >= this.absoluteX && x <= this.absoluteX + this.GetElementWidth() &&
   y >= this.absoluteY && y <= this.absoluteY + this.GetElementHeight();
 },
 GetElementWidth: function() {
  return this.element.offsetWidth;
 },
 GetElementHeight: function() {
  return this.element.offsetHeight;
 },
 UpdatePosition: function() {
  this.absoluteX = _aspxGetAbsoluteX(this.element);
  this.absoluteY = _aspxGetAbsoluteY(this.element);
 }
});
function CursorTarget_onmouseup(e) {
 if(__aspxCursorTargets != null) {
  __aspxCursorTargets.onmouseup(e);
  return true;
 }
}
function CursorTarget_onmousemove(e) {
 if(__aspxCursorTargets != null) {
  __aspxCursorTargets.onmousemove(e);
  return true;
 }
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, CursorTarget_onmouseup);
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, CursorTarget_onmousemove);

__aspxTableScrollHelpers = [ ];
ASPxClientTableHelperBase = _aspxCreateClass(null, {
 constructor: function(control, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll){
  this.control = control;
  this.horzScroll = horzScroll;
  this.vertScroll = vertScroll;
  this.contentTableIDSuffix = contentTableIDSuffix;
  this.headerTableIDSuffix = headerTableIDSuffix;
  this.footerTableIDSuffix = footerTableIDSuffix;
 },
 GetChildElementByID: function(idSuffix) {
  return _aspxGetElementById(this.control.name + "_" + idSuffix);
 },
 GetTable: function(tableIDSuffix) {
  return this.GetChildElementByID(tableIDSuffix);
 },
 GetContentTable: function() {
  return this.GetTable(this.contentTableIDSuffix);
 },
 GetHeaderTable: function() {
  return this.GetTable(this.headerTableIDSuffix);
 },
 GetFooterTable: function() {
  return this.GetTable(this.footerTableIDSuffix);
 },
 HasHorzScroll: function() { return this.horzScroll != ASPxScrollBarMode.Hidden; },
 HasVertScroll: function() { return this.vertScroll != ASPxScrollBarMode.Hidden; },
 IsHorzAutoScroll: function() {
  return this.horzScroll == ASPxScrollBarMode.Auto;
 },
 IsVertAutoScroll: function() {
  return this.vertScroll == ASPxScrollBarMode.Auto;
 },
 IsRtl: function() { return false; },
 GetArmatureCells: function(table) {
  return table.rows[0].cells;
 },
 GetArmatureCell: function(cell) {
  var index = this.GetArmatureCellIndexByOtherCell(cell);
  return this.GetArmatureCells(_aspxGetParentByTagName(cell, "TABLE"))[index];
 },
 GetArmatureCellIndexByOtherCell: function(cell) {
  return cell.cellIndex;
 },
 GetCellRealWidth: function(cell) {
  var width = this.GetStylePxWidth(this.GetArmatureCell(cell));
  return width > -1 ? width : cell.offsetWidth
 },
 GetStylePxWidth: function(element) {
  var width = element.style.width;
  if(width && width.indexOf("px") > -1)
   return parseInt(width, 10);
  return -1;
 }
});
ASPxClientTableHelperAdapter = _aspxCreateClass(null, {
 constructor: function(tableHelper) {
  this.tableHelper = tableHelper;
  this.control = this.tableHelper.control;
 },
 GetContentTable: function() {
  return this.tableHelper.GetContentTable();
 },
 GetHeaderTable: function() {
  return this.tableHelper.GetHeaderTable();
 },
 GetFooterTable: function() {
  return this.tableHelper.GetFooterTable();
 },
 GetArmatureCells: function(table) {
  return this.tableHelper.GetArmatureCells(table);
 },
 GetArmatureCell: function(cell) {
  return this.tableHelper.GetArmatureCell(cell);
 },
 GetCellRealWidth: function(cell) {
  return this.tableHelper.GetCellRealWidth(cell);
 },
 GetStylePxWidth: function(element) {
  return this.tableHelper.GetStylePxWidth(element);
 },
 HasHorzScroll: function() {
  return this.tableHelper.HasHorzScroll();
 },
 HasVertScroll: function() {
  return this.tableHelper.HasVertScroll();
 },
 IsRtl: function() {
  return this.tableHelper.IsRtl();
 }
});
ASPxClientTableScrollHelperBase = _aspxCreateClass(ASPxClientTableHelperAdapter, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.touchUIScroller = null;
  this.savedScrollLeft = this.IsRtl() ? 0x1fffffff : -1;
  this.savedScrollTop = -1;
  this.posLoggerHandler = null;
  this.scrollableControlHeight = -1;
  this.activeElementSettings = [ ];
  this.containerScrollInfo = null;
  __aspxTableScrollHelpers.push(this);
 },
 Update: function() {
  this.AssignPosLoggerHandler(this.GetScrollDiv(this.GetContentTable()));
  if(this.HasHorzScroll()) {
   this.AssignScrollEvent(this.GetScrollDiv(this.GetHeaderTable()));
   this.AssignScrollEvent(this.GetScrollDiv(this.GetContentTable()));
  }
  if(__aspxWebKitTouchUI)
   this.UpdateTouchUIScroller();
  this.UpdateScrollableControlsSize();
  if(this.tableHelper.control.resetScrollTop) {
   this.ResetScrollTop();
   this.tableHelper.control.resetScrollTop = false;
  }
  this.LoadScrollPosition();
  this.ApplyScrollPosition();
 },
 UpdateTouchUIScroller: function() {
  this.touchUIScroller = this.touchUIScroller || this.CreateTouchUIScroller();
  if(!_aspxIsExistsElement(this.touchUIScroller.element))
   this.touchUIScroller.ChangeElement(this.GetScrollDiv(this.GetContentTable()));
 },
 CreateTouchUIScroller: function() {
  return ASPxClientTouchUI.MakeScrollable(this.GetScrollDiv(this.GetContentTable()), {
   showHorizontalScrollbar: this.ShowTouchHorizontalScrollbar(),
   showVerticalScrollbar: this.ShowTouchVerticalScrollbar(),
   forceCustomScroll: this.UseTouchCustomScroll()
  });
 },
 ShowTouchHorizontalScrollbar: function() {
  return this.HasHorzScroll();
 },
 ShowTouchVerticalScrollbar: function() {
  return this.HasVertScroll();
 },
 UseTouchCustomScroll: function() {
  return false;
 },
 AssignScrollEvent: function(element) {
  if(!element || element.scrollHelper == this)
   return;
  element.scrollHelper = this;
  _aspxAttachEventToElement(element, "scroll", this.OnScroll);
 },
 OnScroll: function(event) {
  var src = _aspxGetEventSource(event);
  var helper = src.scrollHelper;
  if(!helper) return;
  var scrollDivs = [
   helper.GetScrollDiv(helper.GetHeaderTable()),
   helper.GetScrollDiv(helper.GetContentTable()),
   helper.GetScrollDiv(helper.GetFooterTable())
  ];
  for(var i = 0; i < scrollDivs.length; i++) {
   var div = scrollDivs[i];
   if(!div || div == src)
    continue;
   if(__aspxIE && __aspxBrowserVersion > 9 && i == 1)
    helper.SetScrollLeftPostponed(div, src);
   else
    helper.SetScrollLeft(div, src);
  }
 },
 SetScrollLeftPostponed: function(target, source) {
  if(!this.scrollUpdateTimerID) {
   this.scrollUpdateTimerID = window.setInterval(function() {
    this.SetScrollLeft(target, source);
   }.aspxBind(this), 0);
  }
  _aspxClearTimer(this.scrollUpdateTimerStopID);
  this.scrollUpdateTimerStopID = window.setTimeout(function() {
   _aspxClearInterval(this.scrollUpdateTimerID);
   delete this.scrollUpdateTimerID;
   delete this.scrollUpdateTimerStopID
  }.aspxBind(this), 500)
 },
 SetScrollLeft: function(target, source) {
  if(target.scrollLeft != source.scrollLeft)
   target.scrollLeft = source.scrollLeft;
 },
 AssignPosLoggerHandler: function(element) {
  if (!element) return;
  if(!this.posLoggerHandler)
   this.posLoggerHandler = function() { this.LogScrollPosition(); }.aspxBind(this);
  _aspxDetachEventFromElement(element, "scroll", this.posLoggerHandler);
  _aspxAttachEventToElement(element, "scroll", this.posLoggerHandler);
 },
 OnWindowResize: function() {
  if(!this.IsOriginalWidthPercentage())
   return;
  window.setTimeout(function() {
   this.UpdateScrollableControlsSize(true);
   var resizingHelper = this.GetResizingHelper();
   if(this.IsOriginalWidthPercentage() && resizingHelper)
    resizingHelper.ValidateColumnWidths();
  }.aspxBind(this), 0);
 },
 UpdateScrollableControlsSize: function(onResize) {
  if(!this.control.GetMainElement())
   return;
  if(!this.control.IsDisplayed()) {
   this.control.ResetControlAdjustment();
   return;
  }
  this.SaveActiveElement();
  if(this.HasVertScroll() && this.scrollableControlHeight > -1)
   this.SetHeightCore(this.scrollableControlHeight);
  var mainTable = this.control.GetMainElement(),
   mainCell = mainTable.rows[0].cells[0],
   headerTable = this.GetHeaderTable(),
   contentTable = this.GetContentTable(),
   footerTable = this.GetFooterTable();
  var parts = [ headerTable, contentTable, footerTable ];
  var body = __aspxWebKitFamily ? document.body : document.documentElement;
  var scrollTop = this.GetScrollDiv(contentTable).scrollTop,
   scrollLeft = this.GetScrollDiv(contentTable).scrollLeft,
   savedHeight = mainTable.style.height,
   bodyScrollLeft = body.scrollLeft,
   scrollContainerPadding = this.IsVerticalScrollBarShowed() ? _aspxGetVerticalScrollBarWidth() : 0;
  this.containerScrollInfo = _aspxGetOuterScrollPosition(mainTable);
  mainTable.style.height = mainCell.offsetHeight + "px";
  for(var i = 0; i < parts.length; i++) {
   if(parts[i])
    parts[i].parentNode.style.display = "none";
  }
  _aspxRestoreElementOriginalWidth(mainTable);
  var desiredTableWidth = mainTable.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainTable);
  var desiredPartWidth = desiredTableWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainCell);
  var oldIE = __aspxIE && __aspxBrowserVersion < 8;
  if(oldIE)
   contentTable.style.width = "100%";
  for(var i = 0; i < parts.length; i++) {
   var part = parts[i];
   if(!part) continue;
   var padding = 0;
   var div = part.parentNode;
   if(part != contentTable) {
    padding = scrollContainerPadding;
    div.parentNode.style.paddingRight = padding + "px";
   }
   var borderStyle = _aspxGetCurrentStyle(part == headerTable ? div.parentNode : div);
   padding += _aspxPxToInt(borderStyle.borderRightWidth) + _aspxPxToInt(borderStyle.borderLeftWidth);
   div.align = "left";
   div.style.width = oldIE ? "1%" : "";
   div.style.display = "";
   if(!this.HasHorzScroll() && part == headerTable) {
    var actualWidth = part.offsetWidth + padding;
    if(actualWidth > desiredPartWidth)
     desiredPartWidth = actualWidth;
   }
   this.SetElementWidth(div, desiredPartWidth - padding);
   if(!this.HasHorzScroll() && oldIE && part == contentTable && scrollContainerPadding > 0)
    part.style.width = Math.max(desiredPartWidth - _aspxGetVerticalScrollBarWidth(), 0) + "px";
  }
  _aspxRestoreOuterScrollPosition(this.containerScrollInfo);
  if(this.IsContentTableEmpty() && this.HasHorzScroll() && headerTable)
   contentTable.style.width = headerTable.offsetWidth + "px";
  mainTable.style.width = desiredTableWidth + "px";
  mainTable.style.height = savedHeight;
  if(oldIE && !this.HasVertScroll() && this.tableHelper.IsHorzAutoScroll()) {
   var paddingBottom = 0;
   if(contentTable.offsetWidth > this.GetScrollDiv(contentTable).offsetWidth)
    paddingBottom = _aspxGetVerticalScrollBarWidth();
   this.GetScrollDiv(contentTable).style.paddingBottom = paddingBottom + "px";
  }
  if(oldIE && this.HasHorzScroll() && this.HasVertScroll() && !this.tableHelper.IsVertAutoScroll() && headerTable) {
   var contentTableWidth = contentTable.offsetWidth;
   var headerTableWidth = headerTable.offsetWidth;
   var diff = contentTableWidth - headerTableWidth;
   if(diff === _aspxGetVerticalScrollBarWidth())
    contentTable.style.width = headerTableWidth + "px";
  }
  this.GetScrollDiv(contentTable).scrollTop = scrollTop;
  this.GetScrollDiv(contentTable).scrollLeft = scrollLeft;
  if(body.scrollLeft != bodyScrollLeft)
   body.scrollLeft = bodyScrollLeft;
  this.RestoreActiveElement();
  aspxGetControlCollection().AdjustControls(mainTable);
 },
 IsVerticalScrollBarShowed: function() {
  if(!this.HasVertScroll())
   return false;
  if(this.tableHelper.IsVertAutoScroll())
   return this.GetContentTableExcessHeight() > 0;
  return true;
 },
 GetContentTableExcessHeight: function() {
  var contentDiv = this.GetScrollDiv(this.GetContentTable());
  var scrollSize = _aspxGetVerticalScrollBarWidth();
  var contentWidth = 0;
  var contentHeight = 0;
  for(var i = 0; i < contentDiv.childNodes.length; i++) {
   var child = contentDiv.childNodes[i];
   if(child.nodeType != 1)
    continue;
   contentWidth = Math.max(contentWidth, child.offsetWidth);
   contentHeight += child.offsetHeight;
  }
  var divWidth = contentDiv.offsetWidth;
  var divHeight = contentDiv.offsetHeight;
  var divHasHorzScroll = contentWidth > divWidth;
  var divHasVertScroll = contentHeight > divHeight;
  if(!divHasHorzScroll && divHasVertScroll)
   divHasHorzScroll = contentWidth > (divWidth - scrollSize);
  if(divHasHorzScroll && !divHasVertScroll)
   divHasVertScroll = contentHeight > (divHeight - scrollSize);
  var result = contentHeight - divHeight;
  if(divHasVertScroll)
   result += scrollSize;
  return result;
 },
 IsContentTableEmpty: function() {
  return false;
 },
 SetElementWidth: function(element, width) {
  if(!element || width <= 0)
   return;
  element.style.width = width + "px";
 },
 GetScrollDiv: function(childTable) {
  if(!childTable) return null;
  return childTable.parentNode;
 },
 MakeRowVisible: function(row, fromKbdHelper) {
  var div = this.GetScrollDiv(this.GetContentTable());
  if(div == null || !row || !this.HasVertScroll())
   return;
  var divTop = _aspxGetAbsoluteY(div);
  var rowTop = _aspxGetAbsoluteY(row);
  var topDiff = divTop - rowTop;
  if(topDiff > 0) {
   div.scrollTop -= topDiff;
   return;
  }
  var divBottom = divTop + div.clientHeight + 1;
  var rowBottom = rowTop + row.offsetHeight;
  var bottomDiff = rowBottom - divBottom;
  if(bottomDiff <= 0) return;
  var diff = fromKbdHelper ? bottomDiff : topDiff * -1;
  div.scrollTop += diff;
 },
 GetHorzScrollableControl: function() {
  if(this.HasHorzScroll())
   return this.GetScrollDiv(this.GetContentTable());
  return null;
 },
 GetVertScrollableControl: function() {
  if(this.HasVertScroll())
   return this.GetScrollDiv(this.GetContentTable());
  return null;
 },
 LogScrollPosition: function() {
  if(!this.control.GetMainElement()) return;
  if(this.HasHorzScroll())
   this.savedScrollLeft = this.GetHorzScrollableControl().scrollLeft;
  if(this.HasVertScroll())
   this.savedScrollTop = this.GetVertScrollableControl().scrollTop;
  this.SaveScrollPosition();
 },
 SaveScrollPosition: function() {
  ASPxSimpleHiddenField.Set("SP", this.savedScrollLeft + ";" + this.savedScrollTop, this.GetStateInput());
 },
 LoadScrollPosition: function() {
  var savedState = ASPxSimpleHiddenField.Get("SP", this.GetStateInput());
  if(savedState && savedState.length > 0) {
   var list = savedState.split(";");
   this.savedScrollLeft = Number(list[0]);
   this.savedScrollTop = Number(list[1]);
  }
 },
 ApplyScrollPosition: function() {
  this.SetHorzScrollPosition(this.savedScrollLeft);
  this.SetVertScrollPosition(this.savedScrollTop);
 },
 SetHorzScrollPosition: function(pos) {
  if(!this.HasHorzScroll() || pos < 0)
   return;
  this.SetScrollPositionCore(this.GetHorzScrollableControl(), pos, false);
 },
 SetVertScrollPosition: function(pos) {
  if(!this.HasVertScroll() || pos < 0)
   return;
  this.SetScrollPositionCore(this.GetVertScrollableControl(), pos, true);
 },
 SetScrollPositionCore: function(element, pos, isTop) {
  if(isTop) {
   if(element.scrollTop != pos)
    element.scrollTop = pos;
  } else if(element.scrollLeft != pos) {
   element.scrollLeft = pos;
  }
 },
 GetHorzScrollPosition: function() {
  if(!this.HasHorzScroll()) return 0;
  return this.GetScrollPositionCore(this.GetHorzScrollableControl(), false);
 },
 GetVertScrollPosition: function() {
  if(!this.HasVertScroll()) return 0;
  return this.GetScrollPositionCore(this.GetVertScrollableControl(), true);
 },
 GetScrollPositionCore: function(element, isTop) {
  return isTop ? element.scrollTop : element.scrollLeft;
 },
 GetStateInput: function() { },
 ResetScrollTop: function() {
  this.savedScrollTop = 0;
  this.SaveScrollPosition();
 },
 SetHeight: function(height) {
  if(!this.HasVertScroll())
   return;
  if(this.scrollableControlHeight && this.scrollableControlHeight === height)
   return;
  this.scrollableControlHeight = height;
  this.SetHeightCore(height);
  this.Update();
 },
 SetHeightCore: function(height) {
  var mainElement = this.control.GetMainElement();
  var div = this.GetVertScrollableControl();
  var mainElementHeight = mainElement.offsetHeight;
  if (__aspxIE && __aspxBrowserVersion > 8)
   mainElementHeight = _aspxPxToFloat(window.getComputedStyle(mainElement, null).height);
  height = _aspxPxToFloat(div.style.height) + (height - mainElementHeight);
  div.style.height = Math.max(height, 0) + "px";
 },
 OnSetWidth: function() {
  _aspxDropElementOriginalWidth(this.control.GetMainElement());
 },
 IsOriginalWidthPercentage: function() {
  var mainElement = this.control.GetMainElement();
  var width = String(_aspxGetElementOriginalWidth(mainElement));
  return _aspxIsPercentageSize(width);
 },
 SaveActiveElement: function() {
  if(!__aspxIE) return;
  var activeElement = _aspxGetActiveElement();
  if(!activeElement || activeElement.tagName != "INPUT" && activeElement.tagName != "TEXTAREA")
   return;
  if(!_aspxGetIsParent(this.control.GetMainElement(), activeElement))
   return;
  var selInfo = _aspxGetSelectionInfo(activeElement);
  this.activeElementSettings = [ activeElement, selInfo.startPos, selInfo.endPos ];
 },
 RestoreActiveElement: function() {
  if(!__aspxIE || !this.activeElementSettings || this.activeElementSettings.length == 0)
   return;
  var oldElement = this.activeElementSettings[0];
  var currentElement = _aspxGetActiveElement();
  if(!_aspxIsExistsElement(oldElement) || currentElement === oldElement)
   return;
  oldElement.focus();
  _aspxSetInputSelection(oldElement, this.activeElementSettings[1], this.activeElementSettings[2]);
  this.activeElementSettings = null;
 }
});
ASPxClientTableScrollHelperBase.prevBodyWidth = -1;
__aspxTableColumnResizing = null;
ASPxClientTableResizingHelperBase = _aspxCreateClass(ASPxClientTableHelperAdapter, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.maximumOffset = __aspxTouchUI ? 10 : 3;
  this.defaultMinWidth = 16;
  this.prevX = 0;
  this.colInfo = { };
  this.nextColInfo = { };
 },
 IsResizing: function() {
  return __aspxTableColumnResizing == this;
 },
 CanStartResizing: function(e, headerCell) {
  this.prevX = _aspxGetEventX(e);
  var left = _aspxGetAbsoluteX(headerCell);
  var right = left + headerCell.offsetWidth - 1;
  var isLeftEdge = this.prevX - left < this.maximumOffset;
  var isRightEdge = right - this.prevX <= this.maximumOffset;
  if(!isLeftEdge && !isRightEdge)
   return false;
  var columnIndex = this.GetColumnIndexById(headerCell.id);
  var rtl = this.IsRtl();
  if(isLeftEdge && !rtl || isRightEdge && rtl)
   return !this.IsLeftmostColumn(columnIndex);
  if(isRightEdge && !rtl || isLeftEdge && rtl) {
   if(!this.IsNextColumnResizable())
    return true;
   return !this.IsRightmostColumn(columnIndex);
  }
 },
 GetResizingColumnIndex: function(e, headerCell) {
  var isLeft = _aspxGetEventX(e) < _aspxGetAbsoluteX(headerCell) + headerCell.offsetWidth / 2;
  if(this.IsRtl())
   isLeft = !isLeft;
  var columnIndex = this.GetColumnIndexById(headerCell.id);
  return this.GetResizingColumnIndexCore(columnIndex, isLeft);
 },
 GetResizingColumnIndexCore: function(columnIndex, isLeft) {
  if(isLeft)
   return this.GetColumnNeighbor(columnIndex, true);
  return columnIndex;
 },
 StartResizing: function(columnIndex) {
  this.colInfo = this.GetColumnInfo(columnIndex);
  if(this.IsNextColumnResizable())
   this.nextColInfo = this.GetColumnInfo(this.GetColumnNeighbor(columnIndex, false));
  __aspxTableColumnResizing = this;
  _aspxSetElementSelectionEnabled(document.body, false);
 },
 EndResizing: function() {
  if(!this.colInfo.headerCell)
   return;
  this.SaveControlDimensions();
  aspxGetControlCollection().AdjustControls(this.control.GetMainElement());
  this.OnResized(this.colInfo.index);
 },
 CancelResizing: function() {
  __aspxTableColumnResizing = null;
  _aspxSetElementSelectionEnabled(document.body, true);
  this.prevX = 0;
  this.colInfo = { };
  this.nextColInfo = { };
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.Update();
 },
 OnMouseMove: function(e) {
  if(ASPxClientTouchUI.isTouchEvent(e) && !ASPxClientTouchUI.isGesture)
   e.preventDefault();
  if(this.colInfo.headerCell.cellIndex < 0) {
   this.CancelResizing(e);
   return;
  }
  _aspxClearSelection();
  this.Resize(e);
 },
 OnMouseUp: function(e) {
  this.EndResizing();
  this.CancelResizing();
 },
 Resize: function(e) {
  var newX = _aspxGetEventX(e);
  var delta = newX - this.prevX;
  if(this.IsRtl())
   delta = -delta;
  var newWidth = this.GetCellRealWidth(this.colInfo.headerCell) + delta;
  var minWidth = this.colInfo.minWidth > 0 ? this.colInfo.minWidth : this.defaultMinWidth;
  var nextColNewWidth = nextColMinWidth = 0;
  if(this.IsNextColumnResizable()) {
   nextColNewWidth = this.GetCellRealWidth(this.nextColInfo.headerCell) - delta;
   nextColMinWidth = this.nextColInfo.minWidth > 0 ? this.nextColInfo.minWidth : this.defaultMinWidth;
  }
  if(newWidth < minWidth || nextColNewWidth < nextColMinWidth)
   return;
  this.prevX = newX;
  var table = this.control.GetMainElement();
  var tableWidth = table.offsetWidth;
  this.ApplyColumnWidth(this.colInfo.index, newWidth + "px");
  this.colInfo.armCell.minWidthAssigned = false;
  if(this.IsNextColumnResizable()) {
   this.ApplyColumnWidth(this.nextColInfo.index, nextColNewWidth + "px");
   this.nextColInfo.armCell.minWidthAssigned = false;
  } else if(!this.HasHorzScroll()) {
   _aspxDropElementOriginalWidth(table);
   table.style.width = (tableWidth + delta) + "px";
   if(this.HasVertScroll())
    this.GetScrollHelper().Update();
  }
  if(__aspxIE && __aspxBrowserVersion == 9 && this.tableHelper.IsHorzAutoScroll())
   this.GetContentTable().parentNode.className = this.GenerateRandomClassName();
 },
 ApplyColumnWidth: function(columnIndex, width) {
  var cellIndex = this.GetArmatureCellIndex(columnIndex);
  this.ApplyCellWidth(this.GetHeaderTable(), cellIndex, width);
  this.ApplyCellWidth(this.GetContentTable(), cellIndex, width);
  if(this.NeedResizeFooterTable())
   this.ApplyCellWidth(this.GetFooterTable(), cellIndex, width);
 },
 ApplyCellWidth: function(table, cellIndex, width) {
  if(!table)
   return;
  this.GetArmatureCells(table)[cellIndex].style.width = width;
 },
 IsNextColumnResizable: function() { },
 GetColumnIndices: function() { },
 GetColumnIndexById: function(id) { },
 GetColumnMinWidth: function(columnIndex) { },
 GetHeaderCell: function(columnIndex) { },
 GetArmatureCellIndex: function(columnIndex) { },
 GetScrollHelper: function() { },
 OnResized: function(columnIndex) { },
 NeedResizeFooterTable: function() { },
 GetStateInput: function() { },
 GetColumnNeighbor: function(columnIndex, isLeft) {
  var indices = this.GetColumnIndices();
  var index = -1;
  for(var i = 0; i < indices.length; i++) {
   if(indices[i] === columnIndex) {
    index = isLeft ? i - 1 : i + 1;
    break;
   }
  }
  if(index < 0 || index >= indices.length)
   return -1;
  return indices[index];
 },
 IsLeftmostColumn: function(columnIndex) {
  return this.GetColumnIndices()[0] === columnIndex;
 },
 IsRightmostColumn: function(columnIndex) {
  var indices = this.GetColumnIndices();
  return indices[indices.length - 1] === columnIndex;
 },
 SaveControlDimensions: function(onlyControlWidth) {
  var input = this.GetStateInput();
  if(onlyControlWidth && input.value)
   return;
  var state = { };
  var controlWidth = this.GetStylePxWidth(this.control.GetMainElement());
  if(controlWidth > -1)
   state["ctrlWidth"] = controlWidth;
  if(!onlyControlWidth) {
   var indices = this.GetColumnIndices();
   for(var i = 0; i < indices.length; i++) {
    var index = indices[i];
    state[index] = this.GetCellRealWidth(this.GetHeaderCell(index));
   }
  }
  input.value = _aspxToJson(state);
 },
 UpdateCursor: function(e, headerCell) {
  var changed = true;
  if(this.IsResizing() || this.CanStartResizing(e, headerCell))
   _aspxChangeStyleAttribute(headerCell, "cursor", "w-resize");
  else
   changed = _aspxRestoreStyleAttribute(headerCell, "cursor");
  if(__aspxIE && __aspxBrowserVersion == 9 && this.tableHelper.IsHorzAutoScroll() && changed)
   this.GetContentTable().parentNode.className = this.GenerateRandomClassName();
 },
 GetColumnInfoList: function() {
  var list = [ ];
  var indices = this.GetColumnIndices();
  for(var i = 0; i < indices.length; i++)
   list.push(this.GetColumnInfo(indices[i]));
  list.sort(function(i1, i2) {
   var w1 = i1.minWidth;
   var w2 = i2.minWidth;
   if(w1 > w2)
    return 1;
   else if(w1 < w2)
    return -1;
   else
    return 0;
  });
  return list;
 },
 GetColumnInfo: function(columnIndex) {
  var headerCell = this.GetHeaderCell(columnIndex);
  var armCell = this.GetArmatureCell(headerCell);
  return {
   index: columnIndex,
   headerCell: headerCell,
   armCell: armCell,
   minWidth: this.GetColumnMinWidth(columnIndex),
   pxWidth: this.GetStylePxWidth(armCell),
   minWidthAssigned: armCell.minWidthAssigned
  };
 },
 ValidateColumnWidths: function() {
  if(this.HasHorzScroll())
   return;
  var indices = this.GetColumnIndices();
  var validationRequired = false;
  for(var i = 0; i < indices.length; i++) {
   if(this.GetColumnMinWidth(indices[i]) > 0)
    validationRequired = true;
  }
  if(!validationRequired)
   return;
  var columnInfoList = this.GetColumnInfoList();
  var totalColumnWidth = 0;
  var allColumnsHasWidth = true;
  for(var i = 0; i < columnInfoList.length && allColumnsHasWidth; i++) {
   var info = columnInfoList[i];
   allColumnsHasWidth &= info.pxWidth > 0;
   totalColumnWidth += info.pxWidth;
  }
  var tablePxWidth = this.GetStylePxWidth(this.control.GetMainElement());
  if(allColumnsHasWidth && tablePxWidth > -1 && tablePxWidth <= totalColumnWidth)
   return;
  var processedList = [ ];
  for(var i = 0; i < columnInfoList.length; i++) {
   var info = columnInfoList[i];
   if(info.minWidth > 0 && (info.pxWidth <= 0 || info.minWidthAssigned))
    processedList.push(info);
  }
  this.ValidateColumnWidthsCore(processedList);
  if(this.HasVertScroll())
   this.GetScrollHelper().Update();
 },
 ValidateColumnWidthsCore: function(columnInfoList) {
  for(var i = 0; i < columnInfoList.length; i++) {
   var info = columnInfoList[i];
   if(info.minWidthAssigned)
    info.minWidthAssigned = !this.TryRestoreColumnWidth(info);
   else
    info.minWidthAssigned = this.TryCorrectColumnWidth(info);
  }
  for(var i = 0; i < columnInfoList.length; i++) {
   var info = columnInfoList[i];
   if(!info.minWidthAssigned)
    this.TryCorrectColumnWidth(info);
  }
 },
 TryRestoreColumnWidth: function(columnInfo) {
  var armCell = columnInfo.armCell;
  armCell.style.width = armCell.savedWidth;
  if(armCell.offsetWidth <= columnInfo.minWidth) {
   armCell.style.width = columnInfo.minWidth + "px";
   return false;
  }
  this.ApplyColumnWidth(columnInfo.index, armCell.savedWidth);
  armCell.minWidthAssigned = false;
  armCell.savedWidth = null;
  return true;
 },
 TryCorrectColumnWidth: function(columnInfo) {
  var armCell = columnInfo.armCell;
  if(armCell.offsetWidth >= columnInfo.minWidth)
   return false;
  armCell.savedWidth = armCell.style.width;
  armCell.minWidthAssigned = true;
  this.ApplyColumnWidth(columnInfo.index, columnInfo.minWidth + "px");
  return true;
 },
 ResetStretchedColumnWidth: function() {
  if(this.HasHorzScroll())
   return;
  var columnIndex = this.FindStretchedColumn();
  if(columnIndex > -1)
   this.ApplyColumnWidth(columnIndex, "");
 },
 FindStretchedColumn: function() {
  var columnInfoList = this.GetColumnInfoList();
  if(columnInfoList.length == 0)
   return -1;
  for(var i = 0; i < columnInfoList.length; i++) {
   if(columnInfoList[i].pxWidth < 0)
    return -1;
  }
  var indices = this.GetColumnIndices();
  return indices[indices.length - 1];
 },
 GenerateRandomClassName: function() {
  return "dx" + Math.floor((Math.random() + 1) * 100000).toString(36);
 }
});
_aspxAttachEventToElement(window, "resize", function(e) {
 if(!document.body) return;
 var width = document.body.offsetWidth;
 if(width == ASPxClientTableScrollHelperBase.prevBodyWidth)
  return;
 ASPxClientTableScrollHelperBase.prevBodyWidth = width;
 for(var i = 0; i < __aspxTableScrollHelpers.length; i++)
  __aspxTableScrollHelpers[i].OnWindowResize();
});
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, function(e) {
 if(__aspxTableColumnResizing != null && !(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)) {
  __aspxTableColumnResizing.OnMouseMove(e);
  return true;
 }
});
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, function(e) {
 if(__aspxTableColumnResizing != null) {
  __aspxTableColumnResizing.OnMouseUp(e);
  return true;
 }
});
ASPxClientGridViewTableHelper = _aspxCreateClass(ASPxClientTableHelperBase, {
 GridDetailIndentClassName: "dxgvDI",
 GridGroupIndentClassName: "dxgvGI",
 constructor: function(control, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll) {
  this.constructor.prototype.constructor.call(this, control, contentTableIDSuffix, headerTableIDSuffix, footerTableIDSuffix, horzScroll, vertScroll);
 },
 GetChildElementByID: function(idSuffix) {
  return this.control.GetChildElementById(idSuffix);
 },
 GetArmatureCellIndexByOtherCell: function(cell) {
  var grid = this.control;
  if(!grid.IsHeaderRow(cell.parentNode))
   ASPxClientTableHelperBase.prototype.GetArmatureCellIndexByOtherCell.call(this, cell);
  var columnIndex = grid.getColumnIndex(cell.id);
  return this.GetArmatureCellIndex(columnIndex);
 },
 GetArmatureCellIndex: function(columnIndex) {
  var grid = this.control;
  return grid.indentColumnCount + grid.GetHeaderMatrix().GetLeafIndex(columnIndex);
 },
 UpdateIndentCellWidths: function() {
  var indentCount = this.control.indentColumnCount;
  if(indentCount == 0)
   return;
  var info = this.GetIndentsWidth(indentCount);
  if(info.group <= 0 && info.detail <= 0)
   return;
  var tables = [this.GetHeaderTable(), this.GetContentTable(), this.GetFooterTable()];
  for(var i = 0; i < tables.length; i++) {
   var table = tables[i];
   if(!table) continue;
   var armCells = this.GetArmatureCells(table);
   for(var j = 0; j < armCells.length; j++) {
    if(j >= indentCount)
     break;
    var width = j == indentCount - 1 && info.detail > 0 ? info.detail : info.group;
    var cell = armCells[j];
    if(this.GetStylePxWidth(cell) != width)
     cell.style.width = width + "px";
   }
  }
 },
 GetIndentsWidth: function(indentCount) {
  var grid = this.control;
  var headerRow = grid.GetHeaderRow(0);
  var groupRow = this.FindFirstVisibleRow(true);
  var dataRow = this.FindFirstVisibleRow();
  var groupButton = this.FindExpandCollapseButton(headerRow, 0) || this.FindExpandCollapseButton(dataRow, 0);
  var detailButton = this.FindExpandCollapseButton(headerRow, indentCount - 1, true) || this.FindExpandCollapseButton(dataRow, indentCount - 1, true);
  return { group : this.GetButtonWidth(groupButton), detail : this.GetButtonWidth(detailButton) };
 },
 FindExpandCollapseButton: function(row, cellIndex, isDetail) {
  if(!row || row.cells.length === 0) return;
  var rowCells = row.cells;
  var armCells = this.GetArmatureCells(row.parentNode.parentNode);
  return this.FindExpandCollapseButtonCore(rowCells[cellIndex], armCells[cellIndex], isDetail);
 },
 FindExpandCollapseButtonCore: function(cell, armCell, isDetail) {
  if(!cell || !armCell) return;
  var hasDetail = armCell.className.indexOf(this.GridDetailIndentClassName) >= 0 && isDetail;
  var hasGroup = armCell.className.indexOf(this.GridGroupIndentClassName) >= 0 && !isDetail;
  if(!hasDetail && !hasGroup) return;
  var images = _aspxGetChildNodesByTagName(cell, "IMG");
  return images.length === 1 ? images[0] : null;
 },
 FindFirstVisibleRow: function(isGroup) {
  var grid = this.control;
  var start = grid.GetTopVisibleIndex();
  var end = start + grid.GetVisibleRowsOnPage();
  for(var i = start; i < end; i++) {
   var row = isGroup ? grid.GetGroupRow(i) : grid.GetDataRow(i);
   if(row) return row;
  }
 },
 GetButtonWidth: function(button) {
  if(!button) return -1;
  return button.offsetWidth + _aspxGetLeftRightBordersAndPaddingsSummaryValue(button.parentNode);
 },
 IsRtl: function() { return this.control.rtl; }
});
ASPxClientGridViewTableResizingHelper = _aspxCreateClass(ASPxClientTableResizingHelperBase, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
 },
 IsNextColumnResizable: function() {
  return this.control.columnResizeMode == ASPxColumnResizeMode.NextColumn;
 },
 GetScrollHelper: function() {
  return this.control.GetScrollHelper();
 },
 GetHeaderCell: function(columnIndex) {
  return this.control.GetHeader(columnIndex);
 },
 GetColumnIndices: function() {
  return this.control.GetHeaderMatrix().GetLeafIndices();
 },
 GetColumnIndexById: function(id) {
  return this.control.getColumnIndex(id);
 },
 GetColumnMinWidth: function(columnIndex) {
  return this.control.columns[columnIndex].minWidth;
 },
 GetArmatureCellIndex: function(columnIndex) {
  return this.tableHelper.GetArmatureCellIndex(columnIndex);
 },
 GetColumnNeighbor: function(columnIndex, isLeft) {
  var matrix = this.control.GetHeaderMatrix();
  return matrix.GetLeaf(columnIndex, isLeft, true);
 },
 GetResizingColumnIndexCore: function(columnIndex, isLeft) {
  var matrix = this.control.GetHeaderMatrix();
  return matrix.GetLeaf(columnIndex, isLeft, isLeft);
 },
 NeedResizeFooterTable: function() {
  return !this.control.hasFooterRowTemplate;
 },
 OnResized: function(columnIndex) {
  this.control.RaiseColumnResized(this.control.columns[columnIndex]);
 },
 GetStateInput: function() {
  return this.control.GetColResizedInput();
 }
});
ASPxClientGridViewTableScrollHelper = _aspxCreateClass(ASPxClientTableScrollHelperBase, {
 constructor: function(tableHelper) {
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.isVirtualScrolling = this.control.isVirtualScrolling;
  this.lockVirtualScrolling = false;
  this.virtualScrollRowHeight = -1;
  this.virtualScrollPrevPos = -1;
  this.virtualScrollTimerID = -1;
  this.virtualScrollHandler = null;
  this.useEndlessPaging = this.control.useEndlessPaging;
 },
 Update: function() {
  if(this.isVirtualScrolling)
   this.UpdateVirtualScrolling();
  if(this.useEndlessPaging)
   this.UpdateEndlessPaging();
  ASPxClientTableScrollHelperBase.prototype.Update.call(this);
 },
 UpdateScrollableControlsSize: function(onResize) {
  if(onResize && this.HasFixedColumns())
   return;
  if(this.HasFixedColumns())
   this.UpdateFixedDivSize();
  ASPxClientTableScrollHelperBase.prototype.UpdateScrollableControlsSize.call(this, onResize);
 },
 UpdateFixedDivSize: function() {
  var fixedHelper = this.control.GetFixedColumnsHelper();
  if(!fixedHelper) return;
  var fixedDiv = fixedHelper.GetFixedDiv();
  var divs = [ fixedDiv, this.GetScrollDiv(this.GetContentTable()) ];
  for(var i = 0; i < divs.length; i++)
   this.SetElementWidth(divs[i], 1);
  var mainTable = this.control.GetMainElement();
  if(this.IsOriginalWidthPercentage(mainTable))
   _aspxRestoreElementOriginalWidth(mainTable);
  var width = mainTable.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainTable);
  if(width < 0)
   width = 0;
  for(var i = 0; i < divs.length; i++)
   this.SetElementWidth(divs[i], width);
  fixedHelper.Update();
  if(__aspxIE && __aspxBrowserVersion <= 9)
   fixedHelper.UpdateCellsVisibility(fixedHelper.GetColumnsToHide(fixedDiv.scrollLeft));
 },
 SetHeight: function(val) {
  if(this.useEndlessPaging)
   this.CheckEndlessPagingLoadNextPage();
  ASPxClientTableScrollHelperBase.prototype.SetHeight.call(this, val);
 },
 HasFixedColumns: function() {
  return this.control.fixedColumnCount > 0 && this.control.GetFixedColumnsDiv();
 },
 IsContentTableEmpty: function() {
  return this.control.pageRowCount < 1;
 },
 ShowTouchHorizontalScrollbar: function() {
  return this.HasHorzScroll() && !this.HasFixedColumns();
 },
 UseTouchCustomScroll: function() {
  return this.HasFixedColumns();
 },
 GetStateInput: function() {
  return this.control.GetPostBackSyncInput();
 },
 AssignPosLoggerHandler: function(element) {
  if(this.HasVertScroll() || !this.HasFixedColumns())
   ASPxClientTableScrollHelperBase.prototype.AssignPosLoggerHandler.call(this, element);
  if(this.HasFixedColumns())
   ASPxClientTableScrollHelperBase.prototype.AssignPosLoggerHandler.call(this, this.control.GetFixedColumnsDiv());
 },
 GetHorzScrollableControl: function() {
  if(this.HasFixedColumns())
   return this.control.GetFixedColumnsDiv();
  return ASPxClientTableScrollHelperBase.prototype.GetHorzScrollableControl.call(this);
 },
 IsRestoreScrollPosition: function(){
  var grid = this.control;
  if(this.savedScrollTop > -1 && this.savedScrollTop !== grid.GetVerticalScrollPosition())
   return true;
  if(this.savedScrollLeft > -1 && this.savedScrollLeft !== grid.GetHorizontalScrollPosition())
   return true;
  return false;
 },
 LoadScrollPosition: function() {
  ASPxClientTableScrollHelperBase.prototype.LoadScrollPosition.call(this);
  var grid = this.control;
  var newRowVertScrollPos = this.GetNewRowVertScrollPos();
  if(newRowVertScrollPos > -1)
   this.savedScrollTop = newRowVertScrollPos;
  if(grid.rtl && this.HasFixedColumns() && this.savedScrollLeft == 0)
   this.savedScrollLeft = 1;
 },
 ApplyScrollPosition: function() {
  if(!this.isVirtualScrolling && this.savedScrollTop > -1)
   this.SetVertScrollPosition(this.savedScrollTop);
  if(this.savedScrollLeft > -1)
   window.setTimeout(function() { this.SetHorzScrollPosition(this.savedScrollLeft); }.aspxBind(this), 0);
 },
 SetScrollPositionCore: function(element, pos, isTop) {
  this.lockVirtualScrolling = true;
  try {
   ASPxClientTableScrollHelperBase.prototype.SetScrollPositionCore.call(this, element, pos, isTop);
   if(isTop) {
    var popup = this.control.GetPopupEditForm();
    if(popup && popup.GetVisible())
     popup.UpdatePosition();
   }
  } finally {
   this.lockVirtualScrolling = false;
  }
 },
 GetNewRowVertScrollPos: function() {
  var grid = this.control;
  if(grid.IsNewRowEditing()) {
   var row = grid.GetEditingRow(grid);
   if(row)
    return !grid.IsNewRowAtBottom() ? 0 : 0x1fffffff;
  }
  return -1;
 },
 GetResizingHelper: function() { return this.control.GetResizingHelper(); },
 UpdateVirtualScrolling: function() {
  this.UpdateVirtualScrollMargins();
  if(!this.virtualScrollHandler)
   this.virtualScrollHandler = function() { this.OnVirtualScroll(); }.aspxBind(this);
  window.setTimeout(function() {
   _aspxAttachEventToElement(this.GetVertScrollableControl(), "scroll", this.virtualScrollHandler);
  }.aspxBind(this), 0);
 },
 UpdateVirtualScrollMargins: function() {
  var grid = this.control;
  if(grid.pageCount < 1)
   return;
  var table = this.GetContentTable();
  var topDiv, bottomDiv;
  var prev;
  for(var i = 0; i < table.parentNode.childNodes.length; i++) {
   var child = table.parentNode.childNodes[i];
   if(child.nodeType != 1)
    continue;
   if(child == table && prev)
    topDiv = prev;
   if(prev == table) {
    bottomDiv = child;
    break;
   }
   prev = child;
  }
  var rowHeight = this.GetVirtualScrollRowHeight();
  var topMargin = grid.visibleStartIndex * rowHeight;
  var bottomMargin = (grid.pageRowSize * (grid.pageCount - grid.pageIndex - 1) + grid.pageRowSize - grid.pageRowCount) * rowHeight;
  this.PrepareVirtualScrollMarginDiv(topDiv, topMargin);
  this.PrepareVirtualScrollMarginDiv(bottomDiv, bottomMargin);
  window.setTimeout(function() {
   this.SetVertScrollPosition(topMargin);
   this.virtualScrollPrevPos = topMargin;
  }.aspxBind(this), 0);
 },
 PrepareVirtualScrollMarginDiv: function(div, height) {
  if(!div) return;
  var maxPieceHeight = 1100000;
  if(height <= maxPieceHeight) {
   div.style.height = height + "px";
  } else {
   while(height > 0) {
    var pieceHeight = height >= maxPieceHeight ? maxPieceHeight : height;
    height -= maxPieceHeight;
    var pieceDiv = document.createElement("DIV");
    pieceDiv.style.height = pieceHeight + "px";
    div.appendChild(pieceDiv);
   }
  }
 },
 OnVirtualScroll: function() {
  this.ClearVirtualScrollTimer();
  var deferredHandler = function() { this.HandleVirtualScroll(); }.aspxBind(this);
  this.virtualScrollTimerID = window.setTimeout(deferredHandler, 1000);
 },
 HandleVirtualScroll: function() {
  var pos = this.GetVertScrollPosition();
  if(pos == this.virtualScrollPrevPos)
   return;
  this.virtualScrollPrevPos = pos;
  if(this.lockVirtualScrolling)
   return;
  var grid = this.control;
  var index = this.GetPageIndexForVirtualScrollPos(pos);
  if(index != grid.pageIndex) {
   _aspxDetachEventFromElement(this.GetVertScrollableControl(), "scroll", this.virtualScrollHandler);
   grid.PreventCallbackAnimation();
   grid.GotoPage(index);
  }
 },
 GetPageIndexForVirtualScrollPos: function(pos) {
  var grid = this.control;
  var table = this.GetContentTable();
  var container = table.parentNode;
  var index = Math.floor(grid.pageCount * pos / container.scrollHeight);
  var tableTop = _aspxGetAbsoluteY(table);
  var containerTop = _aspxGetAbsoluteY(container);
  var tableBottom = tableTop + table.offsetHeight;
  var containerBottom = containerTop + container.clientHeight;
  if(tableTop < containerTop && tableBottom > containerTop && tableBottom <= containerBottom)
   index++;
  return Math.min(grid.pageCount - 1, index);
 },
 ClearVirtualScrollTimer: function() {
  this.virtualScrollTimerID = _aspxClearTimer(this.virtualScrollTimerID);
 },
 GetVirtualScrollRowHeight: function() {
  var grid = this.control;
  if(this.virtualScrollRowHeight < 0) {
   var dataRow = grid.GetDataRow(grid.visibleStartIndex);
   var previewRow = grid.GetPreviewRow(grid.visibleStartIndex);
   var height = dataRow ? dataRow.offsetHeight : 20;
   if(previewRow)
    height += previewRow.offsetHeight;
   this.virtualScrollRowHeight = height;
  }
  return this.virtualScrollRowHeight;
 },
 UpdateEndlessPaging: function() {
  var container = this.GetVertScrollableControl();
  if(container.dxEndlessPaging)
   return;
  _aspxAttachEventToElement(container, "scroll", function(e) { this.OnEndlessPagingScroll(e); }.aspxBind(this));
  container.dxEndlessPaging = true;
 },
 OnEndlessPagingScroll: function(e) {
  this.CheckEndlessPagingLoadNextPage();
 },
 CheckEndlessPagingLoadNextPage: function() {
  var grid = this.control;
  if(grid.pageIndex + 1 === grid.pageCount || grid.pageCount === 0 || grid.InCallback())
   return;
  var table = this.GetContentTable();
  var scrollDiv = this.GetScrollDiv(table);
  var contentHeight = table.offsetHeight;
  var avgPageHeight = grid.pageRowSize * contentHeight / grid.pageRowCount;
  var bottomExcess = contentHeight - scrollDiv.clientHeight - scrollDiv.scrollTop;
  if(bottomExcess < avgPageHeight / 3)
   grid.NextPage();
 }
});
ASPxClientTableFixedColumnsHelper = _aspxCreateClass(ASPxClientTableHelperAdapter, {
 constructor: function(tableHelper, fixedDivName, fixedContentDivName, fixedColumnCount){
  this.constructor.prototype.constructor.call(this, tableHelper);
  this.FixedDivName = fixedDivName;
  this.FixedContentDivName = fixedContentDivName;
  this.FixedColumnCount = fixedColumnCount;
  this.hiddenColumnCount = 0;
  this.touchUIScroller = null;
  this.mouseScroller = null;
  this.savedScrollPos = -1;
 },
 GetFixedDiv: function() { return this.tableHelper.GetChildElementByID(this.FixedDivName); },
 GetFixedContentDiv: function() { return this.tableHelper.GetChildElementByID(this.FixedContentDivName); },
 Update: function() {
  var contentDiv = this.GetContentTable().parentNode;
  this.AttacheEvent(this.GetFixedDiv(), "scroll", this.OnScroll);
  this.AttacheEvent(contentDiv, "scroll", function() {
   var expectedLeft = this.control.rtl ? 0x1fffffff : 0;
   if(contentDiv.scrollLeft != expectedLeft)
    contentDiv.scrollLeft = expectedLeft;
  }.aspxBind(this));
  if(__aspxTouchUI)
   this.UpdateMouseScroller();
  if(__aspxWebKitTouchUI)
   this.UpdateTouchUIScroller();
  if(__aspxMacOSPlatform && __aspxWebKitFamily)
   this.UpdateWheelScroller();
  this.UpdateFixedDivSize();
 },
 UpdateFixedDivSize: function() {
  var fixedDiv = this.GetFixedDiv();
  if((__aspxWebKitFamily || __aspxIE) && fixedDiv.scrollLeft == 0 && this.savedScrollPos > 0)
   fixedDiv.scrollLeft = this.savedScrollPos;
  var fixedContentDiv = this.GetFixedContentDiv();
  var contentDivStyleWidth = fixedContentDiv.style.width;
  var contentDivStyleHeight = fixedContentDiv.style.height;
  var contentDivWidth = this.GetFixedContentDivWidth() + "px";
  var contentDivHeight = this.GetFixedContentDivHeight() + "px";
  if(contentDivStyleWidth !== contentDivWidth)
   fixedContentDiv.style.width = contentDivWidth;
  if(contentDivStyleHeight !== contentDivHeight || fixedDiv.style.height !== contentDivHeight)
   fixedContentDiv.style.height = fixedDiv.style.height = contentDivHeight;
  this.UpdateRowHeights();
 },
 GetFixedContentDivWidth: function() {
  var armCells = this.GetArmatureCells(this.GetHeaderTable() || this.GetContentTable());
  var totalWidth = 0;
  for(var i = 0; i < armCells.length; i++) {
   var width = this.GetStylePxWidth(armCells[i]);
   totalWidth += width > -1 ? width : 0;
  }
  return totalWidth;
 },
 GetFixedContentDivHeight: function() {
  var scrollHeigth = _aspxGetVerticalScrollBarWidth() + 1;
  if(__aspxMacOSPlatform && __aspxWebKitFamily && _aspxGetVerticalScrollBarWidth() == 0)
   scrollHeigth = 12;
  return scrollHeigth;
 },
 OnScroll: function(event) {
  var src = _aspxGetEventSource(event);
  var helper = src.fixedHelper;
  helper.savedScrollPos = src.scrollLeft;
  helper.UpdateCellsVisibility(helper.GetColumnsToHide(src.scrollLeft));
  if(helper.control.rtl && __aspxIE && __aspxBrowserVersion < 8) {
   var tables = [ helper.GetHeaderTable(), helper.GetContentTable(), helper.GetFooterTable() ];
   for(var i = 0; i < tables.length; i++) {
    if(!tables[i]) continue;
    tables[i].offsetParent.scrollLeft = 0x1fffffff;
   }
  }
 },
 AttacheEvent: function(element, eventName, eventHandler) {
  if(!element) return;
  var eventMarker = "gvfh" + eventName;
  if(element[eventMarker])
   return;
  _aspxAttachEventToElement(element, eventName, eventHandler);
  element[eventMarker] = true;
  element.fixedHelper = this;
 },
 DetacheEvent: function(element, eventName, eventHandler) {
  if(!element) return;
  _aspxDetachEventFromElement(element, eventName, eventHandler);
  var eventMarker = "gvfh" + eventName;
  element[eventMarker] = false;
  element.fixedHelper = null;
 },
 SetScrollLeft: function(target, scrollLeft) {
  if(target.scrollLeft != scrollLeft)
   target.scrollLeft = scrollLeft;
 },
 UpdateMouseScroller: function() {
  var getContentDiv = function() { return this.GetContentTable().parentNode; }.aspxBind(this);
  if(!this.mouseScroller)
   this.mouseScroller = ASPxMouseScroller.Create(
    getContentDiv,
    function() { return this.GetFixedDiv(); }.aspxBind(this),
    getContentDiv,
    function(element) { return this.control.IsHeaderChild(element); }.aspxBind(this),
    true,
    function(e) { this.UpdateTouchScrollBars(); }.aspxBind(this),
    function(e) { this.UpdateTouchScrollBars(); }.aspxBind(this),
    function(e) { this.UpdateTouchScrollBars(true); }.aspxBind(this)
   );
  else
   this.mouseScroller.update();
 },
 UpdateTouchUIScroller: function() {
  this.touchUIScroller = this.touchUIScroller || this.CreateTouchUIScroller();
  if(!_aspxIsExistsElement(this.touchUIScroller.element))
   this.touchUIScroller.ChangeElement(this.GetFixedDiv());
 },
 CreateTouchUIScroller: function() {
  return ASPxClientTouchUI.MakeScrollable(this.GetFixedDiv(), {
   showHorizontalScrollbar: true,
   showVerticalScrollbar: false,
   forceCustomScroll: true
  });
 },
 UpdateTouchScrollBars: function(hide) {
  if(!this.touchUIScroller)
   return;
  if(hide) {
   this.touchUIScroller.hideScrollBars();
  } else {
   this.touchUIScroller.updateScrollHandles();
   this.touchUIScroller.showScrollBars();
  }
 },
 UpdateWheelScroller: function() {
  var contentDiv = this.GetContentTable().parentNode;
  if(this.wheelHandler)
   _aspxDetachEventFromElement(contentDiv, "mousewheel", this.wheelHandler);
  this.wheelHandler = this.wheelHandler || this.CreateWheelHandler();
  _aspxAttachEventToElement(contentDiv, "mousewheel", this.wheelHandler);
 },
 CreateWheelHandler: function() {
  return function(e) {
   if(!e.wheelDeltaX)
    return;
   var fixedDiv = this.GetFixedDiv();
   var delta = e.wheelDeltaX / 120;
   var leftDirection = delta > 0;
   var isLeftmost = fixedDiv.scrollLeft == 0;
   var isRightmost = fixedDiv.scrollLeft + fixedDiv.offsetWidth == fixedDiv.scrollWidth
   if(leftDirection && isLeftmost || !leftDirection && isRightmost)
    return;
   fixedDiv.scrollLeft += -1 * delta * 100;
   return _aspxPreventEvent(e);
  }.aspxBind(this);
 },
 GetColumnsToHide: function(pos) {
  var grid = this.control;
  var indices = grid.GetHeaderMatrix().GetLeafIndices();
  if(grid.rtl) {
   pos = this.GetFixedContentDiv().scrollWidth - pos - grid.GetMainElement().offsetWidth;
   if(grid.HasVertScroll())
    pos += _aspxGetVerticalScrollBarWidth();
  }
  var i;
  var width = 0;
  for(i = this.FixedColumnCount; i < indices.length - 1; i ++) {
   if(width >= pos) break;
   width += this.GetCellRealWidth(grid.GetHeader(indices[i]));
  }
  return i - this.FixedColumnCount;
 },
 UpdateCellsVisibility: function(columnsToHide) {
  if(this.hiddenColumnCount == columnsToHide)
   return;
  var prevHiddenColumnCount = this.hiddenColumnCount;
  this.hiddenColumnCount = columnsToHide;
  var startIndex = Math.min(prevHiddenColumnCount, this.hiddenColumnCount) + this.FixedColumnCount;
  var endIndex = Math.max(prevHiddenColumnCount, this.hiddenColumnCount) + this.FixedColumnCount;
  var display = this.hiddenColumnCount - prevHiddenColumnCount > 0 ? "none" : "";
  var tables = [ this.GetHeaderTable(), this.GetContentTable(), this.GetFooterTable() ];
  for(var tableIndex = 0; tableIndex < tables.length; tableIndex++) {
   var table = tables[tableIndex];
   if(!table)
    continue;
   var armCells = this.GetArmatureCells(table);
   for(var i = startIndex; i < endIndex; i++)
    armCells[i].style.display = display;
   for(var rowIndex = 0; rowIndex < table.rows.length; rowIndex++) {
    var row = table.rows[rowIndex];
    if(this.control.IsHeaderRow(row))
     continue;
    this.ChangeCellsVisibility(row, startIndex, endIndex - 1, display);
   }
  }
  this.UpdateHeadersVisibility();
 },
 ChangeCellsVisibility: function(row, startIndex, endIndex, display) {
  for(var i = startIndex; i <= endIndex; i++) {
   if(!row.cells[i])
    break;
   row.cells[i].style.display = display;
  }
 },
 UpdateHeadersVisibility: function() {
  var grid = this.control;
  var matrix = grid.GetHeaderMatrix();
  var totalSpans = { };
  var hiddenSpans = { };
  for(var rowIndex = 0; rowIndex < matrix.GetRowCount(); rowIndex++) {
   var indices = matrix.GetRowIndices(rowIndex);
   for(var i = this.FixedColumnCount; i < indices.length; i++) {
    var columnIndex = indices[i];
    if(isNaN(totalSpans[columnIndex])) totalSpans[columnIndex] = 0;
    if(isNaN(hiddenSpans[columnIndex])) hiddenSpans[columnIndex] = 0;
    totalSpans[columnIndex]++;
    if(i < this.FixedColumnCount + this.hiddenColumnCount)
     hiddenSpans[columnIndex]++;
   }
  }
  for(var i = 0; i < grid.columns.length; i++) {
   var columnIndex = grid.columns[i].index;
   if(isNaN(totalSpans[columnIndex]))
    continue;
   var visible = totalSpans[columnIndex] > hiddenSpans[columnIndex];
   var header = grid.GetHeader(columnIndex);
   header.style.display = visible ? "" : "none";
   if(visible && matrix.GetRowCount() > 1)
    header.colSpan = Math.max(1, (totalSpans[columnIndex] - hiddenSpans[columnIndex]) / matrix.GetRowSpan(columnIndex));
  }
 },
 UpdateRowHeights: function() {
  var rows = this.GetRowsForHeightCorrection();
  var skipCorrection = true;
  for(var i = 0; i < rows.length; i++)
   skipCorrection &= !!rows[i].heightCorrected;
  if(skipCorrection)
   return;
  var savedColumnsToHide = this.hiddenColumnCount;
  if(savedColumnsToHide !== 0)
   this.UpdateCellsVisibility(0);
  this.UpdateRowHeightsCore(rows);
  if(savedColumnsToHide !== 0)
   this.UpdateCellsVisibility(savedColumnsToHide);
  for(var i = 0; i < rows.length; i++)
   rows[i].heightCorrected = true;
 },
 UpdateRowHeightsCore: function(rows) {
  ASPxGridViewFixedColumnsStyleSheetHelper.Instance.BeginUpdate();
  var styleSheetRules = this.GetStyleSheetRulesForHeightCorrection(rows);
  ASPxGridViewFixedColumnsStyleSheetHelper.Instance.ChangeRules(this.control, styleSheetRules);
  ASPxGridViewFixedColumnsStyleSheetHelper.Instance.EndUpdate();
 },
 GetRowsForHeightCorrection: function() {
  var tables = [ this.GetHeaderTable(), this.GetContentTable(), this.GetFooterTable() ];
  var rows = [ ];
  for(var tableIndex = 0; tableIndex < tables.length; tableIndex++) {
   var table = tables[tableIndex];
   if(!table) continue;
   for(var i = 0; i < table.rows.length; i++)
    rows.push(table.rows[i]);
  }
  return rows;
 },
 GetStyleSheetRulesForHeightCorrection: function(rows) {
  var selectors = { };
  var selectorMask = [ "#", "id", " > ", "td", ".dxgvHEC" ];
  if(__aspxIE && __aspxBrowserVersion < 8)
   selectorMask[2] = " ";
  for(var i = 0; i < rows.length; i++) {
   var row = rows[i];
   if(row.cells.length < 1 || !row.id)
    continue;
   var cell = row.cells[row.cells.length - 1];
   var h = cell.offsetHeight;
   if(h <= 0) continue;
   if(!selectors[h])
    selectors[h] = [ ];
   var selectorArgs = selectorMask.slice(0);
   selectorArgs[1] = row.id;
   selectors[h].push(selectorArgs.join(""));
  }
  var rules = [ ];
  for(var height in selectors)
   rules.push({
    selector: selectors[height].join(", "),
    cssText: "height:" + height + "px"
   });
  return rules;
 },
 TryShowColumn: function(columnIndex, showFullRect) {
  if(!_aspxIsExists(columnIndex) || columnIndex < 0)
   return false;
  var grid = this.control;
  var matrix = grid.GetHeaderMatrix();
  var index =  matrix.GetLeafIndex(columnIndex);
  if(index < this.FixedColumnCount)
   return false;
  var hiddenColumnCount = this.CalcHiddenColumnCount(columnIndex, showFullRect);
  if(this.hiddenColumnCount === hiddenColumnCount)
   return false;
  var columnsWidth = this.GetHiddenColumnsTotalWidth(hiddenColumnCount);
  var scrollLeft = columnsWidth > 10 ? columnsWidth - 10 : 0;
  this.UpdateCellsVisibility(hiddenColumnCount);
  this.control.SetHorizontalScrollPosition(scrollLeft);
  return true;
 },
 CalcHiddenColumnCount: function(visibleColumnIndex, showFullRect) {
  var grid = this.control;
  var matrix = grid.GetHeaderMatrix();
  var columnIndices = matrix.GetLeafIndices();
  var scrollDivWidth = this.GetContentTable().parentNode.offsetWidth;
  var fixedWidth = 0;
  var columnWidths = [ ];
  for(var i = 0; i < columnIndices.length; i++) {
   var width = this.GetCellRealWidth(grid.GetHeader(columnIndices[i]));
   columnWidths[i] = width;
   if(i < this.FixedColumnCount)
    fixedWidth += width;
  }
  var scrolledPartWidth = scrollDivWidth - fixedWidth;
  var start = this.FixedColumnCount + this.hiddenColumnCount;
  var end = this.GetLastColumnIndexFromBound(columnWidths, scrolledPartWidth, start, showFullRect);
  var index =  matrix.GetLeafIndex(visibleColumnIndex);
  var inc = index > start ? 1 : -1;
  while(index < start || index > end) {
   start += inc;
   end = this.GetLastColumnIndexFromBound(columnWidths, scrolledPartWidth, start, showFullRect);
   if(end === columnIndices.length - 1)
    break;
  }
  return start - this.FixedColumnCount;
 },
 GetLastColumnIndexFromBound: function(columnWidths, rectWidth, start, allowRightBound) {
  for(var i = start; i < columnWidths.length; i++) {
   rectWidth -= columnWidths[i];
   if(rectWidth > 0) continue;
   if(allowRightBound && rectWidth !== 0)
    i--
   return i;
  }
  return columnWidths.length - 1;
 },
 GetHiddenColumnsTotalWidth: function(hiddenColumnCount) {
  var totalWidth = 0;
  var grid = this.control;
  var indices = grid.GetHeaderMatrix().GetLeafIndices();
  for(var i = 0; i < hiddenColumnCount; i++)
   totalWidth += this.GetCellRealWidth(grid.GetHeader(indices[i + this.FixedColumnCount]));
  return totalWidth;
 },
 SaveCallbackSettings: function() {
  this.savedScrollPos = -1;
 },
 RestoreCallbackSettings: function() {
  if(this.control.IsLastCallbackProcessedAsEndless())
   return;
  this.FixedColumnCount = this.control.fixedColumnCount;
  this.hiddenColumnCount = 0;
 },
 HideColumnsRelyOnScrollPosition: function() {
  var scrollHelper = this.control.GetScrollHelper();
  var columnsToHide = this.GetColumnsToHide(scrollHelper.savedScrollLeft);
  this.UpdateCellsVisibility(columnsToHide);
 },
 GetHiddenColumns: function() {
  var result = [ ];
  var indices = this.control.GetHeaderMatrix().GetLeafIndices();
  var start = this.FixedColumnCount;
  var end = start + this.hiddenColumnCount - 1;
  for(var i = start; i <= end; i++)
   result.push(indices[i]);
  return result;
 }
});
ASPxGridViewFixedColumnsStyleSheetHelper = _aspxCreateClass(null, {
 constructor: function() {
  this.styleSheet = null;
  this.rules = { };
  this.updateLock = 0;
 },
 ChangeRules: function(control, rules) {
  if(control.name && rules)
   this.rules[control.name] = rules
 },
 BeginUpdate: function() {
  this.updateLock++;
  if(this.styleSheet)
   _aspxRemoveElement(this.styleSheet);
 },
 EndUpdate: function() {
  this.updateLock--;
  if(this.updateLock !== 0)
   return;
  var styleArgs = [ ];
  for(var key in this.rules) {
   var controlRules = this.rules[key];
   for(var i = 0; i < controlRules.length; i++) {
    var rule = controlRules[i];
    styleArgs.push(rule.selector + " { " + rule.cssText + " } ");
   }
  }
  this.styleSheet = this.CreateStyleSheet(styleArgs.join(""));
 },
 CreateStyleSheet: function(cssText) {
  var container = document.createElement("DIV");
  _aspxSetInnerHtml(container, "<style type='text/css'>" + cssText + "</style>");
  styleSheet = _aspxGetChildByTagName(container, "style", 0);
  if(styleSheet)
   _aspxGetChildByTagName(document, "HEAD", 0).appendChild(styleSheet);
  return styleSheet;
 }
});
ASPxGridViewFixedColumnsStyleSheetHelper.Instance = new ASPxGridViewFixedColumnsStyleSheetHelper();
ASPxClientGridView = _aspxCreateClass(ASPxClientControl, {
 MainTableID: "DXMainTable",
 HeaderTableID: "DXHeaderTable",
 FooterTableID: "DXFooterTable",
 FilterRowID: "DXFilterRow",
 DataRowID: "DXDataRow",
 DetailRowID: "DXDRow",
 PreviewRowID: "DXPRow",
 GroupRowID: "DXGroupRow",
 EmptyDataRowID: "DXEmptyRow",
 FooterRowID: "DXFooterRow",
 FixedColumnsDivID: "DXFixedColumnsDiv",
 FixedColumnsContentDivID: "DXFixedColumnsContentDiv",
 CustomizationWindowSuffix: "_custwindow",
 EmptyHeaderSuffix: "_emptyheader",
 HeaderRowID: "_DXHeadersRow",
 PagerBottomID: "DXPagerBottom",
 PagerTopID: "DXPagerTop",
 HeaderFilterButtonClassName: "dxgv__hfb",
 CommandColumnItemClassName: "dxgv__cci",
 ContextMenuItemImageMask: "dxGridView_gvCM",
 CommandId: {
  NextPage: "NEXTPAGE",
  PreviousPage: "PREVPAGE",
  GotoPage: "GOTOPAGE",
  SelectRows: "SELECTROWS",
  SelectRowsKey: "SELECTROWSKEY",
  Group: "GROUP",
  UnGroup: "UNGROUP",
  Sort: "SORT",
  ColumnMove: "COLUMNMOVE",
  CollapseAll: "COLLAPSEALL",
  ExpandAll: "EXPANDALL",
  ExpandRow: "EXPANDROW",
  CollapseRow: "COLLAPSEROW",
  HideAllDetail: "HIDEALLDETAIL",
  ShowAllDetail: "SHOWALLDETAIL",
  ShowDetailRow: "SHOWDETAILROW",
  HideDetailRow: "HIDEDETAILROW",
  PagerOnClick: "PAGERONCLICK",
  ApplyFilter: "APPLYFILTER",
  ApplyColumnFilter: "APPLYCOLUMNFILTER",
  ApplyMultiColumnFilter: "APPLYMULTICOLUMNFILTER",
  ApplyHeaderColumnFilter: "APPLYHEADERCOLUMNFILTER",
  FilterRowMenu: "FILTERROWMENU",
  StartEdit: "STARTEDIT",
  CancelEdit: "CANCELEDIT",
  UpdateEdit: "UPDATEEDIT",
  AddNewRow: "ADDNEWROW",
  DeleteRow: "DELETEROW",
  CustomButton: "CUSTOMBUTTON",
  CustomCallback: "CUSTOMCALLBACK",
  ShowFilterControl: "SHOWFILTERCONTROL",
  CloseFilterControl: "CLOSEFILTERCONTROL",
  SetFilterEnabled: "SETFILTERENABLED",
  Refresh: "REFRESH",
  SelFieldValues: "SELFIELDVALUES",
  RowValues: "ROWVALUES",
  PageRowValues: "PAGEROWVALUES",
  FilterPopup: "FILTERPOPUP",
  ContextMenu: "CONTEXTMENU",
  CustomValues: "CUSTOMVALUES"
 },
 ContextMenuItems: {
  FullExpand: "FullExpand",
  FullCollapse: "FullCollapse",
  SortAscending: "SortAscending",
  SortDescending: "SortDescending",
  ClearSorting: "ClearSorting",
  ShowFilterBuilder: "ShowFilterEditor",
  ShowFilterRow: "ShowFilterRow",
  ClearFilter: "ClearFilter",
  ShowFilterRowMenu: "ShowFilterRowMenu",
  GroupByColumn: "GroupByColumn",
  UngroupColumn: "UngroupColumn",
  ClearGrouping: "ClearGrouping",
  ShowGroupPanel: "ShowGroupPanel",
  ShowColumn: "ShowColumn",
  HideColumn: "HideColumn",
  ShowCustomizationWindow: "ShowCustomizationWindow",
  ShowFooter: "ShowFooter",
  ExpandRow: "ExpandRow",
  CollapseRow: "CollapseRow",
  ExpandDetailRow: "ExpandDetailRow",
  CollapseDetailRow: "CollapseDetailRow",
  NewRow: "NewRow",
  EditRow: "EditRow",
  DeleteRow: "DeleteRow",
  Refresh: "Refresh",
  SummarySum: "SummarySum",
  SummaryMin: "SummaryMin",
  SummaryMax: "SummaryMax",
  SummaryAverage: "SummaryAverage",
  SummaryCount: "SummaryCount",
  CustomItem: "CustomItem"
 },
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.callBacksEnabled = true;
  this.custwindowLeft = null;
  this.custwindowTop = null;
  this.custwindowVisible = null;
  this.activeElement = null;
  this.filterKeyPressInputValue = "";
  this.userChangedSelection = false;
  this.lockFilter = false;
  this.confirmDelete = "";
  this.filterKeyPressTimerId = -1;
  this.filterRowMenuColumnIndex = -1;
  this.editorIDList = [ ];
  this.keys = [ ];
  this.lastMultiSelectIndex = -1;
  this.hasFooterRowTemplate = false;
  this.mainTableClickData = {
   processing: false,
   focusChanged: false,
   selectionChanged: false
  };
  this.afterCallbackRequired = false;
  this.headerFilterPopupDimensions = { };
  this.enableHeaderFilterCaching = true;
  this.postbackRequestCount = 0;
  this.supportGestures = true;
  this.checkBoxImageProperties = null;
  this.internalCheckBoxCollection = null;
  this.sizingConfig.adjustControl = true;
  this.lookupBehavior = false;
  this.clickedMenuItem = null;
  this.EmptyElementIndex = -1;
  this.batchEditApi = new ASPxClientGridViewBatchEditApi(this);
  this.SelectionChanged = new ASPxClientEvent();
  this.FocusedRowChanged = new ASPxClientEvent();
  this.ColumnSorting = new ASPxClientEvent();
  this.ColumnGrouping = new ASPxClientEvent();
  this.ColumnMoving = new ASPxClientEvent();
  this.ColumnStartDragging  = new ASPxClientEvent();
  this.ColumnResizing  = new ASPxClientEvent();
  this.ColumnResized  = new ASPxClientEvent();
  this.RowExpanding  = new ASPxClientEvent();
  this.RowCollapsing  = new ASPxClientEvent();
  this.DetailRowExpanding  = new ASPxClientEvent();
  this.DetailRowCollapsing  = new ASPxClientEvent();
  this.RowClick  = new ASPxClientEvent();
  this.RowDblClick  = new ASPxClientEvent();
  this.ContextMenu = new ASPxClientEvent();
  this.ContextMenuItemClick = new ASPxClientEvent();
  this.CustomizationWindowCloseUp = new ASPxClientEvent();
  this.CustomButtonClick = new ASPxClientEvent();
  this.BatchEditConfirmShowing = new ASPxClientEvent();
  this.BatchEditStartEditing = new ASPxClientEvent();
  this.BatchEditEndEditing = new ASPxClientEvent();
  this.BatchEditRowValidating = new ASPxClientEvent();
  this.BatchEditTemplateCellFocused = new ASPxClientEvent();
  this.InternalCheckBoxClick = new ASPxClientEvent();
  this.funcCallbacks = [ ];
  this.pendingCommands = [ ];
  this.pageRowCount = 0;
  this.pageRowSize = 0;
  this.pageIndex = 0;
  this.pageCount = 1;
  this.allowFocusedRow = false;
  this.allowSelectByRowClick = false;
  this.allowSelectSingleRowOnly = false;
  this.allowMultiColumnAutoFilter = false,
  this.focusedRowIndex = -1;
  this.selectedWithoutPageRowCount = 0;
  this.filteredSelectedWithoutPageRowCount = 0;
  this.selectAllSettings = [ ];
  this.selectAllBtnStateWithoutPage = null;
  this.visibleStartIndex = 0;
  this.columns = [ ];
  this.columnResizeMode = ASPxColumnResizeMode.None;
  this.fixedColumnCount = 0;
  this.horzScroll = ASPxScrollBarMode.Hidden;
  this.vertScroll = ASPxScrollBarMode.Hidden;
  this.scrollToRowIndex = -1;
  this.isVirtualScrolling = false;
  this.useEndlessPaging = false;
  this.allowBatchEditing = false;
  this.batchEditClientState = { };
  this.resetScrollTop = false;
  this.callbackOnFocusedRowChanged = false;
  this.callbackOnSelectionChanged = false;
  this.autoFilterDelay = 1200;
  this.editState = 0;
  this.editMode = 2;
  this.kbdHelper = null;
  this.tableHelper = null;
  this.enableKeyboard = false;
  this.keyboardLock = false;
  this.accessKey = null;
  this.customKbdHelperName = null;
  this.dragHelper = null;
  this.endlessPagingHelper = null;
  this.batchEditHelper = null;
  this.icbFocusedStyle = null;
  this.pendingEvents = [ ];
  this.rowHotTrackStyle = null;
  this.rowHotTrackItemsBag = { };
  this.filterEditorState = [];
 },
 HasHorzScroll: function() { return this.horzScroll != ASPxScrollBarMode.Hidden; },
 HasVertScroll: function() { return this.vertScroll != ASPxScrollBarMode.Hidden; },
 HasScrolling: function() { return this.HasHorzScroll() || this.HasVertScroll(); },
 AllowResizing: function() { return this.columnResizeMode != ASPxColumnResizeMode.None; },
 _isGroupRow: function(row) { return row.id.indexOf(this.GroupRowID) > -1; },
 IsHeaderRow: function(row) { return this.IsHeaderRowID(row.id); },
 IsHeaderRowID: function(id) { return id.indexOf(this.name + this.HeaderRowID) == 0; },
 IsEmptyHeaderID: function(id) { return id.indexOf(this.EmptyHeaderSuffix) > -1 },
 GetRootTable: function() { return _aspxGetElementById(this.name); },
 GetGridTD: function() {
  var table = this.GetRootTable();
  if(!table) return null;
  return table.rows[0].cells[0];
 },
 GetArrowDragDownImage: function() { return this.GetChildElementById("IADD"); },
 GetArrowDragUpImage: function() { return this.GetChildElementById("IADU"); },
 GetArrowDragFieldImage: function() { return this.GetChildElementById("IDHF"); },
 GetCallbackStateInput: function() { return this.GetChildElementById("CallbackState"); },
 GetSelectionInput: function() { return this.GetChildElementById("DXSelInput"); },
 GetKeyValuesInput: function() { return this.GetChildElementById("DXKVInput"); },
 GetFocusedRowInput: function() { return this.GetChildElementById("DXFocusedRowInput"); },
 GetColResizedInput: function() { return this.GetChildElementById("DXColResizedInput"); },
 GetPostBackSyncInput: function() { return this.GetChildElementById("DXSyncInput"); },
 GetEndlessPagingGroupStateInput: function() { return this.GetChildElementById("DXEPGSInput"); },
 GetEndlessPagingUpdatableContainer: function() { return this.GetChildElementById("DXEPUC"); },
 GetEndlessPagingLPContainer: function() { return this.GetChildElementById("DXEPLPC"); },
 GetBatchEditorContainer: function(columnIndex) { return this.GetChildElementById("DXBEC" + columnIndex); },
 GetBatchEditPageValuesInput: function() { return this.GetChildElementById("DXBEPVInput"); },
 GetBatchEditClientModifiedValuesInput: function() { return this.GetChildElementById("DXBECMVInput"); },
 GetBatchEditCellErrorTable: function() { return this.GetChildElementById("DXCErrorTable"); },
 GetLoadingPanelDiv: function() {  return this.GetChildElementById("LPD"); },
 GetFixedColumnsDiv: function() {  return this.GetChildElementById(this.FixedColumnsDivID); },
 GetRow: function(visibleIndex) {
  var res = this.GetDataRow(visibleIndex);
  if(res == null) res = this.GetGroupRow(visibleIndex);
  return res;
 },
 GetDataRow: function(visibleIndex) { return this.GetChildElementById(this.DataRowID + visibleIndex); },
 GetDetailRow: function(visibleIndex) { return this.GetChildElementById(this.DetailRowID + visibleIndex); },
 GetPreviewRow: function(visibleIndex) { return this.GetChildElementById(this.PreviewRowID + visibleIndex); },
 GetGroupRow: function(visibleIndex) {
  var element = this.GetChildElementById(this.GroupRowID + visibleIndex);
  if(!element)
   element = this.GetExpandedGroupRow(visibleIndex);
  return element;
 },
 GetExpandedGroupRow: function(visibleIndex) { return this.GetChildElementById(this.GroupRowID + "Exp" + visibleIndex); },
 GetEmptyDataRow: function() { return this.GetChildElementById(this.EmptyDataRowID); },
 GetDataRowSelBtn: function(index) { return this.GetChildElementById("DXSelBtn" + index); },
 GetSelectAllBtn: function(index) { return this.GetChildElementById("DXSelAllBtn" + index); },
 GetMainTable: function() { return this.GetChildElementById(this.MainTableID); },
 GetStyleTable: function() { return this.GetChildElementById("DXStyleTable"); },
 GetLoadingPanelContainer: function() { return this.GetChildElementById("DXLPContainer"); },
 GetGroupPanel: function() { return this.GetChildElementById("grouppanel"); },
 GetHeader: function(columnIndex, inGroupPanel) {
  var id = "col" + columnIndex;
  if(inGroupPanel)
   id = "group" + id;
  return this.GetChildElementById(id);
 },
 GetHeaderRow: function(index) {
  return _aspxGetElementById(this.name + this.HeaderRowID + index);
 },
 GetEditingRow: function(obj) { return _aspxGetElementById(obj.name + "_DXEditingRow"); },
 GetEditingErrorRow: function(obj) { return _aspxGetElementById(obj.name + "_DXEditingErrorRow"); },
 GetEditFormTable: function() { return _aspxGetElementById(this.name + "_DXEFT"); },
 GetCustomizationWindow: function() { return aspxGetControlCollection().Get(this.name + this.CustomizationWindowSuffix); },
 GetParentRowsWindow: function() { return aspxGetControlCollection().Get(this.name + "_DXparentrowswindow"); },
 GetEditorPrefix: function() { return "DXEditor"; },
 GetPopupEditForm: function() { return aspxGetControlCollection().Get(this.name  + "_DXPEForm"); },
 GetFilterRowMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXFilterRowMenu"); },
 GetFilterControlPopup: function() { return aspxGetControlCollection().Get(this.name + "_DXPFCForm"); },
 GetFilterControl: function() { return aspxGetControlCollection().Get(this.name +  "_DXPFCForm_DXPFC"); },
 GetHeaderFilterPopup: function() { return aspxGetControlCollection().Get(this.name + "_DXHFP"); },
 GetHeaderFilterListBox: function() { return aspxGetControlCollection().Get(this.name + "_HFListBox"); },
 GetHeaderFilterSelectAllCheckBox: function() { return aspxGetControlCollection().Get(this.name + "_HFSACheckBox"); },
 GetGroupPanelContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_GroupPanel"); },
 GetColumnContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_Columns"); },
 GetRowContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_Rows"); },
 GetFooterContextMenu: function() { return aspxGetControlCollection().Get(this.name + "_DXContextMenu_Footer"); },
 GetEditorByColumnIndex: function(colIndex) {
  var list = this._getEditors();
  for(var i = 0; i < list.length; i++) {
   if(this.tryGetNumberFromEndOfString(list[i].name).value === colIndex)
    return list[i];
  }
  return null;
 },
 Initialize: function() {
  this.constructor.prototype.Initialize.call(this);
  if(this.enabled)
   this.SetHeadersClientEvents();
  this.EnsureRowKeys();
  this._setFocusedRowInputValue();
  this.AddSelectStartHandler();
  this.EnsureRowHotTrackItems();
  if(this.enableKeyboard) {
   this.kbdHelper = this.customKbdHelperName ? new window[this.customKbdHelperName](this) : new ASPxGridViewKbdHelper(this);
   this.kbdHelper.Init();
   ASPxKbdHelper.RegisterAccessKey(this);
  }
  if(this.checkBoxImageProperties){
   this.CreateInternalCheckBoxCollection();
   this.UpdateSelectAllCheckboxesState();
  }
  this.CheckPendingEvents();
  this.InitializeHeaderFilterPopup();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.ResetStretchedColumnWidth();
  this.CheckEndlessPagingLoadNextPage();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.Init();
  this.PrepareEditorsToKeyboardNavigation();
  window.setTimeout(function() { this.SaveAutoFilterColumnEditorState(); }.aspxBind(this), 0);
  window.setTimeout(function() { this.EnsureVisibleRowFromServer(); }.aspxBind(this), 0);
 },
 PrepareEditorsToKeyboardNavigation: function() {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  for(var i = 0; i < this.columns.length; i++) {
   this.AttachEventToEditor(this.columns[i].index, "GotFocus", function(s, e) { this.OnEditorGotFocus(s, e); }.aspxBind(this));
   this.AttachEventToEditor(this.columns[i].index, "KeyDown", function(s, e) { this.OnEditorKeyDown(s, e); }.aspxBind(this));
  }
 },
 RequireEditorsKeyboardNavigation: function() {
  return this.IsInlineEditMode() && this.GetFixedColumnsHelper();
 },
 OnEditorGotFocus: function(s, e) {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  var helper = this.GetFixedColumnsHelper();
  helper.TryShowColumn(s.dxgvColumnIndex);
 },
 OnEditorKeyDown: function(s, e) {
  if(!this.RequireEditorsKeyboardNavigation()) return;
  var keyCode = _aspxGetKeyCode(e.htmlEvent);
  if(keyCode !== ASPxKey.Tab) return;
  var helper = this.GetFixedColumnsHelper();
  var matrix = this.GetHeaderMatrix();
  var neighborColumnIndex = e.htmlEvent.shiftKey ? matrix.GetLeftNeighbor(s.dxgvColumnIndex) : matrix.GetRightNeighbor(s.dxgvColumnIndex);
  var neighborEditor = this.GetEditorByColumnIndex(neighborColumnIndex);
  if(neighborEditor && helper.TryShowColumn(neighborColumnIndex, true)) {
   _aspxPreventEventAndBubble(e.htmlEvent);
   _aspxClearInputSelection(s.GetInputElement());
   neighborEditor.Focus();
  }
 },
 AttachEventToEditor: function(columnIndex, eventName, handler) {
  var editor = this.GetEditorByColumnIndex(columnIndex);
  if(!ASPxIdent.IsASPxClientEdit(editor))
   return;
  var attachKeyDownToInput = eventName === "KeyDown" && this.IsCheckEditor(editor);
  if(!editor[eventName] && !attachKeyDownToInput)
   return;
  var duplicateAttachLocker = "dxgv" + eventName + "Assigned";
  if(editor[duplicateAttachLocker])
   return;
  if(attachKeyDownToInput)
   _aspxAttachEventToElement(editor.GetInputElement(), "keydown", function(e) { handler(editor, { htmlEvent: e }); });
  else
   editor[eventName].AddHandler(handler);
  editor.dxgvColumnIndex = columnIndex;
  editor[duplicateAttachLocker] = true;
 },
 IsInlineEditMode: function() { return this.editMode === 0; },
 IsCheckEditor: function(editor) {
  return ASPxIdent.IsASPxClientCheckEdit && ASPxIdent.IsASPxClientCheckEdit(editor);
 },
 CheckEndlessPagingLoadNextPage: function() {
  window.setTimeout(function() {
   var scrollHelper = this.GetScrollHelper();
   if(this.useEndlessPaging && scrollHelper)
    scrollHelper.CheckEndlessPagingLoadNextPage();
  }.aspxBind(this), 0);
 },
 EnsureRowKeys: function() {
  var keyValuesInput = this.GetKeyValuesInput();
  if(keyValuesInput)
   this.keys = eval(keyValuesInput.value);
  if(!this.keys)
   this.keys = [ ];
 },
 InitializeHeaderFilterPopup: function() {
  var popup = this.GetHeaderFilterPopup();
  if(!popup)
   return;
  popup.PopUp.AddHandler(function() { this.OnPopUpHeaderFilterWindow(); }.aspxBind(this));
  popup.CloseUp.AddHandler(function(s) {
   if(!this.UseHFContentCaching())
    window.setTimeout(function() { s.SetContentHtml(""); }, 0);
  }.aspxBind(this));
  popup.Resize.AddHandler(function(s) {
   var colIndex = this.FindColumnIndexByHeaderChild(s.GetCurrentPopupElement());
   var column = this._getColumn(colIndex);
   if(!column) return;
   this.SetHeaderFilterPopupSize(colIndex, s.GetWidth(), s.GetHeight());
  }.aspxBind(this));
  var buttons = this.GetHeaderFilterButtons();
  for(var i = 0; i < buttons.length; i++)
   popup.AddPopupElement(buttons[i]);
 },
 GetHeaderFilterButtons: function() {
  var buttons = [ ];
  for(var i = 0; i < this.GetColumnsCount(); i++) {
   if(!this.GetColumn(i).visible)
    continue;
   this.PopulateHeaderFilterButtons(this.GetHeader(i, false), buttons);
   this.PopulateHeaderFilterButtons(this.GetHeader(i, true), buttons);
  }
  var custWindow = this.GetCustomizationWindow();
  if(custWindow)
   this.PopulateHeaderFilterButtons(custWindow.GetWindowClientTable(-1), buttons);
  return buttons;
 },
 PopulateHeaderFilterButtons: function(container, buttons) {
  if(!container) return;
  var images = container.getElementsByTagName("IMG");
  for(var i = 0; i < images.length; i++) {
   var image = images[i];
   if(_aspxElementCssClassContains(image, this.HeaderFilterButtonClassName))
    buttons.push(image);
  }
 },
 UseHFContentCaching: function() {
  var listBox = this.GetHeaderFilterListBox();
  if(listBox && listBox.GetMainElement())
   return this.enableHeaderFilterCaching && listBox.GetItemCount() < 1000;
  return false;
 },
 OnPopUpHeaderFilterWindow: function() {
  var popup = this.GetHeaderFilterPopup();
  var colIndex = this.FindColumnIndexByHeaderChild(popup.GetCurrentPopupElement());
  var column = this._getColumn(colIndex);
  if(!column) return;
  var shiftKey = popup.GetPopUpReasonMouseEvent().shiftKey;
  var listBox = this.GetHeaderFilterListBox();
  if(listBox && listBox.cpGVColumnIndex == colIndex && this.UseHFContentCaching() && popup.savedShiftKey === shiftKey) {
   this.RestoreHFListBoxPreviousState(listBox, column);
   return;
  }
  popup.savedShiftKey = shiftKey;
  this.gridFuncCallBack([this.CommandId.FilterPopup, this.name, colIndex, shiftKey ? "T" : ""], this.onFilterPopupCallback);
  popup.SetContentHtml("");
  var buttonPanel = document.getElementById(popup.cpButtonPanelID);
  if(buttonPanel) {
   buttonPanel.style.display = column.HFCheckedList ? "" : "none";
   this.SetHFOkButtonEnabled(false);
  }
  var size = this.GetHeaderFilterPopupSize(colIndex);
  if(size) {
   popup.SetSize(size[0], size[1]);
   if(__aspxFirefox)
    popup.Shown.AddHandler(function(s) {
     window.setTimeout(function() { s.SetSize(size[0], size[1]); }, 0);
    });
  }
  this.CreateLoadingPanelWithoutBordersInsideContainer(popup.GetContentContainer(-1));
 },
 RestoreHFListBoxPreviousState: function(listBox, column) {
  if(!column.HFCheckedList)
   return;
  listBox.UnselectAll();
  listBox.SelectIndices(listBox.HFSavedSelectedIndices);
  this.UpdateHFSelectAllCheckState();
  this.SetHFOkButtonEnabled(false);
 },
 SetHFOkButtonEnabled: function(enabled) {
  var popup = this.GetHeaderFilterPopup();
  if(!popup) return;
  var button = aspxGetControlCollection().Get(popup.cpOkButtonID);
  if(!button) return;
  button.SetEnabled(enabled);
 },
 GetHeaderFilterPopupSize: function(key) {
  var size = this.headerFilterPopupDimensions[key];
  if(size) return size;
  if(!this.headerFilterPopupDimensions["Default"]) {
   var popup = this.GetHeaderFilterPopup();
   this.SetHeaderFilterPopupSize("Default", popup.GetWidth(), popup.GetHeight());
  }
  return this.headerFilterPopupDimensions["Default"];
 },
 SetHeaderFilterPopupSize: function(key, width, height) {
  this.headerFilterPopupDimensions[key] = [ width, height ];
 },
 FindColumnIndexByHeaderChild: function(element) {
  if(!element)
   return -1;
  var level = 0;
  while(level < 6) {
   var index = this.getColumnIndex(element.id);
   if(index > -1)
    return index;
   element = element.parentNode;
   level++;
  }
  return -1;
 },
 InitializeHFListBox: function(listBox) {
  _aspxAttachEventToElement(listBox.GetListTable(), "mousedown", function() { window.setTimeout(_aspxClearSelection, 0); });
  listBox.SelectedIndexChanged.AddHandler(function(s) { this.OnHFListBoxSelectionChanged(s); }.aspxBind(this));
  listBox.HFSavedSelectedIndices = listBox.GetSelectedIndices();
 },
 OnHFListBoxSelectionChanged: function(listBox) {
  var column = this.GetColumn(listBox.cpGVColumnIndex);
  if(!column) return;
  if(!column.HFCheckedList) {
   this.ApplyHeaderFilterByColumn();
   return;
  }
  this.UpdateHFSelectAllCheckState();
  this.SetHFOkButtonEnabled(this.IsHFSelectedIndicesChanged());
 },
 UpdateHFSelectAllCheckState: function() {
  var listBox = this.GetHeaderFilterListBox();
  var selectedItemCount = listBox.GetSelectedIndices().length;
  var checkState = ASPxClientCheckBoxCheckState.Indeterminate;
  if(selectedItemCount == 0)
   checkState = ASPxClientCheckBoxCheckState.Unchecked;
  else if(selectedItemCount == listBox.GetItemCount())
   checkState = ASPxClientCheckBoxCheckState.Checked;
  this.GetHeaderFilterSelectAllCheckBox().SetCheckState(checkState);
 },
 OnHFSelectAllCheckedChanged: function(checkBox) {
  var listBox = this.GetHeaderFilterListBox();
  if(checkBox.GetChecked())
   listBox.SelectAll();
  else
   listBox.UnselectAll();
  this.SetHFOkButtonEnabled(this.IsHFSelectedIndicesChanged());
 },
 IsHFSelectedIndicesChanged: function() {
  var listBox = this.GetHeaderFilterListBox();
  if(!listBox) return;
  var indices = listBox.GetSelectedIndices();
  var savedIndices = listBox.HFSavedSelectedIndices;
  if(indices.length != savedIndices.length)
   return true;
  for(var i = 0; i < indices.length; i++) {
   if(_aspxArrayBinarySearch(savedIndices, indices[i]) < 0)
    return true;
  }
  return false;
 },
 CheckPendingEvents: function() {
  if(this.pendingEvents.length < 1)
   return;
  for(var i = 0; i < this.pendingEvents.length; i++)
   this.ScheduleRaisingEvent(this.pendingEvents[i]);
  this.pendingEvents.length = 0;
 },
 ScheduleRaisingEvent: function(eventName) {
  window.setTimeout(function() { this[eventName](); }.aspxBind(this), 0);
 },
 CreateInternalCheckBoxCollection: function() {
  if(!this.internalCheckBoxCollection)
   this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.checkBoxImageProperties, true);
  else
   this.internalCheckBoxCollection.SetImageProperties(this.checkBoxImageProperties);
  this.CompleteInternalCheckBoxCollection();
 },
 CompleteInternalCheckBoxCollection: function() {
  if(!this.IsLastCallbackProcessedAsEndless())
   this.internalCheckBoxCollection.Clear();
  for(var i = 0; i < this.selectAllSettings.length; i++){
   var selectAllSettings = this.selectAllSettings[i];
   var icbSelectAllElement = this.GetSelectAllBtn(selectAllSettings.index);
   if(_aspxIsExistsElement(icbSelectAllElement))
    this.AddInternalCheckBoxToCollection(icbSelectAllElement, -(selectAllSettings.index + 1), !this.IsCheckBoxDisabled(icbSelectAllElement));
  }
  for(var i = 0; i < this.pageRowCount; i ++) {
   var index = i + this.visibleStartIndex;
   var icbInputElement = this.GetDataRowSelBtn(index);
   if(icbInputElement) {
    var enabled = !this.IsCheckBoxDisabled(icbInputElement);
    this.AddInternalCheckBoxToCollection(icbInputElement, index, enabled);
   }
  }
 },
 IsCheckBoxDisabled: function(icbInputElement) {
   var icbMainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(icbInputElement);
   return icbMainElement.className.indexOf("dxgv_cd") != -1;
 },
 AddInternalCheckBoxToCollection: function (icbInputElement, visibleIndex, enabled) {
  var internalCheckBox = null;
  if(this.IsLastCallbackProcessedAsEndless())
   internalCheckBox = this.internalCheckBoxCollection.Get(icbInputElement.id);
  if(internalCheckBox && internalCheckBox.inputElement != icbInputElement){
   this.internalCheckBoxCollection.Remove(icbInputElement.id);
   internalCheckBox = null;
  }
  if(!internalCheckBox)
   internalCheckBox = this.internalCheckBoxCollection.Add(icbInputElement.id, icbInputElement);
  internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  internalCheckBox.SetEnabled(enabled && this.GetEnabled());
  internalCheckBox.readOnly = this.readOnly;
  internalCheckBox.autoSwitchEnabled = !this.allowSelectSingleRowOnly;
  var grid = this;
  function OnCheckedChanged(s, e){
   if(!s.autoSwitchEnabled && s.GetValue() == ASPxClientCheckBoxInputKey.Unchecked){
    var value = s.stateController.GetNextCheckBoxValue(s.GetValue(), s.allowGrayedByClick && s.allowGrayed);
    s.SetValue(value);
   }
   var rowCheckBox = grid.GetDataRowSelBtn(visibleIndex);
   if(grid.allowSelectSingleRowOnly)
    grid._selectAllSelBtn(false, rowCheckBox.id);
   if(!grid.RaiseInternalCheckBoxClick(visibleIndex)){
    grid.ScheduleCommand(function() { grid.SelectRow(visibleIndex, s.GetChecked()); }, true);
    grid.mainTableClickCore(e, true);
   }
  }
  function OnSelectAllCheckedChanged(s, e){
   grid.ScheduleCommand(function() {
    var index = grid.tryGetNumberFromEndOfString(s.inputElement.id).value;
    var columnSelectAllSettings = grid.GetColumnSelectAllSettings(index);
    if(!columnSelectAllSettings)
     return;
    switch(columnSelectAllSettings.mode){
     case 1:
      s.GetChecked() ? grid.SelectAllRowsOnPage() : grid.UnselectAllRowsOnPage();
      break;
     case 2:
      s.GetChecked() ? grid.SelectRows() : grid.UnselectFilteredRows();
      break;
    }
    grid.UpdateSelectAllCheckboxesState();
   }, true);
   grid.mainTableClickCore(e, true);
  }
  var checkedChangedHandler = visibleIndex < 0 ? OnSelectAllCheckedChanged : OnCheckedChanged;
  internalCheckBox.CheckedChanged.AddHandler(checkedChangedHandler);
 },
 GetColumnSelectAllSettings: function(index){
  for(var i = 0; i < this.selectAllSettings.length; i++){
   if(this.selectAllSettings[i].index == index)
    return this.selectAllSettings[i];
  }
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.UpdateScrollableControls();
  this.UpdateIndentCellWidths();
  this.ValidateColumnWidths();
  this.ApplyPostBackSyncData();
  this.AdjustPagerControls();
 },
 IsAdjustmentRequired: function() {
  if(ASPxClientControl.prototype.IsAdjustmentRequired.call(this))
   return true;
  var scrollHelper = this.GetScrollHelper()
  return scrollHelper ? scrollHelper.IsRestoreScrollPosition() : false;
 },
 NeedCollapseControlCore: function() {
  return this.HasScrolling();
 },
 GetChildElementById: function(childName){
  if(!this.childrenCache)
   this.childrenCache = { };
  if(!_aspxIsExistsElement(this.childrenCache[childName]))
   this.childrenCache[childName] = _aspxGetElementById(this.name + "_" + childName);
  return this.childrenCache[childName];
 },
 SerializeCallbackArgs: function(array) {
  if(!_aspxIsExists(array) || array.constructor != Array || array.length == 0)
   return "";
  var sb = [ ];
  for(var i = 0; i < array.length; i++) {
   var item = array[i].toString();
   sb.push(item.length);
   sb.push('|');
   sb.push(item);
  }
  return sb.join("");
 },
 gridCallBack: function (args) {
  this.OnBeforeCallbackOrPostBack();
  if(!this.callBack || !this.callBacksEnabled) {
   this.gridPostBack(args);
  } else {
   var serializedArgs = this.SerializeCallbackArgs(args);
   var command = this.GetCorrectedCommand(args);
   this.OnBeforeCallback(command);
   var preparedArgs = this.prepareCallbackArgs(serializedArgs, this.GetGridTD());
   this.lockFilter = true;
   this.userChangedSelection = false;
   this.CreateCallback(preparedArgs, command);
  }
 },
 gridPostBack: function(args) {
  var serializedArgs = this.SerializeCallbackArgs(args);
  this.lockFilter = true;
  this.postbackRequestCount++;
  this.SendPostBack(serializedArgs);
 },
 GetContextMenuInfo: function() {
  if(!this.clickedMenuItem)
   return "";
  var menu = this.clickedMenuItem.menu;
  var elementInfo = menu.elementInfo;
  return menu.cpType + "," + this.clickedMenuItem.indexPath + "," + elementInfo.index;
 },
 GetCorrectedCommand: function(args) {
  if(args.length == 0)
   return "";
  var command = args[0];
  if(args.length > 1 && command == this.CommandId.ColumnMove) {
   if(args[args.length - 1])
    command = this.CommandId.UnGroup;
   if(args[args.length - 2])
    command = this.CommandId.Group;
  }
  return command;
 },
 GetFuncCallBackIndex: function(onCallBack) {
  var item = { date: new Date(), callback: onCallBack };
  for(var i = 0; i < this.funcCallbacks.length; i ++) {
   if(this.funcCallbacks[i] == null) {
    this.funcCallbacks[i] = item;
    return i;
   }
  }
  this.funcCallbacks.push(item);
  return this.funcCallbacks.length - 1;
 },
 GetFuncCallBack: function(index) {
  if(index < 0 || index >= this.funcCallbacks.length) return null;
  var result = this.funcCallbacks[index];
  this.funcCallbacks[index] = null;
  return result;
 },
 gridFuncCallBack: function(args, onCallBack) {
  var serializedArgs = this.SerializeCallbackArgs(args);
  var callbackArgs = this.formatCallbackArg("FB", this.GetFuncCallBackIndex(onCallBack).toString()) +
   this.prepareCallbackArgs(serializedArgs, null);
  this.CreateCallback(callbackArgs, "FUNCTION");
 },
 prepareCallbackArgs: function(serializedArgs, rootTD) {
  var preparedArgs =
   this.formatCallbackArg("EV", this.GetEditorValues(rootTD)) +
   this.formatCallbackArg("SR", this.GetSelectedState()) +
   this.formatCallbackArg("KV", this.GetKeyValuesInput()) +
   this.formatCallbackArg("FR", this.GetFocusedRowInput()) +
   this.formatCallbackArg("CR", this.GetColResizedInput()) +
   this.formatCallbackArg("CM", this.GetContextMenuInfo()) +
   this.formatCallbackArg("GB", serializedArgs);
  return preparedArgs;
 },
 formatCallbackArg: function(prefix, arg) {
  if(arg == null) return "";
  if(!_aspxIsExists(arg.length) && _aspxIsExists(arg.value)) {
   arg = arg.value;
  }
  if(arg == null || arg == "") return "";
  return prefix + "|" + arg.length + ';' + arg + ';';
 },
 OnCallback: function (result) {
  this.HideFilterControlPopup();
  var isFuncCallback = result.indexOf("FB|") == 0;
  this.afterCallbackRequired = !isFuncCallback;
  if(isFuncCallback) {
   this.OnFunctionalCallback(result);
   return;
  }
  var helper = this.GetEndlessPagingHelper();
  if(result.indexOf("EP|") == 0 && helper){
   helper.OnCallback(result);
  } else{
   var rootTD = this.GetGridTD();
   if(rootTD)
    _aspxSetInnerHtml(rootTD, result);
  }
 },
 OnFunctionalCallback: function(result){
  this.PreventCallbackAnimation();
  var result = this.ParseFuncCallbackResult(result.substr(3));
  if(!result) return;
  if(this.IsHeaderFilterFuncCallback(result.callback))
   this.OnFuncCallback(result);
  else
   window.setTimeout(function() { this.OnFuncCallback(result); }.aspxBind(this), 0);
 },
 OnCallbackFinalized: function() {
  if(this.afterCallbackRequired)
   this.OnAfterCallback();
 },
 IsHeaderFilterFuncCallback: function(callback) {
  return callback === this.onFilterPopupCallback;
 },
 ParseFuncCallbackResult: function(result) {
  var pos = result.indexOf("|");
  if(pos < 0) return;
  var index = parseInt(result.substr(0, pos), 10);
  var callbackItem = this.GetFuncCallBack(index);
  if(!callbackItem || !callbackItem.callback) return;
  result = result.substr(pos + 1);
  return { callback: callbackItem.callback, params: result };
 },
 OnFuncCallback: function(result) {
  if(result && result.callback)
   result.callback(eval(result.params));
 },
 OnCallbackError: function(result, data){
  this.showingError = result;
  this.errorData = data;
  if(this.GetGridTD())
   this.afterCallbackRequired = true;
 },
 ShowError: function(errorText, errorData) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && batchEditHelper.ShowError(errorText, errorData))
   return;
  var displayIn = this;
  var popupForm = this.GetPopupEditForm();
  if(popupForm) {
   displayIn = popupForm;
   if(!popupForm.IsVisible()) {
    popupForm.Show();
   }
  }
  var errorRow = this.GetEditingErrorRow(displayIn);
  if(!errorRow) {
   var editRow = this.GetEditingRow(displayIn);
   if(editRow) {
    errorRow = this.CreateEditingErrorRow();
    errorRow.id = editRow.id.replace("DXEditingRow", "DXEditingErrorRow");
    _aspxInsertElementAfter(errorRow, editRow);
   }
  }
  if(errorRow)
   errorRow.cells[errorRow.cells.length - 1].innerHTML = errorText;
  else
    alert(errorText);
 },
 CreateEditingErrorRow: function() {
  var row = this.GetStyleTable().rows[1].cloneNode(true);
  for(var i = 0; i < row.cells.length; i++) {
   var cell = row.cells[i];
   var colSpan = parseInt(_aspxGetAttribute(cell, "data-colSpan"));
   if(!isNaN(colSpan))
    cell.colSpan = colSpan;
  }
  return row;
 },
 OnBeforeCallbackOrPostBack: function() {
  this.HidePopupEditForm();
  ASPxClientGridView.SaveActiveElementSettings(this);
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.SaveControlDimensions(true);
 },
 OnBeforeCallback: function(command) {
  this.keyboardLock = true;
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper)
   endlessPagingHelper.OnBeforeCallback(command);
  this.ShowLoadingElements();
  this.SaveCallbackSettings();
  this.RemoveSelectStartHandler();
  var popup = this.GetHeaderFilterPopup();
  if(popup)
   popup.RemoveAllPopupElements();
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper && this.isVirtualScrolling)
   scrollHelper.ClearVirtualScrollTimer();
 },
 OnAfterCallback: function() {
  this.clickedMenuItem = null;
  var checkBoxCollectionReinitializeRequired = true;
  if(this.showingError) {
   checkBoxCollectionReinitializeRequired = false;
   this.ShowError(this.showingError, this.errorData);
      this.showingError = null;
   this.errorData = null;
    }
  this.childrenCache = { };
  this.pendingCommands = [ ];
  this.lockFilter = true;
  try {
   this.EnsureRowKeys();
   this.headerMatrix && this.headerMatrix.Invalidate();
   this.SetHeadersClientEvents();
   this.RestoreCallbackSettings();
   this.AddSelectStartHandler();
   this.EnsureRowHotTrackItems();
   if(this.kbdHelper && !this.useEndlessPaging)
    this.kbdHelper.EnsureFocusedRowVisible();
  }
  finally {
   window.setTimeout(function() { this.lockFilter = false; }.aspxBind(this), 0);
   this.keyboardLock = false;
  }
  if(this.checkBoxImageProperties && checkBoxCollectionReinitializeRequired){
   this.CreateInternalCheckBoxCollection();
   this.UpdateSelectAllCheckboxesState();
  }
  this.CheckPendingEvents();
  this.InitializeHeaderFilterPopup();
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.SaveControlDimensions(true);
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper)
   endlessPagingHelper.OnAfterCallback();
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.OnAfterCallback();
  this.CheckEndlessPagingLoadNextPage();
  this.PrepareEditorsToKeyboardNavigation();
  window.setTimeout(function() { this.SaveAutoFilterColumnEditorState(); }.aspxBind(this), 0);
  window.setTimeout(function() { this.EnsureVisibleRowFromServer(); }.aspxBind(this), 0);
 },
 SaveAutoFilterColumnEditorState: function() {
  for(var i = 0; i < this.columns.length; i++) {
   var columnIndex = this.columns[i].index;
   this.filterEditorState[columnIndex] = this.GetAutoFilterEditorValue(columnIndex);
  }
 },
 GetAutoFilterEditorValue: function(columnIndex) {
  var editor = this.GetAutoFilterEditor(columnIndex);
  var editorValue = "";
  if(editor && editor.GetMainElement())
   editorValue = editor.GetValueString();
  return {
   value: editorValue,
   filterCondition: this.filterRowConditions ? this.filterRowConditions[columnIndex] : ""
  };
 },
 ClearAutoFilterState: function() {
  this.filterEditorState = [];
 },
 SaveCallbackSettings: function() {
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null) {
   var custWindowElement = custWindow.GetWindowElement(-1);
   if(custWindowElement) {
    this.custwindowLeft = _aspxGetAbsoluteX(custWindowElement);
    this.custwindowTop = _aspxGetAbsoluteY(custWindowElement);
    this.custwindowVisible = custWindow.IsVisible();
   }
  } else {
   this.custwindowVisible = null;
  }
  var helper = this.GetFixedColumnsHelper();
  if(helper != null) helper.SaveCallbackSettings();
 },
 RestoreCallbackSettings: function() {
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null && this.custwindowVisible != null) {
   if(this.custwindowVisible){
    custWindow.LockAnimation();
    custWindow.ShowAtPos(this.custwindowLeft, this.custwindowTop);
    custWindow.UnlockAnimation();
   }
  }
  var resizingHelper = this.GetResizingHelper();
  if(resizingHelper)
   resizingHelper.ResetStretchedColumnWidth();
  var fixedColumnsHelper = this.GetFixedColumnsHelper();
  if(fixedColumnsHelper != null)
   fixedColumnsHelper.RestoreCallbackSettings();
  this.UpdateScrollableControls();
  if(fixedColumnsHelper != null)
   fixedColumnsHelper.HideColumnsRelyOnScrollPosition();
  this.UpdateIndentCellWidths();
  if(resizingHelper)
   resizingHelper.ValidateColumnWidths();
  this.ApplyPostBackSyncData();
  this.ResetControlAdjustment();
  ASPxClientGridView.RestoreActiveElementSettings(this);
 },
 HidePopupEditForm: function() {
  var popup = this.GetPopupEditForm();
  if(popup != null) {
   popup.Hide();
  }
 },
 OnPopupEditFormInit: function(popup) {
  if(this.HasHorzScroll() && this.GetVisibleRowsOnPage() > 0) {
   var popupHorzOffset = popup.GetPopupHorizontalOffset();
   popup.SetPopupHorizontalOffset(popupHorzOffset - this.GetPopupEditFormHorzOffsetCorrection(popup));
  }
  popup.Show();
 },
 GetPopupEditFormHorzOffsetCorrection: function(popup) {
  var scrollHelper = this.GetScrollHelper();
  if(!scrollHelper) return 0;
  var scrollDiv = scrollHelper.GetHorzScrollableControl();
  if(!scrollDiv)  return 0;
  var horzAlign = popup.GetHorizontalAlign();
  if(ASPxClientPopupUtils.IsRightSidesAlign(horzAlign) || ASPxClientPopupUtils.IsOutsideRightAlign(horzAlign))
   return scrollDiv.scrollWidth - scrollDiv.offsetWidth;
  if(ASPxClientPopupUtils.IsCenterAlign(horzAlign))
   return (scrollDiv.scrollWidth - scrollDiv.offsetWidth) / 2;
  return 0;
 },
 _isRowSelected: function(visibleIndex) {
  if(!this.GetDataRow(visibleIndex)) return false;
  var index = this._getRowIndexOnPage(visibleIndex);
  var selInput = this.GetSelectionInput();
  if(!selInput) return false;
  return this._isTrueInCheckList(selInput.value, index);
 },
 _isTrueInCheckList: function(checkList, index) {
  if(index < 0 ||  index >= checkList.length) return false;
  return checkList.charAt(index) == "T";
 },
 _getSelectedRowCount: function() {
  return this.selectedWithoutPageRowCount + this._getSelectedRowCountOnPage();
 },
 _getSelectedFilteredRowCount: function(){
  return this.filteredSelectedWithoutPageRowCount + this._getSelectedRowCountOnPage();
 },
 _getSelectedRowCountOnPage: function(){
  var selInput = this.GetSelectionInput();
  if(!selInput)
   return 0;
  var checkList = selInput.value;
  var selCount = 0;
  for(var i = 0; i < checkList.length; i++) {
   if(checkList.charAt(i) == "T") selCount ++;
  }
  return selCount;
 },
 _selectAllRowsOnPage: function(checked) {
  if(checked && this.allowSelectSingleRowOnly) {
   this.SelectRow(0, true);
   return;
  }
  var selInput = this.GetSelectionInput();
  if(!selInput) return;
  this._selectAllSelBtn(checked);
  var prevSelectedRowCount = 0;
  var isTrueInCheckList = false;
  for(var i = 0; i < this.pageRowCount; i ++) {
   isTrueInCheckList = this._isTrueInCheckList(selInput.value, i);
   if(isTrueInCheckList) prevSelectedRowCount++;
   if(isTrueInCheckList != checked) {
    this.ChangeRowStyle(i + this.visibleStartIndex, checked ? 0 : 4);
   }
  }
  if (prevSelectedRowCount == 0 && !checked) return;
  var selValue = "";
  if(checked) {
   for(var i = 0; i < this.pageRowCount; i ++)
    selValue += this.IsDataRow(this.visibleStartIndex + i ) ? "T" : "F";
  }
  if(selValue != selInput.value) {
   this.userChangedSelection = true;
   if(selValue == "") selValue = "U";
   selInput.value = selValue;
  }
  this.DoSelectionChanged(-1, checked, true);
  this.UpdateSelectAllCheckboxesState();
 },
 DeleteGridRow: function(visibleIndex) {
  if(this.confirmDelete != "" && !confirm(this.confirmDelete)) return;
  this.DeleteRow(visibleIndex);
 },
 _selectAllSelBtn: function(checked, exceptInternalCheckBoxName) {
  if(this.checkBoxImageProperties) {
   for(var internalCheckBoxName in this.internalCheckBoxCollection.checkBoxes) {
    if(exceptInternalCheckBoxName !== internalCheckBoxName &&  this.internalCheckBoxCollection.checkBoxes[internalCheckBoxName].SetValue)
     this.internalCheckBoxCollection.checkBoxes[internalCheckBoxName].SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
   }
  }
 },
 doRowMultiSelect: function(row, rowIndex, evt) {
  var ctrlKey = evt.ctrlKey || evt.metaKey,
   shiftKey = evt.shiftKey;
  if((ctrlKey || shiftKey) && (!__aspxIE || __aspxBrowserVersion > 8))
   _aspxClearSelection();
  if(this.allowSelectSingleRowOnly)
   shiftKey = false;
  if(!ctrlKey && !shiftKey) {
   this._selectAllRowsOnPage(false);
   this.SelectRow(rowIndex, true);
   this.lastMultiSelectIndex = rowIndex;
  } else {
   if(ctrlKey) {
    this.SelectRow(rowIndex, !this._isRowSelected(rowIndex));
    this.lastMultiSelectIndex = rowIndex;
   } else {
    var startIndex = rowIndex > this.lastMultiSelectIndex ? this.lastMultiSelectIndex + 1 : rowIndex;
    var endIndex = rowIndex > this.lastMultiSelectIndex ? rowIndex : this.lastMultiSelectIndex - 1;
    for(var i = this.visibleStartIndex; i < this.pageRowCount + this.visibleStartIndex; i ++) {
     if(i == this.lastMultiSelectIndex)
      continue;
     this.SelectRow(i, i >= startIndex && i <= endIndex);
    }
   }
  }
  this.UpdatePostBackSyncInput();
 },
 AddSelectStartHandler: function() {
  if(!this.allowSelectByRowClick || !__aspxIE || __aspxBrowserVersion > 8 )
   return;
  _aspxAttachEventToElement(this.GetMainTable(), "selectstart", ASPxClientGridView.SelectStartHandler);
 },
 RemoveSelectStartHandler: function() {
  if(!this.allowSelectByRowClick || !__aspxIE)
   return;
  _aspxDetachEventFromElement(this.GetMainTable(), "selectstart", ASPxClientGridView.SelectStartHandler);
 },
 SelectRow: function(visibleIndex, checked, fromCheckBox) {
  if(!this.IsDataRow(visibleIndex) || visibleIndex < 0) return;
  if(this._isRowSelected(visibleIndex) == checked) return;
  if(_aspxIsExists(fromCheckBox)) fromCheckBox = false;
  var index = this._getRowIndexOnPage(visibleIndex);
  if(index < 0) return;
  if(checked && this.allowSelectSingleRowOnly)
   this._selectAllRowsOnPage(false);
  var selInput = this.GetSelectionInput();
  if(selInput) {
   this.userChangedSelection = true;
   var checkList = selInput.value;
   if(index >= checkList.length) {
    if(!checked) return;
    for(var i = checkList.length; i <= index; i ++)
     checkList += "F";
   }
   checkList = checkList.substr(0, index) + (checked ? "T" : "F") + checkList.substr(index + 1, checkList.length - index - 1);
   if(checkList.indexOf("T") < 0) checkList = "U";
   selInput.value = checkList;
  }
  var checkBox = this.GetDataRowSelBtn(visibleIndex);
  if(checkBox) {
   var internalCheckBox = this.internalCheckBoxCollection.Get(checkBox.id);
   internalCheckBox.SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
  }
  this.UpdateSelectAllCheckboxesState();
  this.ChangeRowStyle(visibleIndex, checked ? 0 : 4);
  this.DoSelectionChanged(visibleIndex, checked, false);
 },
 UpdateSelectAllCheckboxesState: function(){
  if(!this.selectAllSettings)
   return;
  for(var i = 0; i < this.selectAllSettings.length; i++){
   var columnSelectAllSettings = this.selectAllSettings[i];
   var selectAllButtonInput = this.GetSelectAllBtn(columnSelectAllSettings.index);
   if(selectAllButtonInput && !this.IsCheckBoxDisabled(selectAllButtonInput))
    this.UpdateSelectAllCheckboxStateCore(selectAllButtonInput, columnSelectAllSettings.mode, columnSelectAllSettings.selectText, columnSelectAllSettings.unselectText);
  }
 },
 UpdateSelectAllCheckboxStateCore: function(selectAllButtonInput, selectMode, selectTooltip, unselectTooltip){
  var value = ASPxClientCheckBoxInputKey.Indeterminate;
  var selectedRowCountOnPage = this.GetSelectedKeysOnPage().length;
  var considerSelectionOnPages = selectMode == 2 && this.selectAllBtnStateWithoutPage !== null;
  if(this.GetDataRowCountOnPage() == selectedRowCountOnPage && (!considerSelectionOnPages || this.selectAllBtnStateWithoutPage == ASPxClientCheckBoxInputKey.Checked))
   value = ASPxClientCheckBoxInputKey.Checked;
  else if(selectedRowCountOnPage == 0 && (!considerSelectionOnPages || this.selectAllBtnStateWithoutPage == ASPxClientCheckBoxInputKey.Unchecked))
   value = ASPxClientCheckBoxInputKey.Unchecked;
  var selectAllCheckBoxInst = this.internalCheckBoxCollection.Get(selectAllButtonInput.id);
  selectAllCheckBoxInst.SetValue(value);
  var selectAllMainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(selectAllButtonInput);
  selectAllMainElement.title = value === ASPxClientCheckBoxInputKey.Checked ? unselectTooltip : selectTooltip;
 },
 SetSelectAllButtonToolTip: function(tooltip){
  var selectAllBtnInput = this.GetSelectAllBtn();
  if(_aspxIsExists(selectAllBtnInput)){
   var mainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(selectAllBtnInput);
   mainElement.title = tooltip;
  }
 },
 GetDataRowCountOnPage: function(){
  var dataRowCount = 0;
  for(var i = 0; i < this.pageRowCount; i++){
   var index = i + this.visibleStartIndex;
   if(!this.IsGroupRow(index))
    dataRowCount++;
  }
  return dataRowCount;
 },
 ScheduleUserCommand: function(args, postponed, e) {
  if(!args || args.length == 0)
   return;
  var commandName = args[0];
  var rowCommands = [ "CustomButton", "Select", "StartEdit", "Delete" ];
  if((this.useEndlessPaging || this.allowBatchEditing) && _aspxArrayIndexOf(rowCommands, commandName) > -1)
   args[args.length - 1] = this.FindParentRowVisibleIndex(_aspxGetEventSource(e), true);
  this.ScheduleCommand(args, postponed);
 },
 FindParentRowVisibleIndex: function(element, dataAndGroupOnly) {
  var regEx = this.GetRowVisibleIndexRegExp(dataAndGroupOnly);
  while(element) {
   if(element.tagName === "BODY" || element.id == this.name)
    return -1;
   var matches = regEx.exec(element.id);
   if(matches && matches.length == 3)
    return parseInt(matches[2]);
   element = element.parentNode;
  }
  return -1;
 },
 GetRowVisibleIndexRegExp: function(dataAndGroupOnly) {
  var idParts = [ this.DataRowID, this.GroupRowID + "(?:Exp)?" ];
  if(!dataAndGroupOnly) {
   idParts.push(this.PreviewRowID);
   idParts.push(this.DetailRowID);
  }
  return new RegExp("^(" + this.name + "_(?:" + idParts.join("|") + "))(-?\\d+)$");
 },
 ScheduleCommand: function(args, postponed) {
  if(postponed)
   this.pendingCommands.push(args);
  else
   this.PerformScheduledCommand(args);
 },
 PerformScheduledCommand: function(args) {
  if(_aspxIsFunction(args)) {
   args();
   return;
  }
  if(args && args.length > 0) {
   var commandName = "UA_" + args[0];
   if(this[commandName])
    this[commandName].apply(this, args.slice(1));
  }
 },
 PerformPendingCommands: function() {
  var commandCount = this.pendingCommands.length;
  for(var i = 0; i < commandCount; i++)
   this.PerformScheduledCommand(this.pendingCommands.pop());
 },
 getRowByHtmlEvent: function(evt) {
  var row = this.getRowByHtmlEventCore(evt, this.DataRowID);
  if(!row)
   row = this.getRowByHtmlEventCore(evt, this.GroupRowID);
  return row;
 },
 getRowByHtmlEventCore: function(evt, partialID) {
  var row = _aspxGetParentByPartialId(_aspxGetEventSource(evt), partialID);
  if(row && row.id.indexOf(this.name) > -1)
   return row;
  return null;
 },
 NeedProcessTableClick: function(evt) {
  var headerTable = _aspxGetParentByPartialId(_aspxGetEventSource(evt), this.HeaderTableID);
  if(headerTable) {
   var headerTableID = headerTable.id;
   var gridID = headerTableID.substr(0, headerTableID.length - this.HeaderTableID.length - 1);
   return this.name == gridID;
  }
  var mainTable = _aspxGetParentByPartialId(_aspxGetEventSource(evt), this.MainTableID);
  if(mainTable) {
   var mainTableID = mainTable.id;
   var gridID = mainTableID.substr(0, mainTableID.length - this.MainTableID.length - 1);
   return this.name == gridID;
  }
  return false;
 },
 mainTableClick: function(evt) { this.mainTableClickCore(evt); },
 mainTableDblClick: function(evt) {
  var row = this.getRowByHtmlEvent(evt);
  if(!row) return;
  var forceRowDblClickEvent = true;
  var rowIndex = this.getRowIndex(row.id);
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper){
   batchEditHelper.ProcessTableClick(row, evt, true);
   forceRowDblClickEvent = batchEditHelper.editRowVisibleIndex != rowIndex;
  }
  if(forceRowDblClickEvent)
   this.RaiseRowDblClick(rowIndex, evt);
 },
 mainTableClickCore: function(evt, fromCheckBox) {
  if(this.kbdHelper)
   this.kbdHelper.HandleClick(evt);
  var sendNotificationCallack = true;
  this.mainTableClickData.processing = true;
  try {
   this.ProcessTableClick(evt, fromCheckBox);
   var savedRequestCount = this.requestCount + this.postbackRequestCount;
   this.PerformPendingCommands();
   var currentRequestCount = this.requestCount + this.postbackRequestCount;
   sendNotificationCallack = currentRequestCount == savedRequestCount;
  } finally {
   if(sendNotificationCallack)
    if(this.mainTableClickData.focusChanged && !this.mainTableClickData.selectionChanged) {
     this.gridCallBack(["FOCUSEDROW"]);
    } else if(this.mainTableClickData.selectionChanged) {
     this.gridCallBack(["SELECTION"]);
    }
   this.mainTableClickData.processing = false;
   this.mainTableClickData.focusChanged = false;
   this.mainTableClickData.selectionChanged = false;
  }
 },
 ProcessTableClick: function(evt, fromCheckBox) {
  var source = _aspxGetEventSource(evt);
  var row = this.getRowByHtmlEvent(evt);
  if(row) {
   var rowIndex = this.getRowIndex(row.id);
   var isCommandColumnItem = this.IsCommandColumnItem(source);
   if(!isCommandColumnItem && !fromCheckBox) {
    var batchEditHelper = this.GetBatchEditHelper();
    if(batchEditHelper && batchEditHelper.ProcessTableClick(row, evt))
     return;
    if(this.RaiseRowClick(rowIndex, evt))
     return;
   }
   if(this.allowFocusedRow) {
    this.focusRow(row);
   }
   if(this.allowSelectByRowClick) {
    var isActionElement = source && source.tagName.match(/input|select|textarea|^a$/i);
    if(!isActionElement && !isCommandColumnItem && !fromCheckBox) {
     if(this.lookupBehavior){
      var checked = this.allowSelectSingleRowOnly || !this._isRowSelected(rowIndex);
      this.SelectRow(rowIndex, checked);
     } else
      this.doRowMultiSelect(row, rowIndex, evt);
    }
   } else {
    this.lastMultiSelectIndex = rowIndex;
   }
  }
 },
 IsCommandColumnItem: function(element) {
  if(!element)
   return false;
  if(_aspxElementHasCssClass(element, this.CommandColumnItemClassName))
   return true;
  if(element.tagName == "IMG" && element.parentNode.tagName == "A")
   return _aspxElementHasCssClass(element.parentNode, this.CommandColumnItemClassName);
  return false;
 },
 focusRow: function(row) {
  if(!row) return;
  var index = this.getRowIndex(row.id);
  this._setFocusedRowIndex(index);
 },
 _setFocusedRowIndex: function(visibleIndex) {
  if(visibleIndex < 0)
   visibleIndex = -1;
  if(!this.allowFocusedRow || visibleIndex == this.focusedRowIndex)
   return;
  var oldIndex = this.focusedRowIndex;
  this.focusedRowIndex = visibleIndex;
  this.ChangeFocusedRowStyle(oldIndex, false);
  this.ChangeFocusedRowStyle(this.focusedRowIndex, true);
  this._setFocusedRowInputValue();
  if(this.callbackOnFocusedRowChanged) {
   this.UpdatePostBackSyncInput(true);
   if(!this.mainTableClickData.processing) {
    this.gridCallBack(["FOCUSEDROW"]);
   } else {
    this.mainTableClickData.focusChanged = true;
   }
   return;
  }
  this.RaiseFocusedRowChanged();
 },
 ChangeFocusedRowStyle: function(visibleIndex, focused) {
  if(visibleIndex < 0) return;
  var rowStyle = -1;
  var row = this.GetRow(visibleIndex);
  if(focused && row)
   rowStyle = this._isGroupRow(row) ? 2 : 1;
  if(!focused)
   rowStyle = this._isRowSelected(visibleIndex) ? 0 : 4;
  if(rowStyle > -1)
   this.ChangeRowStyle(visibleIndex, rowStyle);
 },
 _setFocusedRowInputValue: function() {
  if(this.GetFocusedRowInput() != null) {
   this.GetFocusedRowInput().value = this.focusedRowIndex;
  }
 },
 _getFocusedRowIndex: function() {
  if(!this.allowFocusedRow) return -1;
  return this.focusedRowIndex;
 },
 getRowIndex: function(rowId) {
  if(this.IsHeaderRowID(rowId))
   return -1;
  return this.tryGetNumberFromEndOfString(rowId).value;
 },
 tryGetNumberFromEndOfString: function(str) {
  var value = -1;
  var success = false;
  var n = str.length - 1;
  while(!isNaN(parseInt(str.substr(n), 10))) {
   value = parseInt(str.substr(n), 10);
   success = true;
   n--;
  }
  return { success: success, value: value };
 },
 GetSelectedState: function() {
  if(!this.userChangedSelection) return null;
  var input = this.GetSelectionInput();
  if(!input) return null;
  return input.value;
 },
 ChangeRowStyle: function(visibleIndex, rowStyle) {
  if(this._getFocusedRowIndex() == visibleIndex && rowStyle != 1 && rowStyle != 2) return;
  var row = this.GetRow(visibleIndex);
  if(!row) return;
  if(rowStyle == 0 && this._isGroupRow(row)) return;
  var index = this._getRowIndexOnPage(visibleIndex);
  var styleRow = this._getStyleRow(index, rowStyle);
  if(!styleRow) return;
  row.className = styleRow.className;
  row.style.cssText = styleRow.style.cssText;
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && batchEditHelper.IsDeletedRow(this.GetRowKey(visibleIndex)))
   _aspxSetElementDisplay(row, false);
 },
 _getRowIndexOnPage: function(visibleIndex) {
  return visibleIndex - this.visibleStartIndex;
 },
 getColumnIndex: function(colId) {
  if(this.IsEmptyHeaderID(colId))
   return -1;
  var index = this.tryGetNumberFromEndOfString(colId).value;
  var postfix = "col" + index;
  if(colId.lastIndexOf(postfix) == colId.length - postfix.length)
   return index;
  return -1;
 },
 getColumnObject: function(colId) {
  var index = this.getColumnIndex(colId);
  return index > -1 ? this._getColumn(index) : null;
 },
 _getColumnIndexByColumnArgs: function(column) {
  column = this._getColumnObjectByArg(column);
  if(!column) return null;
  return column.index;
 },
 _getColumnObjectByArg: function(arg) {
  if(!_aspxIsExists(arg)) return null;
  if(typeof(arg) == "number") return this._getColumn(arg);
  if(_aspxIsExists(arg.index)) return arg;
  var column = this._getColumnById(arg);
  if(column) return column;
  return this._getColumnByField(arg);
 },
 _getColumnsCount: function() { return this.columns.length; },
 _getColumn: function(index) {
  if(index < 0 || index >= this.columns.length) return null;
  return this.columns[index];
 },
 _getColumnById: function(id) {
  if(!_aspxIsExists(id)) return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].id == id) return this.columns[i];
  }
  return null;
 },
 _getColumnByField: function(fieldName) {
  if(!_aspxIsExists(fieldName)) return null;
  for(var i = 0; i < this.columns.length; i++) {
   if(this.columns[i].fieldName == fieldName) return this.columns[i];
  }
  return null;
 },
 _getStyleRow: function(index, rowStyle) {
  var styleTable = this.GetStyleTable();
  if(!styleTable) return null;
  if(rowStyle < 4) return styleTable.rows[rowStyle + 2];
  return styleTable.rows[6 + index];
 },
 DoSelectionChanged: function(index, isSelected, isSelectAllOnPage){
  if(this.callbackOnSelectionChanged) {
   this.UpdatePostBackSyncInput(true);
   if(!this.mainTableClickData.processing) {
    this.gridCallBack(["SELECTION"]);
   } else {
    this.mainTableClickData.selectionChanged = true;
   }
   return;
  }
  this.RaiseSelectionChanged(index, isSelected, isSelectAllOnPage, false);
 },
 CommandCustomButton:function(id, index) {
  var processOnServer = true;
  if(!this.CustomButtonClick.IsEmpty()) {
   var e = new ASPxClientGridViewCustomButtonEventArgs(index, id);
   this.CustomButtonClick.FireEvent(this, e);
   processOnServer = e.processOnServer;
  }
  if(processOnServer)
   this.gridCallBack(["CUSTOMBUTTON", id, index]);
 },
 HeaderMouseDown: function(element, e){
  if(!_aspxGetIsLeftButtonPressed(e))
   return;
  var source = _aspxGetEventSource(e);
  if(_aspxElementCssClassContains(source, this.HeaderFilterButtonClassName))
   return;
  if(this.TryStartColumnResizing(e, element))
   return;
  var column = this._getColumnObjectByArg(this.getColumnIndex(element.id));
  var dragCanceled = this.RaiseColumnStartDragging(column);
  var canDrag = !dragCanceled && this.canDragColumn(element) && source.tagName != "IMG";
  if(!this.dragHelper)
   this.dragHelper = new ASPxClientGridViewDragHelper(this);
  var drag = this.dragHelper.CreateDrag(e, element, canDrag);
  if(!canDrag && (e.shiftKey || e.ctrlKey))
   drag.clearSelectionOnce = true;
  this.dragHelper.CreateTargets(drag, e);
 },
 TryStartColumnResizing: function(e, headerCell) {
  var helper = this.GetResizingHelper();
  if(!helper || !helper.CanStartResizing(e, headerCell))
   return false;
  var column = this.columns[helper.GetResizingColumnIndex(e, headerCell)];
  if(this.RaiseColumnResizing(column))
   return false;
  helper.StartResizing(column.index);
  return true;
 },
 OnParentRowMouseEnter: function(element) {
  if(this.GetParentRowsWindow() == null) return;
  if(this.GetParentRowsWindow().IsWindowVisible()) return;
  this.ParentRowsTimerId = _aspxSetTimeout("aspxGVParentRowsTimer(\""+this.name+"\", \"" + element.id + "\");", 500);
 },
 OnParentRowMouseLeave: function(evt) {
  _aspxClearTimer(this.ParentRowsTimerId);
  if(this.GetParentRowsWindow() == null) return;
  if(evt && evt.toElement) {
   if(_aspxGetParentByPartialId(evt.toElement, this.GetParentRowsWindow().name) != null)
     return;
  }
  this.HideParentRows();
 },
 ShowParentRows: function(element) {
  this.ParentRowsTimerId = null;
  if(this.GetParentRowsWindow() != null) {
   this.GetParentRowsWindow().ShowAtElement(element);
  }
 },
 onFilterPopupCallback: function(values) {
  var grid = aspxGetControlCollection().Get(values[0]);
  if(grid != null)
   grid.GetHeaderFilterPopup().SetContentHtml(values[1], grid.enableCallbackAnimation);
 },
 HideParentRows: function() {
  this.ParentRowsTimerId = null;
  if(this.GetParentRowsWindow() != null) {
   this.GetParentRowsWindow().Hide();
  }
 },
 canSortByColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowSort;
 },
 canGroupByColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowGroup;
 },
 canDragColumn: function(headerElement) {
  return this.getColumnObject(headerElement.id).allowDrag;
 },
 doPagerOnClick: function(id) {
  if(!_aspxIsExists(id)) return;
  this.AssignSlideAnimationDirectionByPagerArgument(id, this.pageIndex);
  if(__aspxIE && this.kbdHelper)
   this.kbdHelper.Focus();
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.ResetScrollTop();
  this.gridCallBack([this.CommandId.PagerOnClick, id]);
 },
 CanHandleGesture: function(evt) {
  var source = _aspxGetEventSource(evt);
  var table = this.GetMainTable();
  if(!table) return false;
  if(_aspxGetIsParent(table, source))
   return !this.IsHeaderChild(source);
  if(table.parentNode.tagName == "DIV" && _aspxGetIsParent(table.parentNode, source))
   return __aspxTouchUI || evt.offsetX < table.parentNode.clientWidth;
  return false;
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) &&
   (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
 },
 AllowExecuteGesture: function(value) {
  return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
 },
 ExecuteGesture: function(value, count) {
  this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function(arg) { this.doPagerOnClick(arg); }.aspxBind(this));
 },
 OnColumnFilterInputChanged: function(editor) {
  this.ApplyColumnAutoFilterCore(editor);
 },
 OnColumnFilterInputSpecKeyPress: function(editor, e) {
  if(e.htmlEvent)
   e = e.htmlEvent;
  if(e.keyCode == ASPxKey.Tab)
   return true;
  if(e.keyCode == ASPxKey.Enter) {
   _aspxPreventEventAndBubble(e);
   editor.Validate();
   if(this.allowMultiColumnAutoFilter)
    this.ApplyMultiColumnAutoFilter(editor);
   else
    this.ApplyColumnAutoFilterCore(editor);
   return true;
  }
  if(e.keyCode == ASPxKey.Delete && e.ctrlKey) {
   _aspxPreventEventAndBubble(e);
   editor.SetValue(null);
   if(!this.allowMultiColumnAutoFilter)
    this.ApplyColumnAutoFilterCore(editor);
   return true;
  }
  return false;
 },
 OnColumnFilterInputKeyPress: function(editor, e) {
  if(this.OnColumnFilterInputSpecKeyPress(editor, e))
   return;
  if(e.htmlEvent) e = e.htmlEvent;
  this.ClearAutoFilterInputTimer();
  if(editor != this.FilterKeyPressEditor)
   this.filterKeyPressInputValue = editor.GetValueString();
  this.FilterKeyPressEditor = editor;
  this.filterKeyPressTimerId = _aspxSetTimeout("aspxGVTimer(\"" + this.name + "\");", this.autoFilterDelay);
 },
 ClearAutoFilterInputTimer: function() {
  this.filterKeyPressTimerId = _aspxClearTimer(this.filterKeyPressTimerId);
 },
 GetAutoFilterEditorInputElement: function(editor) {
  if(document.activeElement) return document.activeElement;
  if(editor.GetInputElement) return editor.GetInputElement();
  return null;
 },
 OnFilterKeyPressTick: function() {
  if(this.FilterKeyPressEditor) {
   this.ApplyColumnAutoFilterCore(this.FilterKeyPressEditor);
  }
 },
 ApplyColumnAutoFilterCore: function(editor) {
  if(this.lockFilter) return;
  this.ClearAutoFilterInputTimer();
  if(this.FilterKeyPressEditor && editor == this.FilterKeyPressEditor) {
   if(this.FilterKeyPressEditor.GetValueString() == this.filterKeyPressInputValue) return;
  }
  var column = this.getColumnIndex(editor.name);
  if(column < 0) return;
  this.SaveAutoFilterActiveElement(editor);
  this.AutoFilterByColumn(column, editor.GetValueString());
 },
 ApplyMultiColumnAutoFilter: function(editor) {
  if(this.lockFilter) return;
  this.SaveAutoFilterActiveElement(editor);
  var args = [];
  var modifiedValues = this.GetModifiedAutoFilterValues();
  for(var columnIndex in modifiedValues) {
   args.push(columnIndex);
   args.push(modifiedValues[columnIndex].value);
   args.push(modifiedValues[columnIndex].filterCondition);
  }
  if(args.length > 0)
   this.gridCallBack([this.CommandId.ApplyMultiColumnFilter].concat(args));
 },
 SaveAutoFilterActiveElement: function(editor) {
  if(!editor)
   return;
  if(this.getColumnIndex(editor.name) >= 0)
   this.activeElement = this.GetAutoFilterEditorInputElement(editor);
 },
 GetModifiedAutoFilterValues: function() {
  var result = {};
  for(var i = 0; i < this.columns.length; ++i) {
   var columnIndex = this.columns[i].index;
   var editorState = this.GetAutoFilterEditorValue(columnIndex);
   var chachedEditorState = this.filterEditorState[columnIndex];
   if(chachedEditorState.value !== editorState.value || chachedEditorState.filterCondition !== editorState.filterCondition) {
    result[columnIndex] = {
     value: editorState.value != null ? editorState.value : "",
     filterCondition: editorState.filterCondition
    }
   }
  }
  return result;
 },
 FilterRowMenuButtonClick: function(columnIndex, element) {
  var menu = this.GetFilterRowMenu();
  if(!menu) return;
  var column = this._getColumn(columnIndex);
  if(!column) return;
  for(var i = menu.GetItemCount() - 1; i >= 0; i--) {
   var item = menu.GetItem(i);
   item.SetChecked(item.name.substr(0, item.name.indexOf("|")) == this.filterRowConditions[columnIndex]);
   item.SetVisible(this.GetFilterRowMenuItemVisible(item, column));
  }
  menu.ShowAtElement(element);
  this.filterRowMenuColumnIndex = columnIndex;
 },
 GetFilterRowMenuItemVisible: function(item, column) {
  if(column.filterRowTypeKind) {
   var visible = item.name.indexOf(column.filterRowTypeKind) > -1;
   if(!visible && column.showFilterMenuLikeItem)
    return item.name.indexOf("L") > -1;
   return visible;
  }
  return false;
 },
 FilterRowMenuItemClick: function(item) {
  var itemName = item.name.substr(0, item.name.indexOf("|"));
  if(this.allowMultiColumnAutoFilter) {
   this.filterRowConditions[this.filterRowMenuColumnIndex] = parseInt(itemName);
  } else {
   var args = [this.filterRowMenuColumnIndex, itemName];
   this.gridCallBack(["FILTERROWMENU"].concat(args));
  }
 },
 ShowLoadingPanel: function() {
  var gridMainCell = this.GetGridTD();
  if(!gridMainCell)
   return;
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom()) {
   var container = this.GetEndlessPagingLPContainer();
   _aspxSetElementDisplay(container, true);
   this.CreateLoadingPanelWithoutBordersInsideContainer(container);
   return;
  }
  var lpContainer = this.GetLoadingPanelContainer();
  if(lpContainer)
   this.CreateLoadingPanelInline(lpContainer);
  else
   this.CreateLoadingPanelWithAbsolutePosition(gridMainCell, this.GetLoadingPanelOffsetElement(gridMainCell));
 },
 ShowLoadingDiv: function () {
  var endlessPagingHelper = this.GetEndlessPagingHelper();
  if(endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom())
   return;
  this.CreateLoadingDiv(this.GetGridTD());
 },
 GetCallbackAnimationElement: function() {
  var table = this.GetMainTable();
  if(table && table.parentNode && table.parentNode.tagName == "DIV")
   return table.parentNode;
  return table;
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return this.IsHeaderChild(element);
 },
 IsHeaderChild: function(source) {
  var mainElement = this.GetMainElement();
  if(!mainElement)
   return false;
  if(!_aspxGetIsParent(mainElement, source))
   return false;
  var headerRowCount = this.GetHeaderMatrix().GetRowCount();
  for(var i = 0; i < headerRowCount; i++) {
   if(_aspxGetIsParent(this.GetHeaderRow(i), source))
    return true;
  }
  return false;
 },
 _updateEdit: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper && !batchEditHelper.CanUpdate())
   return;
  if(!batchEditHelper && !this._validateEditors())
   return;
  if(batchEditHelper)
   batchEditHelper.OnUpdate();
  this.gridCallBack(["UPDATEEDIT"]);
 },
 _validateEditors: function() {
  var editors = this._getEditors();
  var isValid = true;
  if(editors.length > 0)
   isValid &= this._validate(editors);
  if(window.ASPxClientEdit)
   isValid &= ASPxClientEdit.ValidateEditorsInContainer(this.GetEditFormTable(), this.name);
  return isValid;
 },
 _validate: function(list) {
  var isValid = true;
  var firstInvalid = null;
  var edit;
  for(var i = 0; i < list.length; i ++) {
   edit = list[i];
   edit.Validate();
   isValid = edit.GetIsValid() && isValid;
   if(firstInvalid == null && edit.setFocusOnError && !edit.GetIsValid())
    firstInvalid = edit;
  }
  if (firstInvalid != null)
   firstInvalid.Focus();
  return isValid;
 },
 _getEditors: function() {
  var list = [ ];
  for(var i = 0; i < this.editorIDList.length; i++) {
   var editor = aspxGetControlCollection().Get(this.editorIDList[i]);
   if(editor && editor.enabled && editor.GetMainElement && _aspxIsExistsElement(editor.GetMainElement())) {
    if(!editor.Validate) continue;
    list.push(editor);
   }
  }
  return list;
 },
 GetEditorValues: function() {
  if(this.allowBatchEditing) return null;
  var list = this._getEditors();
  if(list.length == 0) return null;
  var res = list.length + ";";
  for(var i = 0; i < list.length; i ++) {
   res += this.GetEditorValue(list[i]);
  }
  return res;
 },
 GetEditorValue: function(editor) {
  var value = editor.GetValueString();
  var valueLength = -1;
  if(!_aspxIsExists(value)) {
   value = "";
  } else {
   value = value.toString();
   valueLength = value.length;
  }
  return this.GetEditorIndex(editor.name) + "," + valueLength + "," + value + ";";
 },
 GetEditorIndex: function(editorId) {
  var i = editorId.lastIndexOf(this.GetEditorPrefix());
  if(i < 0) return -1;
  var result = editorId.substr(i + this.GetEditorPrefix().length);
  i = result.indexOf('_');
  return i > 0
   ? result.substr(0, i)
   : result;
 },
 GetBatchEditHelper: function() {
  if(!this.allowBatchEditing) return null;
  if(!this.batchEditHelper)
   this.batchEditHelper = this.CreateBatchEditHelper();
  return this.batchEditHelper;
 },
 CreateBatchEditHelper: function(){
  return new ASPxClientGridViewBatchEditHelper(this);
 },
 GetTableHelper: function() {
  if(!this.tableHelper && typeof(ASPxClientGridViewTableHelper) != "undefined")
   this.tableHelper = new ASPxClientGridViewTableHelper(this, this.MainTableID, this.HeaderTableID, this.FooterTableID, this.horzScroll, this.vertScroll);
  return this.tableHelper;
 },
 GetScrollHelper: function() {
  if(!this.HasScrolling()) return null;
  if(!this.scrollableHelper)
   this.scrollableHelper = new ASPxClientGridViewTableScrollHelper(this.GetTableHelper());
  return this.scrollableHelper;
 },
 GetFixedColumnsHelper: function() {
  if(!this.GetFixedColumnsDiv()) return null;
  if(!this.fixedColumnsHelper)
   this.fixedColumnsHelper = new ASPxClientTableFixedColumnsHelper(this.GetTableHelper(), this.FixedColumnsDivID, this.FixedColumnsContentDivID, this.fixedColumnCount);
  return this.fixedColumnsHelper;
 },
 GetResizingHelper: function() {
  if(!this.AllowResizing()) return null;
  if(!this.resizingHelper)
   this.resizingHelper = new ASPxClientGridViewTableResizingHelper(this.GetTableHelper());
  return this.resizingHelper;
 },
 GetEndlessPagingHelper: function() {
  if(!this.useEndlessPaging) return null;
  if(!this.endlessPagingHelper)
   this.endlessPagingHelper = new ASPxClientGridViewEndlessPagingHelper(this);
  return this.endlessPagingHelper;
 },
 IsLastCallbackProcessedAsEndless: function() {
  var helper = this.GetEndlessPagingHelper();
  return helper && helper.endlessCallbackComplete;
 },
 GetHeaderMatrix: function() {
  if(!this.headerMatrix)
   this.headerMatrix = new ASPxClientGridViewHeaderMatrix(this);
  return this.headerMatrix;
 },
 UpdateScrollableControls: function() {
  var helper = this.GetScrollHelper();
  if(helper)
   helper.Update();
 },
 ValidateColumnWidths: function() {
  var helper = this.GetResizingHelper();
  if(helper)
   helper.ValidateColumnWidths();
 },
 SetHeadersClientEvents: function() {
  if(!this.AllowResizing())
   return;
  var helper = this.GetResizingHelper();
  var attachMouseMove = function(headerCell) {
   _aspxAttachEventToElement(headerCell, "mousemove", function(e) { helper.UpdateCursor(e, headerCell); });
  };
  for(var i = 0; i < this.columns.length; i++) {
   var header = this.GetHeader(this.columns[i].index);
   if(header)
    attachMouseMove(header);
  }
 },
 OnBrowserWindowResize: function(e) {
  if(this.AllowResizing() && !this.HasScrolling())
   this.GetResizingHelper().ValidateColumnWidths();
  this.AdjustControl();
 },
 UpdatePostBackSyncInput: function(isChangedNotification) {
  var input = this.GetPostBackSyncInput();
  if(!input) return;
  var selectedIndex = isChangedNotification ? -1 : this.lastMultiSelectIndex;
  ASPxSimpleHiddenField.Set("SI", selectedIndex, input);
 },
 ApplyPostBackSyncData: function() {
  var savedState = ASPxSimpleHiddenField.Get("SI", this.GetPostBackSyncInput());
  if(savedState && savedState.length > 0)
   this.lastMultiSelectIndex = Number(savedState);
 },
 EnsureVisibleRowFromServer: function() {
  if(this.scrollToRowIndex < 0) return;
  this.MakeRowVisible(this.scrollToRowIndex);
  this.scrollToRowIndex = -1;
 },
 EnsureRowHotTrackItems: function() {
  if(this.rowHotTrackStyle == null) return;
  var list = [ ];
  for(var i = 0; i < this.pageRowCount; i++) {
   var index = i + this.visibleStartIndex;
   if(this.rowHotTrackItemsBag[index]) continue;
   list.push(this.DataRowID + index);
   this.rowHotTrackItemsBag[index] = true;
  }
  if(list.length > 0) {
   aspxAddHoverItems(this.name, [
    [
     [this.rowHotTrackStyle[0]],
     [this.rowHotTrackStyle[1]],
     list
    ]
   ]);
  }
 },
 UpdateIndentCellWidths: function() {
  if(this.indentColumnCount <= 0)
   return;
  if(this.HasScrolling() || this.AllowResizing())
   this.GetTableHelper().UpdateIndentCellWidths();
 },
 OnContextMenuClick: function(e) {
  var args = this.GetContextMenuArgs(e);
  if(!args.objectType && !this.HasAnyContextMenu())
   return true;
  var menu = this.GetPreparedContextMenu(args);
  var showBrowserMenu = this.RaiseContextMenu(args.objectType, args.index, e, menu);
  if(menu && !showBrowserMenu) {
   menu.ShowInternal(e);
   return false;
  }
  return showBrowserMenu;
 },
 HasAnyContextMenu: function() {
  return this.GetGroupPanelContextMenu() || this.GetColumnContextMenu() || this.GetRowContextMenu() || this.GetFooterContextMenu();
 },
 GetPreparedContextMenu: function(args) {
  var menuName = this.name + "_DXContextMenu_";
  var menu = null;
  switch(args.objectType) {
   case "grouppanel":
    menu = this.GetGroupPanelContextMenu();
    break;
   case "header":
   case "emptyheader":
    menu = this.GetColumnContextMenu();
    break;
   case "row":
   case "grouprow":
   case "emptyrow":
    menu = this.GetRowContextMenu();
    break;
   case "footer":
    menu = this.GetFooterContextMenu();
    break;
  }
  if(menu)
   this.ActivateContextMenuItems(menu, args);
  return menu;
 },
 GetContextMenuArgs: function(e) {
  var objectTypes = { };
  objectTypes[this.name + "_" + "grouppanel"]        = "grouppanel";
  objectTypes[this.name + this.HeaderRowID]          = "emptyheader";
  objectTypes[this.name + "_" + "col"]         = "header";
  objectTypes[this.name + this.CustomizationWindowSuffix + "_" + "col"]   = "header";
  objectTypes[this.name + "_" + "groupcol"]          = "header";
  objectTypes[this.name + "_" + this.DataRowID]         = "row";
  objectTypes[this.name + "_" + this.DetailRowID]       = "row";
  objectTypes[this.name + "_" + this.EmptyDataRowID]       = "emptyrow";
  objectTypes[this.name + "_" + this.GroupRowID]        = "grouprow";
  objectTypes[this.name + "_" + this.GroupRowID + "Exp"]      = "grouprow";
  objectTypes[this.name + "_" + this.FooterRowID]       = "footer";
  objectTypes[this.name + "_" + this.FilterRowID]       = "filterrow";
  var src = _aspxGetEventSource(e);
  var element = src;
  while(element && element.tagName !== "BODY") {
   var id = element.id;
   element = element.parentNode;
   if(!id) continue;
   var indexInfo = this.tryGetNumberFromEndOfString(id);
   var index = indexInfo.success ? indexInfo.value : "";
   for(var partialID in objectTypes) {
    if(id == partialID + index) {
     var type = objectTypes[partialID];
     if(type == "footer") {
      index = this.GetFooterCellIndex(src);
      if(!_aspxIsExists(index))
       return { objectType: null, index: -1 };
     } else if(type == "emptyheader" || type == "grouppanel" || type == "emptyrow") {
      index = this.EmptyElementIndex;
     }
     return { objectType: type, index: index };
    }
   }
  }
  return { objectType: null, index: -1 };
 },
 GetFooterCellIndex: function(element) {
  var footerRowName = this.name + "_" + this.FooterRowID;
  while(element.parentNode.id !== footerRowName) {
   if(element.tagName == "BODY")
    return -1;
   element = element.parentElement;
  }
  var matrix = this.GetHeaderMatrix();
  var leafIndex = element.cellIndex - this.GetFooterIndentCount(element.parentNode);
  return matrix.GetLeafIndices()[leafIndex];
 },
 GetFooterIndentCount: function(footerElement) {
  return footerElement.getElementsByClassName("dxgvIndentCell").length;
 },
 ActivateContextMenuItems: function(menu, args) {
  menu.elementInfo = args;
  this.SyncMenuItemsInfoSettings(menu, args.index, menu.cpItemsInfo);
 },
 SyncMenuItemsInfoSettings: function(menu, groupElementIndex, itemsInfo) {
  for(var i = 0; i < menu.GetItemCount() ; ++i) {
   var item = menu.GetItem(i);
   var itemInfo = itemsInfo[item.indexPath];
   var visible = false, enabled = false, checked = false;
   visible = this.GetItemServerState(itemInfo[0], groupElementIndex);
   enabled = this.GetItemServerState(itemInfo[1], groupElementIndex);
   checked = this.GetItemServerState(itemInfo[2], groupElementIndex);
   if(item.name === this.ContextMenuItems.ShowCustomizationWindow)
    checked = this.IsCustomizationWindowVisible();
   item.SetVisible(visible);
   this.SetContextMenuItemEnabled(item, enabled);
   item.SetChecked(checked);
   if(visible && enabled && !checked)
    this.SyncMenuItemsInfoSettings(item, groupElementIndex, itemsInfo);
  }
 },
 SetContextMenuItemEnabled: function(item, enabled) {
  item.SetEnabled(enabled);
  var imageElement = item.GetImage();
  if(!_aspxIsExists(imageElement))
   return;
  var itemImageClassName = this.FindContextMenuItemImageClass(imageElement);
  if(!itemImageClassName)
   return;
  var imageEnabled = itemImageClassName.indexOf("Disabled") == -1;
  if(enabled) {
   if(!imageEnabled)
    this.UpdateContextMenuImageClass(imageElement, itemImageClassName, itemImageClassName.replace("Disabled", ""));
  } else if(imageEnabled) {
   var mask = this.ContextMenuItemImageMask + item.name;
   var add = itemImageClassName.replace(mask, mask + "Disabled");
   this.UpdateContextMenuImageClass(imageElement, itemImageClassName, add);
  }
 },
 UpdateContextMenuImageClass: function(imageElement, remove, add) {
  _aspxRemoveClassNameFromElement(imageElement, remove);
  _aspxAddClassNameToElement(imageElement, add);
 },
 FindContextMenuItemImageClass: function(imageElement) {
  var regExp = new RegExp(this.ContextMenuItemImageMask + "\\w+\\b");
  var itemImageClassName = imageElement.className.match(regExp);
  if(!itemImageClassName || !itemImageClassName.length)
   return null;
  return itemImageClassName[0];
 },
 GetContextMenuItemChecked: function(item) {
  var itemInfo = item.menu.cpItemsInfo[item.indexPath];
  var elementIndex = item.menu.elementInfo.index;
  return this.GetItemServerState(itemInfo[2], elementIndex);
 },
 GetItemServerState: function(itemInfo,
  groupElementIndex) {
  var saveVisible = !!itemInfo[0];
  var indices = itemInfo.length === 1 ? [ ] : itemInfo[1];
  return _aspxArrayIndexOf(indices, groupElementIndex) > -1 ? saveVisible : !saveVisible;
 },
 OnContextMenuItemClick: function(e) {
  var elementInfo = e.item.menu.elementInfo;
  var itemsInfo = e.item.menu.cpItemsInfo;
  this.clickedMenuItem = e.item;
  if(this.RaiseContextMenuItemClick(e, elementInfo))
   return true;
  switch(e.item.name) {
   case this.ContextMenuItems.FullExpand:
    this.ExpandAll();
    break;
   case this.ContextMenuItems.FullCollapse:
    this.CollapseAll();
    break;
   case this.ContextMenuItems.SortAscending:
    this.SortBy(elementInfo.index, "ASC", false);
    break;
   case this.ContextMenuItems.SortDescending:
    this.SortBy(elementInfo.index, "DSC", false);
    break;
   case this.ContextMenuItems.ClearSorting:
    this.SortBy(elementInfo.index, "NONE", false);
    break;
   case this.ContextMenuItems.ClearGrouping:
    this.ContextMenuClearGrouping();
    break;
   case this.ContextMenuItems.ShowFilterBuilder:
    this.ShowFilterControl();
    break;
   case this.ContextMenuItems.ShowFilterRow:
    this.ContextMenuShowFilterRow(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.ClearFilter:
    this.AutoFilterByColumn(this.GetColumn(elementInfo.index));
    break;
   case this.ContextMenuItems.ShowFilterRowMenu:
    this.ContextMenuShowFilterRowMenu(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.GroupByColumn:
    this.GroupBy(elementInfo.index);
    break;
   case this.ContextMenuItems.UngroupColumn:
    this.UnGroup(elementInfo.index);
    break;
   case this.ContextMenuItems.ShowGroupPanel:
    this.ContextMenuShowGroupPanel(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.ShowCustomizationWindow:
    if(!this.IsCustomizationWindowVisible())
     this.ShowCustomizationWindow();
    else
     this.HideCustomizationWindow();
    break;
   case this.ContextMenuItems.ShowFooter:
    this.ContextMenuShowFooter(!this.GetContextMenuItemChecked(e.item));
    break;
   case this.ContextMenuItems.ExpandRow:
    this.ExpandRow(elementInfo.index);
    break;
   case this.ContextMenuItems.CollapseRow:
    this.CollapseRow(elementInfo.index);
    break;
   case this.ContextMenuItems.ExpandDetailRow:
    this.ExpandDetailRow(elementInfo.index);
    break;
   case this.ContextMenuItems.CollapseDetailRow:
    this.CollapseDetailRow(elementInfo.index);
    break;
   case this.ContextMenuItems.NewRow:
    this.AddNewRow();
    break;
   case this.ContextMenuItems.EditRow:
    this.StartEditRow(elementInfo.index);
    break;
   case this.ContextMenuItems.DeleteRow:
    this.DeleteGridRow(elementInfo.index);
    break;
   case this.ContextMenuItems.Refresh:
    this.Refresh();
    break;
   case this.ContextMenuItems.HideColumn:
    var groupped = _aspxIsExists(this.GetHeader(elementInfo.index, true));
    this.MoveColumn(elementInfo.index, -1, false, false, groupped);
    break;
   case this.ContextMenuItems.ShowColumn:
    this.MoveColumn(elementInfo.index, elementInfo.index);
    break;
   case this.ContextMenuItems.SummarySum:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 0);
    break;
   case this.ContextMenuItems.SummaryMin:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 1);
    break;
   case this.ContextMenuItems.SummaryMax:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 2);
    break;
   case this.ContextMenuItems.SummaryCount:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 3);
    break;
   case this.ContextMenuItems.SummaryAverage:
    this.ContextMenuSetSummary(e.item, elementInfo.index, 4);
    break;
  }
 },
 RaiseContextMenuItemClick: function(e, itemInfo) {
  if(this.ContextMenuItemClick.IsEmpty())
   return false;
  var args = new ASPxClientGridViewContextMenuItemClickEventArgs(e.item, itemInfo.objectType, itemInfo.index);
  this.ContextMenuItemClick.FireEvent(this, args);
  if(!args.handled && args.processOnServer) {
   this.ProcessCustomContextMenuItemClick(e.item, args.usePostBack);
   return true;
  }
  return args.handled;
 },
 GetContextMenuTypeString: function(menu) {
  switch(menu.cpType) {
   case 0:
    return "GroupPanel";
   case 1:
    return "Column";
   case 2:
    return "Row";
   case 3:
    return "Footer";
  }
  return "";
 },
 ProcessCustomContextMenuItemClick: function(item, usePostBack) {
  if(usePostBack) {
   this.clickedMenuItem = null;
   var menu = item.menu;
   this.gridPostBack([this.CommandId.ContextMenu, "ItemClick", menu.cpType, item.indexPath, menu.elementInfo.index]);
  } else {
   this.gridCallBack("");
  }
 },
 ContextMenuShowGroupPanel: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowGroupPanel", show ? 1 : 0]);
 },
 ContextMenuShowFilterRow: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowFilterRow", show ? 1 : 0]);
 },
 ContextMenuShowFilterRowMenu: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowFilterRowMenu", show ? 1 : 0]);
 },
 ContextMenuShowFooter: function(show) {
  this.gridCallBack([this.CommandId.ContextMenu, "ShowFooter", show ? 1 : 0]);
 },
 ContextMenuClearGrouping: function() {
  this.gridCallBack([this.CommandId.ContextMenu, "ClearGrouping"]);
 },
 ContextMenuSetSummary: function(item, index, typeSummary) {
  var clearSummary = this.GetContextMenuItemChecked(item) ? 1 : 0;
  this.gridCallBack([this.CommandId.ContextMenu, "SetSummary", index, typeSummary, clearSummary]);
 },
 ContextMenuClearSummary: function(index, typeSummary) {
  this.gridCallBack([this.CommandId.ContextMenu, "ClearSummary", index]);
 },
 Focus: function() {
  if(this.kbdHelper)
   this.kbdHelper.Focus();
 },
 PerformCallback: function(args){
  if(!_aspxIsExists(args)) args = "";
  this.gridCallBack([this.CommandId.CustomCallback, args]);
 },
 GetValuesOnCustomCallback: function(args, onCallBack) {
  this.gridFuncCallBack([this.CommandId.CustomValues, args], onCallBack);
 },
 GotoPage: function(pageIndex){
  if(this.useEndlessPaging)
   return;
  this.gridCallBack([this.CommandId.GotoPage, pageIndex]);
 },
 GetPageIndex: function(){
  return this.pageIndex;
 },
 GetPageCount: function(){
  return this.pageCount;
 },
 NextPage: function(){
  this.gridCallBack([this.CommandId.NextPage]);
 },
 PrevPage: function(focusBottomRow){
  if(this.useEndlessPaging)
   return;
  this.gridCallBack([this.CommandId.PreviousPage, focusBottomRow ? "T" : "F"]);
 },
 UnGroup: function(column){
  column = this._getColumnIndexByColumnArgs(column);
  this.GroupBy(column, -1);
 },
 ExpandAll: function(){
  this.gridCallBack([this.CommandId.ExpandAll]);
 },
 CollapseAll: function(){
  this.gridCallBack([this.CommandId.CollapseAll]);
 },
 ExpandAllDetailRows: function(){
  this.gridCallBack([this.CommandId.ShowAllDetail]);
 },
 CollapseAllDetailRows: function(){
  this.gridCallBack([this.CommandId.HideAllDetail]);
 },
 ExpandRow: function(visibleIndex, recursive){
  if(this.RaiseRowExpanding(visibleIndex)) return;
  recursive = !!recursive;
  this.gridCallBack([this.CommandId.ExpandRow, visibleIndex, recursive]);
 },
 CollapseRow: function(visibleIndex, recursive){
  if(this.RaiseRowCollapsing(visibleIndex)) return;
  recursive = !!recursive;
  this.gridCallBack([this.CommandId.CollapseRow, visibleIndex, recursive]);
 },
 MakeRowVisible: function(visibleIndex) {
  if(!this.HasVertScroll()) return;
  var row = this.GetRow(visibleIndex);
  if(row == null && visibleIndex >= this.visibleStartIndex
   && visibleIndex < this.visibleStartIndex + this.pageRowCount) {
   row = this.GetEditingRow(this);
  }
  if(row == null) return;
  this.GetScrollHelper().MakeRowVisible(row);
 },
 ExpandDetailRow: function(visibleIndex){
  var key = this.GetRowKey(visibleIndex);
  if(key == null) return;
  if(this.RaiseDetailRowExpanding(visibleIndex)) return;
  this.gridCallBack([this.CommandId.ShowDetailRow, key]);
 },
 CollapseDetailRow: function(visibleIndex){
  var key = this.GetRowKey(visibleIndex);
  if(key == null) return;
  if(this.RaiseDetailRowCollapsing(visibleIndex)) return;
  this.gridCallBack([this.CommandId.HideDetailRow, key]);
 },
 GetRowKey: function(visibleIndex) {
  var arrayIndex = visibleIndex - this.visibleStartIndex;
  if(arrayIndex < 0 || arrayIndex > this.keys.length - 1)
   return null;
  var key = this.keys[arrayIndex];
  if(key == "/^DXN")
   key = null;
  return key;
 },
 StartEditRow: function(visibleIndex) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.StartEditRow(visibleIndex);
   return;
  }
  var key = this.GetRowKey(visibleIndex);
  if(key != null)
   this.StartEditRowByKey(key);
 },
 StartEditRowByKey: function(key) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.StartEditRowByKey(key);
   return;
  }
  this.gridCallBack([this.CommandId.StartEdit, key]);
 },
 IsEditing: function() {
  return this.editState > 0;
 },
 IsNewRowEditing: function() {
  return this.editState > 1;
 },
 IsNewRowAtBottom: function() {
  return this.editState == 3;
 },
 UpdateEdit: function(){
  this._updateEdit();
 },
 CancelEdit: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.CancelEdit();
   return;
  }
  this.gridCallBack([this.CommandId.CancelEdit]);
 },
 AddNewRow: function(){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.AddNewRow();
   return;
  }
  this.gridCallBack([this.CommandId.AddNewRow]);
 },
 DeleteRow: function(visibleIndex){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.DeleteRow(visibleIndex);
   return;
  }
  var key = this.GetRowKey(visibleIndex);
  if(key != null)
   this.DeleteRowByKey(key);
 },
 DeleteRowByKey: function(key) {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper) {
   batchEditHelper.DeleteRowByKey(key);
   return;
  }
  this.gridCallBack([this.CommandId.DeleteRow, key]);
 },
 Refresh: function(){
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   batchEditHelper.CancelEdit();
  this.gridCallBack([this.CommandId.Refresh]);
 },
 ApplyFilter: function(expression){
  expression = expression || "";
  this.gridCallBack([this.CommandId.ApplyFilter, expression]);
 },
 ClearFilter: function () {
  this.ClearAutoFilterState();
  this.ApplyFilter();
 },
 GetAutoFilterEditor: function(column) {
  var index = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(index)) return null;
  return aspxGetControlCollection().Get(this.name + "_DXFREditorcol" + index);
 },
 AutoFilterByColumn: function(column, val){
  var index = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(index)) return;
  if(!_aspxIsExists(val)) val = "";
  this.gridCallBack([this.CommandId.ApplyColumnFilter, index, val]);
 },
 ApplyHeaderFilterByColumn: function(){
  this.GetHeaderFilterPopup().Hide();
  var listBox = this.GetHeaderFilterListBox();
  var column = this.GetColumn(listBox.cpGVColumnIndex);
  if(!column) return;
  var values = listBox.GetSelectedValues();
  this.gridCallBack([this.CommandId.ApplyHeaderColumnFilter, column.index, _aspxToJson(values)]);
 },
 GroupBy: function(column, groupIndex, sortOrder){
  if(this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
  column = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(groupIndex)) groupIndex = "";
  if(!_aspxIsExists(sortOrder)) sortOrder = "ASC";
  this.gridCallBack([this.CommandId.Group, column, groupIndex, sortOrder]);
 },
 SortBy: function(column, sortOrder, reset, sortIndex){
  if(this.RaiseColumnSorting(this._getColumnObjectByArg(column))) return;
  column = this._getColumnIndexByColumnArgs(column);
  if(!_aspxIsExists(sortIndex)) sortIndex = "";
  if(!_aspxIsExists(sortOrder)) sortOrder = "";
  if(!_aspxIsExists(reset)) reset = true;
  this.gridCallBack([this.CommandId.Sort, column, sortIndex, sortOrder, reset]);
 },
 MoveColumn: function(column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup){
  if(!_aspxIsExists(column)) return;
  if(!_aspxIsExists(columnMoveTo)) columnMoveTo = -1;
  if(!_aspxIsExists(moveBefore)) moveBefore = true;
  if(!_aspxIsExists(moveToGroup)) moveToGroup = false;
  if(!_aspxIsExists(moveFromGroup)) moveFromGroup = false;
  if(moveToGroup) {
   if(this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
  }
  column = this._getColumnIndexByColumnArgs(column);
  this.gridCallBack([this.CommandId.ColumnMove, column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup]);
 },
 GetFocusedRowIndex: function() {
  return this._getFocusedRowIndex();
 },
 SetFocusedRowIndex: function(visibleIndex) {
  return this._setFocusedRowIndex(visibleIndex);
 },
 IsCustomizationWindowVisible: function(){
  var custWindow = this.GetCustomizationWindow();
  return custWindow != null && custWindow.IsVisible();
 },
 ShowCustomizationWindow: function(showAtElement){
  var custWindow = this.GetCustomizationWindow();
  if(!showAtElement) showAtElement = this.GetMainElement();
  custWindow.ShowAtElement(showAtElement);
 },
 HideCustomizationWindow: function(){
  var custWindow = this.GetCustomizationWindow();
  if(custWindow != null) custWindow.Hide();
 },
 SelectRows: function(visibleIndices, selected){
  if(!_aspxIsExists(selected)) selected = true;
  if(!_aspxIsExists(visibleIndices)) {
   selected = selected ? "all" : "unall";
   visibleIndices = [ ];
  } else {
   if(visibleIndices.constructor != Array)
    visibleIndices = [visibleIndices];
  }
  this.gridCallBack([this.CommandId.SelectRows, selected].concat(visibleIndices));
 },
 SelectRowsByKey: function(keys, selected){
  if(!_aspxIsExists(selected)) selected = true;
  if(!_aspxIsExists(keys)) return;
  if(keys.constructor != Array)
   keys = [keys];
  this.gridCallBack([this.CommandId.SelectRowsKey, selected].concat(keys));
 },
 UnselectRowsByKey: function(keys){
  this.SelectRowsByKey(keys, false);
 },
 UnselectRows: function(visibleIndices){
  this.SelectRows(visibleIndices, false);
 },
 UnselectFilteredRows: function() {
  this.gridCallBack([this.CommandId.SelectRows, "unallf"]);
 },
 SelectRowOnPage: function(visibleIndex, selected){
  if(!_aspxIsExists(selected)) selected = true;
  this.SelectRow(visibleIndex, selected);
 },
 UnselectRowOnPage: function(visibleIndex){
  this.SelectRowOnPage(visibleIndex, false);
 },
 SelectAllRowsOnPage: function(selected){
  if(!_aspxIsExists(selected)) selected = true;
  this._selectAllRowsOnPage(selected);
 },
 UnselectAllRowsOnPage: function(){
  this._selectAllRowsOnPage(false);
 },
 GetSelectedRowCount: function() {
  return this._getSelectedRowCount();
 },
 GetSelectedFilteredRowCount: function(){
  return this._getSelectedFilteredRowCount();
 },
 GetSelectedFieldValues: function(fieldNames, onCallBack) {
  this.gridFuncCallBack([this.CommandId.SelFieldValues, fieldNames], onCallBack);
 },
 GetSelectedKeysOnPage: function() {
  var keys = [];
  for(var i = 0; i < this.pageRowCount; i++) {
   if(this._isRowSelected(this.visibleStartIndex + i))
    keys.push(this.keys[i]);
  }
  return keys;
 },
 IsRowSelectedOnPage: function(visibleIndex) {
  return this._isRowSelected(visibleIndex);
 },
 GetRowValues: function(visibleIndex, fieldNames, onCallBack) {
  this.gridFuncCallBack([this.CommandId.RowValues, visibleIndex, fieldNames], onCallBack);
 },
 GetPageRowValues: function(fieldNames, onCallBack) {
  this.gridFuncCallBack([this.CommandId.PageRowValues, fieldNames], onCallBack);
 },
 GetVisibleRowsOnPage: function() {
  var batchEditHelper = this.GetBatchEditHelper();
  if(batchEditHelper)
   return batchEditHelper.GetVisibleRowsOnPageCount();
  return this.pageRowCount;
 },
 GetTopVisibleIndex: function() {
  return this.visibleStartIndex;
 },
 IsGroupRow: function(visibleIndex) {
  return this.GetGroupRow(visibleIndex) != null;
 },
 IsDataRow: function(visibleIndex) {
  return this.GetDataRow(visibleIndex) != null;
 },
 IsGroupRowExpanded: function(visibleIndex) {
  return this.GetExpandedGroupRow(visibleIndex) != null;
 },
 GetColumnsCount: function() {
  return this._getColumnsCount();
 },
 GetColumn: function(index) {
  return this._getColumn(index);
 },
 GetColumnById: function(id) {
  return this._getColumnById(id);
 },
 GetColumnByField: function(fieldName) {
  return this._getColumnByField(fieldName);
 },
 GetEditor: function(column) {
  var columnObject = this._getColumnObjectByArg(column);
  return columnObject != null ? this.GetEditorByColumnIndex(columnObject.index) : null;
 },
 FocusEditor: function(column) {
  var editor = this.GetEditor(column);
  if(editor && editor.SetFocus) {
   editor.SetFocus();
  }
 },
 GetEditValue: function(column) {
  var editor = this.GetEditor(column);
  return editor != null && editor.enabled ? editor.GetValue() : null;
 },
 SetEditValue: function(column, value) {
  var editor = this.GetEditor(column);
  if(editor != null && editor.enabled) {
   editor.SetValue(value);
  }
 },
 ShowFilterControl: function() {
  this.PreventCallbackAnimation();
  this.gridCallBack([this.CommandId.ShowFilterControl]);
 },
 CloseFilterControl: function() {
  this.PreventCallbackAnimation();
  this.HideFilterControlPopup();
  this.gridCallBack([this.CommandId.CloseFilterControl]);
 },
 HideFilterControlPopup: function() {
  var popup = this.GetFilterControlPopup();
  if(popup) popup.Hide();
 },
 ApplyFilterControl: function() {
  this.PreventCallbackAnimation();
  var fc = this.GetFilterControl();
  if(fc == null) return;
  if(!this.callBacksEnabled)
   this.HideFilterControlPopup();
  if(!fc.isApplied)
   fc.Apply(this);
 },
 SetFilterEnabled: function(isFilterEnabled) {
  this.gridCallBack([this.CommandId.SetFilterEnabled, isFilterEnabled]);
 },
 SetWidth: function(width) {
  var mainElemnt = this.GetMainElement();
  if(!_aspxIsExistsElement(mainElemnt) || mainElemnt.offsetWidth === width) return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.OnSetWidth(width);
  this.ResetControlAdjustment();
  this.constructor.prototype.SetWidth.call(this, width);
 },
 SetHeight: function(height) {
  var mainElemnt = this.GetMainElement();
  if(!_aspxIsExistsElement(mainElemnt)) return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHeight(height);
 },
 GetVertScrollPos: function() {
  return this.GetVerticalScrollPosition();
 },
 GetVerticalScrollPosition: function() {
  if(this.isVirtualScrolling)
   return 0;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetVertScrollPosition();
  return 0;
 },
 GetHorzScrollPos: function() {
  return this.GetHorizontalScrollPosition();
 },
 GetHorizontalScrollPosition: function() {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   return scrollHelper.GetHorzScrollPosition();
  return 0;
 },
 SetVertScrollPos: function(value) {
  this.SetVerticalScrollPosition(value);
 },
 SetVerticalScrollPosition: function(value) {
  if(this.isVirtualScrolling)
   return;
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetVertScrollPosition(value);
 },
 SetHorzScrollPos: function(value) {
  this.SetHorizontalScrollPosition(value);
 },
 SetHorizontalScrollPosition: function(value) {
  var scrollHelper = this.GetScrollHelper();
  if(scrollHelper)
   scrollHelper.SetHorzScrollPosition(value);
 },
 RaiseSelectionChangedOutOfServer: function() {
  this.RaiseSelectionChanged(-1, false, false, true);
 },
 RaiseSelectionChanged: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer) {
  if(!this.SelectionChanged.IsEmpty()){
   var args = new ASPxClientGridViewSelectionEventArgs(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer);
   this.SelectionChanged.FireEvent(this, args);
   if(args.processOnServer) {
    this.gridCallBack(["SELECTION"]);
   }
  }
  return false;
 },
 RaiseFocusedRowChanged: function() {
  if(!this.FocusedRowChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(false);
   this.FocusedRowChanged.FireEvent(this, args);
   if(args.processOnServer) {
    this.gridCallBack(["FOCUSEDROW"]);
   }
  }
  return false;
 },
 RaiseColumnSorting: function(column) {
  if(!this.ColumnSorting.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnSorting.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseColumnGrouping: function(column) {
  if(!this.ColumnGrouping.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnGrouping.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseColumnStartDragging: function(column) {
  if(!this.ColumnStartDragging.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnStartDragging.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseColumnResizing: function(column) {
  if(!this.ColumnResizing.IsEmpty()){
   var args = new ASPxClientGridViewColumnCancelEventArgs(column);
   this.ColumnResizing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseColumnResized: function(column) {
  if(!this.ColumnResized.IsEmpty()){
   var args = new ASPxClientGridViewColumnProcessingModeEventArgs(column);
   this.ColumnResized.FireEvent(this, args);
   if(args.processOnServer)
    this.Refresh();
  }
 },
 RaiseRowExpanding: function(visibleIndex) {
  if(!this.RowExpanding.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.RowExpanding.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseRowCollapsing: function(visibleIndex) {
  if(!this.RowCollapsing.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.RowCollapsing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseDetailRowExpanding: function(visibleIndex) {
  if(!this.DetailRowExpanding.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.DetailRowExpanding.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseDetailRowCollapsing: function(visibleIndex) {
  if(!this.DetailRowCollapsing.IsEmpty()){
   var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
   this.DetailRowCollapsing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseRowClick: function(visibleIndex, htmlEvent) {
  if(!this.RowClick.IsEmpty()){
   var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
   this.RowClick.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseRowDblClick: function(visibleIndex, htmlEvent) {
  if(!this.RowDblClick.IsEmpty()){
   _aspxClearSelection();
   var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
   this.RowDblClick.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseContextMenu: function(objectType, index, htmlEvent, menu, showBrowserMenu) {
  var args = new ASPxClientGridViewContextMenuEventArgs(objectType, index, htmlEvent, menu, showBrowserMenu);
  if(!this.ContextMenu.IsEmpty())
   this.ContextMenu.FireEvent(this, args);
  return !!args.showBrowserMenu;
 },
 RaiseCustomizationWindowCloseUp: function() {
  if(!this.CustomizationWindowCloseUp.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CustomizationWindowCloseUp.FireEvent(this, args);
  }
  return false;
 },
 RaiseColumnMoving: function(targets) {
  if(this.ColumnMoving.IsEmpty()) return;
  var srcColumn = this.getColumnObject(targets.obj.id);
  var destColumn = this.getColumnObject(targets.targetElement.id);
  var isLeft = targets.isLeftPartOfElement();
  var isGroupPanel = targets.targetElement == targets.grid.GetGroupPanel();
  var args = new ASPxClientGridViewColumnMovingEventArgs(srcColumn, destColumn, isLeft, isGroupPanel);
  this.ColumnMoving.FireEvent(this, args);
  if(!args.allow) {
   targets.targetElement = null;
  }
 },
 RaiseBatchEditConfirmShowing: function(requestTriggerID) {
  if(!this.BatchEditConfirmShowing.IsEmpty()) {
   var args = new ASPxClientGridViewBatchEditConfirmShowingEventArgs(requestTriggerID);
   this.BatchEditConfirmShowing.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 RaiseBatchEditStartEditing: function(visibleIndex, column, rowValues) {
  var args = new ASPxClientGridViewBatchEditStartEditingEventArgs(visibleIndex, column, rowValues);
  if(!this.BatchEditStartEditing.IsEmpty())
   this.BatchEditStartEditing.FireEvent(this, args);
  return args;
 },
 RaiseBatchEditEndEditing: function(visibleIndex, rowValues) {
  var args = new ASPxClientGridViewBatchEditEndEditingEventArgs(visibleIndex, rowValues);
  if(!this.BatchEditEndEditing.IsEmpty())
   this.BatchEditEndEditing.FireEvent(this, args);
  return args;
 },
 RaiseBatchEditRowValidating: function(visibleIndex, validationInfo) {
  var args = new ASPxClientGridViewBatchEditRowValidatingEventArgs(visibleIndex, validationInfo);
  if(!this.BatchEditRowValidating.IsEmpty())
   this.BatchEditRowValidating.FireEvent(this, args);
  return args.validationInfo;
 },
 RaiseBatchEditTemplateCellFocused: function(columnIndex) {
  var column = this._getColumn(columnIndex);
  if(!column) return false;
  var args = new ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs(column);
  if(!this.BatchEditTemplateCellFocused.IsEmpty())
   this.BatchEditTemplateCellFocused.FireEvent(this, args);
  return args.handled;
 },
 RaiseInternalCheckBoxClick: function(visibleIndex) {
  if(!this.InternalCheckBoxClick.IsEmpty()){
   var args = {"visibleIndex": visibleIndex, cancel: false};
   this.InternalCheckBoxClick.FireEvent(this, args);
   return args.cancel;
  }
  return false;
 },
 UA_AddNew: function() {
  this.AddNewRow();
 },
 UA_StartEdit: function(visibleIndex) {
  this.StartEditRow(visibleIndex);
 },
 UA_Delete: function(visibleIndex) {
  this.DeleteGridRow(visibleIndex);
 },
 UA_UpdateEdit: function() {
  this.UpdateEdit();
 },
 UA_CancelEdit: function() {
  this.CancelEdit();
 },
 UA_CustomButton: function(id, visibleIndex) {
  this.CommandCustomButton(id, visibleIndex);
 },
 UA_Select: function(visibleIndex) {
  if(!this.lookupBehavior || this.allowSelectByRowClick)
   this.SelectRow(visibleIndex, !this._isRowSelected(visibleIndex));
 },
 UA_ClearFilter: function() {
  this.ClearFilter();
 },
 UA_ApplyMultiColumnAutoFilter: function() {
  this.ApplyMultiColumnAutoFilter();
 }
});
ASPxClientGridView.Cast = ASPxClientControl.Cast;
ASPxClientGridViewColumn = _aspxCreateClass(null, {
 constructor: function(name, index, parentIndex, fieldName, visible, filterRowTypeKind, showFilterMenuLikeItem,
  allowGroup, allowSort, allowDrag, HFCheckedList, inCustWindow, minWidth) {
  this.name = name;
  this.id = name;
  this.index = index;
  this.parentIndex = parentIndex;
  this.fieldName = fieldName;
  this.visible = !!visible;
  this.filterRowTypeKind = filterRowTypeKind;
  this.showFilterMenuLikeItem = !!showFilterMenuLikeItem;
  this.allowGroup = !!allowGroup;
  this.allowSort = !!allowSort;
  this.allowDrag = !!allowDrag;
  this.HFCheckedList = !!HFCheckedList;
  this.inCustWindow = !!inCustWindow;
  this.minWidth = minWidth;
 }
});
ASPxClientGridViewColumnCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this);
  this.column = column;
 }
});
ASPxClientGridViewColumnProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(column){
  this.constructor.prototype.constructor.call(this, false);
  this.column = column;
 }
});
ASPxClientGridViewRowCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex){
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
 }
});
ASPxClientGridViewSelectionEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer){
  this.constructor.prototype.constructor.call(this, false);
  this.visibleIndex = visibleIndex;
  this.isSelected = isSelected;
  this.isAllRecordsOnPage = isAllRecordsOnPage;
  this.isChangedOnServer = isChangedOnServer;
 }
});
ASPxClientGridViewRowClickEventArgs = _aspxCreateClass(ASPxClientGridViewRowCancelEventArgs, {
 constructor: function(visibleIndex, htmlEvent){
  this.constructor.prototype.constructor.call(this, visibleIndex);
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientGridViewContextMenuEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(objectType, index, htmlEvent, menu, showBrowserMenu) {
  this.constructor.prototype.constructor.call(this);
  this.objectType = objectType;
  this.index = index;
  this.htmlEvent = htmlEvent;
  this.menu = menu;
  this.showBrowserMenu = showBrowserMenu;
 }
});
ASPxClientGridViewContextMenuItemClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(item, objectType, elementIndex, processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.objectType = objectType;
  this.elementIndex = elementIndex;
  this.usePostBack = false;
  this.handled = false;
  this.processOnServer = processOnServer;
 }
});
ASPxClientGridViewCustomButtonEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(visibleIndex, buttonID) {
  this.constructor.prototype.constructor.call(this, false);
  this.visibleIndex = visibleIndex;
  this.buttonID = buttonID;
 }
});
ASPxClientGridViewColumnMovingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(sourceColumn, destinationColumn, isDropBefore, isGroupPanel) {
  this.constructor.prototype.constructor.call(this);
  this.allow = true;
  this.sourceColumn = sourceColumn;
  this.destinationColumn = destinationColumn;
  this.isDropBefore = isDropBefore;
  this.isGroupPanel = isGroupPanel;
 }
});
ASPxClientGridViewBatchEditConfirmShowingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(requestTriggerID) {
  this.constructor.prototype.constructor.call(this);
  this.requestTriggerID = requestTriggerID;
 }
});
ASPxClientGridViewBatchEditStartEditingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, focusedColumn, rowValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.focusedColumn = focusedColumn;
  this.rowValues = _aspxCloneObject(rowValues);
 }
});
ASPxClientGridViewBatchEditEndEditingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
 constructor: function(visibleIndex, rowValues) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.rowValues = _aspxCloneObject(rowValues);
 }
});
ASPxClientGridViewBatchEditRowValidatingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(visibleIndex, validationInfo) {
  this.constructor.prototype.constructor.call(this);
  this.visibleIndex = visibleIndex;
  this.validationInfo = _aspxCloneObject(validationInfo);
 }
});
ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(column) {
  this.constructor.prototype.constructor.call(this);
  this.column = column;
  this.handled = false;
 }
});
ASPxGridViewKbdHelper = _aspxCreateClass(ASPxKbdHelper, {
 HandleKeyDown: function(e) {
  var grid = this.control;
  var index = grid.GetFocusedRowIndex();
  var busy = grid.keyboardLock;
  var key = _aspxGetKeyCode(e);
  if(grid.rtl) {
   if(key == ASPxKey.Left)
    key = ASPxKey.Right;
   else if(key == ASPxKey.Right)
    key = ASPxKey.Left;
  }
  switch(key) {
   case ASPxKey.Down:
    if(!busy)
     this.TryMoveFocusDown(index, e.shiftKey);
    return true;
   case ASPxKey.Up:
    if(!busy)
     this.TryMoveFocusUp(index, e.shiftKey);
    return true;
   case ASPxKey.Right:
    if(!busy) {
     if(!this.TryExpand(index))
      this.TryMoveFocusDown(index, e.shiftKey);
    }
    return true;
   case ASPxKey.Left:
    if(!busy) {
     if(!this.TryCollapse(index))
      this.TryMoveFocusUp(index, e.shiftKey);
    }
    return true;
   case ASPxKey.PageDown:
    if(e.shiftKey) {
     if(!busy && grid.pageIndex < grid.pageCount - 1)
      grid.NextPage();
     return true;
    }
    break;
   case ASPxKey.PageUp:
    if(e.shiftKey) {
     if(!busy && grid.pageIndex > 0)
      grid.PrevPage();
     return true;
    }
    break;
  }
  return false;
 },
 HandleKeyPress: function(e) {
  var grid = this.control;
  var index = grid.GetFocusedRowIndex();
  var busy = grid.keyboardLock;
  switch(_aspxGetKeyCode(e)) {
   case ASPxKey.Space:
    if(!busy && this.IsRowSelectable(index))
     grid.IsRowSelectedOnPage(index) ? grid.UnselectRowOnPage(index) : grid.SelectRowOnPage(index);
    return true;
    case 43:
    if(!busy)
     this.TryExpand(index);
    return true;
    case 45:
    if(!busy)
     this.TryCollapse(index);
    return true;
  }
  return false;
 },
 EnsureFocusedRowVisible: function() {
  var grid = this.control;
  if(!grid.HasVertScroll()) return;
  var row = grid.GetRow(grid.GetFocusedRowIndex());
  grid.GetScrollHelper().MakeRowVisible(row, true);
 },
 HasDetailButton: function(expanded) {
  var grid = this.control;
  var row = grid.GetRow(grid.GetFocusedRowIndex());
  if(!row) return;
  var needle = expanded ? "aspxGVHideDetailRow" : "aspxGVShowDetailRow";
  return row.innerHTML.indexOf(needle) > -1;
 },
 IsRowSelectable: function(index) {
  if(this.control.allowSelectByRowClick)
   return true;
  var row = this.control.GetRow(index);
  if(row && row.innerHTML.indexOf("aspxGVSelectRow") > -1)
   return true;
  var check = this.control.GetDataRowSelBtn(index);
  if(check && this.control.internalCheckBoxCollection && !!this.control.internalCheckBoxCollection.Get(check.id))
   return true;
  return false;
 },
 UpdateShiftSelection: function(start, end) {
  var grid = this.control;
  grid.UnselectAllRowsOnPage();
  if(grid.lastMultiSelectIndex > -1)
   start = grid.lastMultiSelectIndex;
  else
   grid.lastMultiSelectIndex = start;
  for(var i = Math.min(start, end); i <= Math.max(start, end); i++)
   grid.SelectRowOnPage(i);
 },
 TryExpand: function(index) {
  var grid = this.control;
  if(grid.IsGroupRow(index) && !grid.IsGroupRowExpanded(index)) {
   grid.ExpandRow(index);
   return true;
  }
  if(this.HasDetailButton(false)) {
   grid.ExpandDetailRow(index);
   return true;
  }
  return false;
 },
 TryCollapse: function(index) {
  var grid = this.control;
  if(grid.IsGroupRow(index) && grid.IsGroupRowExpanded(index)) {
   grid.CollapseRow(index);
   return true;
  }
  if(this.HasDetailButton(true)) {
   grid.CollapseDetailRow(index);
   return true;
  }
  return false;
 },
 TryMoveFocusDown: function(index, select) {
  var grid = this.control;
  if(index < grid.visibleStartIndex + grid.pageRowCount - 1) {
   if(index < 0)
    grid.SetFocusedRowIndex(grid.visibleStartIndex);
    else
    grid.SetFocusedRowIndex(index + 1);
   this.EnsureFocusedRowVisible();
   if(this.IsRowSelectable(index)) {
    if(select) {
     this.UpdateShiftSelection(index, index + 1);
    } else {
     grid.lastMultiSelectIndex = -1;
    }
   }
  } else {
   if(grid.pageIndex < grid.pageCount - 1 && grid.pageIndex >= 0) {
    grid.NextPage();
   }
  }
 },
 TryMoveFocusUp: function(index, select) {
  var grid = this.control;
  if(index > grid.visibleStartIndex || index == -1) {
   if(index < 0)
    grid.SetFocusedRowIndex(grid.visibleStartIndex + grid.pageRowCount - 1);
   else
    grid.SetFocusedRowIndex(index - 1);
   this.EnsureFocusedRowVisible();
   if(this.IsRowSelectable(index)) {
    if(select) {
     this.UpdateShiftSelection(index, index - 1);
    } else {
     grid.lastMultiSelectIndex = -1;
    }
   }
  } else {
   if(grid.pageIndex > 0) {
    grid.PrevPage(true);
   }
  }
 }
});
ASPxClientGridViewDragHelper = _aspxCreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 CreateDrag: function(e, element, canDrag) {
  var drag = new ASPxClientDragHelper(e, element, true);
  drag.centerClone = true;
  drag.canDrag = canDrag;
  drag.grid = this.grid;
  drag.ctrl = e.ctrlKey;
  drag.shift = e.shiftKey;
  drag.onDragDivCreating = this.OnDragDivCreating;
  drag.onDoClick = this.OnDoClick;
  drag.onCloneCreating = this.OnCloneCreating;
  drag.onEndDrag = this.OnEndDrag;
  drag.onCancelDrag = this.OnCancelDrag;
  return drag;
 },
 PrepareTargetHeightFunc: function() {
  ASPxClientGridViewDragHelper.Target_GetElementHeight = null;
  var headerRowCount = this.grid.GetHeaderMatrix().GetRowCount();
  if(headerRowCount) {
   var row = this.grid.GetHeaderRow(headerRowCount - 1);
   var headerBottom = _aspxGetAbsoluteY(row) + row.offsetHeight;
   ASPxClientGridViewDragHelper.Target_GetElementHeight = function() {
    return headerBottom - this.absoluteY;
   };
  }
 },
 CreateTargets: function(drag, e) {
  if(!drag.canDrag) return;
  var grid = this.grid;
  this.PrepareTargetHeightFunc();
  var targets = new ASPxClientCursorTargets();
  targets.obj = drag.obj;
  targets.grid = grid;
  targets.onTargetCreated = this.OnTargetCreated;
  targets.onTargetChanging = this.OnTargetChanging;
  targets.onTargetChanged = this.OnTargetChanged;
  var scrollLeft = null, scrollRight;
  var scrollHelper = grid.GetScrollHelper();
  var scrollableControl = scrollHelper && scrollHelper.GetHorzScrollableControl();
  if(scrollableControl) {
   scrollLeft = _aspxGetAbsoluteX(scrollableControl);
   scrollRight = scrollLeft + scrollableControl.offsetWidth;
  }
  var sourceColumn = grid.getColumnObject(drag.obj.id);
  var win = grid.GetCustomizationWindow();
  if(win && !sourceColumn.inCustWindow)
   this.AddDragDropTarget(targets, win.GetWindowClientTable(-1));
  for(var i = 0; i < grid.columns.length; i++) {
   var column = grid.columns[i];
   for(var grouped = 0; grouped <= 1; grouped++) {
    var targetElement = grid.GetHeader(column.index, !!grouped);
    if(!targetElement)
     continue;
    if(scrollLeft !== null) {
     var targetX = _aspxGetAbsoluteX(targetElement);
     if(targetX < scrollLeft || targetX + targetElement.offsetWidth > scrollRight)
      continue;
    }
    if(this.IsValidColumnDragDropTarget(drag.obj, targetElement, sourceColumn, column))
     this.AddDragDropTarget(targets, targetElement);
   }
  }
  this.AddDragDropTarget(targets, grid.GetGroupPanel());
  this.AddDragDropTarget(targets, _aspxGetElementById(grid.name + this.grid.EmptyHeaderSuffix));
 },
 IsValidColumnDragDropTarget: function(sourceElement, targetElement, sourceColumn, targetColumn) {
  if(sourceColumn == targetColumn)
   return false;
  if(sourceColumn.parentIndex == targetColumn.parentIndex)
   return true;
  if(sourceColumn.parentIndex == targetColumn.index) {
   return (sourceColumn.inCustWindow || this.IsGroupingTarget(sourceElement))
    && this.grid.GetHeaderMatrix().IsLeaf(targetColumn.index);
  }
  if(this.IsGroupingTarget(targetElement))
   return true;
  return false;
 },
 AddDragDropTarget: function(targets, element) {
  element && targets.addElement(element);
 },
 IsGroupHeaderTarget: function(element) {
  if(!element)
   return false;
  return element.id.indexOf(this.grid.name + "_groupcol") == 0;
 },
 IsGroupingTarget: function(element) {
  return element == this.grid.GetGroupPanel() || this.IsGroupHeaderTarget(element);
 },
 IsCustWindowTarget: function(element) {
  var win = this.grid.GetCustomizationWindow();
  return win && element == win.GetWindowClientTable(-1);
 },
 OnDragDivCreating: function(drag, dragDiv) {
  var rootTable = drag.grid.GetRootTable();
  if(!dragDiv || !rootTable) return;
  dragDiv.className = rootTable.className;
  dragDiv.style.cssText = rootTable.style.cssText;
 },
 OnDoClick: function(drag) {
  if(!drag.grid.canSortByColumn(drag.obj)) return;
  drag.grid.SortBy(drag.grid.getColumnIndex(drag.obj.id), drag.ctrl ? "NONE" : "", !drag.shift && !drag.ctrl);
 },
 OnCancelDrag: function(drag) {
  drag.grid.dragHelper.ChangeTargetImagesVisibility(false);
 },
 OnEndDrag: function(drag) {
  if(!drag.targetElement)
   return;
  var grid = drag.grid;
  var sourceElement = drag.obj;
  var targetElement = drag.targetElement;
  var isLeft = drag.targetTag;
  if(grid.rtl)
   isLeft = !isLeft;
  grid.MoveColumn(
   grid.getColumnIndex(sourceElement.id),
   grid.IsEmptyHeaderID(targetElement.id) ? 0 : grid.getColumnIndex(targetElement.id),
   isLeft,
   grid.dragHelper.IsGroupingTarget(targetElement),
   grid.dragHelper.IsGroupingTarget(sourceElement)
  );
 },
 OnCloneCreating: function(clone) {
  var table = document.createElement("table");
  table.cellSpacing = 0;
  if(this.obj.offsetWidth > 0)
   table.style.width = Math.min(200, this.obj.offsetWidth) + "px";
  if(this.obj.offsetHeight > 0)
   table.style.height = this.obj.offsetHeight + "px";
  var row = table.insertRow(-1);
  clone.style.borderLeftWidth = "";
  clone.style.borderTopWidth = "";
  clone.style.borderRightWidth = "";
  row.appendChild(clone);
  table.style.opacity = 0.80;
  table.style.filter = "alpha(opacity=80)";
  if(_aspxIsElementRightToLeft(this.obj))
   table.dir = "rtl";
  return table;
 },
 OnTargetCreated: function(targets, targetObj) {
  var f = ASPxClientGridViewDragHelper.Target_GetElementHeight;
  var h = targets.grid.dragHelper;
  var el = targetObj.element;
  if(f && !h.IsCustWindowTarget(el) && !h.IsGroupingTarget(el))
   targetObj.GetElementHeight = f;
 },
 OnTargetChanging: function(targets) {
  if(!targets.targetElement)
   return;
  targets.targetTag = targets.isLeftPartOfElement();
  var grid = targets.grid;
  var grouping = false;
  if(targets.targetElement == grid.GetGroupPanel()) {
   targets.targetTag = true;
   grouping = true;
  }
  if(grid.dragHelper.IsGroupHeaderTarget(targets.targetElement)) {
   grouping = true;
  }
  if(grouping && !grid.canGroupByColumn(targets.obj))
   targets.targetElement = null;
  if(targets.targetElement) {
   grid.RaiseColumnMoving(targets);
  }
 },
 OnTargetChanged: function(targets) {
  if(__aspxDragHelper == null)
   return;
  var element = targets.targetElement;
  if(element == __aspxDragHelper.obj)
   return;
  var grid = targets.grid;
  grid.dragHelper.ChangeTargetImagesVisibility(false);
  if(!element) {
   __aspxDragHelper.targetElement = null;
   return;
  }
  __aspxDragHelper.targetElement = element;
  __aspxDragHelper.targetTag = targets.targetTag;
  var moveToGroup = grid.dragHelper.IsGroupingTarget(element);
  var moveToCustWindow = grid.dragHelper.IsCustWindowTarget(element);
  if(moveToCustWindow) {
   __aspxDragHelper.addElementToDragDiv(grid.GetArrowDragFieldImage());
   return;
  }
  var matrix =  grid.GetHeaderMatrix();
  var targetColumnIndex = grid.getColumnIndex(element.id);
  var isRightSide = !targets.targetTag;
  var left = _aspxGetAbsoluteX(element);
  var neighbor;
  if(moveToGroup) {
   var method = isRightSide ^ grid.rtl ? "nextSibling" : "previousSibling";
   neighbor = grid.dragHelper.GetGroupNodeNeighbor(element, method);
   if(neighbor && neighbor.id == __aspxDragHelper.obj.id) {
    __aspxDragHelper.targetElement = null;
    return;
   }
  } else {
   if(targetColumnIndex > -1) {
    var method = isRightSide ^ grid.rtl ? "GetRightNeighbor" : "GetLeftNeighbor";
    var neighborIndex = matrix[method](targetColumnIndex);
    var sourceColumn = grid.getColumnObject(__aspxDragHelper.obj.id);
    if(neighborIndex == sourceColumn.index && !sourceColumn.inCustWindow && !grid.dragHelper.IsGroupHeaderTarget(__aspxDragHelper.obj)) {
     __aspxDragHelper.targetElement = null;
     return;
    }
    if(!isNaN(neighborIndex))
     neighbor = grid.GetHeader(neighborIndex)
   }
   }
  if(element == grid.GetGroupPanel()) {
   if(grid.rtl)
    left += element.offsetWidth;
  } else {
   if(isRightSide) {
    if(neighbor)
     left = _aspxGetAbsoluteX(neighbor);
    else
     left += element.offsetWidth;
   }
  }
  var bottomElement = element;
  if(!moveToGroup && targetColumnIndex > -1)
   bottomElement = grid.GetHeader(matrix.GetLeaf(targetColumnIndex, !isRightSide, false));
  grid.dragHelper.SetDragImagesPosition(left, _aspxGetAbsoluteY(element),  _aspxGetAbsoluteY(bottomElement) + bottomElement.offsetHeight);
  grid.dragHelper.ChangeTargetImagesVisibility(true);
 },
 GetGroupNodeNeighbor: function(element, method) {
  return this.GetGroupNodeNeighborCore(element, method, 2);
 },
 GetGroupNodeNeighborCore: function(element, method, distance) {
  var neighbor = element[method];
  if(neighbor && neighbor.nodeType == 1) {
   if(this.IsGroupingTarget(neighbor))
    return neighbor;
   if(distance > 1)
    return this.GetGroupNodeNeighborCore(neighbor, method, --distance);
  }
  return null;
 },
 ChangeTargetImagesVisibility: function(vis) {
  if(this.grid.GetArrowDragDownImage() == null) return;
  var value = vis ? "visible" : "hidden";
  this.grid.GetArrowDragDownImage().style.visibility = value;
  this.grid.GetArrowDragUpImage().style.visibility = value;
  if(__aspxDragHelper != null) {
   __aspxDragHelper.removeElementFromDragDiv();
  }
 },
 SetDragImagesPosition: function(left, top, bottom) {
  var downImage = this.grid.GetArrowDragDownImage();
  if(downImage) {
   _aspxSetAbsoluteX(downImage, left - downImage.offsetWidth / 2);
   _aspxSetAbsoluteY(downImage, top - downImage.offsetHeight);
  }
  var upImage = this.grid.GetArrowDragUpImage();
  if(upImage) {
   _aspxSetAbsoluteX(upImage, left - upImage.offsetWidth / 2);
   _aspxSetAbsoluteY(upImage, bottom);
  }
 }
});
ASPxClientGridViewDragHelper.Target_GetElementHeight = null;
ASPxClientGridViewHeaderMatrix = _aspxCreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 Invalidate: function() {
  this.matrix = null;
  this.inverseMatrix = null;
 },
 GetRowCount: function() {
  this.EnsureMatrix();
  return this.matrix.length;
 },
 IsLeftmostColumn: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].left == 0;
 },
 IsRightmostColumn: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].right == this.matrix[0].length - 1;
 },
 IsLeaf: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].bottom == this.matrix.length - 1;
 },
 GetLeaf: function(columnIndex, isLeft, isOuter) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  var row = this.matrix[this.matrix.length - 1];
  if(isLeft) {
   if(isOuter)
    return row[rect.left - 1];
   return row[rect.left];
  }
  if(isOuter)
   return row[rect.right + 1];
  return row[rect.right];
 },
 GetLeafIndex: function(columnIndex) {
  this.EnsureMatrix();
  return this.inverseMatrix[columnIndex].left;
 },
 GetLeafIndices: function() {
  return this.GetRowIndices(this.GetRowCount() - 1);
 },
 GetRowIndices: function(rowIndex) {
  this.EnsureMatrix();
  return this.matrix[rowIndex] || [];
 },
 GetRowSpan: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return rect.bottom - rect.top + 1;
 },
 GetLeftNeighbor: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return this.matrix[rect.top][rect.left - 1];
 },
 GetRightNeighbor: function(columnIndex) {
  this.EnsureMatrix();
  var rect = this.inverseMatrix[columnIndex];
  return this.matrix[rect.top][rect.right + 1];
 },
 GetRightNeighborLeaf: function(columnIndex) {
  return this.GetLeaf(columnIndex, false, true);
 },
 EnsureMatrix: function() {
  this.matrix || this.Fill();
 },
 Fill: function() {
  this.matrix = [ ];
  this.inverseMatrix = { };
  var rowIndex = 0;
  while(true) {
   var row = this.grid.GetHeaderRow(rowIndex);
   if(!row)
    break;
   var lastFreeIndex = 0;
   for(var cellIndex = !rowIndex ? this.grid.indentColumnCount : 0; cellIndex < row.cells.length; cellIndex++) {
    var cell = row.cells[cellIndex];
    var columnIndex = this.grid.getColumnIndex(cell.id);
    if(columnIndex < 0)
     break;
    lastFreeIndex = this.FindFreeCellIndex(rowIndex, lastFreeIndex);
    this.FillBlock(rowIndex, lastFreeIndex, cell.rowSpan, cell.colSpan, columnIndex);
    lastFreeIndex += cell.colSpan;
   }
   ++rowIndex;
  }
 },
 FindFreeCellIndex: function(rowIndex, lastFreeCell) {
  var row = this.matrix[rowIndex];
  var result = lastFreeCell;
  if(row) {
   while(!isNaN(row[result]))
    result++;
  }
  return result;
 },
 FillBlock: function(rowIndex, cellIndex, rowSpan, colSpan, columnIndex) {
  var rect = {
   top: rowIndex,
   bottom: rowIndex + rowSpan - 1,
   left: cellIndex,
   right: cellIndex + colSpan - 1
  };
  for(var i = rect.top; i <= rect.bottom; i++) {
   while(!this.matrix[i])
    this.matrix.push([]);
   for(var j = rect.left; j <= rect.right; j++)
    this.matrix[i][j] = columnIndex;
  }
  this.inverseMatrix[columnIndex] = rect;
 }
});
ASPxClientGridViewBatchEditApi = _aspxCreateClass(null, {
 constructor: function(grid) {
  this.grid = grid;
 },
 GetHelper: function() { return this.grid.GetBatchEditHelper(); },
 GetColumnIndex: function(column) { return this.grid._getColumnIndexByColumnArgs(column); },
 SetCellValue: function(visibleIndex, column, value, displayText) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null)
   return;
  if(!helper.IsValidVisibleIndex(visibleIndex))
   return;
  if(!_aspxIsExists(displayText))
   displayText = helper.GetColumnDisplayTextByEditor(value, columnIndex);
  if(helper.IsCheckColumn(columnIndex))
   displayText = helper.GetCheckColumnDisplayText(value, columnIndex);
  if(helper.IsColorEditColumn(columnIndex))
   displayText = helper.GetColorEditColumnDisplayText(value, columnIndex);
  helper.SetCellValue(visibleIndex, columnIndex, value, displayText);
  helper.UpdateSyncInput();
  helper.UpdateRow(visibleIndex, [ columnIndex ], helper.IsEditingCell(visibleIndex, columnIndex), false, true);
 },
 GetCellValue: function(visibleIndex, column) {
  var helper = this.GetHelper();
  var columnIndex = this.GetColumnIndex(column);
  if(!helper || columnIndex === null) return;
  return helper.GetCellValue(visibleIndex, columnIndex);
 },
 HasChanges: function(visibleIndex, column) {
  var helper = this.GetHelper();
  if(!helper) return false;
  var columnIndex = this.GetColumnIndex(column);
  return helper.HasChanges(visibleIndex, columnIndex);
 },
 ResetChanges: function(visibleIndex, columnIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  helper.ResetChanges(visibleIndex, columnIndex);
 },
 StartEdit: function(visibleIndex, columnIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  helper.StartEdit(visibleIndex, columnIndex);
 },
 EndEdit: function() {
  var helper = this.GetHelper();
  if(!helper || helper.lockUserEndEdit)
   return;
  helper.EndEdit();
 },
 MoveFocusBackward: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  return helper.MoveFocusPrev();
 },
 MoveFocusForward: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  return helper.MoveFocusNext();
 },
 ValidateRows: function() {
  var helper = this.GetHelper();
  if(!helper) return;
  var validationInfo = helper.ValidateRows();
  if(!validationInfo.isValid) {
   for(var visibleIndex in validationInfo.dict)
    helper.ShowRowClientValidationErrors(visibleIndex, validationInfo.dict[visibleIndex]);
  }
  return validationInfo.isValid;
 },
 ValidateRow: function(visibleIndex) {
  var helper = this.GetHelper();
  if(!helper) return;
  var validationInfo = helper.ValidateRow(visibleIndex);
  if(!validationInfo.isValid)
   helper.ShowRowClientValidationErrors(visibleIndex, validationInfo);
  return validationInfo.isValid;
 },
 IsColumnEdited: function(column) {
  var helper = this.GetHelper();
  if(!helper || !column) return;
  return helper.IsColumnEdited(column);
 }
});
function aspxGVContextMenu(name, e) {
 if(!ASPxClientGridView.CanHandleContextMenu(name, e))
  return false;
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  var showDefaultMenu = gv.OnContextMenuClick(e);
  return showDefaultMenu;
  }
 return true;
}
function aspxGVContextMenuItemClick(name, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.OnContextMenuItemClick(e);
}
function aspxGVExpandRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.ExpandRow(visibleIndex);
 }
}
function aspxGVCollapseRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.CollapseRow(visibleIndex);
 }
}
function aspxGVShowDetailRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.ExpandDetailRow(visibleIndex);
 }
}
function aspxGVHideDetailRow(name, visibleIndex, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(gv.useEndlessPaging && event)
   visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
  gv.CollapseDetailRow(visibleIndex);
 }
}
function aspxGVHeaderMouseDown(name, element, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.HeaderMouseDown(element, e);
}
function aspxGVPopupEditFormOnInit(name, popup) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  window.setTimeout(function() { gv.OnPopupEditFormInit(popup); }, 0);
}
function aspxGVPagerOnClick(name, value) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.doPagerOnClick(value);
}
function aspxGVFilterKeyPress(name, element, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.OnColumnFilterInputKeyPress(element, e);
}
function aspxGVFilterSpecKeyPress(name, element, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.OnColumnFilterInputSpecKeyPress(element, e);
}
function aspxGVFilterChanged(name, element) {
 _aspxSetTimeout("aspxGVFilterChangedDelayed(\""+name+"\", \"" + element.name + "\");", 0);
}
function aspxGVFilterChangedDelayed(name, elementName) {
 var gv = aspxGetControlCollection().Get(name);
 var element = aspxGetControlCollection().Get(elementName);
 if(gv != null && element != null)
  gv.OnColumnFilterInputChanged(element);
}
function aspxGVTimer(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.OnFilterKeyPressTick();
}
function aspxGVShowParentRows(name, evt, element) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  if(element)
   gv.OnParentRowMouseEnter(element);
  else
   gv.OnParentRowMouseLeave(evt);
 }
}
function aspxGVTableClick(name, evt) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && gv.NeedProcessTableClick(evt))
  gv.mainTableClick(evt);
}
function aspxGVTableDblClick(name, evt) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && gv.NeedProcessTableClick(evt))
  gv.mainTableDblClick(evt);
}
function aspxGVParentRowsTimer(name, rowId) {
 var gv = aspxGetControlCollection().Get(name);
 var element = _aspxGetElementById(rowId);
 if(!element || !gv) return;
 gv.ShowParentRows(element);
}
function aspxGVCustWindowShown_IE(s) {
 var div = document.getElementById(s.name + "_Scroller");
 div.style.overflow = "hidden";
 var width1 = div.clientWidth;
 div.style.overflow = "auto";
 var width2 = div.clientWidth;
 if(width2 > width1) {
  div.style.width = width1 + "px";
  div.style.paddingRight = (width2 - width1) + "px";
  window.setTimeout(function() {
   div.className = "_";
   div.className = "";
  }, 0);
 }
}
function aspxGVCustWindowCloseUp(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.RaiseCustomizationWindowCloseUp();
 }
}
function aspxGVApplyFilterPopup(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.ApplyHeaderFilterByColumn();
}
function aspxGVShowFilterControl(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.ShowFilterControl();
 }
}
function aspxGVCloseFilterControl(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.CloseFilterControl();
 }
}
function aspxGVSetFilterEnabled(name, value) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null) {
  gv.SetFilterEnabled(value);
 }
}
function aspxGVApplyFilterControl(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.ApplyFilterControl();
}
function aspxGVFilterRowMenu(name, columnIndex, element) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.FilterRowMenuButtonClick(columnIndex, element);
}
function aspxGVFilterRowMenuClick(name, e) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.FilterRowMenuItemClick(e.item);
}
function aspxGVSort(name, columnIndex) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.SortBy(columnIndex);
}
function aspxGVScheduleCommand(name, commandArgs, postponed, event) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.ScheduleUserCommand(commandArgs, postponed, event);
}
function aspxGVHFListBoxInit(name, listBox) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && listBox)
  gv.InitializeHFListBox(listBox);
}
function aspxGVHFSelectAllCheckedChanged(name, checkBox) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null && checkBox)
  gv.OnHFSelectAllCheckedChanged(checkBox);
}
function aspxGVHFCancelButtonClick(name) {
 var gv = aspxGetControlCollection().Get(name);
 if(gv != null)
  gv.GetHeaderFilterPopup().Hide();
}
ASPxClientGridView.CanHandleContextMenu = function(gridName, e) {
 var savedTarget = ASPxClientGridView.savedContextMenuEventTarget;
 if(_aspxIsExists(savedTarget) && savedTarget[0] !== gridName && e.target == savedTarget[1])
  return false;
 ASPxClientGridView.savedContextMenuEventTarget = [gridName, e.target];
 return true;
}
ASPxClientGridView.SelectStartHandler = function(e) {
 if(_aspxGetEventSource(e).tagName.match(/input|select|textarea/i))
  return;
 if(e.ctrlKey || e.shiftKey) {
  _aspxClearSelection();
  _aspxPreventEventAndBubble(e);
 }
};
ASPxClientGridView.SaveActiveElementSettings = function(grid) {
 var element = grid.activeElement;
 grid.activeElement = null;
 ASPxClientGridView.activeElementData = null;
 if (!element || !element.id || element.tagName != "INPUT" || element.id.indexOf(grid.name + "_") != 0)
  return;
 ASPxClientGridView.activeElementData = [ grid.name, element.id, _aspxGetSelectionInfo(element).endPos ];
 if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
  if(!ASPxClientGridView.MsAjaxActiveElementHandlerAdded) {
   Sys.Application.add_load(function() { ASPxClientGridView.RestoreActiveElementSettings(); } );
   ASPxClientGridView.MsAjaxActiveElementHandlerAdded = true;
  }
 }
};
ASPxClientGridView.RestoreActiveElementSettings = function(grid) {
 var data = ASPxClientGridView.activeElementData;
 if(!data || grid && data[0] != grid.name) return;
 var element = _aspxGetElementById(data[1]);
 if(element) {
  window.setTimeout(function() {
   element.focus();
   _aspxSetInputSelection(element, data[2], data[2]);
  }, 0);
 }
 ASPxClientGridView.activeElementData = null;
};
ASPxScrollingManager = _aspxCreateClass(null, {
 constructor: function(owner, scrollableArea, orientation, onBeforeScrolling, onAfterScrolling, forseEmulation) {
  this.owner = owner;
  this.scrollableArea = scrollableArea;
  this.orientation = orientation;
  this.animationDelay = 1;
  this.animationStep = 2;
  this.animationOffset = 5;
  this.animationAcceleration = 0;
  this.scrollSessionInterval = 10;
  this.stopScrolling = true;
  this.busy = false;
  this.currentAcceleration = 0;
  this.startPos;
  this.onBeforeScrolling = onBeforeScrolling;
  this.onAfterScrolling = onAfterScrolling;
  this.emulationMode = forseEmulation === true || !__aspxTouchUI;
  this.Initialize();
 },
 Initialize: function(){
  if(__aspxMSTouchUI){
   this.scrollableArea.parentNode.style.overflow = "auto";
   this.scrollableArea.parentNode.style["-ms-overflow-style"] = "-ms-autohiding-scrollbar";
  }
  if(this.emulationMode){
   this.wrapper = new ASPxScrollingManager.scrollWrapper(this.scrollableArea);
  } else {
   this.wrapper = new ASPxScrollingManager.scrollWrapperTouchUI(this.scrollableArea, function(direction){
    if(this.onAfterScrolling)
     this.onAfterScrolling(this, direction);
   }.aspxBind(this));
  }
 },
 GetScrolledAreaPosition: function() {
  return this.wrapper.GetScrollLeft() * this.orientation[0]
   + this.wrapper.GetScrollTop() * this.orientation[1];
 },
 SetScrolledAreaPosition: function(pos) {
  this.wrapper.SetScrollLeft(pos * this.orientation[0]);
  this.wrapper.SetScrollTop(pos * this.orientation[1]);
 },
 PrepareForScrollAnimation: function() {
  if(!this.scrollableArea)
   return;
  this.currentAcceleration = 0;
  this.startPos = this.GetScrolledAreaPosition();
  this.busy = false;
 },
 GetAnimationStep: function(dir) {
  var step = dir * (this.animationStep + this.currentAcceleration);
  var newPos = this.GetScrolledAreaPosition() + step;
  var requiredPos = this.startPos + dir * this.animationOffset;
  if((dir == 1 && newPos >= requiredPos) || (dir == -1 && newPos <= requiredPos)) {
   step = requiredPos - this.GetScrolledAreaPosition();
  }
  return step;
 },
 DoScrollSessionAnimation: function(direction) {
  if(!this.scrollableArea)
   return;
  this.SetScrolledAreaPosition(this.GetScrolledAreaPosition() + this.GetAnimationStep(direction));
  var self = this;
  if(!this.ShouldStopScrollSessionAnimation()) {
   this.busy = true;
   this.currentAcceleration += this.animationAcceleration;
   _aspxSetTimeout(function() { self.DoScrollSessionAnimation(direction); }, this.animationDelay);
  } else {
   if(this.onAfterScrolling)
    this.onAfterScrolling(this, -direction);
   this.busy = false;
   this.currentAcceleration = 0;
   _aspxSetTimeout(function() { self.DoScroll(direction); }, this.scrollSessionInterval);
  }
 },
 ShouldStopScrollSessionAnimation: function() {
  return (Math.abs(this.GetScrolledAreaPosition() - this.startPos) >= Math.abs(this.animationOffset));
 },
 DoScroll: function(direction) {
  if(!this.scrollableArea)
   return;
  if(!this.busy && !this.stopScrolling) {
   if(this.onBeforeScrolling)
    this.onBeforeScrolling(this, -direction);
   if(this.stopScrolling) return;
   this.PrepareForScrollAnimation();
   this.DoScrollSessionAnimation(direction);
  }
 },
 StartScrolling: function(direction, delay, step) {
  this.stopScrolling = false;
  this.animationDelay = delay;
  this.animationStep = step;
  this.DoScroll(-direction);
 },
 StopScrolling: function() {
  this.stopScrolling = true;
 },
 IsStopped: function() {
  return this.stopScrolling;
 }
});
(function(){
 ASPxScrollingManager.scrollWrapper = function(scrollableArea){
  this.scrollableArea = scrollableArea;
  this.Initialize();
 };
 ASPxScrollingManager.scrollWrapper.prototype = {
  Initialize: function(){
   this.scrollableArea.style.position = "relative";
   this.scrollableArea.parentNode.style.position = "relative";
  },
  GetScrollLeft: function(){ return _aspxPxToFloat(this.scrollableArea.style.left); },
  GetScrollTop:  function(){ return _aspxPxToFloat(this.scrollableArea.style.top); },
  SetScrollLeft: function(value){ this.scrollableArea.style.left = value + "px"; },
  SetScrollTop:  function(value){ this.scrollableArea.style.top  = value + "px"; }
 };
 ASPxScrollingManager.scrollWrapperTouchUI = function(scrollableArea, onScroll){
  this.scrollableArea = scrollableArea;
  this.scrollTimerId = -1;
  this.onScroll = onScroll;
  this.Initialize(onScroll);
 };
 ASPxScrollingManager.scrollWrapperTouchUI.prototype = {
  Initialize: function(){
   var div = this.scrollableArea.parentNode;
   var timeout = __aspxMSTouchUI ? 500 : 1000;
   var nativeScrollSupported = __aspxMSTouchUI || ASPxClientTouchUI.nativeWebKitScrollingSupported();
   this.onScrollCore = function(){
     _aspxClearTimer(this.scrollTimerId);
     if(this.onScrollLocked) return;
     this.scrollTimerId = window.setTimeout(this.onScrollByTimer, timeout);
    }.aspxBind(this);
   this.onScrollByTimer = function(){
     if(this.onScrollLocked) return;
     var direction = this.lastScrollTop < div.scrollTop ? 1 : -1;
     this.lastScrollTop = div.scrollTop;
     this.onScrollLocked = true;
     this.onScroll(direction);
     this.onScrollLocked = false;
    }.aspxBind(this);
   this.lastScrollTop = div.scrollTop;
   var onscroll = nativeScrollSupported ? this.onScrollCore : this.onScrollByTimer;
   _aspxAttachEventToElement(div, "scroll", onscroll);
   if(__aspxWebKitTouchUI)
    this.scrollExtender = ASPxClientTouchUI.MakeScrollable(div, {showHorizontalScrollbar: false});
  },
  GetScrollLeft: function(){ return -this.scrollableArea.parentNode.scrollLeft; },
  GetScrollTop:  function(){ return -this.scrollableArea.parentNode.scrollTop; },
  SetScrollLeft: function(value){
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollLeft = -value;
   this.onScrollLocked = false;
  },
  SetScrollTop:  function(value){
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollTop  = -value;
   this.onScrollLocked = false;
  }
 };
})();
var __aspxMIIdSuffix = "_DXI";
var __aspxMMIdSuffix = "_DXM";
var __aspxSBIdSuffix = "_DXSB";
var __aspxSBUIdEnd = "_U";
var __aspxSBDIdEnd = "_D";
ASPxClientMenuItemInfo = _aspxCreateClass(null, {
 constructor: function(menu, indexPath){
  var itemElement = menu.GetItemElement(indexPath);
  this.clientHeight = itemElement.clientHeight;
  this.clientWidth = itemElement.clientWidth;
  this.clientTop = _aspxGetClientTop(itemElement);
  this.clientLeft = _aspxGetClientLeft(itemElement);
  this.offsetHeight = itemElement.offsetHeight;
  this.offsetWidth = itemElement.offsetWidth;
  this.offsetTop = 0;
  this.offsetLeft = 0;
 }
});
ASPxClientMenuCssClasses = {};
ASPxClientMenuCssClasses.Prefix = "dxm-";
ASPxClientMenuCssClasses.Menu = "dxmLite";
ASPxClientMenuCssClasses.BorderCorrector = "dxmBrdCor";
ASPxClientMenuCssClasses.Disabled = ASPxClientMenuCssClasses.Prefix + "disabled";
ASPxClientMenuCssClasses.MainMenu = ASPxClientMenuCssClasses.Prefix + "main";
ASPxClientMenuCssClasses.PopupMenu = ASPxClientMenuCssClasses.Prefix + "popup";
ASPxClientMenuCssClasses.IE7 = ASPxClientMenuCssClasses.Prefix + "ie7";
ASPxClientMenuCssClasses.HorizontalMenu = ASPxClientMenuCssClasses.Prefix + "horizontal";
ASPxClientMenuCssClasses.VerticalMenu = ASPxClientMenuCssClasses.Prefix + "vertical";
ASPxClientMenuCssClasses.NoWrapMenu = ASPxClientMenuCssClasses.Prefix + "noWrap";
ASPxClientMenuCssClasses.AutoWidthMenu = ASPxClientMenuCssClasses.Prefix + "autoWidth";
ASPxClientMenuCssClasses.DX = "dx";
ASPxClientMenuCssClasses.Separator = ASPxClientMenuCssClasses.Prefix + "separator";
ASPxClientMenuCssClasses.Spacing = ASPxClientMenuCssClasses.Prefix + "spacing";
ASPxClientMenuCssClasses.Gutter = ASPxClientMenuCssClasses.Prefix + "gutter";
ASPxClientMenuCssClasses.WithoutImages = ASPxClientMenuCssClasses.Prefix + "noImages";
ASPxClientMenuCssClasses.Item = ASPxClientMenuCssClasses.Prefix + "item";
ASPxClientMenuCssClasses.ItemHovered = ASPxClientMenuCssClasses.Prefix + "hovered";
ASPxClientMenuCssClasses.ItemSelected = ASPxClientMenuCssClasses.Prefix + "selected";
ASPxClientMenuCssClasses.ItemChecked = ASPxClientMenuCssClasses.Prefix + "checked";
ASPxClientMenuCssClasses.ItemWithoutImage = ASPxClientMenuCssClasses.Prefix + "noImage";
ASPxClientMenuCssClasses.ItemWithSubMenu = ASPxClientMenuCssClasses.Prefix + "subMenu";
ASPxClientMenuCssClasses.ItemDropDownMode = ASPxClientMenuCssClasses.Prefix + "dropDownMode";
ASPxClientMenuCssClasses.ItemWithoutSubMenu = ASPxClientMenuCssClasses.Prefix + "noPopOut";
ASPxClientMenuCssClasses.ContentContainer = ASPxClientMenuCssClasses.Prefix + "content";
ASPxClientMenuCssClasses.Image = ASPxClientMenuCssClasses.Prefix + "image";
ASPxClientMenuCssClasses.PopOutContainer = ASPxClientMenuCssClasses.Prefix + "popOut";
ASPxClientMenuCssClasses.PopOutImage = ASPxClientMenuCssClasses.Prefix + "pImage";
ASPxClientMenuCssClasses.ImageLeft = ASPxClientMenuCssClasses.Prefix + "image-l";
ASPxClientMenuCssClasses.ImageRight = ASPxClientMenuCssClasses.Prefix + "image-r";
ASPxClientMenuCssClasses.ImageTop = ASPxClientMenuCssClasses.Prefix + "image-t";
ASPxClientMenuCssClasses.ImageBottom = ASPxClientMenuCssClasses.Prefix + "image-b";
ASPxClientMenuCssClasses.ScrollArea = ASPxClientMenuCssClasses.Prefix + "scrollArea";
ASPxClientMenuCssClasses.ScrollUpButton = ASPxClientMenuCssClasses.Prefix + "scrollUpBtn";
ASPxClientMenuCssClasses.ScrollDownButton = ASPxClientMenuCssClasses.Prefix + "scrollDownBtn";
ASPxClientMenuLiteRenderHelper = {};
ASPxClientMenuLiteRenderHelper.InlineInitializeElements = function(menu) {
 if(!menu.isPopupMenu)
  this.InlineInitializeMainMenuElements(menu, menu.GetMainElement());
 var commonContainer = menu.GetMainElement().parentNode;
 var subMenuElements = this.GetNodesByTagName(commonContainer, "DIV");
 for(var i = 0; i < subMenuElements.length; i++) {
  if(!menu.isPopupMenu && subMenuElements[i] == menu.GetMainElement())
   continue;
  this.InlineInitializeSubMenuElements(menu, subMenuElements[i]);
 }
};
ASPxClientMenuLiteRenderHelper.FindNodes = function(node, match) {
 var result = [];
 for(var i = 0; i < node.childNodes.length; i++) {
  var childNode = node.childNodes[i];
  if(!childNode.tagName)
   continue;
  if(match(childNode))
   result.push(childNode);
 }
 return result;
};
ASPxClientMenuLiteRenderHelper.GetNodesByTagName = function(node, tagName) {
 return this.FindNodes(node, function(childNode) {
  return childNode.tagName == tagName;
 });
};
ASPxClientMenuLiteRenderHelper.GetNodesByClassName = function(node, className) {
 return this.FindNodes(node, function(childNode) {
  return _aspxElementCssClassContains(childNode, className);
 });
};
ASPxClientMenuLiteRenderHelper.GetNodeByClassName = function(node, childNodeClassName) {
 var nodes = this.GetNodesByClassName(node, childNodeClassName);
 return nodes.length > 0 ? nodes[0] : null;
};
ASPxClientMenuLiteRenderHelper.InlineInitializeScrollElements = function(menu, indexPath, menuElement) {
 var scrollArea = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollArea);
 if(scrollArea) scrollArea.id = menu.GetScrollAreaId(indexPath);
 var scrollUpButton = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollUpButton);
 if(scrollUpButton) scrollUpButton.id = menu.GetScrollUpButtonId(indexPath);
 var scrollDownButton = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollDownButton);
 if(scrollDownButton) scrollDownButton.id = menu.GetScrollDownButtonId(indexPath);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeMainMenuElements = function(menu, menuElement) {
 var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
 for(var i = 0; i < itemElements.length; i++)
  this.InlineInitializeItemElement(menu, itemElements[i], "", i);
 this.InlineInitializeScrollElements(menu, "", menuElement);
};
ASPxClientMenuLiteRenderHelper.CalculateMenuElements = function(menu, menuElement) {
 var indexPath = menu.GetMenuIndexPathById(menuElement.id);
 var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
 var isVertical = menu.IsVertical(indexPath);
 ASPxClientMenuLiteRenderHelper.CalculateMinSize(isVertical, menuElement, contentElement, itemElements);
 ASPxClientMenuLiteRenderHelper.CalculateMenuItems(isVertical, menuElement, contentElement, itemElements);
 if(!isVertical)
  ASPxClientMenuLiteRenderHelper.CalculateSeparatorsAndSpacers(menuElement, contentElement);
};
ASPxClientMenuLiteRenderHelper.CalculateMenuItems = function(isVertical, menuElement, contentElement, itemElements) {
 if(menuElement.offsetWidth === 0) return;
 var menuWidth = _aspxGetCurrentStyle(menuElement).width;
 var menuRequireItemCorrection = isVertical && menuWidth;
 for(var i = 0; i < itemElements.length; i++) {
  if(!itemElements[i].style.width && !menuRequireItemCorrection) continue;
  var itemContentElement = itemElements[i].itemContentElement;
  if(!itemContentElement){
   var children = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
   itemContentElement = itemElements[i].itemContentElement = (children.length > 0) ? children[0] : null;
  }
  if(!itemContentElement || itemContentElement.offsetWidth === 0) continue;
  if(!itemElements[i].isItemCalculated) {
   if(!isVertical && __aspxIE && __aspxBrowserVersion < 8 && i == itemElements.length - 1)
    itemElements[i].style.width = "";
   _aspxSetElementFloat(itemContentElement, "none");
   var itemContentCurrentStyle = _aspxGetCurrentStyle(itemContentElement);
   if(!isVertical || itemContentCurrentStyle.textAlign != "center") {
    var originalPaddingLeft = parseInt(itemContentCurrentStyle.paddingLeft);
    var originalPaddingRight = parseInt(itemContentCurrentStyle.paddingRight);
    var leftChildrenWidth = 0, rightChildrenWidth = 0;
    for(var j = 0; j < itemElements[i].childNodes.length; j++){
     var child = itemElements[i].childNodes[j];
     if(!child.offsetWidth) continue;
     if(child !== itemContentElement){
      if(_aspxGetElementFloat(child) === "right")
       rightChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
      else if(_aspxGetElementFloat(child) === "left")
       leftChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
     }
    }
    if(leftChildrenWidth > 0 || rightChildrenWidth > 0)
     _aspxSetStyles(itemContentElement, {
      paddingLeft: leftChildrenWidth + originalPaddingLeft,
      paddingRight: rightChildrenWidth + originalPaddingRight
     }, true);
   }
   itemElements[i].isItemCalculated = true;
  }
  _aspxAdjustWrappedTextInContainer(itemContentElement);
  var itemContentFound = false;
  for(var j = 0; j < itemElements[i].childNodes.length; j++){
   var child = itemElements[i].childNodes[j];
   if(!child.offsetWidth) continue;
   var contentHeight = itemContentElement.offsetHeight;
   if(child !== itemContentElement){
    if(itemContentFound)
     child.style.marginTop = "-" + contentHeight + "px";
    else
     child.style.marginBottom = "-" + contentHeight + "px";
   }
   else
    itemContentFound = true;
  }
 }
};
ASPxClientMenuLiteRenderHelper.CalculateSubMenu = function(menu, parentElement, recalculate) {
 if(!parentElement) return;
 var menuElement = menu.GetMenuMainCell(parentElement);
 var contentElement = this.GetContentElement(menuElement);
 if(__aspxIE && __aspxBrowserVersion < 8) {
  parentElement.style.width = "";
  parentElement.style.height = "";
  if(parentElement.isSubMenuCalculated)
   menuElement.style.width = "";
  var contentWidth;
  this.ProsessRightFloatElements(contentElement, function(elements) {
   if(menu.rtl)
    ASPxClientMenuLiteRenderHelper.FreezeElementSizes(elements);
   contentWidth = contentElement.offsetWidth;
  });
  if(contentElement.tagName == "UL") {
   contentElement.style.height = "";
   contentElement.style.height = contentElement.offsetHeight + "px";
  }
  menuElement.style.width = (contentWidth || contentElement.offsetWidth) + "px";
  if(contentElement.style.width !== "")
   contentElement.style.width = menuElement.style.width;
  var separatorElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Separator);
  for(var i = 0; i < separatorElements.length; i++){
   _aspxChangeStyleAttribute(separatorElements[i], "width", "100%");
   _aspxRestoreStyleAttribute(separatorElements[i], "width");
  }
  parentElement.isSubMenuCalculated = true;
 }
 else {
  if(!parentElement.isSubMenuCalculated || recalculate){
   menuElement.style.width = "";
   menuElement.style.display = "table";
   menuElement.style.borderSpacing = "0px";
   parentElement.isSubMenuCalculated = true;
   if(contentElement.tagName === "UL") {
    if(contentElement.offsetWidth > 0) {
     menuElement.style.width = contentElement.offsetWidth + "px";
     menuElement.style.display = "";
     if(_aspxIsPercentageSize(contentElement.style.width))
      contentElement.style.width = menuElement.style.width;
    }
    else
     parentElement.isSubMenuCalculated = false;
   }
  }
 }
 ASPxClientMenuLiteRenderHelper.CalculateSubMenuItems(menuElement, contentElement);
};
ASPxClientMenuLiteRenderHelper.CalculateSubMenuItems = function(menuElement, contentElement) {
 var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
 ASPxClientMenuLiteRenderHelper.CalculateMenuItems(true, menuElement, contentElement, itemElements);
};
ASPxClientMenuLiteRenderHelper.CalculateMinSize = function(isVertical, menuElement, contentElement, itemElements) {
 if(menuElement.isMinSizeCalculated) return;
 if(isVertical){
  _aspxChangeStyleAttribute(contentElement, "width", "1px");
  for(var i = 0; i < itemElements.length; i++){
   var contentElements = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
   if(!contentElements || contentElements.length === 0 || itemElements[i].offsetWidth === 0) continue;
   ASPxClientMenuLiteRenderHelper.CalculateItemMinSize(itemElements[i]);
  }
  _aspxRestoreStyleAttribute(contentElement, "width");
 }
 else {
  var isAutoWidth = menuElement.className.indexOf(ASPxClientMenuCssClasses.AutoWidthMenu) > -1;
  var noWrap = menuElement.className.indexOf(ASPxClientMenuCssClasses.NoWrapMenu) > -1;
  menuElement.className = menuElement.className.replace(ASPxClientMenuCssClasses.NoWrapMenu, "");
  menuElement.className = menuElement.className.replace(ASPxClientMenuCssClasses.AutoWidthMenu, "");
  _aspxChangeStyleAttribute(menuElement, "width", "1px");
  for(var i = 0; i < itemElements.length; i++){
   var contentElements = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
   if(!contentElements || contentElements.length === 0 || itemElements[i].offsetWidth === 0) continue;
   var textContainer = _aspxGetChildByTagName(contentElements[0], "SPAN", 0);
   if(textContainer && _aspxGetCurrentStyle(textContainer).whiteSpace !== "nowrap")
    _aspxAdjustWrappedTextInContainer(contentElements[0]);
   ASPxClientMenuLiteRenderHelper.CalculateItemMinSize(itemElements[i]);
  }
  if(isAutoWidth)
   menuElement.className += " " + ASPxClientMenuCssClasses.AutoWidthMenu;
  if(noWrap)
   menuElement.className += " " + ASPxClientMenuCssClasses.NoWrapMenu;
  if(isAutoWidth || noWrap)
   menuElement.style.minWidth = (contentElement.offsetWidth + _aspxGetLeftRightBordersAndPaddingsSummaryValue(menuElement)) + "px";
  _aspxRestoreStyleAttribute(menuElement, "width");
 }
 menuElement.isMinSizeCalculated = true;
};
ASPxClientMenuLiteRenderHelper.CalculateItemMinSize = function(itemElement) {
 var sizeCorrection = (__aspxIE && __aspxBrowserVersion > 8) ? 1 : 0;
 itemElement.style.minWidth = "";
 var childrenWidth = 0;
 for(var j = 0; j < itemElement.childNodes.length; j++){
  var child = itemElement.childNodes[j];
  if(!child.offsetWidth) continue;
  var float = _aspxGetElementFloat(child);
  if(float === "none"){
   childrenWidth = child.offsetWidth;
   break;
  }
  else
   childrenWidth += child.offsetWidth;
 }
 itemElement.style.minWidth = (childrenWidth + sizeCorrection) + "px";
};
ASPxClientMenuLiteRenderHelper.CalculateSeparatorsAndSpacers = function(menuElement, contentElement) {
 var spacerElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Spacing);
 var spacerAndSeparatorElements = spacerElements.concat(this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Separator));
 for(var i = 0; i < spacerAndSeparatorElements.length; i++)
  spacerAndSeparatorElements[i].style.height = "";
 var isAutoWidth = menuElement.className.indexOf(ASPxClientMenuCssClasses.AutoWidthMenu) > -1;
 var noWrap = menuElement.className.indexOf(ASPxClientMenuCssClasses.NoWrapMenu) > -1;
 var menuHeight = contentElement.clientHeight;
 if(!isAutoWidth && !noWrap){
  _aspxChangeStyleAttribute(contentElement, "width", "100000px");
  menuHeight = contentElement.clientHeight;
  _aspxRestoreStyleAttribute(contentElement, "width");
 }
 for(var i = 0; i < spacerAndSeparatorElements.length; i++)
  spacerAndSeparatorElements[i].style.height = (menuHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(spacerAndSeparatorElements[i]) - _aspxGetTopBottomMargins(spacerAndSeparatorElements[i])) + "px";
 for(var i = 0; i < spacerElements.length; i++)
  spacerElements[i].style.minWidth = spacerElements[i].style.width;
};
ASPxClientMenuLiteRenderHelper.ProsessRightFloatElements = function(contentElement, action) {
 var raw = _aspxGetChildrenByPartialClassName(contentElement, ASPxClientMenuCssClasses.Prefix).concat([ contentElement ]);
 var list = [ ];
 for(var i = 0; i < raw.length; i++) {
  if(raw[i].offsetWidth < 1 || _aspxGetElementFloat(raw[i]) != "right")
   continue;
  list.push(raw[i]);
 }
 var directionChanged;
 if(contentElement.className == ASPxClientMenuCssClasses.DX &&
  contentElement.tagName.toUpperCase() == "DIV" && _aspxGetElementDirection(contentElement) == "rtl") {
  _aspxSetElementDirection(contentElement, "ltr");
  directionChanged = true;
 }
 for(var i = 0; i < list.length; i++)
  _aspxSetElementFloat(list[i], "left");
 action(list);
 for(var i = 0; i < list.length; i++)
  _aspxSetElementFloat(list[i], "");
 if(directionChanged)
  _aspxSetElementDirection(contentElement, "rtl");
};
ASPxClientMenuLiteRenderHelper.FreezeElementSizes = function(elements) {
 for(var i = 0; i < elements.length; i++)
  elements[i].style.width = elements[i].offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(elements[i]) + "px";
};
ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuElements = function(menu, parentElement) {
 parentElement.style.position = "absolute";
 var indexPath = menu.GetMenuIndexPathById(parentElement.id);
 var borderCorrectorElement = this.GetNodeByClassName(parentElement, ASPxClientMenuCssClasses.BorderCorrector);
 if(borderCorrectorElement != null) {
  borderCorrectorElement.id = menu.GetMenuBorderCorrectorElementId(indexPath);
  borderCorrectorElement.style.position = "absolute";
  parentElement.removeChild(borderCorrectorElement);
  parentElement.parentNode.appendChild(borderCorrectorElement);
 }
 this.InlineInitializeSubMenuMenuElement(menu, parentElement);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuMenuElement = function(menu, parentElement) {
 var menuElement = this.GetNodeByClassName(parentElement, ASPxClientMenuCssClasses.PopupMenu);
 var indexPath = menu.GetMenuIndexPathById(parentElement.id);
 menuElement.id = menu.GetMenuMainElementId(indexPath);
 var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 if(contentElement != null) {
  var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
  var parentIndexPath = parentElement == menu.GetMainElement() ? "" : indexPath;
  for(var i = 0; i < itemElements.length; i++) {
   var itemElementId = itemElements[i].id;
   if(itemElementId && aspxGetMenuCollection().GetMenu(itemElementId) != menu)
    continue;
   this.InlineInitializeItemElement(menu, itemElements[i], parentIndexPath, i);
  }
 }
 this.InlineInitializeScrollElements(menu, indexPath, menuElement);
};
ASPxClientMenuLiteRenderHelper.HasSubMenuTemplate = function(menuElement) {
 var contentElement = this.GetContentElement(menuElement);
 return contentElement && (contentElement.tagName != "UL" || !_aspxGetChildrenByPartialClassName(contentElement, ASPxClientMenuCssClasses.ContentContainer).length);
};
ASPxClientMenuLiteRenderHelper.GetContentElement = function(menuElement) {
 var contentElement = _aspxGetChildByTagName(menuElement, "DIV", 0);
 if( contentElement &&
  contentElement.className == ASPxClientMenuCssClasses.DX &&
  contentElement.parentNode == menuElement)
  return contentElement;
 contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
 if(contentElement)
  return contentElement;
 return _aspxGetChildByTagName(menuElement, "TABLE", 0);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeItemElement = function(menu, itemElement, parentIndexPath, visibleIndex) {
 function getItemIndex(visibleIndex) {
  var itemData = parentItemData[Math.max(visibleIndex, 0)];
  return itemData.constructor == Array
   ? itemData[0]
   : itemData;
 }
 var parentItemData = menu.renderData[parentIndexPath],
  prepareItemOnClick = parentItemData[visibleIndex].constructor == Array,
  indexPathPrefix = parentIndexPath + (parentIndexPath != "" ? __aspxItemIndexSeparator : ""),
  indexPath = indexPathPrefix + getItemIndex(visibleIndex),
  prevIndexPath = indexPathPrefix + getItemIndex(visibleIndex - 1);
 itemElement.id = menu.GetItemElementId(indexPath);
 aspxAssignAccessabilityEventsToChildrenLinks(itemElement);
 var separatorElement = itemElement.previousSibling;
 if(separatorElement && separatorElement.className) {
  if(_aspxElementCssClassContains(separatorElement, ASPxClientMenuCssClasses.Spacing))
   separatorElement.id = menu.GetItemIndentElementId(prevIndexPath);
  else if(_aspxElementCssClassContains(separatorElement, ASPxClientMenuCssClasses.Separator))
   separatorElement.id = menu.GetItemSeparatorElementId(indexPath);
 }
 var contentElementParent = itemElement;
 var contentElement = this.GetNodeByClassName(contentElementParent, ASPxClientMenuCssClasses.ContentContainer);
 if(contentElement != null) {
  contentElement.id = menu.GetItemContentElementId(indexPath);
  var imageElement = this.GetNodeByClassName(contentElement, ASPxClientMenuCssClasses.Image);
  if(imageElement == null) {
   var hyperLinkElement = this.GetNodeByClassName(contentElement, ASPxClientMenuCssClasses.DX);
   if(hyperLinkElement != null)
    imageElement = this.GetNodeByClassName(hyperLinkElement, ASPxClientMenuCssClasses.Image);
  }
  if(imageElement != null)
   imageElement.id = menu.GetItemImageId(indexPath);
 }
 else
  prepareItemOnClick = false;
 var popOutElement = this.GetNodeByClassName(itemElement, ASPxClientMenuCssClasses.PopOutContainer);
 if(popOutElement != null) {
  popOutElement.id = menu.GetItemPopOutElementId(indexPath);
  var popOutImageElement = this.GetNodeByClassName(popOutElement, ASPxClientMenuCssClasses.PopOutImage);
  if(popOutImageElement != null)
   popOutImageElement.id = menu.GetItemPopOutImageId(indexPath);
 }
 if(prepareItemOnClick)
  this.InlineInitializeItemOnClick(menu, itemElement, indexPath);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeItemOnClick = function(menu, itemElement, indexPath) {
 var name = menu.name;
 var onclick = this.GetItemOnClick(menu, name, itemElement, indexPath);
 if(menu.IsDropDownItem(indexPath)) {
  var contentElement = menu.GetItemContentElement(indexPath);
  var dropDownElement = menu.GetItemPopOutElement(indexPath);
  var dropDownOnclick = this.GetItemDropdownOnClick(name, itemElement, indexPath);
  _aspxAttachEventToElement(contentElement, "click", onclick);
  _aspxAttachEventToElement(dropDownElement, "click", dropDownOnclick);
 }
 else
  _aspxAttachEventToElement(itemElement, "click", onclick);
 if(itemElement.style.cursor == "")
  itemElement.style.cursor = "pointer";
};
ASPxClientMenuLiteRenderHelper.GetItemOnClick = function (menu, name, itemElement, indexPath) {
 var sendPostBackHandler = function () {
  menu.SendPostBack("CLICK:" + indexPath);
 };
 var itemClickHandler = function(e) {
  aspxMIClick(e, name, indexPath);
 };
 var handler = menu.autoPostBack && !menu.IsClientSideEventsAssigned() && !_aspxGetChildByTagName(itemElement, "A", 0)
  ? sendPostBackHandler
  : itemClickHandler;
 return function (e) {
  if (!itemElement.clientDisabled)
   handler(e);
 };
};
ASPxClientMenuLiteRenderHelper.GetItemDropdownOnClick = function(name, itemElement, indexPath) {
 return function(e) {
  if(!itemElement.clientDisabled)
   aspxMIDDClick(e, name, indexPath);
 };
};
ASPxClientMenuLiteRenderHelper.ChangeItemEnabledAttributes = function(itemElement, enabled) {
 if(itemElement) {
  itemElement.clientDisabled = !enabled;
  _aspxChangeStyleAttributesMethod(enabled)(itemElement, "cursor");
  var hyperLink = _aspxGetChildByTagName(itemElement, "A", 0);
  if(hyperLink)
   _aspxChangeAttributesMethod(enabled)(hyperLink, "href");
 }
};
ASPxClientMenuScrollHelper = _aspxCreateClass(null, {
 constructor: function(menu, indexPath) {
  this.menu = menu;
  this.indexPath = indexPath;
  this.scrollingAreaElement = null;
  this.manager = null;
  this.initialized = false;
  this.visibleItems = [];
  this.itemsHeight = 0;
  this.scrollHeight = 0;
  this.scrollUpButtonHeight = 0;
  this.scrollDownButtonHeight = 0;
  this.scrollAreaHeight = null;
  this.scrollUpButtonVisible = false;
  this.scrollDownButtonVisible = false;
 },
 Initialize: function(){
  if(this.initialized) return;
  this.scrollingAreaElement = this.menu.GetScrollContentItemsOuterContainer(this.indexPath);
  var vector = [ 0, 1 ];
  this.manager = new ASPxScrollingManager(this, this.scrollingAreaElement, vector,
   function(manager, direction){
    manager.owner.OnBeforeScrolling(direction);
   },
   function(manager, direction){
    manager.owner.OnAfterScrolling(direction);
   }
  );
  this.ShowScrollButtons();
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton){
   this.scrollUpButtonHeight = this.GetScrollButtonHeight(scrollUpButton)
   _aspxSetElementSelectionEnabled(scrollUpButton, false);
  }
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton){
   this.scrollDownButtonHeight = this.GetScrollButtonHeight(scrollDownButton);
   _aspxSetElementSelectionEnabled(scrollDownButton, false);
  }
  if(__aspxWebKitTouchUI){
   var preventDefault = function(event){event.preventDefault();};
   _aspxAttachEventToElement(scrollUpButton, "touchstart", preventDefault);
   _aspxAttachEventToElement(scrollDownButton, "touchstart", preventDefault);
  }
  this.HideScrollButtons();
  this.initialized = true;
 },
 GetScrollButtonHeight: function(button) {
  var style = _aspxGetCurrentStyle(button);
  return button.offsetHeight + _aspxPxToInt(style.marginTop) + _aspxPxToInt(style.marginBottom);
 },
 FillVisibleItemsList: function(){
  var index = 0;
  this.visibleItems = [];
  while(true){
   var childIndexPath = (this.indexPath != "" ? this.indexPath + __aspxItemIndexSeparator : "") + index;
   var itemElement = this.menu.GetItemElement(childIndexPath);
   if(itemElement == null)
    break;
   if(_aspxGetElementDisplay(itemElement))
    this.visibleItems.push(itemElement);
   index++;
  }
 },
 CanCalculate: function(){
  return this.scrollingAreaElement && _aspxElementIsDisplayed(this.scrollingAreaElement);
 },
 Calculate: function(scrollHeight){
  if(!this.CanCalculate()) return;
  this.FillVisibleItemsList();
  this.itemsHeight = 0;
  this.scrollHeight = scrollHeight;
  var itemsContainer = this.menu.GetScrollContentItemsContainer(this.indexPath);
  if(itemsContainer) this.itemsHeight = itemsContainer.offsetHeight;
  this.SetPosition(0);
  this.CalculateScrollingElements(-1);
 },
 GetPosition: function(){
  return -this.manager.GetScrolledAreaPosition();
 },
 SetPosition: function(pos){
  this.manager.SetScrolledAreaPosition(-pos);
 },
 CalculateScrollingElements: function(direction){
  if(this.itemsHeight <= this.scrollHeight){
   this.scrollUpButtonVisible = false;
   this.scrollDownButtonVisible = false;
   this.scrollAreaHeight = null;
   this.SetPosition(0);
  }
  else{
   var scrollTop = this.GetPosition();
   this.scrollAreaHeight = this.scrollHeight;
   if(direction > 0){
    var showScrollUpButton = !this.scrollUpButtonVisible;
    this.scrollUpButtonVisible = true;
    this.scrollAreaHeight -= this.scrollUpButtonHeight;
    this.scrollDownButtonVisible = this.itemsHeight - this.scrollAreaHeight - scrollTop > this.scrollDownButtonHeight;
    if(this.scrollDownButtonVisible) {
     this.scrollAreaHeight -= this.scrollDownButtonHeight;
     if(showScrollUpButton)
      this.SetPosition(this.GetPosition() + this.scrollUpButtonHeight);
    }
    else {
     this.SetPosition(this.itemsHeight - this.scrollAreaHeight);
    }
   }
   else{
    this.scrollDownButtonVisible = true;
    this.scrollAreaHeight -= this.scrollDownButtonHeight;
    this.scrollUpButtonVisible = scrollTop > this.scrollUpButtonHeight;
    if(this.scrollUpButtonVisible)
     this.scrollAreaHeight -= this.scrollUpButtonHeight;
    else
     this.SetPosition(0);
   }
   if(this.scrollAreaHeight < 1) this.scrollAreaHeight = 1;
  }
  this.UpdateScrollingElements();
 },
 UpdateScrollingElements: function(){
  this.UpdateScrollAreaHeight();
  this.UpdateScrollButtonsVisibility();
 },
 UpdateScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   scrollAreaElement.style.height = (this.scrollAreaHeight) ? (this.scrollAreaHeight + "px") : "";
 },
 UpdateScrollButtonsVisibility: function() {
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton) _aspxSetElementDisplay(scrollUpButton, this.scrollUpButtonVisible);
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton) _aspxSetElementDisplay(scrollDownButton, this.scrollDownButtonVisible);
 },
 ChangeScrollButtonsVisibility: function(visible) {
  this.scrollUpButtonVisible = visible;
  this.scrollDownButtonVisible = visible;
  this.UpdateScrollButtonsVisibility();
 },
 ShowScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(true);
 },
 HideScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(false);
 },
 ResetScrolling: function() {
  if(!this.initialized)
   return;
  this.HideScrollButtons();
  this.SetPosition(0);
  this.scrollAreaHeight = null;
  this.UpdateScrollAreaHeight();
 },
 GetScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   return scrollAreaElement.offsetHeight;
  return 0;
 },
 OnAfterScrolling: function(direction){
  this.CalculateScrollingElements(direction);
 },
 OnBeforeScrolling: function(direction){
  var scrollButton = (direction > 0) ? this.menu.GetScrollDownButtonElement(this.indexPath) :
   this.menu.GetScrollUpButtonElement(this.indexPath);
  if(!scrollButton || !_aspxGetElementDisplay(scrollButton))
   this.manager.StopScrolling();
 },
 StartScrolling: function(direction, delay, step) {
  this.manager.StartScrolling(direction, delay, step);
 },
 StopScrolling: function() {
  this.manager.StopScrolling();
 }
});
ASPxClientMenuScrollHelper.GetMenuByScrollButtonId = function(id){
 var menuName = aspxGetMenuCollection().GetMenuNameBySuffixes(id, [__aspxSBIdSuffix]);
 return aspxGetMenuCollection().Get(menuName);
}
ASPxClientMenuBase = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.createIFrames = false;
  this.renderData = null;
  this.allowSelectItem = false;
  this.allowCheckItems = false;
  this.allowMultipleCallbacks = false;
  this.appearAfter = 300;
  this.slideAnimationDuration = 60;
  this.disappearAfter = 500;
  this.enableAnimation = true;
  this.checkedItems = [ ];
  this.itemCheckedGroups = [ ];
  this.lockHoverEvents = false;
  this.popupToLeft = false;
  this.popupCount = 0;
  this.rootItem = null;
  this.showSubMenus = false;
  this.savedCallbackHoverItem = null;
  this.savedCallbackHoverElement = null;
  this.scrollInfo = [];
  this.scrollHelpers = {};
  this.scrollVertOffset = 1;
  this.rootSubMenuFIXOffset = 0;
  this.rootSubMenuFIYOffset = 0;
  this.rootSubMenuLIXOffset = 0;
  this.rootSubMenuLIYOffset = 0;
  this.rootSubMenuXOffset = 0;
  this.rootSubMenuYOffset = 0;
  this.subMenuFIXOffset = 0;
  this.subMenuFIYOffset = 0;
  this.subMenuLIXOffset = 0;
  this.subMenuLIYOffset = 0;
  this.subMenuXOffset = 0;
  this.subMenuYOffset = 0;
  this.maxHorizontalOverlap = -3;
  this.sizingConfig.allowSetHeight = false;
  this.ItemClick = new ASPxClientEvent();
  this.ItemMouseOver = new ASPxClientEvent();
  this.ItemMouseOut = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  aspxGetMenuCollection().Add(this);
 },
 Initialize: function(){
  this.constructor.prototype.Initialize.call(this);
  var main = this.GetMainElement();
  if(__aspxIE && __aspxBrowserMajorVersion < 8 && this.rtl && _aspxElementCssClassContains(main, ASPxClientMenuCssClasses.HorizontalMenu))
   ASPxClientMenuLiteRenderHelper.ProsessRightFloatElements(main, ASPxClientMenuLiteRenderHelper.FreezeElementSizes);
 },
 InlineInitialize: function(){
  ASPxClientControl.prototype.InlineInitialize.call(this);
  ASPxClientMenuLiteRenderHelper.InlineInitializeElements(this);
  if(__aspxIE && __aspxBrowserMajorVersion == 7) {
   var mainElement = this.GetMainElement();
   var width = _aspxPxToInt(mainElement.style.width);
   if(width > 0) {
    width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
    if(width > 0)
     mainElement.style.width = width + "px";
   }
  }
  this.InitializeInternal(true);
  if(this.IsCallbacksEnabled()){
   this.showSubMenus = this.GetLoadingPanelElement() != null;
   this.CreateCallback("DXMENUCONTENT");
  }
  else
   this.showSubMenus = true;
  this.popupToLeft = this.rtl;
 },
 InitializeInternal: function(inline) {
  this.InitializeCheckedItems();
  this.InitializeSelectedItem();
  this.InitializeEnabledAndVisible(!inline || !this.IsCallbacksEnabled());
  if(!this.IsCallbacksEnabled())
   this.InitializeScrollableMenus();
 },
 InitializeEnabledAndVisible: function(recursive){
  if(this.rootItem == null) return;
  for(var i = 0; i < this.rootItem.items.length; i++)
   this.rootItem.items[i].InitializeEnabledAndVisible(recursive);
 },
 InitializeScrollableMenus: function() {
  var info = eval(this.scrollInfo);
  this.scrollHelpers = {};
  for(var i = 0; i < info.length; i++)
   this.scrollHelpers[info[i]] = new ASPxClientMenuScrollHelper(this, info[i]);
 },
 IsClientSideEventsAssigned: function() {
  return !this.ItemClick.IsEmpty()
   || !this.ItemMouseOver.IsEmpty()
   || !this.ItemMouseOut.IsEmpty()
   || !this.PopUp.IsEmpty()
   || !this.CloseUp.IsEmpty()
   || !this.Init.IsEmpty();
 },
 IsCallbacksEnabled: function(){
  return _aspxIsFunction(this.callBack);
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 GetMenuElementId: function(indexPath) {
  return this.name + __aspxMMIdSuffix + indexPath + "_";
 },
 GetMenuMainElementId: function(indexPath) {
  return this.name + "_DXME" + indexPath + "_";
 },
 GetMenuBorderCorrectorElementId: function(indexPath) {
  return this.name + "_DXMBC" + indexPath + "_";
 },
 GetMenuIFrameElementId: function(indexPath) {
  return this.name + "_DXMIF" + this.GetMenuLevel(indexPath);
 },
 GetScrollAreaId: function(indexPath) {
  return this.name + "_DXSA" + indexPath;
 },
 GetMenuTemplateContainerID: function(indexPath) {
  return this.name + "_MTCNT" + indexPath;
 },
 GetItemTemplateContainerID: function(indexPath) {
  return this.name + "_ITCNT" + indexPath;
 },
 GetScrollUpButtonId: function(indexPath) {
  return this.name + __aspxSBIdSuffix + indexPath + __aspxSBUIdEnd;
 },
 GetScrollDownButtonId: function(indexPath) {
  return this.name + __aspxSBIdSuffix + indexPath + __aspxSBDIdEnd;
 },
 GetItemElementId: function(indexPath) {
  return this.name + __aspxMIIdSuffix + indexPath + "_";
 },
 GetItemContentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "T";
 },
 GetItemPopOutElementId: function(indexPath){
  return this.GetItemElementId(indexPath) + "P";
 },
 GetItemImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "Img";
 },
 GetItemPopOutImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "PImg";
 },
 GetItemIndentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "II";
 },
 GetItemSeparatorElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "IS";
 },
 GetMenuElement: function(indexPath){
  return _aspxGetElementById(this.GetMenuElementId(indexPath));
 },
 GetMenuIFrameElement: function(indexPath){
  var elementId = this.GetMenuIFrameElementId(indexPath);
  var element = _aspxGetElementById(elementId);
  if(!element && this.createIFrames)
   return this.CreateIFrameElement(elementId);
  return element;
 },
 CreateIFrameElement: function(elementId) {
  var element = document.createElement("IFRAME");
  _aspxSetAttribute(element, "id", elementId);
  _aspxSetAttribute(element, "src", "javascript:false");
  _aspxSetAttribute(element, "scrolling", "no");
  _aspxSetAttribute(element, "frameborder", "0");
  element.style.position = "absolute";
  element.style.display = "none";
  element.style.zIndex = "19997";
  element.style.filter = "progid:DXImageTransform.Microsoft.Alpha(Style=0, Opacity=0)";
  _aspxInsertElementAfter(element, this.GetMainElement());
  return element;
 },
 GetMenuBorderCorrectorElement: function(indexPath){
  return _aspxGetElementById(this.GetMenuBorderCorrectorElementId(indexPath));
 },
 GetMenuMainCell: function(element){
  return this.GetMenuMainTable(element);
 },
 GetMenuMainTable: function(element){
  var indexPath = this.GetIndexPathById(element.id, true);
  var shadowTable = _aspxGetElementById(this.GetMenuMainElementId(indexPath));
  return shadowTable != null ? shadowTable : element;
 },
 GetScrollAreaElement: function(indexPath){
  return _aspxGetElementById(this.GetScrollAreaId(indexPath));
 },
 GetScrollContentItemsOuterContainer: function(indexPath){
  return _aspxGetChildByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
 },
 GetScrollContentItemsContainer: function(indexPath){
  return _aspxGetChildByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
 },
 GetScrollUpButtonElement: function(indexPath){
  return _aspxGetElementById(this.GetScrollUpButtonId(indexPath));
 },
 GetScrollDownButtonElement: function(indexPath){
  return _aspxGetElementById(this.GetScrollDownButtonId(indexPath));
 },
 GetItemElement: function(indexPath){
  return _aspxGetElementById(this.GetItemElementId(indexPath));
 },
 GetItemTemplateElement: function(indexPath){
  return this.GetItemTextTemplateContainer(indexPath);
 },
 GetItemTemplateContainer: function(indexPath) {
  return this.GetItemElement(indexPath);
 },
 GetItemTextTemplateContainer: function(indexPath) {
  return this.GetItemContentElement(indexPath);
 },
 GetItemContentElement: function(indexPath){
  return _aspxGetElementById(this.GetItemContentElementId(indexPath));
 },
 GetItemPopOutElement: function(indexPath){
  return _aspxGetElementById(this.GetItemPopOutElementId(indexPath));
 },
 GetSelectedItemInputElement: function(){
  return _aspxGetElementById(this.name + "SI");
 },
 GetCheckedItemsInputElement: function(){
  return _aspxGetElementById(this.name + "CI");
 },
 GetPopOutElements: function(){
  var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxm-popOut");
  for(var indexPath in this.renderData){
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement)
    elements = elements.concat(_aspxGetDescendantNodesByClassName(menuElement, "dxm-popOut"));
  }
  return elements;
 },
 GetPopOutImages: function(){
  var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxm-pImage");
  for(var indexPath in this.renderData){
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement)
    elements = elements.concat(_aspxGetDescendantNodesByClassName(menuElement, "dxm-pImage"));
  }
  return elements;
 },
 GetSubMenuXPosition: function(indexPath) {
  var pos = this.GetLiteSubMenuXPosition(indexPath);
  if(__aspxWebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   pos -= document.body.offsetLeft;
  return pos;
 },
 GetLiteSubMenuXPosition: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return _aspxGetAbsoluteX(itemElement)
   + (this.IsVertical(indexPath) ? itemElement.clientWidth + itemElement.clientLeft : 0);
 },
 GetSubMenuYPosition: function(indexPath){
  var position = 0;
  var element = this.GetItemElement(indexPath);
  if(element != null){
   if(this.IsVertical(indexPath)){
    position = _aspxGetAbsoluteY(element);
   }
   else{
    if(__aspxNetscapeFamily || __aspxOpera && __aspxBrowserVersion >= 9 || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome || __aspxAndroidDefaultBrowser)
     position = _aspxGetAbsoluteY(element) + element.offsetHeight - _aspxGetClientTop(element);
    else if(__aspxWebKitFamily)
     position = _aspxGetAbsoluteY(element) + element.offsetHeight + element.offsetTop - _aspxGetClientTop(element);
    else
     position = _aspxGetAbsoluteY(element) + element.clientHeight + _aspxGetClientTop(element);
   }
  }
  if(__aspxWebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   position -= document.body.offsetTop;
  return position;
 },
 GetClientSubMenuXPosition: function(element, x, indexPath){
  var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
  var itemWidth = itemInfo.clientWidth;
  var itemOffsetWidth = itemInfo.offsetWidth;
  var subMenuWidth = this.GetMenuMainCell(element).offsetWidth;
  var docClientWidth = _aspxGetDocumentClientWidth();
  if(this.IsVertical(indexPath)){
   var left = x - _aspxGetDocumentScrollLeft();
   var right = left + subMenuWidth;
   var toLeftX = x - subMenuWidth - itemWidth;
   var toLeftLeft = left - subMenuWidth - itemWidth;
   var toLeftRight = right - subMenuWidth - itemWidth;
   if(this.IsCorrectionDisableMethodRequired(indexPath)){
    return this.GetCorrectionDisabledResult(x, toLeftX);
   }
   if(this.popupToLeft){
    if(toLeftLeft > this.maxHorizontalOverlap){
     return toLeftX;
    }
    if(docClientWidth - right > this.maxHorizontalOverlap || !this.rtl) {
     this.popupToLeft = false;
     return x;
    }
    return toLeftX;
   }
   else{
    if(docClientWidth - right > this.maxHorizontalOverlap){
     return x;
    }
    if(toLeftLeft > this.maxHorizontalOverlap || this.rtl){
     this.popupToLeft = true;
     return toLeftX;
    }
    return x;
   }
  }
  else{
   var left = x - _aspxGetDocumentScrollLeft();
   var right = left + subMenuWidth;
   var toLeftX = x - subMenuWidth + itemOffsetWidth;
   var toLeftLeft = left - subMenuWidth + itemOffsetWidth;
   var toLeftRight = right - subMenuWidth + itemOffsetWidth;
   if(this.popupToLeft){
    if(toLeftLeft < 0 && toLeftLeft < docClientWidth - right){
     this.popupToLeft = false;
     return x;
    }
    else
     return toLeftX;
   }
   else{
    if(docClientWidth - right < 0 && docClientWidth - right < toLeftLeft){
     this.popupToLeft = true;
     return toLeftX;
    }
    else
     return x;
   }
  }
 },
 GetClientSubMenuYPosition: function(element, y, indexPath){
  var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
  var itemHeight = itemInfo.offsetHeight;
  var itemOffsetHeight = itemInfo.offsetHeight;
  var subMenuHeight = this.GetMenuMainCell(element).offsetHeight;
  var menuItemTop = y - _aspxGetDocumentScrollTop();
  var subMenuBottom = menuItemTop + subMenuHeight;
  var docClientHeight = _aspxGetDocumentClientHeight();
  var clientSubMenuYPos = y;
  if(this.IsVertical(indexPath)){
   var notEnoughSpaceToShowDown = subMenuBottom > docClientHeight;
   var menuItemBottom = menuItemTop + itemHeight;
   if(menuItemBottom > docClientHeight) {
    menuItemBottom = docClientHeight;
    itemHeight = menuItemBottom - menuItemTop;
   }
   var notEnoughSpaceToShowUp = menuItemBottom < subMenuHeight;
   var subMenuIsFitToDisplayFrames = docClientHeight >= subMenuHeight;
   if (!subMenuIsFitToDisplayFrames) clientSubMenuYPos = y - menuItemTop;
   else if(notEnoughSpaceToShowDown){
    if (notEnoughSpaceToShowUp){
     var docClientBottom = _aspxGetDocumentScrollTop() + docClientHeight;
     clientSubMenuYPos = docClientBottom - subMenuHeight;
    } else
     clientSubMenuYPos =  y + itemHeight - subMenuHeight;
   }
  }
  else{
   if (this.IsHorizontalSubmenuNeedInversion(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight))
    clientSubMenuYPos = y - subMenuHeight - itemHeight;
  }
  return clientSubMenuYPos;
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight){
  return subMenuBottom > docClientHeight && menuItemTop - subMenuHeight - itemHeight > docClientHeight - subMenuBottom;
 },
 IsCorrectionDisableMethodRequired: function(indexPath){
  return false;
 },
 HasChildren: function(indexPath){
  return (this.GetMenuElement(indexPath) != null);
 },
 IsVertical: function(indexPath){
  return true;
 },
 IsRootItem: function(indexPath){
  return this.GetMenuLevel(indexPath) <= 1;
 },
 IsParentElementPositionStatic: function(indexPath){
  return this.IsRootItem(indexPath);
 },
 GetItemIndexPath: function(indexes){
  return aspxGetMenuCollection().GetItemIndexPath(indexes);
 },
 GetItemIndexes: function(indexPath){
  return aspxGetMenuCollection().GetItemIndexes(indexPath);
 },
 GetItemIndexPathById: function(id){
  return aspxGetMenuCollection().GetIndexPathById(id, __aspxMIIdSuffix);
 },
 GetMenuIndexPathById: function(id){
  return aspxGetMenuCollection().GetIndexPathById(id, __aspxMMIdSuffix);
 },
 GetScrollButtonIndexPathById: function(id){
  return aspxGetMenuCollection().GetIndexPathById(id, __aspxSBIdSuffix);
 },
 GetIndexPathById: function(id, checkMenu){
  var indexPath = this.GetItemIndexPathById(id);
  if(indexPath == "" && checkMenu)
   indexPath = this.GetMenuIndexPathById(id);
  return indexPath;
 },
 GetMenuLevel: function(indexPath){
  return aspxGetMenuCollection().GetMenuLevel(indexPath);
 },
 GetParentIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  indexes.length --;
  return (indexes.length > 0) ? this.GetItemIndexPath(indexes) : "";
 },
 GetFirstChildIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  indexes[indexes.length] = 0;
  var newIndexPath = this.GetItemIndexPath(indexes);
  return this.GetFirstSiblingIndexPath(newIndexPath);
 },
 GetFirstSiblingIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  var i = 0;
  while(true){
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetLastSiblingIndexPath: function(indexPath){
  var indexes = this.GetItemIndexes(indexPath);
  var parentItem = this.GetItemByIndexPath(this.GetParentIndexPath(indexPath));
  var i = parentItem ? parentItem.GetItemCount() - 1 : 0;
  while(true){
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 GetNextSiblingIndexPath: function(indexPath){
  if(this.IsLastItem(indexPath)) return null;
  var indexes = this.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] + 1;
  while(true){
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetPrevSiblingIndexPath: function(indexPath){
  if(this.IsFirstItem(indexPath)) return null;
  var indexes = this.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] - 1;
  while(true){
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsItemVisible(newIndexPath) && this.IsItemEnabled(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 IsLastElement: function(element){
  return element && (!element.nextSibling || !element.nextSibling.tagName);
 },
 IsLastItem: function(indexPath){
  var itemElement = this.GetItemElement(indexPath);
  return this.IsLastElement(itemElement);
 },
 IsFirstElement: function(element){
  return element && (!element.previousSibling || !element.previousSibling.tagName);
 },
 IsFirstItem: function(indexPath){
  var itemElement = this.GetItemElement(indexPath);
  return this.IsFirstElement(itemElement);
 },
 IsItemExist: function(indexPath){
  return !!this.GetItemByIndexPath(indexPath);
 },
 IsItemEnabled: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  return item ? item.GetEnabled() : false;
 },
 IsItemVisible: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  return item ? item.GetVisible() : false;
 },
 GetClientSubMenuPos: function(element, indexPath, pos, isXPos){
  if (!_aspxGetIsValidPosition(pos)){
   pos = isXPos ? this.GetSubMenuXPosition(indexPath) :
    this.GetSubMenuYPosition(indexPath);
  }
  var clientPos = isXPos ? this.GetClientSubMenuXPosition(element, pos, indexPath) :
   this.GetClientSubMenuYPosition(element, pos, indexPath);
  var isInverted = pos != clientPos;
  var offset = isXPos ? this.GetSubMenuXOffset(indexPath) : this.GetSubMenuYOffset(indexPath);
  clientPos += isInverted ? - offset : offset;
  clientPos -= _aspxGetPositionElementOffset(this.GetMenuElement(indexPath), isXPos);
  return new _aspxPopupPosition(clientPos, isInverted);
 },
 GetSubMenuXOffset: function(indexPath){
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)){
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIXOffset;
   else
    return this.rootSubMenuXOffset;
  }
  else{
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIXOffset;
   else
    return this.subMenuXOffset;
  }
 },
 GetSubMenuYOffset: function(indexPath){
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)){
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIYOffset;
   else
    return this.rootSubMenuYOffset;
  }
  else{
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIYOffset;
   else
    return this.subMenuYOffset;
  }
 },
 StartScrolling: function(buttonId, delay, step) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var level = this.GetMenuLevel(indexPath);
  aspxGetMenuCollection().DoHidePopupMenus(null, level, this.name, false, "");
  var direction = (buttonId.lastIndexOf(__aspxSBDIdEnd) == buttonId.length - __aspxSBDIdEnd.length) ? 1 : -1;
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) scrollHelper.StartScrolling(direction, delay, step);
 },
 StopScrolling: function(buttonId) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) scrollHelper.StopScrolling();
 },
 ClearAppearTimer: function(){
  aspxGetMenuCollection().ClearAppearTimer();
 },
 ClearDisappearTimer: function(){
  aspxGetMenuCollection().ClearDisappearTimer();
 },
 IsAppearTimerActive: function(){
  return aspxGetMenuCollection().IsAppearTimerActive();
 },
 IsDisappearTimerActive: function(){
  return aspxGetMenuCollection().IsDisappearTimerActive();
 },
 SetAppearTimer: function(indexPath){
  aspxGetMenuCollection().SetAppearTimer(this.name, indexPath, this.appearAfter);
 },
 SetDisappearTimer: function(){
  aspxGetMenuCollection().SetDisappearTimer(this.name, this.disappearAfter);
 },
 IsDropDownItem: function(indexPath){
  return _aspxElementCssClassContains(this.GetItemElement(indexPath), ASPxClientMenuCssClasses.ItemDropDownMode);
 },
 DoItemClick: function(indexPath, hasItemLink, htmlEvent){
  var processOnServer = this.RaiseItemClick(indexPath, htmlEvent);
  if(processOnServer && !hasItemLink)
   this.SendPostBack("CLICK:" + indexPath);
  else{
   this.ClearDisappearTimer();
   this.ClearAppearTimer();
   if(!this.HasChildren(indexPath) || this.IsDropDownItem(indexPath))
    aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   else if(this.IsItemEnabled(indexPath) && !this.IsDropDownItem(indexPath))
    this.ShowSubMenu(indexPath);
  }
 },
 HasContent: function(mainCell) {
  for(var i = 0; i < mainCell.childNodes.length; i++)
   if(mainCell.childNodes[i].tagName)
    return true;
  return false;
 },
 DoShowPopupMenu: function(element, x, y, indexPath){
  var parent = this.GetItemByIndexPath(indexPath);
  var menuElement = this.GetMenuMainCell(element);
  var popupMenuHasVisibleContent = menuElement && ASPxClientMenuLiteRenderHelper.HasSubMenuTemplate(menuElement) || parent && this.HasVisibleItems(parent);
  if(popupMenuHasVisibleContent === false)
   return;
  if(element && this.IsCallbacksEnabled())
   this.ShowLoadingPanelInMenu(element);
  if(_aspxGetElementVisibility(element))
   _aspxSetStyles(element, { left: __aspxInvalidPosition, top: __aspxInvalidPosition });
  _aspxSetElementDisplay(element, true);
  if(parent) {
   for(var i = 0; i < parent.GetItemCount(); i++) {
    var item = parent.GetItem(i);
    this.SetPopOutElementVisible(item.indexPath, this.HasVisibleItems(item));
   }
  }
  ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, element, false);
  if(this.popupCount == 0) this.popupToLeft = this.rtl;
  var horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, true);
  var verticalPopupPosition = this.GetClientSubMenuPos(element, indexPath, y, false);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var toTheLeft = horizontalPopupPosition.isInverted;
  var toTheTop = verticalPopupPosition.isInverted;
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
   if(yClientCorrection > 0) {
    clientY += yClientCorrection;
    verticalPopupPosition.position = clientY;
   }
  }
  var parentElement = this.GetItemContentElement(indexPath);
  var prevParentPos = _aspxGetAbsoluteX(parentElement);
  _aspxSetStyles(element, {
   left: clientX, top: clientY
  });
  if(__aspxIE && __aspxBrowserMajorVersion > 7 && _aspxIsElementRightToLeft(document.body)) {
   _aspxSetElementDisplay(element, false);
   _aspxSetElementDisplay(element, true);
  }
  clientX += _aspxGetAbsoluteX(parentElement) - prevParentPos;
  if (this.enableAnimation){
   this.StartAnimation(element, indexPath, horizontalPopupPosition, verticalPopupPosition);
  }
  else {
   _aspxSetStyles(element, { left: clientX, top: clientY });
   _aspxSetElementVisibility(element, true);
   this.DoShowPopupMenuIFrame(element, clientX, clientY, __aspxInvalidDimension, __aspxInvalidDimension, indexPath);
   this.DoShowPopupMenuBorderCorrector(element, clientX, clientY, indexPath, toTheLeft, toTheTop);
  }
  aspxGetMenuCollection().RegisterVisiblePopupMenu(this.name, element.id);
  this.popupCount ++;
  aspxGetControlCollection().AdjustControls(element);
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
  this.RaisePopUp(indexPath);
 },
 ShowLoadingPanelInMenu: function(element) {
  var mainCell = this.GetMenuMainCell(element);
  if(mainCell && !this.HasContent(mainCell))
   this.CreateLoadingPanelInsideContainer(mainCell);
 },
 GetScrollSubMenuYCorrection: function(element, scrollHelper, clientY) {
  var absoluteClientY = clientY + _aspxGetPositionElementOffset(element);
  var excessTop = this.GetScrollExcessTop(absoluteClientY);
  var excessBottom = this.GetScrollExcessBottom(element, absoluteClientY);
  var correction = 0;
  if(excessTop > 0)
   correction += excessTop + this.scrollVertOffset;
  if(excessBottom > 0 && (absoluteClientY + correction == _aspxGetDocumentScrollTop())) {
   excessBottom += this.scrollVertOffset;
   correction += this.scrollVertOffset;
  }
  this.PrepareScrolling(element, scrollHelper, excessTop, excessBottom);
  return correction;
 },
 GetScrollExcessTop: function(clientY) {
  return _aspxGetDocumentScrollTop() - clientY;
 },
 GetScrollExcessBottom: function(element, clientY) {
  _aspxSetElementDisplay(element, false);
  var docHeight = _aspxGetDocumentClientHeight();
  _aspxSetElementDisplay(element, true);
  return clientY + element.offsetHeight - _aspxGetDocumentScrollTop() - docHeight;
 },
 PrepareScrolling: function(element, scrollHelper, excessTop, excessBottom) {
  scrollHelper.Initialize();
  var corrector = element.offsetHeight - scrollHelper.GetScrollAreaHeight() + this.scrollVertOffset;
  if(excessTop > 0)
   scrollHelper.Calculate(element.offsetHeight - excessTop - corrector);
  if(excessBottom > 0)
   scrollHelper.Calculate(element.offsetHeight - excessBottom - corrector);
 },
 DoShowPopupMenuIFrame: function(element, x, y, width, height, indexPath){
  if (!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.GetMenuIFrameElement(indexPath);
   element.overflowElement = iFrame;
  }
  if(iFrame) {
   var cell = this.GetMenuMainCell(element);
   if (width < 0)
    width = cell.offsetWidth;
   if (height < 0)
    height = cell.offsetHeight;
   _aspxSetStyles(iFrame, {
    width: width, height: height,
    left: x, top: y, display: ""
   });
  }
 },
 DoShowPopupMenuBorderCorrector: function(element, x, y, indexPath, toTheLeft, toTheTop){
  var borderCorrectorElement = this.GetMenuBorderCorrectorElement(indexPath);
  if(borderCorrectorElement) {
   var params = this.GetPopupMenuBorderCorrectorPositionAndSize(element, x, y, indexPath, toTheLeft, toTheTop);
   var itemCell = this.GetItemContentElement(indexPath);
   var popOutImageCell = this.GetItemPopOutElement(indexPath);
   if(__aspxIE && __aspxBrowserMajorVersion == 9) {
    var isVertical = this.IsVertical(indexPath);
    var itemBoundCoord = itemCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
    var itemBorderWidth = _aspxPxToInt(_aspxGetCurrentStyle(itemCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
    if(popOutImageCell != null) {
     var popOutImageBoundCoord = popOutImageCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
     if(popOutImageBoundCoord > itemBoundCoord) {
      itemBoundCoord = popOutImageBoundCoord;
      itemBorderWidth = _aspxPxToInt(_aspxGetCurrentStyle(popOutImageCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
     }
    }
    var menu = this.GetMainElement();
    itemBoundCoord -= Math.min(menu.getBoundingClientRect()[isVertical ? 'top' : 'left'], _aspxGetPositionElementOffset(menu, !isVertical));
    if(isVertical) {
     var bottomsDifference = this.GetItemElement(indexPath).getBoundingClientRect().bottom -
      this.GetMenuElement(indexPath).getBoundingClientRect().bottom;
     itemBoundCoord -= bottomsDifference > 0 && bottomsDifference;
    }
    var borderCorrectorBoundCoord = isVertical ? params.top + params.height : params.left + params.width;
    if(itemBoundCoord - borderCorrectorBoundCoord != itemBorderWidth) {
     borderCorrectorBoundCoord = itemBoundCoord - itemBorderWidth;
     if(isVertical)
      params.height = borderCorrectorBoundCoord - params.top;
     else
      params.width = borderCorrectorBoundCoord - params.left;
    }
   }
   _aspxSetStyles(borderCorrectorElement, {
    width: params.width, height: params.height,
    left: params.left, top: params.top,
    display: "", visibility: "visible"
   });
   element.borderCorrectorElement = borderCorrectorElement;
  }
 },
 GetPopupMenuBorderCorrectorPositionAndSize: function(element, x, y, indexPath, toTheLeft, toTheTop) {
  var result = {};
  var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
  var menuXOffset = _aspxGetClientLeft(this.GetMenuMainCell(element));
  var menuYOffset = _aspxGetClientTop(this.GetMenuMainCell(element));
  var mainCell = this.GetMenuMainCell(element);
  var menuClientWidth = mainCell.clientWidth;
  var menuClientHeight = mainCell.clientHeight;
  if(this.IsVertical(indexPath)){
   var commonClientHeight = itemInfo.clientHeight < menuClientHeight
    ? itemInfo.clientHeight
    : menuClientHeight;
   result.width = menuXOffset;
   result.height = commonClientHeight + itemInfo.clientTop - menuYOffset;
   result.left = x;
   if(toTheLeft)
    result.left += menuClientWidth + menuXOffset;
   result.top = y + menuYOffset;
   if(toTheTop)
    result.top += menuClientHeight - result.height;
  }
  else{
   var itemWidth = itemInfo.clientWidth;
   if(this.IsDropDownItem(indexPath))
    itemWidth = this.GetItemContentElement(indexPath).clientWidth;
   var commonClientWidth = itemWidth < menuClientWidth
    ? itemWidth
    : menuClientWidth;
   result.width = commonClientWidth + itemInfo.clientLeft - menuXOffset;
   result.height = menuYOffset;
   result.left = x + menuXOffset;
   if(toTheLeft)
    result.left += menuClientWidth - result.width;
   result.top = y;
   if(toTheTop)
    result.top += menuClientHeight + menuYOffset;
  }
  return result;
 },
 DoHidePopupMenu: function(evt, element){
  this.DoHidePopupMenuBorderCorrector(element);
  this.DoHidePopupMenuIFrame(element);
  var mainTableElement = this.GetMenuMainTable(element);
  ASPxClientPopupUtils.StopAnimation(element, mainTableElement);
  _aspxSetElementVisibility(element, false);
  _aspxSetElementDisplay(element, false);
  this.CancelSubMenuItemHoverItem(element);
  aspxGetMenuCollection().UnregisterVisiblePopupMenu(this.name, element.id);
  this.popupCount --;
  var indexPath = this.GetIndexPathById(element.id, true);
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   element.style.height = "";
   scrollHelper.ResetScrolling();
  }
  this.RaiseCloseUp(indexPath);
 },
 DoHidePopupMenuIFrame: function(element){
  if (!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   _aspxSetElementDisplay(iFrame, false);
 },
 DoHidePopupMenuBorderCorrector: function(element){
  var borderCorrectorElement = element.borderCorrectorElement;
  if(borderCorrectorElement) {
   _aspxSetElementVisibility(borderCorrectorElement, false);
   _aspxSetElementDisplay(borderCorrectorElement, false);
   element.borderCorrectorElement = null;
  }
 },
 SetHoverElement: function(element){
  if(!this.IsStateControllerEnabled()) return;
  this.lockHoverEvents = true;
  aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
  this.lockHoverEvents = false;
 },
 ApplySubMenuItemHoverItem: function(element, hoverItem, hoverElement){
  if(!element.hoverItem && _aspxGetElementDisplay(element)) {
   var newHoverItem = hoverItem.Clone();
   element.hoverItem = newHoverItem;
   element.hoverElement = hoverElement;
   newHoverItem.Apply(hoverElement);
  }
 },
 CancelSubMenuItemHoverItem: function(element){
  if(element.hoverItem) {
   element.hoverItem.Cancel(element.hoverElement);
   element.hoverItem = null;
   element.hoverElement = null;
  }
 },
 ShowSubMenu: function(indexPath){
  var element = this.GetMenuElement(indexPath);
  if(element != null){
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false,  element.id);
   if (!_aspxGetElementDisplay(element))
    this.DoShowPopupMenu(element, __aspxInvalidPosition, __aspxInvalidPosition, indexPath);
  }
  this.ClearAppearTimer();
 },
 SelectItem: function(indexPath){
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null)
   aspxGetStateController().SelectElementBySrcElement(element);
 },
 DeselectItem: function(indexPath){
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null){
   var hoverItem = null;
   var hoverElement = null;
   var menuElement = this.GetMenuElement(indexPath);
   if (menuElement && menuElement.hoverItem) {
    hoverItem = menuElement.hoverItem;
    hoverElement = menuElement.hoverElement;
    this.CancelSubMenuItemHoverItem(menuElement);
   }
   aspxGetStateController().DeselectElementBySrcElement(element);
   if(menuElement != null && hoverItem != null)
    this.ApplySubMenuItemHoverItem(menuElement, hoverItem, hoverElement);
  }
 },
 InitializeSelectedItem: function(){
  if(!this.allowSelectItem) return;
  this.SelectItem(this.GetSelectedItemIndexPath());
 },
 GetSelectedItemIndexPath: function(){
  var inputElement = this.GetSelectedItemInputElement();
  if(inputElement != null)
   return inputElement.value;
  return "";
 },
 SetSelectedItemInternal: function(indexPath, modifyHotTrackSelection){
  if(modifyHotTrackSelection)
   this.SetHoverElement(null);
  var inputElement = this.GetSelectedItemInputElement();
  if(inputElement != null){
   this.DeselectItem(inputElement.value);
   inputElement.value = indexPath;
   var item = this.GetItemByIndexPath(indexPath);
   if(item == null || item.GetEnabled())
    this.SelectItem(inputElement.value);
  }
  if(modifyHotTrackSelection){
   var element = this.GetItemContentElement(indexPath);
   if(element != null)
    this.SetHoverElement(element);
  }
 },
 InitializeCheckedItems: function(){
  if(!this.allowCheckItems) return;
  var inputElement = this.GetCheckedItemsInputElement();
  if(inputElement != null){
   var indexPathes = inputElement.value.split(";");
   for(var i = 0; i < indexPathes.length; i ++){
    if(indexPathes[i] != ""){
     this.checkedItems.push(indexPathes[i]);
     this.SelectItem(indexPathes[i]);
    }
   }
  }
 },
 ChangeCheckedItem: function(indexPath){
  this.SetHoverElement(null);
  var inputElement = this.GetCheckedItemsInputElement();
  if(inputElement != null){
   var itemsGroup = this.GetItemsGroup(indexPath);
   if(itemsGroup != null){
    if(itemsGroup.length > 1){
     if(!this.IsCheckedItem(indexPath)){
      for(var i = 0; i < itemsGroup.length; i ++){
       if(itemsGroup[i] == indexPath) continue;
       if(this.IsCheckedItem(itemsGroup[i])){
        _aspxArrayRemove(this.checkedItems, itemsGroup[i]);
        this.DeselectItem(itemsGroup[i]);
       }
      }
      this.SelectItem(indexPath);
      this.checkedItems.push(indexPath);
     }
    }
    else{
     if(this.IsCheckedItem(indexPath)){
      _aspxArrayRemove(this.checkedItems, indexPath);
      this.DeselectItem(indexPath);
     }
     else{
      this.SelectItem(indexPath);
      this.checkedItems.push(indexPath);
     }
    }
    this.UpdateCheckedInputElement(inputElement);
   }
  }
  var element = this.GetItemContentElement(indexPath);
  if(element != null)
   this.SetHoverElement(element);
 },
 GetItemsGroup: function(indexPath){
  for(var i = 0; i < this.itemCheckedGroups.length; i ++){
   if(_aspxArrayIndexOf(this.itemCheckedGroups[i], indexPath) > -1)
    return this.itemCheckedGroups[i];
  }
  return null;
 },
 IsCheckedItem: function(indexPath){
  return _aspxArrayIndexOf(this.checkedItems, indexPath) > -1;
 },
 UpdateCheckedInputElement: function(inputElement){
  var state = "";
  for(var i = 0; i < this.checkedItems.length; i ++){
   state += this.checkedItems[i];
   if(i < this.checkedItems.length - 1)
    state += ";";
  }
  inputElement.value = state;
 },
 GetAnimationVerticalDirection: function(indexPath, popupPosition){
  var verticalDirection = (this.IsRootItem(indexPath) && !this.IsVertical(indexPath)) ? -1 : 0;
  if (popupPosition.isInverted) verticalDirection *= -1;
  return verticalDirection;
 },
 GetAnimationHorizontalDirection: function(indexPath, popupPosition){
  var horizontalDirection = (this.IsRootItem(indexPath) && !this.IsVertical(indexPath)) ? 0 : -1;
  if (popupPosition.isInverted) horizontalDirection *= -1;
  return horizontalDirection;
 },
 StartAnimation: function(animationDivElement, indexPath, horizontalPopupPosition, verticalPopupPosition){
  var element = this.GetMenuMainTable(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  ASPxClientPopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY);
  var verticalDirection = this.GetAnimationVerticalDirection(indexPath, verticalPopupPosition);
  var horizontalDirection = this.GetAnimationHorizontalDirection(indexPath, horizontalPopupPosition);
  var yPos = verticalDirection * element.offsetHeight;
  var xPos = horizontalDirection * element.offsetWidth;
  _aspxSetStyles(element, { left: xPos, top: yPos });
  _aspxSetElementVisibility(animationDivElement, true);
  this.DoShowPopupMenuIFrame(animationDivElement, clientX, clientY, 0, 0, indexPath);
  this.DoShowPopupMenuBorderCorrector(animationDivElement, clientX, clientY, indexPath,
   horizontalPopupPosition.isInverted, verticalPopupPosition.isInverted);
  ASPxClientPopupUtils.StartSlideAnimation(animationDivElement, element, this.GetMenuIFrameElement(indexPath), this.slideAnimationDuration);
 },
 OnItemClick: function(indexPath, evt){
  var sourceElement = _aspxGetEventSource(evt);
  var clickedLinkElement = _aspxGetParentByTagName(sourceElement, "A");
  var isLinkClicked = (clickedLinkElement != null && clickedLinkElement.href != __aspxAccessibilityEmptyUrl);
  var element = this.GetItemContentElement(indexPath);
  var linkElement = (element != null) ? (element.tagName === "A" ? element : _aspxGetChildByTagName(element, "A", 0)) : null;
  if(linkElement != null && linkElement.href == __aspxAccessibilityEmptyUrl)
   linkElement = null;
  if(this.allowSelectItem)
   this.SetSelectedItemInternal(indexPath, true);
  if(this.allowCheckItems)
   this.ChangeCheckedItem(indexPath);
  this.DoItemClick(indexPath, isLinkClicked || (linkElement != null), evt);
  if(!isLinkClicked && linkElement != null && !(__aspxWebKitTouchUI && this.HasChildren(indexPath)))
   _aspxNavigateByLink(linkElement);
 },
 OnItemDropDownClick: function(indexPath, evt){
  if(this.IsItemEnabled(indexPath))
   this.ShowSubMenu(indexPath);
 },
 AfterItemOverAllowed: function(hoverItem) {
  return hoverItem.name != "" && !this.lockHoverEvents;
 },
 OnAfterItemOver: function(hoverItem, hoverElement){
  if(!this.AfterItemOverAllowed(hoverItem)) return;
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = hoverItem;
   this.savedCallbackHoverElement = hoverElement;
   return;
  }
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  var indexPath = this.GetMenuIndexPathById(hoverItem.name);
  if(indexPath == ""){
   indexPath = this.GetItemIndexPathById(hoverItem.name);
   var canShowSubMenu = true;
   if(this.IsDropDownItem(indexPath)){
    var popOutImageElement = this.GetItemPopOutElement(indexPath);
    if(popOutImageElement != null && popOutImageElement != hoverElement){
     hoverItem.needRefreshBetweenElements = true;
     canShowSubMenu = false;
    }
   }
   if(canShowSubMenu){
    if(hoverItem.enabled && hoverItem.kind == __aspxHoverItemKind){
     this.SetAppearTimer(indexPath);
     this.RaiseItemMouseOver(indexPath);
    }
   }
  }
 },
 OnBeforeItemOver: function(hoverItem, hoverElement){
  if (__aspxNetscapeFamily && _aspxIsExists(hoverElement.offsetParent) &&
    hoverElement.offsetParent.style.borderCollapse == "collapse") {
   hoverElement.offsetParent.style.borderCollapse = "separate";
   hoverElement.offsetParent.style.borderCollapse = "collapse";
  }
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  if(element) this.CancelSubMenuItemHoverItem(element);
 },
 OnItemOverTimer: function(indexPath){
  var element = this.GetMenuElement(indexPath);
  if(element == null){
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, "");
  }
  if(this.IsAppearTimerActive()){
   this.ClearAppearTimer();
   if(this.GetItemContentElement(indexPath) != null || this.GetItemPopOutElement(indexPath) != null){
    this.ShowSubMenu(indexPath);
   }
  }
 },
 OnBeforeItemDisabled: function(disabledItem, disabledElement){
  this.ClearAppearTimer();
  var indexPath = this.GetItemIndexPathById(disabledElement.id);
  if(indexPath != ""){
   var element = this.GetMenuElement(indexPath);
   if(element != null) this.DoHidePopupMenu(null, element);
  }
 },
 OnAfterItemOut: function(hoverItem, hoverElement, newHoverElement){
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
  if(hoverItem.name == "" || this.lockHoverEvents) return;
  if(hoverItem.IsChildElement(newHoverElement)) return;
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  if(element == null || !_aspxGetIsParent(element, newHoverElement))
   this.SetDisappearTimer();
  if(element != null)
   this.ApplySubMenuItemHoverItem(element, hoverItem, hoverElement);
  if(indexPath != "")
   this.RaiseItemMouseOut(indexPath);
 },
 OnItemOutTimer: function(){
  if(this.IsDisappearTimerActive()){
   this.ClearDisappearTimer();
   if(aspxGetMenuCollection().CheckFocusedElement())
    this.SetDisappearTimer();
   else
    this.OnHideByItemOut();
  }
 },
 OnHideByItemOut: function(){
  aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
 },
 OnFocusedItemKeyDown: function(evt, focusedItem, focusedElement){
  var handled = false;
  var indexPath = this.GetItemIndexPathById(focusedItem.name);
  switch(evt.keyCode){
   case ASPxKey.Tab: {
    handled = this.FocusNextTabItem(indexPath, evt.shiftKey);
    break;
   }
   case ASPxKey.Down: {
    if(this.IsVertical(indexPath)){
     this.FocusNextItem(indexPath);
    }
    else{
     this.ShowSubMenu(indexPath);
     this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
    }
    handled = true;
    break;
   }
   case ASPxKey.Up: {
    if(this.IsVertical(indexPath)){
     this.FocusPrevItem(indexPath);
    }
    else{
     this.ShowSubMenu(indexPath);
     this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
    }
    handled = true;
    break;
   }
   case ASPxKey.Left: {
    if(this.IsVertical(indexPath)){
     var parentIndexPath = this.GetParentIndexPath(indexPath);
     if(this.IsVertical(parentIndexPath)){
      this.FocusItemByIndexPath(parentIndexPath);
     }
     else{
      this.FocusPrevItem(parentIndexPath);
     }
    }
    else{
     this.FocusPrevItem(indexPath);
    }
    handled = true;
    break;
   }
   case ASPxKey.Right: {
    if(this.IsVertical(indexPath)){
     if(this.HasChildren(indexPath)){
      this.ShowSubMenu(indexPath);
      this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
     }
     else{
      while(!this.IsRootItem(indexPath))
       indexPath = this.GetParentIndexPath(indexPath);
      this.FocusNextItem(indexPath);
     }
    }
    else{
     this.FocusNextItem(indexPath);
    }
    handled = true;
    break;
   }
   case ASPxKey.Esc: {
    var parentIndexPath = this.GetParentIndexPath(indexPath);
    this.FocusItemByIndexPath(parentIndexPath);
    var element = this.GetMenuElement(parentIndexPath);
    if(element != null) {
     this.DoHidePopupMenu(null, element);
     handled = true;
    }
   }
  }
  if(handled)
   _aspxPreventEventAndBubble(evt);
 },
 FocusItemByIndexPath: function(indexPath){
  var element = this.GetItemElement(indexPath);
  var link = _aspxGetChildByTagName(element, "A", 0);
  if(link != null) _aspxSetFocus(link);
 },
 FocusNextTabItem: function(indexPath, shiftKey){
  if(this.IsRootItem(indexPath)) return false;
  while(true){
   if(this.IsRootItem(indexPath)) {
    if(!shiftKey){
     if(this.GetNextSiblingIndexPath(indexPath) != null){
      this.FocusNextItem(indexPath);
      return true;
     }
    }
    else{
     if(this.GetPrevSiblingIndexPath(indexPath) != null){
      this.FocusPrevItem(indexPath);
      return true;
     }
    }
    break;
   }
   else {
    if(!shiftKey){
     if(this.GetNextSiblingIndexPath(indexPath) == null)
      indexPath = this.GetParentIndexPath(indexPath);
     else{
      this.FocusNextItem(indexPath);
      return true;
     }
    }
    else{
     if(this.GetPrevSiblingIndexPath(indexPath) == null)
      indexPath = this.GetParentIndexPath(indexPath);
     else{
      this.FocusPrevItem(indexPath);
      return true;
     }
    }
   }
  }
  return false;
 },
 FocusNextItem: function(indexPath){
  var newIndexPath = this.GetNextSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetFirstSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   this.FocusItemByIndexPath(newIndexPath);
 },
 FocusPrevItem: function(indexPath){
  var newIndexPath = this.GetPrevSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetLastSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   this.FocusItemByIndexPath(newIndexPath);
 },
 TryFocusItem: function(itemIndex){
  var item = this.GetItem(itemIndex);
  if(item.GetVisible()) {
   this.FocusItemByIndexPath(item.GetIndexPath());
   return true;
  }
  return false;
 },
 Focus: function(){
  if(this.rootItem != null) {
   for(var i = 0; i < this.GetItemCount(); i++) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.FocusNextItem("-1");
 },
 FocusLastItem: function(){
  if(this.rootItem != null) {
   for(var i = this.GetItemCount() - 1; i >= 0; i--) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.FocusPrevItem(this.GetItemCount() - 1);
 },
 OnCallback: function(result){
  _aspxInitializeScripts();
  this.InitializeScrollableMenus();
  for(var indexPath in result){
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement) {
    if(aspxGetMenuCollection().IsSubMenuVisible(menuElement.id)) {
     this.ShowPopupSubMenuAfterCallback(menuElement, result[indexPath]);
    } else {
     this.SetSubMenuInnerHtml(menuElement, result[indexPath]);
    }
   }
  }
  this.ClearVerticalAlignedElementsCache();
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
  this.InitializeInternal(false);
  if(!this.showSubMenus){
   this.showSubMenus = true;
   if(this.savedCallbackHoverItem != null && this.savedCallbackHoverElement != null)
    this.OnAfterItemOver(this.savedCallbackHoverItem, this.savedCallbackHoverElement);
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
 },
 SetSubMenuInnerHtml: function(menuElement, html) {
  _aspxSetInnerHtml(this.GetMenuMainCell(menuElement), html);
  ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuMenuElement(this, menuElement);
  ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement, true);
 },
 ShowPopupSubMenuAfterCallback: function(element, callbackResult) {
  var indexPath = this.GetIndexPathById(element.id, true);
  var currentX = _aspxPxToInt(element.style.left);
  var currentY = _aspxPxToInt(element.style.top);
  var showedToTheTop = this.ShowedToTheTop(element, indexPath);
  var showedToTheLeft = this.ShowedToTheLeft(element, indexPath);
  _aspxSetStyles(element, {
   left: __aspxInvalidPosition, top: __aspxInvalidPosition
  });
  this.SetSubMenuInnerHtml(element, callbackResult);
  var vertPos = this.GetClientSubMenuPos(element, indexPath, __aspxInvalidPosition, false);
  var clientY = vertPos.position;
  var toTheTop = vertPos.isInverted;
  if(!this.IsVertical(indexPath) && showedToTheTop != toTheTop) {
   clientY = currentY;
   toTheTop = showedToTheTop;
  }
  var scrollHelper = this.scrollHelpers[indexPath];
  if(scrollHelper) {
   var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
   if(yClientCorrection > 0)
    clientY += yClientCorrection;
  }
  _aspxSetStyles(element, {
   left: currentX, top: clientY
  });
  this.DoShowPopupMenuIFrame(element, currentX, clientY, __aspxInvalidDimension, __aspxInvalidDimension, indexPath);
  this.DoShowPopupMenuBorderCorrector(element, currentX, clientY, indexPath, showedToTheLeft, toTheTop);
  aspxGetControlCollection().AdjustControls(element);
 },
 ShowedToTheTop: function(element, indexPath) {
  var currentY = _aspxPxToInt(element.style.top);
  var parentBottomY = this.GetSubMenuYPosition(indexPath);
  return currentY < parentBottomY;
 },
 ShowedToTheLeft: function(element, indexPath) {
  var currentX = _aspxPxToInt(element.style.left);
  var parentX = this.GetSubMenuXPosition(indexPath);
  return currentX < parentX;
 },
 CreateItems: function(itemsProperties){
  var itemType = this.GetClientItemType();
  this.rootItem = new itemType(this, null, 0, "");
  this.rootItem.CreateItems(itemsProperties);
 },
 GetClientItemType: function(){
  return ASPxClientMenuItem;
 },
 GetItemByIndexPath: function(indexPath){
  var item = this.rootItem;
  if(indexPath != "" && item != null){
   var indexes = this.GetItemIndexes(indexPath);
   for(var i = 0; i < indexes.length; i ++)
    item = item.GetItem(indexes[i]);
  }
  return item;
 },
 SetItemChecked: function(indexPath, checked){
  var inputElement = this.GetCheckedItemsInputElement();
  if(inputElement != null){
   var itemsGroup = this.GetItemsGroup(indexPath);
   if(itemsGroup != null){
    if(!checked && this.IsCheckedItem(indexPath)){
     _aspxArrayRemove(this.checkedItems, indexPath);
     this.DeselectItem(indexPath);
    }
    else if(checked && !this.IsCheckedItem(indexPath)){
     if(itemsGroup.length > 1){
      for(var i = 0; i < itemsGroup.length; i ++){
       if(itemsGroup[i] == indexPath) continue;
       if(this.IsCheckedItem(itemsGroup[i])){
        _aspxArrayRemove(this.checkedItems, itemsGroup[i]);
        this.DeselectItem(itemsGroup[i]);
       }
      }
     }
     this.SelectItem(indexPath);
     this.checkedItems.push(indexPath);
    }
    this.UpdateCheckedInputElement(inputElement);
   }
  }
 },
 ChangeItemEnabledAttributes: function(indexPath, enabled){
  ASPxClientMenuLiteRenderHelper.ChangeItemEnabledAttributes(this.GetItemElement(indexPath), enabled);
 },
 IsItemEnabled: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  return (item != null) ? item.GetEnabled() : true;
 },
 SetItemEnabled: function(indexPath, enabled, initialization){
  if(indexPath == "" || !this.GetItemByIndexPath(indexPath).enabled) return;
  if(!enabled){
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.DeselectItem(indexPath);
  }
  if(!initialization || !enabled)
   this.ChangeItemEnabledStateItems(indexPath, enabled);
  this.ChangeItemEnabledAttributes(indexPath, enabled);
  if(enabled){
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.SelectItem(indexPath);
  }
 },
 ChangeItemEnabledStateItems: function(indexPath, enabled){
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemElement(indexPath);
  if(element)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 GetItemImageUrl: function(indexPath){
  var image = this.GetItemImage(indexPath);
  if(image)
   return image.src;
  return "";
 },
 SetItemImageUrl: function(indexPath, url){
  var image = this.GetItemImage(indexPath);
  if(image)
   image.src = url;
 },
 GetItemImage: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null){
   var img = _aspxGetChildByTagName(element, "IMG", 0);
   if(img != null)
    return img;
  }
 },
 GetItemNavigateUrl: function(indexPath){
  var element = this.GetItemContentElement(indexPath);
  if(element != null && element.tagName === "A")
   return element.href;
  if(element != null){
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    return link.href;
  }
  return "";
 },
 SetItemNavigateUrl: function(indexPath, url){
  var element = this.GetItemContentElement(indexPath);
  if(element != null && element.tagName === "A")
   element.href = url;
  else if(element != null){
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link != null)
    link.href = url;
   link = _aspxGetChildByTagName(element, "A", 1);
   if(link != null)
    link.href = url;
  }
 },
 FindTextNode: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   if(link)
    return _aspxGetChildTextNode(link, 0);
   var titleSpan = _aspxGetChildByTagName(element, "SPAN", 0);
   if(titleSpan)
    return _aspxGetChildTextNode(titleSpan, 0);
   for(var i = 0; i < element.childNodes.length; i++) {
    var child = element.childNodes[i];
    if (child.nodeValue && (_aspxTrim(child.nodeValue) != ""))
     return child;
   }
   return _aspxGetChildTextNode(element, 0);
  }
  return null;
 },
 GetItemText: function(indexPath){
  var textNode = this.FindTextNode(indexPath);
  return textNode
   ? _aspxTrim(textNode.nodeValue)
   : "";
 },
 SetItemText: function(indexPath, text){
  var textNode = this.FindTextNode(indexPath);
  if(textNode) {
   textNode.nodeValue = text;
   var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
   if(menuElement)
    ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement, true);
   if(this.IsRootItem(indexPath) && !this.isPopupMenu){
    var itemElement = this.GetItemElement(indexPath);
    if(itemElement)
       ASPxClientMenuLiteRenderHelper.CalculateItemMinSize(itemElement);
   }
  }
 },
 SetItemVisible: function(indexPath, visible, initialization){
  if(indexPath == "" || !this.GetItemByIndexPath(indexPath).visible) return;
  if(visible && initialization) return;
  var element = this.GetItemElement(indexPath);
  if(element != null)
   _aspxSetElementDisplay(element, visible);
  this.SetIndentsVisiblility(indexPath);
  this.SetSeparatorsVisiblility(indexPath);
  var parent = this.GetItemByIndexPath(indexPath).parent;
  var parentHasVisibleItems = this.HasVisibleItems(parent);
  if(this.IsRootItem(indexPath) && !this.isPopupMenu)
   this.SetVisible(parentHasVisibleItems);
  else
   this.SetPopOutElementVisible(parent.indexPath, parentHasVisibleItems);
  var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
  if(menuElement)
   ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement, true);
 },
 SetIndentsVisiblility: function(indexPath){
  var parent = this.GetItemByIndexPath(indexPath).parent;
  for(var i = 0; i < parent.GetItemCount(); i++){
   var item = parent.GetItem(i);
   var separatorVisible = item.GetVisible() && this.HasNextVisibleItems(parent, i);
   var element = this.GetItemIndentElement(item.GetIndexPath());
   if(element != null) _aspxSetElementDisplay(element, separatorVisible);
  }
 },
 SetSeparatorsVisiblility: function(indexPath){
  var parent = this.GetItemByIndexPath(indexPath).parent;
  for(var i = 0; i < parent.GetItemCount(); i++){
   var item = parent.GetItem(i);
   var separatorVisible = this.HasPrevVisibleItems(parent, i) && (item.GetVisible() || this.HasNextVisibleItemInGroup(parent, i));
   var element = this.GetItemSeparatorElement(item.GetIndexPath());
   if(element != null) _aspxSetElementDisplay(element, separatorVisible);
   element = this.GetItemSeparatorIndentElement(item.GetIndexPath());
   if(element != null) _aspxSetElementDisplay(element, separatorVisible);
  }
 },
 SetPopOutElementVisible: function(indexPath, visible) {
  var popOutElement = this.GetItemPopOutElement(indexPath);
  if(popOutElement)
   _aspxSetElementDisplay(popOutElement, visible);
 },
 HasNextVisibleItemInGroup: function(parent, index){
  for(var i = index + 1; i < parent.GetItemCount(); i++){
   var item = parent.GetItem(i);
   if(this.IsItemBeginsGroup(item))
    return false;
   if(item.GetVisible())
    return true;
  }
  return false;
 },
 IsItemBeginsGroup: function(item){
  var itemSeparator = this.GetItemSeparatorElement(item.GetIndexPath());
  return itemSeparator && _aspxElementCssClassContains(itemSeparator, ASPxClientMenuCssClasses.Separator);
 },
 HasVisibleItems: function(parent) {
  for(var i = 0; i < parent.GetItemCount(); i++) {
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 HasNextVisibleItems: function(parent, index){
  for(var i = index + 1; i < parent.GetItemCount(); i++){
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 HasPrevVisibleItems: function(parent, index){
  for(var i = index - 1; i >= 0; i--){
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 GetItemIndentElement: function(indexPath){
  return _aspxGetElementById(this.GetItemIndentElementId(indexPath));
 },
 GetItemSeparatorElement: function(indexPath){
  return _aspxGetElementById(this.GetItemSeparatorElementId(indexPath));
 },
 GetItemSeparatorIndentElement: function(indexPath){
  return _aspxGetElementById(this.name + __aspxMIIdSuffix + indexPath + "_ISI");
 },
 RaiseItemClick: function(indexPath, htmlEvent){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
  if(!this.ItemClick.IsEmpty()){
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = new ASPxClientMenuItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseItemMouseOver: function(indexPath){
  if(!this.ItemMouseOver.IsEmpty()){
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOver.FireEvent(this, args);
  }
 },
 RaiseItemMouseOut: function(indexPath){
  if(!this.ItemMouseOut.IsEmpty()){
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOut.FireEvent(this, args);
  }
 },
 RaisePopUp: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.PopUp.IsEmpty()){
   var args = new ASPxClientMenuItemEventArgs(item);
   this.PopUp.FireEvent(this, args);
  }
 },
 RaiseCloseUp: function(indexPath){
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.CloseUp.IsEmpty()){
   var args = new ASPxClientMenuItemEventArgs(item);
   this.CloseUp.FireEvent(this, args);
  }
 },
 SetEnabled: function(enabled) {
  for(var i = this.GetItemCount() - 1; i >= 0; i--) {
   var item = this.GetItem(i);
   item.SetEnabled(enabled);
  }
 },
 SetVisible: function(visible) {
  if(visible && !this.HasVisibleItems(this))
   return;
  ASPxClientControl.prototype.SetVisible.call(this, visible);
 },
 GetItemCount: function(){
  return (this.rootItem != null) ? this.rootItem.GetItemCount() : 0;
 },
 GetItem: function(index){
  return (this.rootItem != null) ? this.rootItem.GetItem(index) : null;
 },
 GetItemByName: function(name){
  return (this.rootItem != null) ? this.rootItem.GetItemByName(name) : null;
 },
 GetSelectedItem: function(){
  var indexPath = this.GetSelectedItemIndexPath();
  if(indexPath != "")
   return this.GetItemByIndexPath(indexPath);
  return null;
 },
 SetSelectedItem: function(item){
  var indexPath = (item != null) ? item.GetIndexPath() : "";
  this.SetSelectedItemInternal(indexPath, false);
 },
 GetRootItem: function(){
  return this.rootItem;
 }
});
ASPxClientMenuBase.GetMenuCollection = function(){
 return aspxGetMenuCollection();
}
ASPxClientMenuCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.currentShowingPopupMenuName = null;
  this.visibleSubMenusMenuName = "";
  this.visibleSubMenuIds = [ ];
  this.overXPos = -1;
  this.overYPos = -1;
 },
 RegisterVisiblePopupMenu: function(name, id){
  this.visibleSubMenuIds.push(id);
  this.visibleSubMenusMenuName = name;
 },
 UnregisterVisiblePopupMenu: function(name, id){
  _aspxArrayRemove(this.visibleSubMenuIds, id);
  if(this.visibleSubMenuIds.length == 0)
   this.visibleSubMenusMenuName = "";
 },
 IsSubMenuVisible: function(subMenuId) {
  for(var i = 0; i < this.visibleSubMenuIds.length; i++) {
   if(this.visibleSubMenuIds[i] == subMenuId)
    return true;
  }
  return false;
 },
 GetMenu: function(id){
  return this.Get(this.GetMenuName(id));
 },
 GetMenuName: function(id){
  return this.GetMenuNameBySuffixes(id, [__aspxMMIdSuffix, __aspxMIIdSuffix]);
 },
 GetMenuNameBySuffixes: function(id, idSuffixes){
  for(var i = 0; i < idSuffixes.length; i++){
   var pos = id.lastIndexOf(idSuffixes[i]);
   if(pos > -1)
    return id.substring(0, pos);
  }
  return id;
 },
 ClearCurrentShowingPopupMenuName: function() {
  this.SetCurrentShowingPopupMenuName(null);
 },
 SetCurrentShowingPopupMenuName: function(value) {
  this.currentShowingPopupMenuName = value;
 },
 NowPopupMenuIsShowing: function() {
  return this.currentShowingPopupMenuName != null;
 },
 GetMenuLevel: function(indexPath){
  if(indexPath == "")
   return 0;
  else{
   var indexes = this.GetItemIndexes(indexPath);
   return indexes.length;
  }
 },
 GetMenuLevelById: function(id){
  var indexPath = this.GetIndexPathById(id, __aspxMMIdSuffix);
  return this.GetMenuLevel(indexPath);
 },
 GetIndexPathById: function(id, idSuffix){
  var pos = id.lastIndexOf(idSuffix);
  if(pos > -1){
   id = id.substring(pos + idSuffix.length);
   pos = id.lastIndexOf("_");
   if(pos > -1)
    return id.substring(0, pos);
  }
  return "";
 },
 GetItemIndexPath: function(indexes){
  var indexPath = "";
  for(var i = 0; i < indexes.length; i ++){
   indexPath += indexes[i];
   if(i < indexes.length - 1)
    indexPath += __aspxItemIndexSeparator;
  }
  return indexPath;
 },
 GetItemIndexes: function(indexPath){
  var indexes = indexPath.split(__aspxItemIndexSeparator);
  for(var i = 0; i < indexes.length; i ++)
   indexes[i] = parseInt(indexes[i]);
  return indexes;
 },
 ClearAppearTimer: function(){
  this.appearTimerID = _aspxClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function(){
  this.disappearTimerID = _aspxClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function(){
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function(){
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function(name, indexPath, timeout){
  this.appearTimerID = _aspxSetTimeout("aspxMIMOverTimer(\"" + name + "\", \"" + indexPath + "\")", timeout);
 },
 SetDisappearTimer: function(name, timeout){
  this.disappearTimerID = _aspxSetTimeout("aspxMIMOutTimer(\"" + name + "\")", timeout);
 },
 GetMouseDownMenuLevel: function(evt){
  var srcElement = _aspxGetEventSource(evt);
  if(this.visibleSubMenusMenuName != ""){
   var element = _aspxGetParentById(srcElement, this.visibleSubMenusMenuName);
   if(element != null) return 1;
  }
  for(var i = 0; i < this.visibleSubMenuIds.length; i ++){
   var element = _aspxGetParentById(srcElement, this.visibleSubMenuIds[i]);
   if(element != null)
    return this.GetMenuLevelById(this.visibleSubMenuIds[i]) + 1;
  }
  return -1;
 },
 CheckFocusedElement: function(){
  try {
   if(document.activeElement != null) {
    for(var i = 0; i < this.visibleSubMenuIds.length; i ++) {
     var menuElement = _aspxGetElementById(this.visibleSubMenuIds[i]);
     if(menuElement != null && _aspxGetIsParent(menuElement, document.activeElement)) {
      var tagName = document.activeElement.tagName;
      if (!__aspxIE || tagName == "INPUT" || tagName == "TEXTAREA" || tagName == "SELECT")
       return true;
     }
    }
   }
  } catch(e) {
  }
  return false;
 },
 DoHidePopupMenus: function(evt, level, name, leavePopups, exceptId){
  for(var i = this.visibleSubMenuIds.length - 1; i >=0 ; i --){
   var menu = this.GetMenu(this.visibleSubMenuIds[i]);
   if(menu != null){
    var menuLevel = this.GetMenuLevelById(this.visibleSubMenuIds[i]);
    if((!leavePopups || menuLevel > 0) && exceptId != this.visibleSubMenuIds[i]){
     if(menuLevel > level || (menu.name != name && name != "")){
      var element = _aspxGetElementById(this.visibleSubMenuIds[i]);
      if(element != null)
       menu.DoHidePopupMenu(evt, element);
     }
    }
   }
  }
 },
 DoShowAtCurrentPos: function(name, indexPath){
  var pc = this.Get(name);
  var element = pc.GetMainElement();
  if(pc != null && !_aspxGetElementDisplay(element))
   pc.DoShowPopupMenu(element, this.overXPos, this.overYPos, indexPath);
 },
 SaveCurrentMouseOverPos: function(evt, popupElement){
  if (!this.NowPopupMenuIsShowing()) return;
  var currentShowingPopupMenu = this.Get(this.currentShowingPopupMenuName);
  if(currentShowingPopupMenu.popupElement == popupElement)
   if(!currentShowingPopupMenu.IsMenuVisible()) {
    this.overXPos = _aspxGetEventX(evt);
    this.overYPos = _aspxGetEventY(evt);
   }
 },
 OnMouseDown: function(evt){
  var menuLevel = this.GetMouseDownMenuLevel(evt);
  this.DoHidePopupMenus(evt, menuLevel, "", false, "");
 },
 HideAll: function(){
  this.DoHidePopupMenus(null, -1, "", false, "");
 },
 IsAnyMenuVisible: function() {
  return this.visibleSubMenuIds.length != 0;
 }
});
var __aspxMCollection = null;
function aspxGetMenuCollection(){
 if(__aspxMCollection == null)
  __aspxMCollection = new ASPxClientMenuCollection();
 return __aspxMCollection;
}
ASPxClientMenuItem = _aspxCreateClass(null, {
 constructor: function(menu, parent, index, name){
  this.menu = menu;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.indexPath = "";
  if(parent) {
   this.indexPath = parent.indexPath
    ? parent.indexPath + __aspxItemIndexSeparator + this.index.toString()
    : this.index.toString();
  }
  this.enabled = true;
  this.clientEnabled = true;
  this.visible = true;
  this.clientVisible = true;
  this.items = [];
 },
 CreateItems: function(itemsProperties){
  var itemType = this.menu.GetClientItemType();
  for(var i = 0; i < itemsProperties.length; i ++){
   var itemName = itemsProperties[i][0] || "";
   var item = new itemType(this.menu, this, i, itemName);
   if(_aspxIsExists(itemsProperties[i][1]))
    item.enabled = itemsProperties[i][1];
   if(_aspxIsExists(itemsProperties[i][2]))
    item.clientEnabled = itemsProperties[i][2];
   if(_aspxIsExists(itemsProperties[i][3]))
    item.visible = itemsProperties[i][3];
   if(_aspxIsExists(itemsProperties[i][4]))
    item.clientVisible = itemsProperties[i][4];
   this.items.push(item);
   item.CreateItems(itemsProperties[i][5]);
  }
 },
 GetIndexPath: function(){
  return this.indexPath;
 },
 GetItemCount: function(){
  return this.items.length;
 },
 GetItem: function(index){
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 GetItemByName: function(name){
  for(var i = 0; i < this.items.length; i ++)
   if(this.items[i].name == name) return this.items[i];
  for(var i = 0; i < this.items.length; i ++){
   var item = this.items[i].GetItemByName(name);
   if(item != null) return item;
  }
  return null;
 },
 GetChecked: function(){
  var indexPath = this.GetIndexPath();
  return this.menu.IsCheckedItem(indexPath);
 },
 SetChecked: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemChecked(indexPath, value);
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(value){
  if (this.clientEnabled != value) {
   this.clientEnabled = value;
   this.menu.SetItemEnabled(this.GetIndexPath(), value, false);
  }
 },
 GetImage: function() {
  return this.menu.GetItemImage(this.GetIndexPath());
 },
 GetImageUrl: function(){
  return this.menu.GetItemImageUrl(this.GetIndexPath());
 },
 SetImageUrl: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemImageUrl(indexPath, value);
 },
 GetNavigateUrl: function(){
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemNavigateUrl(indexPath);
 },
 SetNavigateUrl: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemNavigateUrl(indexPath, value);
 },
 GetText: function(){
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemText(indexPath);
 },
 SetText: function(value){
  var indexPath = this.GetIndexPath();
  this.menu.SetItemText(indexPath, value);
 },
 GetVisible: function(){
  return this.visible && this.clientVisible;
 },
 SetVisible: function(value){
  if (this.clientVisible != value) {
   this.clientVisible = value;
   this.menu.SetItemVisible(this.GetIndexPath(), value, false);
  }
 },
 InitializeEnabledAndVisible: function(recursive){
  this.menu.SetItemEnabled(this.GetIndexPath(), this.clientEnabled, true);
  this.menu.SetItemVisible(this.GetIndexPath(), this.clientVisible, true);
  if(recursive) {
   for(var i = 0; i < this.items.length; i++)
    this.items[i].InitializeEnabledAndVisible(recursive);
  }
 }
});
ASPxClientMenu = _aspxCreateClass(ASPxClientMenuBase, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.isVertical = false;
  this.firstSubMenuDirection = "Auto";
 },
 IsVertical: function(indexPath){
  return this.isVertical || (indexPath.indexOf(__aspxItemIndexSeparator) > -1);
 },
 IsCorrectionDisableMethodRequired: function(indexPath){
  return (indexPath.indexOf("i") == -1) && (this.firstSubMenuDirection == "RightOrBottom" || this.firstSubMenuDirection == "LeftOrTop");
 },
 AdjustControlCore: function() {
  this.CorrectVerticalAlignment(_aspxClearHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(_aspxClearVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
  ASPxClientMenuLiteRenderHelper.CalculateMenuElements(this, this.GetMainElement());
  this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
  this.SetLightweightMenuHeightInIE7IfDisplayed(true);
 },
 OnBrowserWindowResize: function(evt) {
  this.AdjustControl();
 },
 GetCorrectionDisabledResult: function(x, toLeftX){
  switch(this.firstSubMenuDirection){
   case "RightOrBottom":{
    this.popupToLeft = false;
    return x;
   }
   case "LeftOrTop":{
    this.popupToLeft = true;
    return toLeftX;
   }
  }
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight){
  if (this.firstSubMenuDirection == "Auto")
   return ASPxClientMenuBase.prototype.IsHorizontalSubmenuNeedInversion.call(this, subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight);
  return this.firstSubMenuDirection == "LeftOrTop"
 },
 SetLightweightMenuHeightInIE7IfDisplayed: function(force) {
  if(!__aspxIE || __aspxBrowserMajorVersion != 7)
   return;
  if(force)
   this.lightweightMenuHeightIE7Set = false;
  if(this.lightweightMenuHeightIE7Set || !this.IsDisplayed())
   return;
  var mainElement = this.GetMainElement();
  var commonContainer = mainElement.parentNode;
  var _this = this;
  window.setTimeout(function() {
   if(mainElement.offsetHeight != 0)
    commonContainer.style.height = mainElement.offsetHeight + "px";
   else
    _this.lightweightMenuHeightIE7Set = false;
  }, 0);
  this.lightweightMenuHeightIE7Set = true;
 }
});
ASPxClientMenu.Cast = ASPxClientControl.Cast;
ASPxClientMenuItemEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
ASPxClientMenuItemMouseEventArgs = _aspxCreateClass(ASPxClientMenuItemEventArgs, {
 constructor: function(item, htmlElement) {
  this.constructor.prototype.constructor.call(this, item);
  this.htmlElement = htmlElement;
 }
});
ASPxClientMenuItemClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, item, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
function aspxMIClick(evt, name, indexPath){
 if(ASPxClientTouchUI.isMouseEventFromScrolling) return;
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemClick(indexPath, evt);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
function aspxMIDDClick(evt, name, indexPath){
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemDropDownClick(indexPath, evt);
 if(!__aspxNetscapeFamily)
  evt.cancelBubble = true;
}
function aspxAMIMOver(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOver(args.item, args.element);
}
function aspxBMIMOver(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnBeforeItemOver(args.item, args.element);
}
function aspxMIMOverTimer(name, indexPath){
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemOverTimer(indexPath);
}
function aspxBIDisabled(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnBeforeItemDisabled(args.item, args.element);
}
function aspxFIKeyDown(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnFocusedItemKeyDown(args.htmlEvent, args.item, args.element);
}
function aspxAMIMOut(source, args){
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOut(args.item, args.element, args.toElement);
}
function aspxMIMOutTimer(name){
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemOutTimer();
}
function aspxMContextMenu(evt){
 return _aspxCancelBubble(evt);
}
function aspxMSBOver(source, args) {
 var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id)
 if(menu != null) menu.ClearDisappearTimer();
}
function aspxMSBOut(source, args) {
 var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id)
 if(menu != null) menu.SetDisappearTimer();
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxMenuDocumentMouseDown);
function aspxMenuDocumentMouseDown(evt){
 return aspxGetMenuCollection().OnMouseDown(evt);
}
(function(){
 aspxAddAfterSetFocusedState(aspxAMIMOver);
 aspxAddAfterClearFocusedState(aspxAMIMOut);
 aspxAddAfterSetHoverState(aspxAMIMOver);
 aspxAddAfterClearHoverState(aspxAMIMOut);
 aspxAddBeforeSetFocusedState(aspxBMIMOver);
 aspxAddBeforeSetHoverState(aspxBMIMOver);
 aspxAddBeforeDisabled(aspxBIDisabled);
 aspxAddFocusedItemKeyDown(aspxFIKeyDown);
 aspxAddAfterSetHoverState(aspxMSBOver);
 aspxAddAfterSetPressedState(aspxMSBOver);
 aspxAddAfterClearHoverState(aspxMSBOut);
 aspxAddAfterSetPressedState(function(source, args) {
  var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StartScrolling(args.element.id, 1, 4);
 });
 aspxAddAfterClearPressedState(function(source, args) {
  var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StopScrolling(args.element.id);
 });
 if(!__aspxTouchUI){
  aspxAddAfterSetHoverState(function(source, args) {
   var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
   if(menu) menu.StartScrolling(args.element.id, 15, 1);
  });
  aspxAddAfterClearHoverState(function(source, args) {
   var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
   if(menu) menu.StopScrolling(args.element.id);
  });
 }
})();

var __aspxClientValidationStateNameSuffix = "$CVS";
ASPxClientEditBase = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.EnabledChanged = new ASPxClientEvent();
 },
 InlineInitialize: function(){
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeEnabled();
 },
 InitializeEnabled: function() {
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 GetValue: function() {
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   return element.innerHTML;
  return "";
 },
 GetValueString: function(){
  var value = this.GetValue();
  return (value == null) ? null : value.toString();
 },
 SetValue: function(value) {
  if(value == null)
   value = "";
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   element.innerHTML = value;
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(enabled){
  if(this.clientEnabled != enabled) {
   var errorFrameRequiresUpdate = this.GetIsValid && !this.GetIsValid();
   if(errorFrameRequiresUpdate && !enabled)
    this.UpdateErrorFrameAndFocus(false , null , true );
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
   if(errorFrameRequiresUpdate && enabled)
    this.UpdateErrorFrameAndFocus(false );
   this.RaiseEnabledChangedEvent();
  }
 },
 SetEnabledInternal: function(enabled, initialization){
  if(!this.enabled) return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
  if(__aspxChrome) {
   var mainElement = this.GetMainElement();
   if(mainElement)
    mainElement.className = mainElement.className;
  }
 },
 ChangeEnabledAttributes: function(enabled){
 },
 ChangeEnabledStateItems: function(enabled){
 },
 RaiseEnabledChangedEvent: function(){
  if(!this.EnabledChanged.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EnabledChanged.FireEvent(this, args);
  }
 },
 GetDecodeValue: function (value) {
  if (typeof (value) == "string" && value.length > 1)
   value = this.SimpleDecodeHtml(value);
  return value;
 },
 SimpleDecodeHtml: function (html) {
  return _aspxApplyReplacement(html, [
   [/&lt;/g, '<'],
   [/&amp;/g, '&'],
   [/&quot;/g, '"'],
   [/&#39;/g, '\'']
  ]);
 }
});
ASPxValidationPattern = _aspxCreateClass(null, {
 constructor: function(errorText) {
  this.errorText = errorText;
 }
});
ASPxRequiredFieldValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
 constructor: function(errorText) {
  this.constructor.prototype.constructor.call(this, errorText);
 },
 EvaluateIsValid: function(value) {
  return value != null && (value.constructor == Array || _aspxTrim(value.toString()) != "");
 }
});
ASPxRegularExpressionValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
 constructor: function(errorText, pattern) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.pattern = pattern;
 },
 EvaluateIsValid: function(value) {
  if (value == null)
   return true;
  var strValue = value.toString();
  if (_aspxTrim(strValue).length == 0)
   return true;
  var regEx = new RegExp(this.pattern);
  var matches = regEx.exec(strValue);
  return matches != null && strValue == matches[0];
 }
});
function _aspxIsEditorFocusable(inputElement) {
 return _aspxIsFocusableCore(inputElement, function(container) {
  return container.getAttribute("errorFrame") == "errorFrame";
 });
}
var __aspxInvalidEditorToBeFocused = null;
ASPxValidationType = {
 PersonalOnValueChanged: "ValueChanged",
 PersonalViaScript: "CalledViaScript",
 MassValidation: "MassValidation"
};
ASPxErrorFrameDisplay = {
 None: "None",
 Static: "Static",
 Dynamic: "Dynamic"
};
ASPxEditElementSuffix = {
 ExternalTable: "_ET",
 ControlCell: "_CC",
 ErrorCell: "_EC",
 ErrorTextCell: "_ETC",
 ErrorImage: "_EI",
 CaptionCell: "_CapC"
};
ASPxEditExternalTableClassNames = {
 ValidStaticTableClassName: "dxeValidStEditorTable",
 ValidDynamicTableClassName: "dxeValidDynEditorTable",
 TableWithSeparateBordersClassName: "tableWithSeparateBorders"
};
ASPxClientEdit = _aspxCreateClass(ASPxClientEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientEdit = true;
  this.inputElement = null;
  this.elementCache = { };
  this.convertEmptyStringToNull = true;
  this.readOnly = false;
  this.focused = false;
  this.focusEventsLocked = false;
  this.receiveGlobalMouseWheel = true;
  this.styleDecoration = null;
  this.widthCorrectionRequired = false;
  this.heightCorrectionRequired = false;
  this.customValidationEnabled = false;
  this.display = ASPxErrorFrameDisplay.Static;
  this.initialErrorText = "";
  this.causesValidation = false;
  this.validateOnLeave = true;
  this.validationGroup = "";
  this.sendPostBackWithValidation = null;
  this.validationPatterns = [];
  this.setFocusOnError = false;
  this.errorDisplayMode = "it";
  this.errorText = "";
  this.isValid = true;
  this.errorImageIsAssigned = false;
  this.clientValidationStateElement = null;
  this.notifyValidationSummariesToAcceptNewError = false;
  this.enterProcessed = false;
  this.keyDownHandlers = {};
  this.keyPressHandlers = {};
  this.keyUpHandlers = {};
  this.specialKeyboardHandlingUsed = false;
  this.onKeyDownHandler = null;
  this.onKeyPressHandler = null;
  this.onKeyUpHandler = null;
  this.onGotFocusHandler = null;
  this.onLostFocusHandler = null;
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Validation = new ASPxClientEvent();
  this.ValueChanged = new ASPxClientEvent();
  this.KeyDown = new ASPxClientEvent();
  this.KeyPress = new ASPxClientEvent();
  this.KeyUp = new ASPxClientEvent();
 },
 Initialize: function() {
  this.initialErrorText = this.errorText;
  ASPxClientEditBase.prototype.Initialize.call(this);
  this.InitializeKeyHandlers();
  this.UpdateClientValidationState();
  this.UpdateValidationSummaries(null , true );
 },
 InlineInitialize: function() {
  ASPxClientEditBase.prototype.InlineInitialize.call(this);
  if(this.styleDecoration)
   this.styleDecoration.Update();
 },
 InitSpecialKeyboardHandling: function(){
  this.onKeyDownHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyDown", this.name, true);
  this.onKeyPressHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyPress", this.name, true);
  this.onKeyUpHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyUp", this.name, true);
  this.onGotFocusHandler = _aspxCreateEventHandlerFunction("aspxESGotFocus", this.name, false);
  this.onLostFocusHandler = _aspxCreateEventHandlerFunction("aspxESLostFocus", this.name, false);
  this.specialKeyboardHandlingUsed = true;
  this.InitializeDelayedSpecialFocus();
 },
 InitializeKeyHandlers: function() {
 },
 AddKeyDownHandler: function(key, handler) {
  this.keyDownHandlers[key] = handler;
 },
 AddKeyPressHandler: function(key, handler) {
  this.keyPressHandlers[key] = handler;
 },
 ChangeSpecialInputEnabledAttributes: function(element, method, doNotChangeAutoComplete){
  if(!doNotChangeAutoComplete)
   element.autocomplete = "off";
  if(this.onKeyDownHandler != null)
   method(element, "keydown", this.onKeyDownHandler);
  if(this.onKeyPressHandler != null)
   method(element, "keypress", this.onKeyPressHandler);
  if(this.onKeyUpHandler != null)
   method(element, "keyup", this.onKeyUpHandler);
  if(this.onGotFocusHandler != null)
   method(element, "focus", this.onGotFocusHandler);
  if(this.onLostFocusHandler != null)
   method(element, "blur", this.onLostFocusHandler);
 },
 UpdateClientValidationState: function() {
  if(!this.customValidationEnabled)
   return;
  var mainElement = this.GetMainElement();
  if (mainElement) {
   var hiddenField = this.GetClientValidationStateHiddenField();
   if(hiddenField)
    hiddenField.value = _aspxEncodeHtml(!this.GetIsValid() ? ("-" + this.GetErrorText()) : "");
  }
 },
 UpdateValidationSummaries: function(validationType, initializing) {
  if(typeof(ASPxClientValidationSummary) != "undefined") {
   var summaryCollection = aspxGetClientValidationSummaryCollection();
   summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
  }
 },
 GetCachedElementByIdSuffix: function(idSuffix) {
  var element = this.elementCache[idSuffix];
  if(!_aspxIsExistsElement(element)) {
   element = _aspxGetElementById(this.name + idSuffix);
   this.elementCache[idSuffix] = element;
  }
  return element;
 },
 FindInputElement: function(){
  return null;
 },
 GetInputElement: function(){
  if(!_aspxIsExistsElement(this.inputElement))
   this.inputElement = this.FindInputElement();
  return this.inputElement;
 },
 GetFocusableInputElement: function() {
  return this.GetInputElement();
 },
 GetErrorImage: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ErrorImage);
 },
 GetExternalTable: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ExternalTable);
 },
 GetControlCell: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ControlCell);
 },
 GetErrorCell: function() {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ErrorCell);
 },
 GetCaptionCell: function () {
  return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.CaptionCell);
 },
 GetErrorTextCell: function() {
  return this.GetCachedElementByIdSuffix(this.errorImageIsAssigned ?
   ASPxEditElementSuffix.ErrorTextCell : ASPxEditElementSuffix.ErrorCell);
 },
 GetClientValidationStateHiddenField: function() {
  if(!this.clientValidationStateElement)
   this.clientValidationStateElement = this.CreateClientValidationStateHiddenField();
  return this.clientValidationStateElement;
 },
 CreateClientValidationStateHiddenField: function() {
  var mainElement = this.GetMainElement();
  var hiddenField = _aspxCreateHiddenField(this.uniqueID + __aspxClientValidationStateNameSuffix);
  mainElement.parentNode.appendChild(hiddenField);
  return hiddenField;
 },
 SetVisible: function (isVisible) {
  if (this.clientVisible == isVisible)
   return;
  var externalTable = this.GetExternalTable();
  if (externalTable) {
   _aspxSetElementDisplay(externalTable, isVisible);
   if (this.customValidationEnabled) {
    var isValid = !isVisible ? true : void (0);
    this.UpdateErrorFrameAndFocus(false , true , isValid );
   }
  }
  ASPxClientControl.prototype.SetVisible.call(this, isVisible);
 },
 GetValueInputToValidate: function() {
  return this.GetInputElement();
 },
 IsVisible: function() {
  if (!this.clientVisible)
   return false;
  var element = this.GetMainElement();
  if(!element)
   return false;
  while(element && element.tagName != "BODY") {
   if (element.getAttribute("errorFrame") != "errorFrame" && (!_aspxGetElementVisibility(element) || !_aspxGetElementDisplay(element)))
    return false;
   element = element.parentNode;
  }
  return true;
 },
 AdjustControlCore: function() {
  this.CollapseEditor();
  if (this.WidthCorrectionRequired())
   this.CorrectEditorWidth();
  else
   this.UnstretchInputElement();
  if (this.heightCorrectionRequired)
   this.CorrectEditorHeight();
 },
 WidthCorrectionRequired: function() {
  var mainElement = this.GetMainElement();
  if(_aspxIsExistsElement(mainElement)) {
   var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
   return this.widthCorrectionRequired && mainElementCurStyle.width != "" && mainElementCurStyle.width != "auto";
  }
  return false;
 },
 CorrectEditorWidth: function() {
 },
 CorrectEditorHeight: function() {
 },
 UnstretchInputElement: function() {
 },
 UseDelayedSpecialFocus: function() {
  return false;
 },
 GetDelayedSpecialFocusTriggers: function() {
  return [ this.GetMainElement() ];
 },
 InitializeDelayedSpecialFocus: function() {
  if(!this.UseDelayedSpecialFocus())
   return;
  this.specialFocusTimer = -1;
  var handler = function(evt) { this.OnDelayedSpecialFocusMouseDown(evt); }.aspxBind(this);
  var triggers = this.GetDelayedSpecialFocusTriggers();
  for(var i = 0; i < triggers.length; i++)
   _aspxAttachEventToElement(triggers[i], "mousedown", handler);
 },
 OnDelayedSpecialFocusMouseDown: function(evt) {
  window.setTimeout(function() { this.SetFocus(); }.aspxBind(this), 0);
 },
 IsFocusEventsLocked: function() {
  return this.focusEventsLocked;
 },
 LockFocusEvents: function() {
  if(!this.focused) return;
  this.focusEventsLocked = true;
 },
 UnlockFocusEvents: function() {
  this.focusEventsLocked = false;
 },
 ForceRefocusEditor: function() {
  this.LockFocusEvents();
  var inputElement = this.GetFocusableInputElement();
  if(inputElement && inputElement.blur)
   inputElement.blur();
  window.setTimeout("aspxGetControlCollection().Get('" + this.name + "').SetFocus();", 0);
 },
 IsEditorElement: function(element) {
  return this.GetMainElement() == element || _aspxGetIsParent(this.GetMainElement(), element);
 },
 IsElementBelongToInputElement: function(element) {
  return this.GetInputElement() == element;
 },
 OnFocusCore: function() {
  if(this.UseDelayedSpecialFocus())
   window.clearTimeout(this.specialFocusTimer);
  if (!this.IsFocusEventsLocked()){
   this.focused = true;
   ASPxClientEdit.SetFocusedEditor(this);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   if(this.isInitialized)
    this.RaiseFocus();
  }
  else
   this.UnlockFocusEvents();
 },
 OnLostFocusCore: function() {
  if (!this.IsFocusEventsLocked()){
   this.focused = false;
   ASPxClientEdit.SetFocusedEditor(null);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   this.RaiseLostFocus();
  }
 },
 OnFocus: function() {
  if (!this.specialKeyboardHandlingUsed)
   this.OnFocusCore();
 },
 OnLostFocus: function() {
  if (this.isInitialized && !this.specialKeyboardHandlingUsed)
   this.OnLostFocusCore();
 },
 OnSpecialFocus: function() {
  if (this.isInitialized)
   this.OnFocusCore();
 },
 OnSpecialLostFocus: function() {
  if (this.isInitialized)
   this.OnLostFocusCore();
 },
 OnMouseWheel: function(evt){
 },
 OnValidation: function(validationType) {
  if(this.customValidationEnabled && this.isInitialized && _aspxIsExistsElement(this.GetMainElement()) &&
   (this.display == ASPxErrorFrameDisplay.None || this.GetExternalTable())) {
   this.BeginErrorFrameUpdate();
   try {
    this.SetIsValid(true, true );
    this.SetErrorText(this.initialErrorText, true );
    if(this.validateOnLeave || validationType != ASPxValidationType.PersonalOnValueChanged) {
     this.ValidateWithPatterns();
     this.RaiseValidation();
    }
    this.UpdateErrorFrameAndFocus(validationType == ASPxValidationType.PersonalOnValueChanged && this.validateOnLeave && !this.GetIsValid());
   } finally {
    this.EndErrorFrameUpdate();
   }
   this.UpdateValidationSummaries(validationType);
  }
 },
 OnValueChanged: function() {
  var processOnServer = this.RaiseValidationInternal();
  processOnServer = this.RaiseValueChangedEvent() && processOnServer;
  if (processOnServer)
   this.SendPostBackInternal("");
 },
 ParseValue: function() {
 },
 RaisePersonalStandardValidation: function() {
  if (_aspxIsFunction(window.ValidatorOnChange)) {
   var inputElement = this.GetValueInputToValidate();
   if(inputElement && inputElement.Validators)
    window.ValidatorOnChange({ srcElement: inputElement });
  }
 },
 RaiseValidationInternal: function() {
  if (this.isPostBackAllowed() && this.causesValidation && this.validateOnLeave)
   return ASPxClientEdit.ValidateGroup(this.validationGroup);
  else {
   this.OnValidation(ASPxValidationType.PersonalOnValueChanged);
   return this.GetIsValid();
  }
 },
 RaiseValueChangedEvent: function(){
  return this.RaiseValueChanged();
 },
 SendPostBackInternal: function(postBackArg) {
  if (_aspxIsFunction(this.sendPostBackWithValidation))
   this.sendPostBackWithValidation(postBackArg);
  else
   this.SendPostBack(postBackArg);
 },
 SetElementToBeFocused: function() {
  if (this.IsVisible())
   __aspxInvalidEditorToBeFocused = this;
 },
 GetFocusSelectAction: function() {
  return null;
 },
 SetFocus: function() {
  var inputElement = this.GetFocusableInputElement();
  if (!inputElement) return;
  var isIE9 = __aspxIE && __aspxBrowserVersion >= 9;
  if ((_aspxGetActiveElement() != inputElement || isIE9) && _aspxIsEditorFocusable(inputElement)) {
   _aspxSetFocus(inputElement, this.GetFocusSelectAction());
   if (_aspxGetActiveElement() == inputElement && isIE9)
    window.setTimeout(function() { _aspxClearInputSelection(inputElement); }, 100);
  }
 },
 SetFocusOnError: function() {
  if (__aspxInvalidEditorToBeFocused == this) {
   this.SetFocus();
   __aspxInvalidEditorToBeFocused = null;
  }
 },
 BeginErrorFrameUpdate: function() {
  if(!this.errorFrameUpdateLocked)
   this.errorFrameUpdateLocked = true;
 },
 EndErrorFrameUpdate: function() {
  this.errorFrameUpdateLocked = false;
  var args = this.updateErrorFrameAndFocusLastCallArgs;
  if(args) {
   this.UpdateErrorFrameAndFocus(args[0], args[1]);
   delete this.updateErrorFrameAndFocusLastCallArgs;
  }
 },
 UpdateErrorFrameAndFocus: function(setFocusOnError, ignoreVisibilityCheck, isValid) {
  if(!this.GetEnabled() || !ignoreVisibilityCheck && !this.GetVisible())
   return;
  if(this.errorFrameUpdateLocked) {
   this.updateErrorFrameAndFocusLastCallArgs = [ setFocusOnError, ignoreVisibilityCheck ];
   return;
  }
  if(this.styleDecoration)
   this.styleDecoration.Update();
  if(typeof(isValid) == "undefined")
   isValid = this.GetIsValid();
  var externalTable = this.GetExternalTable();
  var isStaticDisplay = this.display == ASPxErrorFrameDisplay.Static;
  var isErrorFrameDisplayed = this.display != ASPxErrorFrameDisplay.None;
  if(isValid && isErrorFrameDisplayed) {
   if(isStaticDisplay) {
    this.HideErrorCell(true);
    _aspxAddClassNameToElement(externalTable, ASPxEditExternalTableClassNames.ValidStaticTableClassName);
   } else {
    this.HideErrorCell();
    this.SaveControlCellStyles();
    this.ClearControlCellStyles();
    _aspxAddClassNameToElement(externalTable, ASPxEditExternalTableClassNames.ValidDynamicTableClassName);
   }
  } else {
   var editorLocatedWithinVisibleContainer = this.IsVisible();
   if(isErrorFrameDisplayed) {
    if(this.widthCorrectionRequired) {
     if(editorLocatedWithinVisibleContainer)
      this.CollapseEditor();
     else
      this.ResetControlAdjustment();
    }
    this.UpdateErrorCellContent();
    if(isStaticDisplay) {
     this.ShowErrorCell(true);
     _aspxRemoveClassNameFromElement(externalTable, ASPxEditExternalTableClassNames.ValidStaticTableClassName);
    } else {
     this.EnsureControlCellStylesLoaded();
     this.RestoreControlCellStyles();
     this.ShowErrorCell();
     _aspxRemoveClassNameFromElement(externalTable, ASPxEditExternalTableClassNames.ValidDynamicTableClassName);
    }
   }
   if(editorLocatedWithinVisibleContainer) {
    if(isErrorFrameDisplayed && this.widthCorrectionRequired)
     this.AdjustControl();
    if(setFocusOnError && this.setFocusOnError && __aspxInvalidEditorToBeFocused == null)
     this.SetElementToBeFocused();
   }
  }
 },
 ShowErrorCell: function (useVisibilityAttribute) {
  var errorCell = this.GetErrorCell();
  if (errorCell) {
   if (useVisibilityAttribute)
    _aspxSetElementVisibility(errorCell, true);
   else
    _aspxSetElementDisplay(errorCell, true);
  }
 },
 HideErrorCell: function(useVisibilityAttribute) {
  var errorCell = this.GetErrorCell();
  if (errorCell) {
   if (useVisibilityAttribute)
    _aspxSetElementVisibility(errorCell, false);
   else
    _aspxSetElementDisplay(errorCell, false);
  }
 },
 SaveControlCellStyles: function() {
  this.EnsureControlCellStylesLoaded();
 },
 EnsureControlCellStylesLoaded: function() {
  if(typeof(this.controlCellStyles) == "undefined") {
   var controlCell = this.GetControlCell();
   this.controlCellStyles = {
    cssClass: controlCell.className,
    style: this.ExtractElementStyleStringIgnoringVisibilityProps(controlCell)
   };
  }
 },
 ClearControlCellStyles: function() {
  this.ClearElementStyle(this.GetControlCell());
 },
 RestoreControlCellStyles: function() {
  var controlCell = this.GetControlCell();
  var externalTable = this.GetExternalTable();
  if (__aspxWebKitFamily)
   this.MakeBorderSeparateForTable(externalTable);
  controlCell.className = this.controlCellStyles.cssClass;
  controlCell.style.cssText = this.controlCellStyles.style;
  if (__aspxWebKitFamily)
   this.UndoBorderSeparateForTable(externalTable);
 },
 MakeBorderSeparateForTable: function(table) {
  _aspxAddClassNameToElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
 },
 UndoBorderSeparateForTable: function(table) {
  setTimeout(function () {
   _aspxRemoveClassNameFromElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
  }, 0);
 },
 ExtractElementStyleStringIgnoringVisibilityProps: function(element) {
  var savedVisibility = element.style.visibility;
  var savedDisplay = element.style.display;
  element.style.visibility = "";
  element.style.display = "";
  var styleStr = element.style.cssText;
  element.style.visibility = savedVisibility;
  element.style.display = savedDisplay;
  return styleStr;
 },
 ClearElementStyle: function(element) {
  if(!element)
   return;
  element.className = "";
  var excludedAttrNames = [
   "width", "display", "visibility",
   "position", "left", "top", "z-index",
   "margin", "margin-top", "margin-right", "margin-bottom", "margin-left",
   "float", "clear"
  ];
  var savedAttrValues = { };
  for(var i = 0; i < excludedAttrNames.length; i++) {
   var attrName = excludedAttrNames[i];
   var attrValue = element.style[attrName];
   if(attrValue)
    savedAttrValues[attrName] = attrValue;
  }
  element.style.cssText = "";
  for(var styleAttrName in savedAttrValues)
   element.style[styleAttrName] = savedAttrValues[styleAttrName];
 },
 UpdateErrorCellContent: function() {
  if (this.errorDisplayMode.indexOf("t") > -1)
   this.UpdateErrorText();
  if (this.errorDisplayMode == "i")
   this.UpdateErrorImage();
 },
 UpdateErrorImage: function() {
  var image = this.GetErrorImage();
  if (_aspxIsExistsElement(image)) {
   image.alt = this.errorText;
   image.title = this.errorText;
  } else {
   this.UpdateErrorText();
  }
 },
 UpdateErrorText: function() {
  var errorTextCell = this.GetErrorTextCell();
  if(_aspxIsExistsElement(errorTextCell))
   errorTextCell.innerHTML = this.HtmlEncode(this.errorText);
 },
 ValidateWithPatterns: function() {
  if (this.validationPatterns.length > 0) {
   var value = this.GetValue();
   for (var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if (!validator.EvaluateIsValid(value)) {
     this.SetIsValid(false, true );
     this.SetErrorText(validator.errorText, true );
     return;
    }
   }
  }
 },
 OnSpecialKeyDown: function(evt){
  this.RaiseKeyDown(evt);
  var handler = this.keyDownHandlers[evt.keyCode];
  if(handler)
   return this[handler](evt);
  return false;
 },
 OnSpecialKeyPress: function(evt){
  this.RaiseKeyPress(evt);
  var handler = this.keyPressHandlers[evt.keyCode];
  if(handler)
   return this[handler](evt);
  if(__aspxNetscapeFamily || __aspxOpera){
   if(evt.keyCode == ASPxKey.Enter)
    return this.enterProcessed;
  }
  return false;
 },
 OnSpecialKeyUp: function(evt){
  this.RaiseKeyUp(evt);
  var handler = this.keyUpHandlers[evt.keyCode];
  if(handler)
   return this[handler](evt);
  return false;
 },
 OnKeyDown: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyDown(evt);
 },
 OnKeyPress: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyPress(evt);
 },
 OnKeyUp: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyUp(evt);
 },
 RaiseKeyDown: function(evt){
  if(!this.KeyDown.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyDown.FireEvent(this, args);
  }
 },
 RaiseKeyPress: function(evt){
  if(!this.KeyPress.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyPress.FireEvent(this, args);
  }
 },
 RaiseKeyUp: function(evt){
  if(!this.KeyUp.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyUp.FireEvent(this, args);
  }
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseValidation: function() {
  if(this.customValidationEnabled && !this.Validation.IsEmpty()) {
   var currentValue = this.GetValue();
   var args = new ASPxClientEditValidationEventArgs(currentValue, this.errorText, this.GetIsValid());
   this.Validation.FireEvent(this, args);
   this.SetErrorText(args.errorText, true );
   this.SetIsValid(args.isValid, true );
   if(args.value != currentValue)
    this.SetValue(args.value);
  }
 },
 RaiseValueChanged: function(){
  var processOnServer = this.isPostBackAllowed();
  if(!this.ValueChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ValueChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 isPostBackAllowed: function() {
  return this.autoPostBack;
 },
 RequireStyleDecoration: function() {
  this.styleDecoration = new ASPxClientEditStyleDecoration(this);
  this.PopulateStyleDecorationPostfixes();
 },
 PopulateStyleDecorationPostfixes: function() {
  this.styleDecoration.AddPostfix("");
 },
 Focus: function(){
  this.SetFocus();
 },
 GetIsValid: function(){
  if((ASPxIdent.IsASPxClientRadioButtonList(this) || _aspxIsExistsElement(this.GetInputElement())) &&
   (this.display == ASPxErrorFrameDisplay.None || _aspxIsExistsElement(this.GetExternalTable())  ))
   return this.isValid;
  else
   return true;
 },
 GetErrorText: function(){
  return this.errorText;
 },
 SetIsValid: function(isValid, validating){
  if (this.customValidationEnabled) {
   this.isValid = isValid;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
  }
 },
 SetErrorText: function(errorText, validating){
  if (this.customValidationEnabled) {
   this.errorText = errorText;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
  }
 },
 Validate: function(){
  this.ParseValue();
  this.OnValidation(ASPxValidationType.PersonalViaScript);
 }
});
ASPxClientEdit.focusedEditorName = "";
ASPxClientEdit.GetFocusedEditor = function(){
 var focusedEditor = aspxGetControlCollection().Get(ASPxClientEdit.focusedEditorName);
 if(focusedEditor && !focusedEditor.focused){
  ASPxClientEdit.SetFocusedEditor(null);
  focusedEditor = null;
 }
 return focusedEditor;
}
ASPxClientEdit.SetFocusedEditor = function(editor){
 ASPxClientEdit.focusedEditorName = editor ? editor.name : "";
}
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {
 __aspxInvalidEditorToBeFocused = null;
 _aspxProcessEditorsInContainer(container, _aspxClearProcessingProc, _aspxClearChoiceCondition, validationGroup, clearInvisibleEditors, true );
 ASPxClientEdit.ClearExternalControlsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {
 var container = document.getElementById(containerId);
 this.ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ClearGroup = function(validationGroup, clearInvisibleEditors) {
 return this.ClearEditorsInContainer(null, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {
 var summaryCollection;
 if(typeof(ASPxClientValidationSummary) != "undefined") {
  summaryCollection = aspxGetClientValidationSummaryCollection();
  summaryCollection.AllowNewErrorsAccepting(validationGroup);
 }
 var validationResult = _aspxProcessEditorsInContainer(container, _aspxValidateProcessingProc, _aspxValidateChoiceCondition, validationGroup, validateInvisibleEditors,
  false );
 validationResult.isValid = ASPxClientEdit.ValidateExternalControlsInContainer(container, validationGroup, validateInvisibleEditors) && validationResult.isValid;
 if(typeof(aspxGetGlobalEvents) != "undefined") {
  if(typeof(validateInvisibleEditors) == "undefined")
   validateInvisibleEditors = false;
  if(typeof(validationGroup) == "undefined")
   validationGroup = null;
  validationResult.isValid = aspxGetGlobalEvents().OnValidationCompleted(container, validationGroup,
   validateInvisibleEditors, validationResult.isValid, validationResult.firstInvalid, validationResult.firstVisibleInvalid);
 }
 if(summaryCollection)
  summaryCollection.ForbidNewErrorsAccepting(validationGroup);
 return validationResult.isValid;
}
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {
 var container = document.getElementById(containerId);
 return this.ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
}
ASPxClientEdit.ValidateGroup = function(validationGroup, validateInvisibleEditors) {
 return this.ValidateEditorsInContainer(null, validationGroup, validateInvisibleEditors);
}
ASPxClientEdit.AreEditorsValid = function(containerOrContainerId, validationGroup, checkInvisibleEditors) {
 var container = typeof(containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 var checkResult = _aspxProcessEditorsInContainer(container, _aspxEditorsValidProcessingProc, _aspxEditorsValidChoiceCondition, validationGroup,
  checkInvisibleEditors, false );
 checkResult.isValid = ASPxClientEdit.AreExternalControlsValidInContainer(containerOrContainerId, validationGroup, checkInvisibleEditors) && checkResult.isValid;
 return checkResult.isValid;
}
ASPxClientEdit.AreExternalControlsValidInContainer = function(containerId, validationGroup, validateInvisibleEditors) {
 if (typeof(ASPxClientHtmlEditor) != "undefined")
  return ASPxClientHtmlEditor.AreEditorsValidInContainer(containerId, validationGroup, validateInvisibleEditors);
 return true;
}
ASPxClientEdit.ClearExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors) {
 if (typeof(ASPxClientHtmlEditor) != "undefined")
  return ASPxClientHtmlEditor.ClearEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
 return true;
}
ASPxClientEdit.ValidateExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors) {
 if (typeof(ASPxClientHtmlEditor) != "undefined")
  return ASPxClientHtmlEditor.ValidateEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
 return true;
}
ASPxClientEditKeyEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(htmlEvent) {
  this.constructor.prototype.constructor.call(this);
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientEditValidationEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(value, errorText, isValid) {
  this.constructor.prototype.constructor.call(this);
  this.errorText = errorText;
  this.isValid = isValid;
  this.value = value;
 }
});
function aspxEGotFocus(name){
 var edit = aspxGetControlCollection().Get(name);
 if(!edit) return;
 if(!edit.isInitialized){
  var inputElement = edit.GetFocusableInputElement();
  if(inputElement && inputElement == document.activeElement)
   document.activeElement.blur();
  return;
 }
 edit.OnFocus();
}
function aspxELostFocus(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnLostFocus();
}
function aspxESGotFocus(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnSpecialFocus();
}
function aspxESLostFocus(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit == null)
  return;
 if(edit.UseDelayedSpecialFocus())
  edit.specialFocusTimer = window.setTimeout(function() { edit.OnSpecialLostFocus(); }, 30);
 else
  edit.OnSpecialLostFocus();
}
function aspxEValueChanged(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnValueChanged();
}
_aspxAttachEventToDocument("mousedown", aspxEMouseDown);
function aspxEMouseDown(evt) {
 var editor = ASPxClientEdit.GetFocusedEditor();
 if(!editor)
  return;
 var evtSource = _aspxGetEventSource(evt);
 if(editor.OwnerDateEdit && editor.OwnerDateEdit.GetShowTimeSection()) {
  editor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
  return;
 }
 if(editor.IsEditorElement(evtSource) && !editor.IsElementBelongToInputElement(evtSource))
  editor.ForceRefocusEditor();
}
_aspxAttachEventToDocument(__aspxNetscapeFamily ? "DOMMouseScroll" : "mousewheel", aspxEMouseWheel);
function aspxEMouseWheel(evt) {
 var editor = ASPxClientEdit.GetFocusedEditor();
 if (editor != null && _aspxIsExistsElement(editor.GetMainElement()) && editor.focused && editor.receiveGlobalMouseWheel)
  editor.OnMouseWheel(evt);
}
function aspxKBSIKeyDown(name, evt){
 var control = aspxGetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyDown(evt);
  if(isProcessed)
   return _aspxPreventEventAndBubble(evt);
 }
}
function aspxKBSIKeyPress(name, evt){
 var control = aspxGetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyPress(evt);
  if(isProcessed)
   return _aspxPreventEventAndBubble(evt);
 }
}
function aspxKBSIKeyUp(name, evt){
 var control = aspxGetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyUp(evt);
  if(isProcessed)
   return _aspxPreventEventAndBubble(evt);
 }
}
function aspxEKeyDown(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnKeyDown(evt);
 if (__aspxAndroidMobilePlatform && __aspxChrome)
  aspxEKeyPress(name, evt);
}
function aspxEKeyPress(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnKeyPress(evt);
}
function aspxEKeyUp(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnKeyUp(evt);
}
ASPxValidationResult = _aspxCreateClass(null, {
 constructor: function(isValid, firstInvalid, firstVisibleInvalid) {
  this.isValid = isValid;
  this.firstInvalid = firstInvalid;
  this.firstVisibleInvalid = firstVisibleInvalid;
 }
});
function _aspxProcessEditorsInContainer(container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
 var allProcessedSuccessfull = true;
 var firstInvalid = null;
 var firstVisibleInvalid = null;
 var invalidEditorToBeFocused = null;
 aspxGetControlCollection().ForEachControl(function(control) {
  if (ASPxIdent.IsASPxClientEdit(control) && (processDisabledEditors || control.GetEnabled())) {
   var mainElement = control.GetMainElement();
   if (mainElement &&
    (container == null || _aspxGetIsParent(container, mainElement)) &&
    (processInvisibleEditors || control.IsVisible()) &&
    choiceCondition(control, validationGroup)) {
    var isSuccess = processingProc(control);
    if(!isSuccess) {
     allProcessedSuccessfull = false;
     if(firstInvalid == null)
      firstInvalid = control;
     var isVisible = control.IsVisible();
     if(isVisible && firstVisibleInvalid == null)
      firstVisibleInvalid = control;
     if (control.setFocusOnError && invalidEditorToBeFocused == null && isVisible)
      invalidEditorToBeFocused = control;
    }
   }
  }
 }, this);
 if (invalidEditorToBeFocused != null)
  invalidEditorToBeFocused.SetFocus();
 return new ASPxValidationResult(allProcessedSuccessfull, firstInvalid, firstVisibleInvalid);
}
function _aspxClearChoiceCondition(edit, validationGroup) {
 return !_aspxIsExists(validationGroup) || (edit.validationGroup == validationGroup);
}
function _aspxValidateChoiceCondition(edit, validationGroup) {
 return _aspxClearChoiceCondition(edit, validationGroup) && edit.customValidationEnabled;
}
function _aspxEditorsValidChoiceCondition(edit, validationGroup) {
 return _aspxValidateChoiceCondition(edit, validationGroup);
}
function _aspxClearProcessingProc(edit) {
 edit.SetValue(null);
 edit.SetIsValid(true);
 return true;
}
function _aspxValidateProcessingProc(edit) {
 edit.OnValidation(ASPxValidationType.MassValidation);
 return edit.GetIsValid();
}
function _aspxEditorsValidProcessingProc(edit) {
 return edit.GetIsValid();
}
ASPxCheckEditElementHelper = _aspxCreateClass(ASPxCheckableElementHelper, {
 AttachToMainElement: function(internalCheckBox) {
  ASPxCheckableElementHelper.prototype.AttachToMainElement.call(this, internalCheckBox);
  this.AttachToLabelElement(this.GetLabelElement(internalCheckBox.container), internalCheckBox);
 },
 AttachToLabelElement: function(labelElement, internalCheckBox) {
  var _this = this;
  if(labelElement) {
   _aspxAttachEventToElement(labelElement, "click",
    function (evt) {
     _this.InvokeClick(internalCheckBox, evt);
    }
   );
   _aspxAttachEventToElement(labelElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
  }
 },
 GetLabelElement: function(container) {
  return _aspxGetChildByTagName(container, "LABEL", 0);
 }
});
ASPxCheckEditElementHelper.Instance = new ASPxCheckEditElementHelper();

var __aspxLabelValueSuffix = "_V";
ASPxClientStaticEdit = _aspxCreateClass(ASPxClientEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.Click = new ASPxClientEvent();
 },
 OnClick: function(htmlEvent) {
  this.RaiseClick(this.GetMainElement(), htmlEvent);
 },
 RaiseClick: function(htmlElement, htmlEvent){
  if(!this.Click.IsEmpty()){
   var args = new ASPxClientEditClickEventArgs(htmlElement, htmlEvent);
   this.Click.FireEvent(this, args);
  }
 },
 ChangeEnabledAttributes: function(enabled){
  this.ChangeMainElementAttributes(this.GetMainElement(), _aspxChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
 },
 ChangeMainElementAttributes: function(element, method){
  method(element, "onclick");
 }
});
ASPxClientEditClickEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(htmlElement, htmlEvent){
  this.constructor.prototype.constructor.call(this);
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPxClientHyperLink = _aspxCreateClass(ASPxClientStaticEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
 },
 GetNavigateUrl: function(){
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   return element.href;
  return "";
 },
 SetNavigateUrl: function(url){
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   element.href = url;
 },
 GetText: function(){
  return this.GetValue();
 },
 SetText: function(value){
  this.SetValue(value);
 },
 ChangeMainElementAttributes: function(element, method){
  ASPxClientStaticEdit.prototype.ChangeMainElementAttributes.call(this, element, method);
  method(element, "href");
 }
});
ASPxClientHyperLink.Cast = ASPxClientControl.Cast;
ASPxClientImageBase = _aspxCreateClass(ASPxClientStaticEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.imageWidth = "";
  this.imageHeight = "";
 },
 GetWidth: function(){
  return this.GetSize(true);
 },
 GetHeight: function(){
  return this.GetSize(false);
 },
 SetWidth: function(width) {
  this.SetSize(width, this.GetHeight());
 },
 SetHeight: function(height) {
  this.SetSize(this.GetWidth(), height);
 },
 SetSize: function(width, height){
  this.imageWidth = width + "px";
  this.imageHeight = height + "px";
  var image = this.GetMainElement();
  if(_aspxIsExistsElement(image))
   ASPxImageUtils.SetSize(image, width, height);
 },
 GetSize: function(isWidth){
  var image = this.GetMainElement();
  if(_aspxIsExistsElement(image))
   return ASPxImageUtils.GetSize(image, isWidth);
  return -1;
 }
});
ASPxClientImage = _aspxCreateClass(ASPxClientImageBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.emptyImageUrl = "";
  this.emptyImageToolTip = "";
  this.emptyImageWidth = "";
  this.emptyImageHeight = "";
  this.imageAlt = "";
  this.imageToolTip = "";
  this.isEmpty = false;
  this.loadingImageBackgroundStyle = "";
 },
 Initialize: function () {
  ASPxClientImageBase.prototype.Initialize.call(this);
  var image = this.GetMainElement();
  if (image && image.dxLoadingImageBackground)
   this.loadingImageBackgroundStyle = image.dxLoadingImageBackground;
 },
 GetValue: function() {
  if(!this.isEmpty) {
   var image = this.GetMainElement();
   if(_aspxIsExistsElement(image))
    return ASPxImageUtils.GetImageSrc(image);
  }
  return "";
 },
 SetValue: function (value) {
  if(value == null) value = "";
  this.isEmpty = (value == "");
  var image = this.GetMainElement();
  if (_aspxIsExistsElement(image)) {
   this.ShowLoadingImage();
   if(this.emptyImageUrl != ""){
    if(value == "")
     this.ApplyImageProperties(image, this.emptyImageUrl, this.emptyImageWidth, this.emptyImageHeight, this.emptyImageAlt, this.emptyImageToolTip);
    else
     this.ApplyImageProperties(image, value, this.imageWidth, this.imageHeight, this.imageAlt, this.imageToolTip);
   }
   else
    ASPxImageUtils.SetImageSrc(image, value);
  }
 },
 ShowLoadingImage: function () {
  if (this.loadingImageBackgroundStyle) {
   var image = this.GetMainElement();
   ASPxImageUtils.SetImageSrc(image, "");
   image.style.background = this.loadingImageBackgroundStyle;
  }
 },
 ApplyImageProperties: function(imageElement, url, width, height, alt, toolTip){
  ASPxImageUtils.SetImageSrc(imageElement, url);
  imageElement.style.width = width;
  imageElement.style.height = height;
  imageElement.alt = alt;
  imageElement.title = toolTip;
 },
 GetImageUrl: function(url){
  return this.GetValue();
 },
 SetImageUrl: function(url){
  this.SetValue(url);
 }
});
ASPxClientImage.Cast = ASPxClientControl.Cast;
ASPxClientBinaryImage = _aspxCreateClass(ASPxClientImageBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 GetValue: function() {
  return "";
 },
 SetValue: function(value) {
 }
});
ASPxClientBinaryImage.Cast = ASPxClientControl.Cast;
ASPxClientLabel = _aspxCreateClass(ASPxClientStaticEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
 },
 GetValue: function() {
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   return element.innerHTML;
 },
 SetValue: function(value) {
  if(value == null)
   value = "";
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element))
   element.innerHTML = value;
 },
 SetVisible: function(visible){
  if(this.clientVisible != visible){
   this.clientVisible = visible;
   var element = this.GetMainElement();
   if(!visible)
    element.style.display = "none";
   else if((element.style.width != "" || element.style.height != "") && !__aspxNetscapeFamily)
    element.style.display = "inline-block";
   else
    element.style.display = "";
  }
 },
 GetText: function(){
  return this.GetValue();
 },
 SetText: function(value){
  this.SetValue(value);
 },
 ChangeMainElementAttributes: function(element, method){
  ASPxClientStaticEdit.prototype.ChangeMainElementAttributes.call(this, element, method);
  method(element, "htmlFor");
 }
});
ASPxClientLabel.Cast = ASPxClientControl.Cast;
function aspxSEClick(name, evt){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) {
  edit.OnClick(evt);
  return evt.returnValue;
 }
}
function aspxSELoad(evt) {
 var image = _aspxGetEventSource(evt);
 if(!image.dxLoadingImageBackground)
  image.dxLoadingImageBackground = image.style.background;
 image.style.background = "";
}
var __aspxTEInputSuffix = "_I";
var __aspxTERawInputSuffix = "_Raw";
var __aspxTEPasswordInputClonedSuffix = "_CLND";
var __aspxPasteCheckInterval = 50;
ASPxEditorStretchedInputElementsManager = _aspxCreateClass(null, {
 constructor: function() {
  this.targetEditorNames = { };
 },
 Initialize: function() {
  this.InitializeTargetEditorsList();
 },
 InitializeTargetEditorsList: function() {
  aspxGetControlCollection().ForEachControl(function(control) {
   if(this.targetEditorNames[control.name])
    return;
   if(ASPxIdent.IsASPxClientTextEdit(control) && control.WidthCorrectionRequired()) {
    var inputElement = control.GetInputElement();
    if(inputElement && _aspxIsPercentageSize(inputElement.style.width))
     this.targetEditorNames[control.name] = true;
   }
  }, this);
 },
 HideInputElementsExceptOf: function(exceptedEditor) {
  var collection = aspxGetControlCollection();
  for(var editorName in this.targetEditorNames) {
   if(typeof(editorName) != "string")
    continue;
   var editor = collection.Get(editorName);
   if(!ASPxIdent.IsASPxClientEdit(editor)) continue;
   if(editor && editor != exceptedEditor) {
    var input = editor.GetInputElement();
    if(input) {
     var existentSavedDisplay = input._dxSavedDisplayAttr;
     if(!_aspxIsExists(existentSavedDisplay)) {
      input._dxSavedDisplayAttr = input.style.display;
      input.style.display = "none";
     }
    }
   }
  }
 },
 ShowInputElements: function() {
  var collection = aspxGetControlCollection();
  for(var editorName in this.targetEditorNames) {
   if(typeof(editorName) != "string")
    continue;
   var editor = collection.Get(editorName);
   if(!ASPxIdent.IsASPxClientEdit(editor)) continue;
   if(editor) {
    var input = editor.GetInputElement();
    if(input) {
     var savedDisplay = input._dxSavedDisplayAttr;
     if(_aspxIsExists(savedDisplay)) {
      input.style.display = savedDisplay;
      _aspxRemoveAttribute(input, "_dxSavedDisplayAttr");
     }
    }
   }
  }
 }
});
var __aspxEditorStretchedInputElementsManager = null;
function _aspxGetEditorStretchedInputElementsManager() {
 if(!__aspxEditorStretchedInputElementsManager)
  __aspxEditorStretchedInputElementsManager = new ASPxEditorStretchedInputElementsManager();
 return __aspxEditorStretchedInputElementsManager;
}
ASPxClientBrowserHelper = {
 SAFARI_SYSTEM_CLASS_NAME: "dxeSafariSys",
 MOBILE_SAFARI_SYSTEM_CLASS_NAME: "dxeIPadSys",
 GetBrowserSpecificSystemClassName: function() {
  if (__aspxSafari)
   return __aspxMacOSMobilePlatform ? this.MOBILE_SAFARI_SYSTEM_CLASS_NAME : this.SAFARI_SYSTEM_CLASS_NAME;
  return "";
 }
},
ASPxClientTextEdit = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientTextEdit = true;
  this.nullText = "";
  this.escCount = 0;
  this.raiseValueChangedOnEnter = true;
  this.autoResizeWithContainer = false;
  this.lastChangedValue = null;
  this.passwordNullTextIntervalID = -1;
  this.nullTextInputElement = null;
  this.helpText = "";
  this.helpTextObj = null;
  this.helpTextStyle = [];
  this.externalTableStyle = [];
  this.helpTextPosition = ASPxPosition.Right;
  this.helpTextMargins = null;
  this.helpTextHAlign = ASPxClientTextEditHelpTextHAlign.Left;
  this.helpTextVAlign = ASPxClientTextEditHelpTextVAlign.Top;
  this.enableHelpTextPopupAnimation = true;
  this.helpTextDisplayMode = ASPxClientTextEditHelpTextDisplayMode.Inline;
  this.canProcessMaskOnLostFocus = true;
  this.maskInfo = null;
  this.maskValueBeforeUserInput = "";
  this.maskPasteTimerID = -1;
  this.maskPasteLock = false;
  this.maskPasteCounter = 0;
  this.maskTextBeforePaste = "";
  this.maskHintHtml = "";
  this.maskHintTimerID = -1;
  this.errorCellPosition = ASPxPosition.Right;
  this.captionPosition = ASPxPosition.Left;
  this.displayFormat = null;
  this.TextChanged = new ASPxClientEvent();
 },
 Initialize: function(){
  this.SaveChangedValue();
  ASPxClientEdit.prototype.Initialize.call(this);
  this.CorrectInputMaxLength();
  this.SubscribeToIeDropEvent();
  if(__aspxWebKitFamily)
   this.CorrectMainElementWhiteSpaceStyle();
  if(this.GetInputElement().type == "password")
   this.ToggleTextDecoration();
 },
 InlineInitialize: function(){
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(this.maskInfo != null)
   this.InitMask();
  this.ApplyBrowserSpecificClassName();
  this.helpTextInitialize();
  var postHandler = aspxGetPostHandler();
  postHandler.PostFinalization.removeHandlerByControlName(this.name);
  postHandler.PostFinalization.AddHandler(this.OnPost, this);
  if (__aspxIE && __aspxBrowserVersion >= 10 && this.nullText != "")
   this.addIEXButtonEventHandler();
 },
 AdjustControl: function() {
  ASPxClientEdit.prototype.AdjustControl.call(this);
  if(__aspxIE && __aspxBrowserVersion > 8 && !this.isNative)
   this.correctInputElementHeight();
 },
 correctInputElementHeight: function() {
  var mainElement = this.GetMainElement();
  var inputElement = this.GetInputElement();
  if (mainElement) {
   var mainElementHeight = mainElement.style.height;
   var mainElementHeightSpecified = mainElementHeight && mainElementHeight.indexOf('px') !== -1;
   if(mainElementHeightSpecified) {
    var inputElementHeight = this.getInputElementHeight();
    inputElement.style.height = inputElementHeight + "px";
    if (!ASPxIdent.IsASPxClientMemo(this))
     inputElement.style.lineHeight = inputElementHeight + "px";
   }
  }
 },
 getInputElementHeight: function() {
  var mainElement = this.GetMainElement(),
   inputElement = this.GetInputElement();
  var inputElementHeight = mainElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  var inputElementContainer = inputElement.parentNode,
   inputContainerStyle = _aspxGetCurrentStyle(inputElementContainer);
  inputElementHeight -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(inputElementContainer, inputContainerStyle)
   + _aspxGetTopBottomMargins(inputElementContainer, inputContainerStyle);
  var mainElementCellspacing = _aspxGetCellSpacing(mainElement);
  if(mainElementCellspacing)
   inputElementHeight -= mainElementCellspacing * 2;
  var inputStyle = _aspxGetCurrentStyle(inputElement);
  inputElementHeight -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(inputElement, inputStyle)
   + _aspxGetTopBottomMargins(inputElement, inputStyle);
  return inputElementHeight;
 },
 addIEXButtonEventHandler: function() {
  var inputElement = this.GetInputElement()
  if (_aspxIsExists(inputElement)) {
   this.isDeleteOrBackspaceKeyClick = false;
   _aspxAttachEventToElement(inputElement, "input", function (evt) {
    if (this.isDeleteOrBackspaceKeyClick) {
     this.isDeleteOrBackspaceKeyClick = false;
     return;
    }
    if (inputElement.value === '') {
     this.SyncRawInputValue();
    }
   }.aspxBind(this));
   _aspxAttachEventToElement(inputElement, "keydown", function (evt) {
    this.isDeleteOrBackspaceKeyClick = (evt.keyCode == ASPxKey.Delete || evt.keyCode == ASPxKey.Backspace);
   }.aspxBind(this));
  }
 },
 helpTextInitialize: function () {
  if (this.helpText) {
   this.helpTextObj = new ASPxClientTextEditHelpText(this, this.helpTextStyle, this.helpText, this.helpTextPosition,
    this.helpTextHAlign, this.helpTextVAlign, this.helpTextMargins, this.enableHelpTextPopupAnimation, this.helpTextDisplayMode);
  }
 },
 showHelpText: function () {
  if (this.helpTextObj)
   this.helpTextObj.show();
 },
 hideHelpText: function () {
  if (this.helpTextObj)
   this.helpTextObj.hide();
 },
 ApplyBrowserSpecificClassName: function() {
  var mainElement = this.GetMainElement();
  if(_aspxIsExistsElement(mainElement)) {
   var className = ASPxClientBrowserHelper.GetBrowserSpecificSystemClassName();
   if (className)
    mainElement.className += " " + className;
  }
 },
  CorrectMainElementWhiteSpaceStyle: function() {
  var inputElement = this.GetInputElement();
  if(inputElement && inputElement.parentNode) {
   if(this.IsElementHasWhiteSpaceStyle(inputElement.parentNode))
    inputElement.parentNode.style.whiteSpace = "normal";
  }
 },
 IsElementHasWhiteSpaceStyle: function(element) {
  var currentStyle = _aspxGetCurrentStyle(element);
  return currentStyle.whiteSpace == "nowrap" || currentStyle.whiteSpace == "pre";
 },
 FindInputElement: function(){
  return this.isNative ? this.GetMainElement() : _aspxGetElementById(this.name + __aspxTEInputSuffix);
 },
 GetRawInputElement: function() {
  return _aspxGetElementById(this.name + __aspxTERawInputSuffix);
 },
 DecodeRawInputValue: function(value) {
  return value;
 },
 SetRawInputValue: function(value){
  this.GetRawInputElement().value = value;
 },
 SyncRawInputValue: function() {
  if(this.maskInfo != null)
   this.SetRawInputValue(this.maskInfo.GetValue());
  else
   this.SetRawInputValue(this.GetInputElement().value);
 },
 HasTextDecorators: function() {
  return this.nullText != "" || this.displayFormat != null;
 },
 CanApplyTextDecorators: function(){
  return !this.focused;
 },
 GetDecoratedText: function(value) {
  var isNull = value == null || value === "";
  if (isNull && this.nullText != "") {
   if (this.CanApplyNullTextDecoration) {
    if (this.CanApplyNullTextDecoration())
     return this.nullText;
   } else {
    return this.nullText;
   }
  }
  if(this.displayFormat != null)
   return ASPxFormatter.Format(this.displayFormat, value);
  if(this.maskInfo != null)
   return this.maskInfo.GetText();
  if(value == null)
   return "";
  return value;
 },
 ToggleTextDecoration: function() {
  if (this.HasTextDecorators()) {
   if (this.focused) {
    var input = this.GetInputElement();
    var oldValue = input.value;
    var sel = _aspxGetExtSelectionInfo(input);
    this.ToggleTextDecorationCore();
    if (oldValue != input.value) {
     if (sel.startPos == 0 && sel.endPos == oldValue.length)
      sel.endPos = input.value.length;
     else
      sel.endPos = sel.startPos;
     _aspxSetInputSelection(input, sel.startPos, sel.endPos);
    }
   } else
    this.ToggleTextDecorationCore();
  }
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {
   this.ApplyMaskInfo(false);
  } else {
   var input = this.GetInputElement();
   var rawValue = this.GetRawInputElement().value;
   var value = this.CanApplyTextDecorators() ? this.GetDecoratedText(rawValue) : rawValue;
   if(input.value != value) {
    if(input.type == "password")
     this.TogglePasswordInputTextDecoration(value);
    else
     input.value = value;
   }
  }
 },
 GetPasswordNullTextInputElement: function() {
  if(!_aspxIsExistsElement(this.nullTextInputElement)) {
   var inputElement = this.GetInputElement();
   var nullTextInputElement = document.createElement("INPUT");
   nullTextInputElement.className = inputElement.className;
   nullTextInputElement.style.cssText = inputElement.style.cssText;
   nullTextInputElement.id = inputElement.id + __aspxTEPasswordInputClonedSuffix;
   nullTextInputElement.type = "text";
   var onFocusEventHandler = function() {
    this.LockFocusEvents();
    _aspxChangeStyleAttribute(this.GetInputElement(), "display", "");
    if(this.GetInputElement().focus) {
     this.GetInputElement().focus();
    } else {
     window.setTimeout(function() {
      aspxGetControlCollection().Get(this.name).SetFocus();
     }.aspxBind(this), 0);
    }
    _aspxChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
    this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
   }.aspxBind(this);
   nullTextInputElement.onfocus = onFocusEventHandler;
   this.nullTextInputElement = nullTextInputElement;
  }
  return this.nullTextInputElement;
 },
 TogglePasswordNullTextTimeoutChecker: function() {
  if(this.passwordNullTextIntervalID < 0) {
   var timeoutChecker = function() {
    var inputElement = this.GetInputElement();
    if(aspxGetControlCollection().GetByName(this.name) !== this || inputElement == null) {
     window.clearTimeout(this.passwordNullTextIntervalID);
     this.passwordNullTextIntervalID = -1;
     return;
    } else {
     if(!this.focused) {
      var passwordNullTextInputElement = this.GetPasswordNullTextInputElement();
      if(passwordNullTextInputElement.value != this.nullText && inputElement.value == "") {
       passwordNullTextInputElement.value = this.nullText;
       this.SetValue(null);
      }
      if(inputElement.value != "") {
       if(inputElement.style.display == "none") {
        this.SetValue(inputElement.value);
        this.UnhidePasswordInput();
       }
      } else {
       if(inputElement.style.display != "none") {
        this.SetValue(null);
        this.HidePasswordInput();
       }
      }
     }
    }
   }.aspxBind(this);
   timeoutChecker();
   this.passwordNullTextIntervalID = window.setInterval(timeoutChecker, 100);
  }
 },
 TogglePasswordInputTextDecoration: function(value) {
  var inputElement = this.GetInputElement();
  var nullTextInputElement = this.GetPasswordNullTextInputElement();
  nullTextInputElement.value = value;
  var parentNode = inputElement.parentNode;
  if(_aspxArrayIndexOf(parentNode.childNodes, nullTextInputElement) < 0) {
   _aspxChangeStyleAttribute(nullTextInputElement, "display", "none");
   parentNode.appendChild(nullTextInputElement);
  }
  this.HidePasswordInput();
  this.TogglePasswordNullTextTimeoutChecker();
 },
 HidePasswordInput: function() {
  _aspxChangeStyleAttribute(this.GetInputElement(), "display", "none");
  _aspxChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "");
  this.ReplaceAssociatedIdInLabels(this.GetInputElement().id, this.GetPasswordNullTextInputElement().id);
 },
 UnhidePasswordInput: function() {
  _aspxChangeStyleAttribute(this.GetInputElement(), "display", "");
  _aspxChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
  this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
 },
 ReplaceAssociatedIdInLabels: function(oldId, newId) {
  var labels = document.getElementsByTagName("LABEL");
  for(var i = 0; i < labels.length; i++) {
   if(labels[i].attributes["for"] && labels[i].attributes["for"].value == oldId)
    labels[i].attributes["for"].value = newId;
  }
 },
 GetFormattedText: function() {
  var value = this.GetValue();
  var isNull = value == null || value === "";
  if(isNull && this.nullText != "")
   return this.GetText();
  return this.GetDecoratedText(value);
 },
 PopulateStyleDecorationPostfixes: function() {
  ASPxClientEdit.prototype.PopulateStyleDecorationPostfixes.call(this);
  this.styleDecoration.AddPostfix(__aspxTEInputSuffix);
 },
 GetValue: function() {
  var value = null;
  if(this.maskInfo != null)
   value = this.maskInfo.GetValue();
  else if(this.HasTextDecorators())
   value = this.GetRawInputElement().value;
  else
   value = this.GetInputElement().value;
  return (value == "" && this.convertEmptyStringToNull) ? null : value;
 },
 SetValue: function(value) {
  if(value == null || value === undefined)
   value = "";
  if(this.maskInfo != null) {
   this.maskInfo.SetValue(value.toString());
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  }
  else if(this.HasTextDecorators()) {
   this.SetRawInputValue(value);
   this.GetInputElement().value = this.CanApplyTextDecorators() && this.GetInputElement().type != "password" ? this.GetDecoratedText(value) : value;
  }
  else
   this.GetInputElement().value = value;
  if(this.styleDecoration)
   this.styleDecoration.Update();
  this.SaveChangedValue();
 },
 SetVisible: function(visible) {
  ASPxClientEdit.prototype.SetVisible.call(this, visible);
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   if(visible)
    this.showHelpText();
   else
    this.hideHelpText();
  }
 },
 CollapseEditor: function() {
  if(!this.IsAdjustmentRequired()) return;
  var mainElement = this.GetMainElement();
  if (!_aspxIsExistsElement(mainElement))
   return;
  if (this.WidthCorrectionRequired()) {
   this.GetInputElement().style.width = "0";
   this.ResetControlAdjustment();
  }
 },
 CorrectEditorWidth: function() {
  var inputElement = this.GetInputElement();
  var stretchedInputsManager = _aspxGetEditorStretchedInputElementsManager();
  var currentAciveElement = null;
  if (this.IsRestoreActiveElementAfterWidthCorrection())
   currentAciveElement = _aspxGetActiveElement();
  try {
   stretchedInputsManager.HideInputElementsExceptOf(this);
   _aspxSetOffsetWidth(inputElement, _aspxGetClearClientWidth(_aspxFindOffsetParent(inputElement)) - this.GetInputWidthCorrection());
  } finally {
   stretchedInputsManager.ShowInputElements();
  }
  if (this.IsRestoreActiveElementAfterWidthCorrection())
   this.RestoreActiveElement(currentAciveElement);
 },
 UnstretchInputElement: function(){
  var inputElement = this.GetInputElement();
  var mainElement = this.GetMainElement();
  var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
  if (_aspxIsExistsElement(mainElement) && _aspxIsExistsElement(inputElement) && _aspxIsExists(mainElementCurStyle) &&
   inputElement.style.width == "100%" &&
   (mainElementCurStyle.width == "" || mainElementCurStyle.width == "auto"))
   inputElement.style.width = "";
 },
 RestoreActiveElement: function(activeElement) {
  if (activeElement && activeElement.setActive && activeElement.tagName != "IFRAME")
   activeElement.setActive();
 },
 IsRestoreActiveElementAfterWidthCorrection: function() {
  return __aspxIE && __aspxBrowserVersion <= 7;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseTextChanged(processOnServer);
  return processOnServer;
 },
 GetInputWidthCorrection: function(){
  return 0;
 },
 InitMask: function() {
  var raw = String(this.GetRawInputElement().value);
  this.SetValue(raw.length ? this.DecodeRawInputValue(raw) : this.maskInfo.GetValue());
  this.validationPatterns.unshift(new ASPxMaskValidationPattern(this.maskInfo.errorText, this.maskInfo));
 },
 SetMaskPasteTimer: function() {
  this.ClearMaskPasteTimer();
  this.maskPasteTimerID = _aspxSetInterval("aspxMaskPasteTimerProc('" + this.name + "')", __aspxPasteCheckInterval);
 },
 ClearMaskPasteTimer: function() {
  this.maskPasteTimerID = _aspxClearInterval(this.maskPasteTimerID);
 },
 SavePrevMaskValue: function() {
  this.maskValueBeforeUserInput = this.maskInfo.GetValue();
 },
 FillMaskInfo: function() {
  var input = this.GetInputElement();
  if(!input) return;
  var sel = _aspxGetSelectionInfo(input);
  this.maskInfo.SetCaret(sel.startPos, sel.endPos - sel.startPos);
 },
 ApplyMaskInfo: function(applyCaret) {
  this.SyncRawInputValue();
  var input = this.GetInputElement();
  var text = this.GetMaskDisplayText();
  this.maskTextBeforePaste = text;
  if(input.value != text)
   input.value = text;
  if(applyCaret)
   _aspxSetInputSelection(input, this.maskInfo.caretPos, this.maskInfo.caretPos + this.maskInfo.selectionLength);
 },
 GetMaskDisplayText: function() {
  if(!this.focused && this.HasTextDecorators())
   return this.GetDecoratedText(this.maskInfo.GetValue());
  return this.maskInfo.GetText();
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  return _aspxEventPrevented(htmlEvent);
 },
 HandleMaskKeyDown: function(evt) {
  var keyInfo = _aspxMaskManager.CreateKeyInfoByEvent(evt);
  _aspxMaskManager.keyCancelled = this.ShouldCancelMaskKeyProcessing(evt, keyInfo);
  if(_aspxMaskManager.keyCancelled) {
   _aspxPreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;
  this.FillMaskInfo();
  var canHandle = _aspxMaskManager.CanHandleControlKey(keyInfo);
  _aspxMaskManager.savedKeyDownKeyInfo = keyInfo;
  if(canHandle) {
   _aspxMaskManager.OnKeyDown(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
   _aspxPreventEvent(evt);
  }
  _aspxMaskManager.keyDownHandled = canHandle;
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 HandleMaskKeyPress: function(evt) {
  var keyInfo = _aspxMaskManager.CreateKeyInfoByEvent(evt);
  _aspxMaskManager.keyCancelled = _aspxMaskManager.keyCancelled || this.ShouldCancelMaskKeyProcessing(evt, _aspxMaskManager.savedKeyDownKeyInfo);
  if(_aspxMaskManager.keyCancelled) {
   _aspxPreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;
  var printable = _aspxMaskManager.savedKeyDownKeyInfo != null && _aspxMaskManager.IsPrintableKeyCode(_aspxMaskManager.savedKeyDownKeyInfo);
  if(printable) {
   _aspxMaskManager.OnKeyPress(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
  }
  if(printable || _aspxMaskManager.keyDownHandled)
   _aspxPreventEvent(evt);
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 MaskPasteTimerProc: function() {
  if(this.maskPasteLock) return;
  this.maskPasteCounter++;
  var inputElement = this.inputElement;
  if(!inputElement || this.maskPasteCounter > 40) {
   this.maskPasteCounter = 0;
   inputElement = this.GetInputElement();
   if(!_aspxIsExistsElement(inputElement)) {
    this.ClearMaskPasteTimer();
    return;
   }
  }
  if(this.maskTextBeforePaste != inputElement.value && this.maskInfo != null) {
   this.maskInfo.ProcessPaste(inputElement.value, _aspxGetSelectionInfo(inputElement).endPos);
   this.ApplyMaskInfo(true);
  }
  if(!this.focused)
   this.ClearMaskPasteTimer();
 },
 BeginShowMaskHint: function() {
  if(!this.readOnly && this.maskHintTimerID == -1)
   this.maskHintTimerID = window.setInterval(aspxMaskHintTimerProc, 500);
 },
 EndShowMaskHint: function() {
  window.clearInterval(this.maskHintTimerID);
  this.maskHintTimerID = -1;
 },
 MaskHintTimerProc: function() {
  if(this.maskInfo) {
   this.FillMaskInfo();
   this.UpdateMaskHintHtml();
  } else {
   this.EndShowMaskHint();
  }
 },
 UpdateMaskHintHtml: function() {
  var hint =  this.GetMaskHintElement();
  if(!_aspxIsExistsElement(hint))
   return;
  var html = _aspxMaskManager.GetHintHtml(this.maskInfo);
  if(html == this.maskHintHtml)
   return;
  if(html != "") {
   var mainElement = this.GetMainElement();
   if(_aspxIsExistsElement(mainElement)) {
    hint.innerHTML = html;
    hint.style.position = "absolute";
    hint.style.left = _aspxPrepareClientPosForElement(_aspxGetAbsoluteX(mainElement), mainElement, true) + "px";
    hint.style.top = (_aspxPrepareClientPosForElement(_aspxGetAbsoluteY(mainElement), mainElement, false) + mainElement.offsetHeight + 2) + "px";
    hint.style.display = "block";
   }
  } else {
   hint.style.display = "none";
  }
  this.maskHintHtml = html;
 },
 HideMaskHint: function() {
  var hint =  this.GetMaskHintElement();
  if(_aspxIsExistsElement(hint))
   hint.style.display = "none";
  this.maskHintHtml = "";
 },
 GetMaskHintElement: function() {
  return _aspxGetElementById(this.name + "_MaskHint");
 },
 OnFocus: function() {
  if(this.maskInfo != null)
   this.SetMaskPasteTimer();
  ASPxClientEdit.prototype.OnFocus.call(this);
 },
 OnMouseWheel: function(evt){
  if(this.readOnly || this.maskInfo == null) return;
  this.FillMaskInfo();
  _aspxMaskManager.OnMouseWheel(this.maskInfo, _aspxGetWheelDelta(evt) < 0 ? -1 : 1);
  this.ApplyMaskInfo(true);
  _aspxPreventEvent(evt);
  this.UpdateMaskHintHtml();
 },
 OnBrowserWindowResize: function(evt) {
  if(!this.autoResizeWithContainer)
   this.AdjustControl();
 },
 IsValueChanged: function() {
    return this.GetValue() != this.lastChangedValue;
 },
 OnKeyDown: function(evt) {
  if(__aspxIE && _aspxGetKeyCode(evt) == ASPxKey.Esc) {
   if(++this.escCount > 1) {
    _aspxPreventEvent(evt);
    return;
   }
  } else
   this.escCount = 0;
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
  if(!this.IsRaiseStandardOnChange(evt)) {
   if(!this.readOnly && this.maskInfo != null)
    this.HandleMaskKeyDown(evt);
  }
 },
 OnKeyPress: function(evt) {
  ASPxClientEdit.prototype.OnKeyPress.call(this, evt);
  if(!this.readOnly && this.maskInfo != null && !this.IsRaiseStandardOnChange(evt))
   this.HandleMaskKeyPress(evt);
  if(this.NeedOnKeyEventEnd(evt, true))
   this.OnKeyEventEnd(evt);
 },
 OnKeyUp: function(evt) {
  if (__aspxFirefox && !this.focused && _aspxGetKeyCode(evt) === ASPxKey.Tab)
   return;
  if(this.NeedOnKeyEventEnd(evt, false))
   this.OnKeyEventEnd(evt);
  ASPxClientEdit.prototype.OnKeyUp.call(this, evt);
 },
 NeedOnKeyEventEnd: function(evt, isKeyPress) {
  var handleKeyPress = this.maskInfo != null && evt.keyCode == ASPxKey.Enter;
  return handleKeyPress == isKeyPress;
 },
 OnKeyEventEnd: function(evt){
  if(!this.readOnly) {
   if(this.IsRaiseStandardOnChange(evt))
    this.RaiseStandardOnChange();
   if(this.HasTextDecorators())
    this.SyncRawInputValue();
  }
 },
 IsRaiseStandardOnChange: function(evt){
  return !this.specialKeyboardHandlingUsed && this.raiseValueChangedOnEnter && evt.keyCode == ASPxKey.Enter;
 },
 GetFocusSelectAction: function() {
  if(this.maskInfo)
   return "start";
  return "all";
 },
 CorrectFocusWhenDisabled: function() {
  if(!this.GetEnabled()) {
   var inputElement = this.GetInputElement();
   if(inputElement)
    inputElement.blur();
   return true;
  }
  return false;
 },
 OnFocusCore: function() {
  if(this.CorrectFocusWhenDisabled())
   return;
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnFocusCore.call(this);
  this.CorrectInputMaxLength(true);
  if(this.maskInfo != null) {
   this.SavePrevMaskValue();
   this.BeginShowMaskHint();
   this.AttachOnMouseClickIfNeeded()
  }
  if(!wasLocked)
   this.ToggleTextDecoration();
  if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.showHelpText();
 },
 AttachOnMouseClickIfNeeded: function() {
  if (this.GetValue() == "" || this.GetValue() == null) {
   this.MouseClickOnMaskedEditorFunc = function (e) {
    _aspxDetachEventFromElement(this.GetInputElement(), "click", this.MouseClickOnMaskedEditorFunc);
    var selectionInfo = _aspxGetExtSelectionInfo(this.GetInputElement());
    if (selectionInfo.startPos == selectionInfo.endPos)
     if(this.rtl)
      this.SetCaretPosition(this.GetText().length);
     else
      this.SetCaretPosition(0);
   }.aspxBind(this);
   _aspxAttachEventToElement(this.GetInputElement(), "click", this.MouseClickOnMaskedEditorFunc);
  }
 },
 OnLostFocusCore: function() {
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnLostFocusCore.call(this);
  this.CorrectInputMaxLength();
  if(this.maskInfo != null) {
   this.EndShowMaskHint();
   this.HideMaskHint();
   if(this.maskInfo.ApplyFixes(null))
    this.ApplyMaskInfo(false);
   if(this.canProcessMaskOnLostFocus)
    this.RaiseStandardOnChange();
  }
  if(!wasLocked)
   this.ToggleTextDecoration();
  this.escCount = 0;
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.hideHelpText();
 },
 InputMaxLengthCorrectionRequired: function () {
  return __aspxIE && __aspxBrowserVersion >= 10 && (!this.isNative || this.nullText != "");
 },
 CorrectInputMaxLength: function (onFocus) {
  if (this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   if (!_aspxIsExists(this.inputMaxLength))
    this.inputMaxLength = input.maxLength;
   input.maxLength = onFocus ? this.inputMaxLength : -1;
  }
 },
 SubscribeToIeDropEvent: function() {
  if(this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   _aspxAttachEventToElement(input, "drop", function(e) { this.CorrectInputMaxLength(true); }.aspxBind(this));
  }
 },
 OnValueChanged: function() {
  if(this.maskInfo != null) {
   if(this.maskInfo.GetValue() == this.maskValueBeforeUserInput)
    return;
   this.SavePrevMaskValue();
  }
  if(this.HasTextDecorators())
   this.SyncRawInputValue();
  if(!this.IsValueChanged()) return;
  this.SaveChangedValue();
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 OnTextChanged: function() {
 },
 SaveChangedValue: function() {
  this.lastChangedValue = this.GetValue();
 },
 RaiseStandardOnChange: function(){
  var element = this.GetInputElement();
  if(element && element.onchange) {
   element.onchange({ target: this.GetInputElement() });
  }
 },
 RaiseTextChanged: function(processOnServer){
  if(!this.TextChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.TextChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetText: function(){
  if(this.maskInfo != null) {
   return this.maskInfo.GetText();
  } else {
   var value = this.GetValue();
   return value != null ? value : "";
  }
 },
 SetText: function (value){
  if(this.maskInfo != null) {
   this.maskInfo.SetText(value);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } else {
   this.SetValue(value);
  }
 },
 SelectAll: function() {
  this.SetSelection(0, -1, false);
 },
 SetCaretPosition: function(pos) {
  var inputElement = this.GetInputElement();
  _aspxSetCaretPosition(inputElement, pos);
 },
 SetSelection: function(startPos, endPos, scrollToSelection) {
  var inputElement = this.GetInputElement();
  _aspxSetSelection(inputElement, startPos, endPos, scrollToSelection);
 },
 ChangeEnabledAttributes: function(enabled){
  var inputElement = this.GetInputElement();
  if(inputElement){
   this.ChangeInputEnabledAttributes(inputElement, _aspxChangeAttributesMethod(enabled), enabled);
   if(this.specialKeyboardHandlingUsed)
    this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
   this.ChangeInputEnabled(inputElement, enabled, this.readOnly);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  if(!this.isNative) {
   var sc = aspxGetStateController();
   sc.SetElementEnabled(this.GetMainElement(), enabled);
   sc.SetElementEnabled(this.GetInputElement(), enabled);
  }
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  if(this.UseReadOnlyForDisabled())
   element.readOnly = !enabled || readOnly;
  else
   element.disabled = !enabled;
 },
 ChangeInputEnabledAttributes: function(element, method, enabled){
  method(element, "tabIndex");
  if(!enabled) element.tabIndex = -1;
  method(element, "onclick");
  if(!this.NeedFocusCorrectionWhenDisabled())
   method(element, "onfocus");
  method(element, "onblur");
  method(element, "onkeydown");
  method(element, "onkeypress");
  method(element, "onkeyup");
 },
 UseReadOnlyForDisabled: function() {
  return (__aspxIE && __aspxBrowserVersion < 10) && !this.isNative;
 },
 NeedFocusCorrectionWhenDisabled: function(){
  return (__aspxIE && __aspxBrowserVersion < 10) && !this.isNative;
 },
 OnPost: function() {
  if(this.GetEnabled() || !this.UseReadOnlyForDisabled() || aspxGetPostHandler().dxCallbackHandled)
   return;
  var inputElement = this.GetInputElement();
  if(inputElement) {
   var inputName = inputElement.name;
   inputElement.name = "disabledWithReadOnly[]";
   window.setTimeout(function() {
    inputElement.name = inputName;
   }.aspxBind(this), 0);
  }
 }
});
ASPxIdent.IsASPxClientTextEdit = function(obj) {
 return !!obj.isASPxClientTextEdit;
};
ASPxMaskValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
 constructor: function(errorText, maskInfo) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.maskInfo = maskInfo;
 },
 EvaluateIsValid: function(value) {
  return this.maskInfo.IsValid();
 }
});
ASPxClientTextBoxBase = _aspxCreateClass(ASPxClientTextEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetHeight = false;
  this.sizingConfig.adjustControl = true;
 }
});
ASPxClientTextBox = _aspxCreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientTextBox = true;
 }
});
ASPxClientTextBox.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientTextBox = function(obj) {
 return !!obj.isASPxClientTextBox;
};
var __aspxMMinHeight = 34;
ASPxClientMemo = _aspxCreateClass(ASPxClientTextEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientMemo = true;
  this.raiseValueChangedOnEnter = false;
  this.maxLength = 0;
  this.pasteTimerID = -1;
  this.pasteTimerActivatorCount = 0;
 },
 Initialize: function() {
  ASPxClientTextEdit.prototype.Initialize.call(this);
  this.SaveChangedValue();
  this.maxLengthRestricted = this.maxLength > 0;
 },
 CutString: function() {
  var text = this.GetText();
  if(text.length > this.maxLength) {
   text = text.substring(0, this.maxLength);
   this.SetText(text);
  }
 },
 EventKeyCodeChangesTheInput: function(evt){
  if(_aspxIsPasteShortcut(evt))
   return true;
  else if(evt.ctrlKey)
   return false;
  var keyCode = _aspxGetKeyCode(evt);
  var isSystemKey = ASPxKey.Windows <= keyCode && keyCode <= ASPxKey.ContextMenu;
  var isFKey = ASPxKey.F1 <= keyCode && keyCode <= 127;
  return ASPxKey.Delete < keyCode && !isSystemKey && !isFKey || keyCode == ASPxKey.Enter || keyCode == ASPxKey.Space;
 },
 OnTextChangingCheck: function() {
  if(this.maxLengthRestricted)
   this.CutString();
 },
 StartTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   if (this.pasteTimerActivatorCount == 0)
    this.SetTextChangingTimer();
   this.pasteTimerActivatorCount ++;
  }
 },
 EndTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   this.pasteTimerActivatorCount --;
   if(this.pasteTimerActivatorCount == 0)
    this.ClearTextChangingTimer();
  }
 },
 CollapseEditor: function() {
  if(!this.IsAdjustmentRequired()) return;
  var mainElement = this.GetMainElement();
  var inputElement = this.GetInputElement();
  if (!_aspxIsExistsElement(mainElement) || !_aspxIsExistsElement(inputElement))
   return;
  ASPxClientTextEdit.prototype.CollapseEditor.call(this);
  var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
  if (this.heightCorrectionRequired && mainElement && inputElement) {
   if (mainElement.style.height == "100%" || mainElementCurStyle.height == "100%") {
    mainElement.style.height = "0";
    mainElement.wasCollapsed = true;
   }
   inputElement.style.height = "0";
  }
 },
 CorrectEditorHeight: function() {
  var mainElement = this.GetMainElement();
  if(mainElement.wasCollapsed) {
   mainElement.wasCollapsed = null;
   _aspxSetOffsetHeight(mainElement, _aspxGetClearClientHeight(_aspxFindOffsetParent(mainElement)));
  }
  if(!this.isNative) {
   var inputElement = this.GetInputElement();
   var inputClearClientHeight = _aspxGetClearClientHeight(_aspxFindOffsetParent(inputElement));
   if(__aspxIE) {
    inputClearClientHeight -= 2;
    var calculatedMainElementStyle = _aspxGetCurrentStyle(mainElement);
    inputClearClientHeight += _aspxPxToInt(calculatedMainElementStyle.borderTopWidth) + _aspxPxToInt(calculatedMainElementStyle.borderBottomWidth);
   }
   if(inputClearClientHeight < __aspxMMinHeight)
    inputClearClientHeight = __aspxMMinHeight;
   _aspxSetOffsetHeight(inputElement, inputClearClientHeight);
   mainElement.style.height = "100%";
  }
 },
 SetWidth: function(width) {
  this.constructor.prototype.SetWidth.call(this, width);
  if(__aspxIE)
   this.AdjustControl();
 },
 SetHeight: function(height) {
  this.GetInputElement().style.height = "1px";
  this.constructor.prototype.SetHeight.call(this, height);
  this.GetInputElement().style.height = this.GetMainElement().clientHeight + "px";
 },
 ClearErrorFrameElementsStyles: function() {
  var textarea = this.GetInputElement();
  if(!textarea)
   return;
  var scrollBarPosition = textarea.scrollTop;
  ASPxClientTextEdit.prototype.ClearErrorFrameElementsStyles.call(this);
  if(__aspxFirefox)
   textarea.scrollTop = scrollBarPosition;
 },
 AllowPreventingDefaultEnterBehavior: function() {
  return false;
 },
 OnMouseOver: function() {
  this.StartTextChangingTimer();
 },
 OnMouseOut: function() {
  this.EndTextChangingTimer();
 },
 OnFocus: function() {
  this.StartTextChangingTimer();
  ASPxClientEdit.prototype.OnFocus.call(this);
 },
 OnLostFocus: function() {
  this.EndTextChangingTimer();
  ASPxClientEdit.prototype.OnLostFocus.call(this);
 },
 OnKeyDown: function(evt) {
  if(this.maxLengthRestricted){
   var selection = _aspxGetSelectionInfo(this.GetInputElement());
   var noCharToReplace = selection.startPos == selection.endPos;
   if(this.GetText().length >= this.maxLength && noCharToReplace && this.EventKeyCodeChangesTheInput(evt)) {
    return _aspxPreventEvent(evt);
   }
  }
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
 },
 SetTextChangingTimer: function() {
  this.pasteTimerID  = _aspxSetInterval(function () { this.OnTextChangingCheck(); }.aspxBind(this), __aspxPasteCheckInterval);
 },
 ClearTextChangingTimer: function() {
  this.pasteTimerID = _aspxClearInterval(this.pasteTimerID);
 }
});
function aspxMMMouseOut(name, evt) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOut(evt);
}
function aspxMMMouseOver(name, evt) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOver(evt);
}
ASPxClientMemo.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientMemo = function(obj) {
 return !!obj.isASPxClientMemo;
};
ASPxClientButtonEditBase = _aspxCreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.allowUserInput = true;
  this.allowMouseWheel = true;
  this.buttonCount = 0;
  this.ButtonClick = new ASPxClientEvent();
 },
 GetInputWidthCorrection: function(){
  if(__aspxIE && __aspxBrowserVersion <= 7){
   var mainElement = this.GetMainElement();
   var cellSpacing = _aspxGetAttribute(mainElement, "cellSpacing");
   if(cellSpacing === "0")
    return 1;
  }
  return 0;
 },
 GetButton: function(number) {
  return this.GetChild("_B" + number);
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return false;
 },
 OnButtonClick: function(number){
  var processOnServer = this.RaiseButtonClick(number);
  if (!this.ProcessInternalButtonClick(number) && processOnServer)
   this.SendPostBack('BC:' + number);
 },
 OnKeyPress: function(evt) {
  if(this.allowUserInput)
   ASPxClientTextBoxBase.prototype.OnKeyPress.call(this, evt);
 },
 RaiseButtonClick: function(number){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ButtonClick");
  if(!this.ButtonClick.IsEmpty()){
   var args = new ASPxClientButtonEditClickEventArgs(processOnServer, number);
   this.ButtonClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element)
    this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  }
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledStateItems.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element)
    aspxGetStateController().SetElementEnabled(element, enabled);
  }
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
  method(element, "on" + ASPxClientTouchUI.touchMouseDownEventName);
  method(element, "on" + ASPxClientTouchUI.touchMouseUpEventName);
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || !this.allowUserInput);
 }
});
ASPxClientButtonEdit = _aspxCreateClass(ASPxClientButtonEditBase, {
});
ASPxClientButtonEdit.Cast = ASPxClientControl.Cast;
ASPxClientButtonEditClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, buttonIndex){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.buttonIndex = buttonIndex;
 }
});
function aspxETextChanged(name) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnTextChanged();
}
function aspxBEClick(name,number){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) edit.OnButtonClick(number);
}
function aspxMaskPasteTimerProc(name){
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null && edit.maskInfo)
  edit.MaskPasteTimerProc();
}
function aspxMaskHintTimerProc() {
 var focusedEditor = ASPxClientEdit.GetFocusedEditor();
 if(focusedEditor != null && _aspxIsFunction(focusedEditor.MaskHintTimerProc))
  focusedEditor.MaskHintTimerProc();
}
function _aspxSetFocusToTextEditWithDelay(name) {
 _aspxSetTimeout(function() {
  var edit = aspxGetControlCollection().Get(name);
  if(!edit)
   return;
  __aspxIE ? edit.SetCaretPosition(0) : edit.SetFocus();
 }, 500);
}
ASPxPosition = {
 Left: "Left",
 Right: "Right",
 Top: "Top",
 Bottom: "Bottom"
}
ASPxClientTextEditHelpTextHAlign = {
 Left: "Left",
 Right: "Right",
 Center: "Center"
}
ASPxClientTextEditHelpTextVAlign = {
 Top: "Top",
 Bottom: "Bottom",
 Middle: "Middle"
}
ASPxClientTextEditHelpTextDisplayMode = {
 Inline: "Inline",
 Popup: "Popup"
}
ASPxClientTextEditHelpTextConsts = {
 VERTICAL_ORIENTATION_CLASS_NAME: "dxeVHelpTextSys",
 HORIZONTAL_ORIENTATION_CLASS_NAME: "dxeHHelpTextSys"
}
ASPxClientTextEditHelpText = _aspxCreateClass(null, {
 constructor: function (editor, helpTextStyle, helpText, position, hAlign, vAlign, margins, animationEnabled, helpTextDisplayMode) {
  this.hAlign = hAlign;
  this.vAlign = vAlign;
  this.animationEnabled = animationEnabled;
  this.displayMode = helpTextDisplayMode;
  this.editor = editor;
  this.editorMainElement = editor.GetMainElement();
  this.margins = margins ? { Top: margins[0], Right: margins[1], Bottom: margins[2], Left: margins[3] } : null;
  this.defaultMargins = { Top: 10, Right: 10, Bottom: 10, Left: 10 };
  this.position = position;
  this.helpTextElement = this.createHelpTextElement();
  this.setHelpTextZIndex(true);
  this.prepareHelpTextElement(helpTextStyle, helpText);
 },
 getRows: function (table) {
  return _aspxGetChildNodesByTagName(table, "TR");
 },
 getCells: function (row) {
  return _aspxGetChildNodesByTagName(row, "TD");
 },
 getCellByIndex: function(row, cellIndex) {
  return this.getCells(row)[cellIndex];
 },
 getCellIndex: function(row, cell) {
  var cells = this.getCells(row);
  for(var i = 0; i < cells.length; i++) {
   if(cells[i] === cell)
    return i;
  }
 },
 isHorizontal: function(position) {
  return position === ASPxPosition.Left || position === ASPxPosition.Right;
 },
 isVertical: function (position) {
  return position === ASPxPosition.Top || position === ASPxPosition.Bottom;
 },
 createEmptyCell: function(assignClassName) {
  var cell = document.createElement("TD");
  if (assignClassName)
   cell.className = "dxeFakeEmptyCell";
  return cell;
 },
 addHelpTextCellToExternalTableWithTwoCells: function (captionCell, errorCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = this.isVertical(this.position) ? document.createElement("TR") : null;
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Left && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Right && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (this.position === ASPxPosition.Bottom) {
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
    errorTableBody.appendChild(helpTextRow);
   }
  }
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Right) {
   if (captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Left || captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Top
    || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Right) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell());
   }
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Bottom || captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Left) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
  }
  if (this.position === ASPxPosition.Left) {
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Right
    || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Left) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(), tableRows[0].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(errorCellPosition === ASPxPosition.Top), tableRows[0].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(errorCellPosition !== ASPxPosition.Top), tableRows[2].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Top) {
    tableRows[2].insertBefore(helpTextCell, tableRows[2].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(false), tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(false), tableRows[2].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Left || captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Bottom
    || captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Right) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(), tableRows[1].childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Left && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
    var emptyCellParentRow = errorCellPosition === ASPxPosition.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if (this.position === ASPxPosition.Right) {
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Top || captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(errorCellPosition === ASPxPosition.Top));
    tableRows[2].appendChild(this.createEmptyCell(errorCellPosition !== ASPxPosition.Top));
   }
   if (captionPosition === ASPxPosition.Top && errorCellPosition === ASPxPosition.Top) {
    tableRows[2].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(false));
    tableRows[1].appendChild(this.createEmptyCell(true));
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Bottom) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell(true));
    tableRows[2].appendChild(this.createEmptyCell(false));
   }
   if (captionPosition === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Right) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
   if (captionPosition === ASPxPosition.Right && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell);
    var emptyCellParentRow = errorCellPosition === ASPxPosition.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Top && this.isHorizontal(errorCellPosition)) {
   if (errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Top && this.isHorizontal(errorCellPosition)) {
   if (errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Bottom && this.isHorizontal(errorCellPosition)) {
   if (errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if (captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Left) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Bottom && errorCellPosition === ASPxPosition.Bottom) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Bottom) {
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Right || captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPxPosition.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPxPosition.Right));
    errorTableBody.appendChild(helpTextRow);
   }
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.appendChild(helpTextRow);
   }
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.appendChild(helpTextRow);
   }
  }
  if (this.position === ASPxPosition.Top) {
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Right || captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPxPosition.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPxPosition.Right));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Left && errorCellPosition === ASPxPosition.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if (captionPosition === ASPxPosition.Right && errorCellPosition === ASPxPosition.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
  }
 },
 addHelpTextCellToExternalTableWithErrorCell: function (errorCell, helpTextCell, errorTableBody, tableRows) {
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = document.createElement("TR");
  if (this.position === ASPxPosition.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if (this.position === ASPxPosition.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if (this.position === ASPxPosition.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if (this.position === ASPxPosition.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if (errorCellPosition === ASPxPosition.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if (errorCellPosition === ASPxPosition.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell(true));
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Left && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellRowIndex].insertBefore(this.createEmptyCell(true), tableRows[emptyCellRowIndex].childNodes[0]);
  }
  if (this.position === ASPxPosition.Right && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellRowIndex].appendChild(this.createEmptyCell(true));
  }
 },
 addHelpTextCellToExternalTableWithCaption: function (captionCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var helpTextRow = document.createElement("TR");
  if (captionPosition === ASPxPosition.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if (this.position === ASPxPosition.Left && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellParentRowIndex].insertBefore(this.createEmptyCell(), tableRows[emptyCellParentRowIndex].childNodes[0]);
  }
  if (this.position === ASPxPosition.Right && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPxPosition.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellParentRowIndex].appendChild(this.createEmptyCell());
  }
  if(captionPosition === ASPxPosition.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   if(this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.isVertical(captionPosition) && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   if(captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
   if(captionPosition === ASPxPosition.Top && this.position === ASPxPosition.Bottom)
    errorTableBody.appendChild(helpTextRow);
   if(captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   if(captionPosition === ASPxPosition.Bottom && this.position === ASPxPosition.Bottom)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Left)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if(captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Right)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if(captionPosition === ASPxPosition.Left && this.position === ASPxPosition.Right)
   tableRows[0].appendChild(helpTextCell);
  if(captionPosition === ASPxPosition.Right && this.position === ASPxPosition.Left)
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
 },
 addHelpTextCellToExternalTableWithEditorOnly: function (helpTextCell, errorTableBody, tableRows) {
  if (this.isHorizontal(this.position)) {
   if (this.position === ASPxPosition.Left)
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
   else
    tableRows[0].appendChild(helpTextCell);
  }
  else {
   var helpTextRow = document.createElement("TR");
   helpTextRow.appendChild(helpTextCell);
   if (this.position === ASPxPosition.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
 },
 addHelpTextCellToExternalTable: function (errorTable, helpTextCell) {
  var errorTableBody = _aspxGetChildByTagName(errorTable, "TBODY", 0);
  var tableRows = this.getRows(errorTableBody);
  var captionCell = this.editor.GetCaptionCell();
  var errorCell = this.editor.GetErrorCell();
  if (captionCell) {
   if (errorCell)
    this.addHelpTextCellToExternalTableWithTwoCells(captionCell, errorCell, helpTextCell, errorTableBody, tableRows);
   else
    this.addHelpTextCellToExternalTableWithCaption(captionCell, helpTextCell, errorTableBody, tableRows);
  }
  else if (errorCell)
   this.addHelpTextCellToExternalTableWithErrorCell(errorCell, helpTextCell, errorTableBody, tableRows);
  else
   this.addHelpTextCellToExternalTableWithEditorOnly(helpTextCell, errorTableBody, tableRows);
 },
 createExternalTable: function () {
  var externalTable = document.createElement("TABLE");
  externalTable.id = this.editor.name + ASPxEditElementSuffix.ExternalTable;
  externalTable.cellPadding = 0;
  externalTable.cellSpacing = 0;
  this.applyExternalTableStyle(externalTable);
  var editorWidth = this.editorMainElement.style.width;
  if(_aspxIsPercentageSize(editorWidth))
   externalTable.style.width = editorWidth;
  var externalTableBody = document.createElement("TBODY");
  var externalTableRow = document.createElement("TR");
  var externalTableCell = document.createElement("TD");
  externalTable.appendChild(externalTableBody);
  externalTableBody.appendChild(externalTableRow);
  externalTableRow.appendChild(externalTableCell);
  this.editorMainElement.parentNode.appendChild(externalTable);
  _aspxChangeElementContainer(this.editorMainElement, externalTableCell, true);
  return externalTable;
 },
 applyExternalTableStyle: function (externalTable) {
  var externalTableStyle = this.editor.externalTableStyle;
  if (externalTableStyle.length > 0) {
   this.applyStyleToElement(externalTable, externalTableStyle);
  }
 },
 applyStyleToElement: function(element, style) {
  element.className = style[0];
  if (style[1]) {
   var styleSheet = _aspxGetCurrentStyleSheet();
   element.className += " " + _aspxCreateImportantStyleRule(styleSheet, style[1]);
  }
 },
 createInlineHelpTextElement: function () {
  var helpTextElement = document.createElement("TD");
  var externalTable = this.editor.GetExternalTable();
  if (!externalTable)
   externalTable = this.createExternalTable();
  this.addHelpTextCellToExternalTable(externalTable, helpTextElement);
  return helpTextElement;
 },
 createPopupHelpTextElement: function () {
  var helpTextElement = document.createElement("DIV");
  document.body.appendChild(helpTextElement);
  ASPxAnimationHelper.setOpacity(helpTextElement, 0);
  return helpTextElement;
 },
 createHelpTextElement: function () {
  return this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup ?
   this.createPopupHelpTextElement() : this.createInlineHelpTextElement();
 },
 prepareHelpTextElement: function (helpTextStyle, helpText) {
  this.applyStyleToElement(this.helpTextElement, helpTextStyle);
  _aspxSetInnerHtml(this.helpTextElement, "<LABEL>" + helpText + "</LABEL>");
  if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.updatePopupHelpTextPosition();
  else {
   var isVerticalOrientation = this.position === ASPxPosition.Top || this.position === ASPxPosition.Bottom;
   var orientationClassName = isVerticalOrientation ? ASPxClientTextEditHelpTextConsts.VERTICAL_ORIENTATION_CLASS_NAME :
    ASPxClientTextEditHelpTextConsts.HORIZONTAL_ORIENTATION_CLASS_NAME;
   this.helpTextElement.className += " " + orientationClassName;
   this.setInlineHelpTextElementAlign();
   _aspxSetElementDisplay(this.helpTextElement, this.editor.clientVisible);
  }
 },
 setInlineHelpTextElementAlign: function() {
  var hAlignValue = "", vAlignValue = "";
  switch(this.hAlign) {
   case ASPxClientTextEditHelpTextHAlign.Left: hAlignValue = "left"; break;
   case ASPxClientTextEditHelpTextHAlign.Right: hAlignValue = "right"; break;
   case ASPxClientTextEditHelpTextHAlign.Center: hAlignValue = "center"; break;
  }
  switch(this.vAlign) {
   case ASPxClientTextEditHelpTextVAlign.Top: vAlignValue = "top"; break;
   case ASPxClientTextEditHelpTextVAlign.Bottom: vAlignValue = "bottom"; break;
   case ASPxClientTextEditHelpTextVAlign.Middle: vAlignValue = "middle"; break;
  }
  this.helpTextElement.style.textAlign = hAlignValue;
  this.helpTextElement.style.verticalAlign = vAlignValue;
 },
 getHelpTextMargins: function() {
  if (this.margins)
   return this.margins;
  var result = this.defaultMargins;
  if (this.position === ASPxPosition.Top || this.position === ASPxPosition.Bottom)
   result.Left = result.Right = 0;
  else
   result.Top = result.Bottom = 0;
  return result;
 },
 updatePopupHelpTextPosition: function (editorMainElement) {
  var editorWidth = this.editorMainElement.offsetWidth;
  var editorHeight = this.editorMainElement.offsetHeight;
  var helpTextWidth = this.helpTextElement.offsetWidth;
  var helpTextHeight = this.helpTextElement.offsetHeight;
  var editorX = _aspxGetAbsoluteX(this.editorMainElement);
  var editorY = _aspxGetAbsoluteY(this.editorMainElement);
  var helpTextX = 0, helpTextY = 0;
  var margins = this.getHelpTextMargins();
  if (this.position === ASPxPosition.Top || this.position === ASPxPosition.Bottom) {
   if (this.position === ASPxPosition.Top)
    helpTextY = editorY - margins.Bottom - helpTextHeight;
   else if (this.position === ASPxPosition.Bottom)
    helpTextY = editorY + editorHeight + margins.Top;
   if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Left)
    helpTextX = editorX + margins.Left;
   else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Right)
    helpTextX = editorX + editorWidth - helpTextWidth - margins.Right;
   else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Center) {
    var editorCenterX = editorX + editorWidth / 2;
    var helpTextWidthWithMargins = helpTextWidth + margins.Left + margins.Right;
    helpTextX = editorCenterX - helpTextWidthWithMargins / 2 + margins.Left;
   }
  } else {
   if (this.position === ASPxPosition.Left)
    helpTextX = editorX - margins.Right - helpTextWidth;
   else if (this.position === ASPxPosition.Right)
    helpTextX = editorX + editorWidth + margins.Left;
   if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Top)
    helpTextY = editorY + margins.Top;
   else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Bottom)
    helpTextY = editorY + editorHeight - helpTextHeight - margins.Bottom;
   else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Middle) {
    var editorCenterY = editorY + editorHeight / 2;
    var helpTextHeightWithMargins = helpTextHeight + margins.Top + margins.Bottom;
    helpTextY = editorCenterY - helpTextHeightWithMargins / 2 + margins.Top;
   }
  }
  helpTextX = helpTextX < 0 ? 0 : helpTextX;
  helpTextY = helpTextY < 0 ? 0 : helpTextY;
  _aspxSetAbsoluteX(this.helpTextElement, helpTextX);
  _aspxSetAbsoluteY(this.helpTextElement, helpTextY);
 },
 setHelpTextZIndex: function (hide) {
  var newZIndex = 41998 * (hide ? -1 : 1);
  if (this.helpTextElement.style.zIndex != newZIndex)
   this.helpTextElement.style.zIndex = newZIndex;
 },
 hide: function () {
  if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   _aspxSetElementDisplay(this.helpTextElement, false);
  }
  else {
   this.animationEnabled ? ASPxAnimationHelper.fadeOut(this.helpTextElement) :
    ASPxAnimationHelper.setOpacity(this.helpTextElement, 0);
   this.setHelpTextZIndex(true);
  }
 },
 show: function () {
  if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   _aspxSetElementDisplay(this.helpTextElement, true);
  }
  else {
   this.updatePopupHelpTextPosition();
   this.animationEnabled ? ASPxAnimationHelper.fadeIn(this.helpTextElement) :
    ASPxAnimationHelper.setOpacity(this.helpTextElement, 1);
   this.setHelpTextZIndex(false);
  }
 }
});

var __aspxLoadFilteredItemsCallbackPrefix = "CBLF";
var __aspxCorrectFilterCallbackPrefix = "CBCF";
var __aspxtCurrentSelectedItemCallbackPrefix = "CBSI";
var __aspxLoadDropDownOnDemandCallbackPrefix = "CBLD";
var __aspxDropDownNameSuffix = "_DDD";
var __aspxCalendarNameSuffix = "_C";
var __aspxTimeEditNameSiffix = __aspxCalendarNameSuffix + "_TE";
var __aspxClockNameSiffix= __aspxCalendarNameSuffix + "_CL";
var __aspxListBoxNameSuffix = "_L";
var __aspxItemImageCellClassName = "dxeIIC";
var __aspxTokensHiddenFieldSuffix = "TK";
var __aspxTokensValuesHiddenFieldSuffix = "TKV";
var __aspxTokenBoxTokenSuffix = "Token";
var __aspxTokenBoxTokenTextSuffix = "TokenT";
var __aspxTokenBoxTokenRemoveButtonSuffix = "TokenRB";
var __aspxTokenBoxInputMinWidth = 30;
var __aspxGreekSLFSigmaChar = String.fromCharCode(962);
var __aspxGreekSLSigmaChar = String.fromCharCode(963);
ASPxClientDropDownEditBase = _aspxCreateClass(ASPxClientButtonEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.DropDown = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.QueryCloseUp = new ASPxClientEvent();
  this.ddHeightCache = __aspxInvalidDimension;
  this.ddWidthCache = __aspxInvalidDimension;
  this.mainElementWidthCache = __aspxInvalidDimension;
  this.dropDownButtonIndex = -1;
  this.droppedDown = false;
  this.ddButtonPushed = false;
  this.lastSuccessText = "";
  this.isToolbarItem = false;
  this.allowFocusDropDownWindow = false;
  this.pcIsShowingNow = false;
  this.needTimeoutForInputElementFocusEvent = false;
  aspxGetDropDownCollection().Add(this);
 },
 Initialize: function(){
  var pc = this.GetPopupControl();
  if(pc) {
   pc.allowCorrectYOffsetPosition = false;
   pc.dropDownEditName = this.name;
  }
  this.AssignClientAttributes();
  this.InitLastSuccessText();
  if(this.RefocusOnClickRequired()){
   var clickFunc = new Function("aspxDDRefocusClick('" + this.name + "', event);");
   _aspxAttachEventToElement(this.GetMainElement(), "click", clickFunc);
  }
  ASPxClientButtonEditBase.prototype.Initialize.call(this);
 },
 InitLastSuccessText: function(){
  var rawText = this.GetTextInternal();
  this.SetLastSuccessTest(rawText);
 },
 AssignClientAttributes: function(){
  var element = this.GetDropDownButton();
  if(_aspxIsExistsElement(element))
   _aspxPreventElementDragAndSelect(element, true);
 },
 RefocusOnClickRequired: function(){
  return false;
 },
 GetDropDownButton: function(){
  return this.GetButton(this.dropDownButtonIndex);
 },
 GetPopupControl: function(){
  var pc = aspxGetControlCollection().Get(this.name + __aspxDropDownNameSuffix);
  if(pc && pc.GetWindowElement(-1))
   return pc;
  else
   return null;
 },
 GetDropDownInnerControlName: function(suffix){
  var pc = this.GetPopupControl();
  if(pc)
   return this.GetPopupControl().name + suffix;
  return "";
 },
 GetDropDownItemImageCell: function() {
  return _aspxGetChildrenByPartialClassName(this.GetMainElement(), __aspxItemImageCellClassName)[0];
 },
 GetIsControlWidthWasChanged: function(){
  return this.mainElementWidthCache == __aspxInvalidDimension || this.mainElementWidthCache != this.GetMainElement().clientWidth;
 },
 GetDropDownHeight: function(){
  return 0;
 },
 GetDropDownWidth: function(){
  return 0;
 },
 GetDropDownIsWindowElement: function(id, pcPostfix) {
  var pos = id.lastIndexOf(pcPostfix);
  if(pos != -1) {
   var name = id.substring(0, pos);
   var pc = aspxGetPopupControlCollection().Get(name);
   if(pc && pc.dropDownEditName)
    return aspxGetDropDownCollection().Get(pc.dropDownEditName);
  }
  return null;
 },
 GetDropDownParents: function() {
  var parents = [ ];
  var mainElement = this.GetMainElement();
  var pcPostfix = __aspxPCWIdSuffix + "-1";
  var element = mainElement.parentNode;
  while(element != null){
   if(element.tagName == "BODY")
    break;
   if(element.id) {
    var dropDown = this.GetDropDownIsWindowElement(element.id, pcPostfix);
    if(dropDown != null)
     parents.push(dropDown);
   }
   element = element.parentNode;
  }
  return parents.reverse();
 },
 BeforePopupControlResizing: function() {
 },
 AfterPopupControlResizing: function() {
 },
 ShowDropDownArea: function(isRaiseEvent, forceSize) {
  this.SetPCIsShowingNow(true);
  aspxGetDropDownCollection().RegisterDroppedDownControl(this, this.GetDropDownParents());
  if(!this.droppedDown)
   this.lockListBoxClick = true;
  this.lockClosing = true;
  var pc = this.GetPopupControl();
  var element = this.GetMainElement();
  var pcwElement = pc.GetWindowElement(-1);
  if (!_aspxGetElementDisplay(pcwElement))
   pcwElement.style.visibility = "hidden";
  _aspxSetElementDisplay(pcwElement, true);
  var height = forceSize ? forceSize.height : this.GetDropDownHeight();
  var width = forceSize ? forceSize.width : this.GetDropDownWidth();
  this.BeforePopupControlResizing();
  if(this.ddHeightCache != height || this.ddWidthCache != width || forceSize) {
   pc.SetSize(width, height);
   if(!forceSize) {
    this.ddHeightCache = height;
    this.ddWidthCache = width;
   }
  }
  this.AfterPopupControlResizing();
  pc.popupVerticalOffset = - _aspxGetClientTop(element);
  this.RaiseDropDownEventRequired = isRaiseEvent;
  pc.ShowAtElement(element);
  this.droppedDown = true;
  this.lockClosing = false;
 },
 HideDropDownArea: function(isRaiseEvent){
  if(this.lockClosing || !this.droppedDown) return;
  if(!this.RaiseQueryCloseUp()) {
   return;
  }
  this.DropDownButtonPop();
  var pc = this.GetPopupControl();
  if (pc){
   aspxGetDropDownCollection().UnregisterDroppedDownControl(this);
   pc.Hide();
   if(isRaiseEvent)
    this.RaiseCloseUp();
   this.droppedDown = false;
  }
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return this.dropDownButtonIndex == buttonIndex;
 },
 ToggleDropDown: function(){
  this.OnApplyChanges();
  if(this.droppedDown)
   this.HideDropDownArea(true);
  else
   this.ShowDropDownArea(true);
 },
 GetTextInternal: function(){
  var text = ASPxClientButtonEditBase.prototype.GetValue.call(this);
  return text != null ? text : "";
 },
 SetTextInternal: function(text){
  if(!this.readOnly)
   this.SetTextBase(text);
 },
 SetTextBase: function(text) {
  ASPxClientButtonEditBase.prototype.SetValue.call(this, text);
 },
 SetLastSuccessTest: function(text){
  if(text == null) text = "";
  this.lastSuccessText = text;
 },
 RollbackTextInputValue: function () {
  this.SetTextBase(this.lastSuccessText);
 },
 SetPCIsShowingNow: function(value){
  this.pcIsShowingNow = value;
 },
 OnValueChanged: function() {
  this.SetLastSuccessTest(this.GetTextInternal());
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 OnApplyChanges: function(){
 },
 OnCancelChanges: function(){
  var isCancelProcessed = (this.GetTextInternal() != this.lastSuccessText);
  this.SetTextInternal(this.lastSuccessText);
  return isCancelProcessed;
 },
 OnFocus: function () {
  if(this.CorrectFocusWhenDisabled())
   return;
  if (__aspxIE && this.needTimeoutForInputElementFocusEvent) {
   setTimeout(function () {
    this.OnSetFocus(true);
    ASPxClientButtonEditBase.prototype.OnFocus.call(this);
    this.needTimeoutForInputElementFocusEvent = false;
   }.aspxBind(this), 0);
  } else {
   this.OnSetFocus(true);
   ASPxClientButtonEditBase.prototype.OnFocus.call(this);
  }
 },
 OnLostFocus: function(){
  this.OnSetFocus(false);
  ASPxClientButtonEditBase.prototype.OnLostFocus.call(this);
 },
 OnSetFocus: function(isFocused){
  aspxGetDropDownCollection().SetFocusedDropDownName(isFocused ? this.name : "");
 },
 IsEditorElement: function(element) {
  if(ASPxClientButtonEditBase.prototype.IsEditorElement.call(this, element))
   return true;
  if(this.allowFocusDropDownWindow)
   return false;
  var pc = this.GetPopupControl();
  if(pc != null) {
   var windowElement = pc.GetWindowElement(-1);
   return windowElement == element || _aspxGetIsParent(windowElement, element);
  }
  return false;
 },
 OnPopupControlShown: function(){
  this.SetPCIsShowingNow(false);
  if(this.RaiseDropDownEventRequired){
   this.RaiseDropDownEventRequired = false;
   _aspxSetTimeout("aspxDDBRaiseDropDownByTimer(\"" + this.name + "\")", 0);
  }
 },
 IsCanToDropDown: function(){
  return true;
 },
 OnDropDown: function(evt) {
  if(!this.isInitialized)
   return true;
  if(!this.IsCanToDropDown()) {
   this.ForceRefocusEditor();
   return true;
  }
  if(__aspxIE || __aspxOpera){
   if(!this.droppedDown) {
    _aspxEmulateOnMouseDown(this.GetMainElement(), evt);
    aspxGetStateController().ClearSavedCurrentPressedElement();
   }
  }
  this.OnDropDownCore(evt);
  return _aspxCancelBubble(evt);
 },
 OnDropDownCore: function(evt) {
  if(!this.droppedDown)
   this.DropDownButtonPush();
  this.ToggleDropDown();
  this.ForceRefocusEditor();
 },
 DropDownButtonPush: function(){
  if(this.droppedDown || this.ddButtonPushed) return;
  this.ddButtonPushed = true;
  if(__aspxIE || __aspxOpera)
   this.DropDownButtonPushPop(true);
  else
   this.DropDownButtonPushMozilla();
 },
 DropDownButtonPop: function(force){
  if((!this.droppedDown || !this.ddButtonPushed) && !force) return;
  this.ddButtonPushed = false;
  if(__aspxIE || __aspxOpera)
   this.DropDownButtonPushPop(false);
  else
   this.DropDownButtonPopMozilla();
 },
 DropDownButtonPushPop: function(isPush){
  var buttonElement = this.GetDropDownButton();
  if(buttonElement){
   var controller = aspxGetStateController();
   var element = controller.GetPressedElement(buttonElement);
   if(element){
    if(isPush){
     controller.SetCurrentHoverElement(null);
     controller.DoSetPressedState(element);
    } else {
     controller.DoClearPressedState(element);
     controller.SetCurrentPressedElement(null);
     controller.SetCurrentHoverElement(element);
    }
   }
  }
 },
 DropDownButtonPushMozilla: function(){
  this.DisableStyleControllerForDDButton();
  var controller = aspxGetStateController();
  controller.savedCurrentPressedElement = null;
 },
 DropDownButtonPopMozilla: function(){
  this.EnableStyleControllerForDDButton();
  var controller = aspxGetStateController();
  var buttonElement = this.GetDropDownButton();
  if(buttonElement){
   var element = controller.GetPressedElement(buttonElement);
   if(element)
    controller.DoClearPressedState(element);
   controller.currentPressedElement = null;
   element = controller.GetHoverElement(buttonElement);
   if(element)
    controller.SetCurrentHoverElement(element);
  }
 },
 EnableStyleControllerForDDButton: function(){
  var element = this.GetDropDownButton();
  if(element){
   var controller = aspxGetStateController();
   this.ReplaceElementControlStyleItem(controller.hoverItems, __aspxHoverItemKind, element, this.ddButtonHoverStyle);
   this.ReplaceElementControlStyleItem(controller.pressedItems, __aspxPressedItemKind, element, this.ddButtonPressedStyle);
   this.ReplaceElementControlStyleItem(controller.selectedItems, __aspxSelectedItemKind, element, this.ddButtonSelectedStyle);
  }
 },
 DisableStyleControllerForDDButton: function(){
  var element = this.GetDropDownButton();
  if(element){
   var controller = aspxGetStateController();
   this.ddButtonHoverStyle = this.ReplaceElementControlStyleItem(controller.hoverItems, __aspxHoverItemKind, element, null);
   this.ddButtonPressedStyle = this.ReplaceElementControlStyleItem(controller.pressedItems, __aspxPressedItemKind, element, null);
   this.ddButtonSelectedStyle = this.ReplaceElementControlStyleItem(controller.selectedItems, __aspxSelectedItemKind, element, null);
  }
 },
 ReplaceElementControlStyleItem: function(items, kind, element, newStyleItem){
  var styleItem = items[element.id];
  items[element.id] = newStyleItem;
  element[kind] = newStyleItem;
  return styleItem;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  if(!causedByWindowResizing || !this.pcIsShowingNow)
   this.HideDropDownArea(true);
 },
 OnDocumentMouseUp: function() {
  this.DropDownButtonPop();
 },
 OnDDButtonMouseMove: function(evt){
 },
 ShouldCloseOnMCMouseDown: function () {
  return true;
 },
 OnMainCellMouseDown: function (evt) {
  if (this.ShouldCloseOnMCMouseDown())
   this.OnCloseUp(evt);
 },
 OnCloseUp: function (evt) {
  if (__aspxIE) {
   this.needTimeoutForInputElementFocusEvent = true;
   setTimeout(function () { this.HideDropDownArea(true); }.aspxBind(this), 0);
  } else {
   this.HideDropDownArea(true);
  }
 },
 OnOpenAnotherDropDown: function(){
  this.HideDropDownArea(true);
 },
 OnTextChanged: function() {
  if(!this.ChangedByEnterKeyPress())
   this.OnTextChangedInternal();
 },
 OnTextChangedInternal: function() {
  this.ParseValue();
 },
 ChangedByEnterKeyPress: function() {
  if(__aspxFirefox || __aspxWebKitFamily)
   if(this.enterKeyPressed) {
    this.enterKeyPressed = false;
    return true;
   }
  return false;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientButtonEditBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  var inputElement = this.GetInputElement();
  if(inputElement)
   this.ChangeInputCellEnabledAttributes(inputElement.parentNode, _aspxChangeAttributesMethod(enabled));
  var imageCell = this.GetDropDownItemImageCell();
  if(_aspxIsExists(imageCell))
   this.ChangeImageCellEnabledAttributes(imageCell, _aspxChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientButtonEditBase.prototype.ChangeEnabledStateItems.call(this, enabled);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
 },
 ChangeInputCellEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "onkeyup");
  method(element, "onmousedown");
  method(element, "onmouseup");
 },
 ChangeImageCellEnabledAttributes: function(imageCell, method){
  method(imageCell, "onmousedown");
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler(ASPxKey.Enter, "OnEnter");
  this.AddKeyDownHandler(ASPxKey.Esc, "OnEscape");
  this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
  this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
  this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
  this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
  this.AddKeyDownHandler(ASPxKey.Left, "OnArrowLeft");
  this.AddKeyDownHandler(ASPxKey.Right, "OnArrowRight");
  this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
  this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
  this.AddKeyDownHandler(ASPxKey.Tab, "OnTab");
 },
 OnArrowUp: function(evt){
  if(evt.altKey) {
   this.ToggleDropDown();
   return true;
  }
  return false;
 },
 OnArrowDown: function(evt){
  if(evt.altKey) {
   this.ToggleDropDown();
   return true;
  }
  return false;
 },
 OnPageUp: function(evt){
  return false;
 },
 OnPageDown: function(evt){
  return false;
 },
 OnEndKeyDown: function(evt){
  return false;
 },
 OnHomeKeyDown: function(evt){
  return false;
 },
 OnArrowLeft: function(evt){
  return false;
 },
 OnArrowRight: function(evt){
  return false;
 },
 OnEscape: function(evt){
  if(__aspxFirefox &&  __aspxBrowserVersion >= 4) {
   var instance = this;
   window.setTimeout(function() { instance.OnEscapeInternal(); }, 0);
  }
  else
   this.OnEscapeInternal();
 },
 OnEscapeInternal: function() {
  var isCancelProcessed = this.OnCancelChanges() || this.droppedDown;
  this.HideDropDownArea(true);
  return isCancelProcessed;
 },
 OnEnter: function(evt){
  return false;
 },
 OnTab: function(evt){
  return false;
 },
 RaiseCloseUp: function(){
  if(!this.CloseUp.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaiseDropDown: function(){
  if(!this.DropDown.IsEmpty() && this.isInitialized){
   var args = new ASPxClientEventArgs();
   this.DropDown.FireEvent(this, args);
  }
 },
 RaiseQueryCloseUp: function(){
  if(!this.QueryCloseUp.IsEmpty() && this.isInitialized) {
   var args = new ASPxClientCancelEventArgs();
   this.QueryCloseUp.FireEvent(this, args);
   return !args.cancel;
  }
  return true;
 },
 AdjustDropDownWindow: function(){
  var pc = this.GetPopupControl();
  if(pc) {
   if(__aspxIE && __aspxBrowserVersion >= 8)
    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
   pc.AdjustSize();
   pc.UpdatePositionAtElement(this.GetMainElement());
   if(__aspxIE && __aspxBrowserVersion >= 8)
    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 ResetDropDownSizeCache: function(){
  this.ddHeightCache = __aspxInvalidDimension;
  this.ddWidthCache = __aspxInvalidDimension;
 },
 ShowDropDown: function(){
  if(!this.droppedDown)
   this.ShowDropDownArea(false);
 },
 HideDropDown: function(){
  if(this.droppedDown)
   this.HideDropDownArea(false);
 }
});
ASPxClientDropDownEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.dropDownWindowHeight = "";
  this.dropDownWindowWidth = "";
  this.allowFocusDropDownWindow = true;
  this.needAdjustControlsInDropDownWindow = true;
 },
 InlineInitialize: function(){
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
 },
 RefocusOnClickRequired: function(){
  return __aspxIE;
 },
 BeforePopupControlResizing: function() {
  var divContainer = this.GetDropDownDivContainer();
  if(divContainer && this.needAdjustControlsInDropDownWindow) {
   this.AdjustControlsInDropDownWindow();
   _aspxSetElementDisplay(divContainer, false);
  }
 },
 AfterPopupControlResizing: function() {
  var divContainer = this.GetDropDownDivContainer();
  if(divContainer && this.needAdjustControlsInDropDownWindow) {
   _aspxSetElementDisplay(divContainer, true);
   this.AdjustControlsInDropDownWindow();
   this.needAdjustControlsInDropDownWindow = false;
  }
 },
 AdjustControlsInDropDownWindow: function() {
  var pc = this.GetPopupControl();
  var pcwElement = pc.GetWindowElement(-1);
  aspxGetControlCollection().ProcessControlsInContainer(pcwElement, function(control) {
   control.AdjustControl(false);
  });
 },
 GetDropDownDivContainer: function() {
  return _aspxGetElementById(this.name + __aspxDropDownNameSuffix + "_DDDC");
 },
 GetKeyValueInputElement: function(){
  return _aspxGetElementById(this.name + "KV");
 },
 GetDropDownHeight: function(){
  if(this.dropDownWindowHeight != "")
   return this.dropDownWindowHeight;
  return ASPxClientDropDownEditBase.prototype.GetDropDownHeight.call(this);
 },
 GetDropDownWidth: function(){
  if(this.dropDownWindowWidth != "")
   return this.dropDownWindowWidth;
  return this.GetMainElement().offsetWidth;
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  if(!aspxGetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked())
   ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 OnBrowserWindowResize: function(evt){
  this.needAdjustControlsInDropDownWindow = true;
 },
 OnEnter: function(evt){
  return this.droppedDown;
 },
 OnEscape: function(evt){
  this.HideDropDownArea(true);
  return this.droppedDown;
 },
 OnTextChanged: function() {
  this.OnValueChanged();
 },
 GetKeyValueInternal: function(){
  var element = this.GetKeyValueInputElement();
  if(element != null && element.value != "")
   return element.value;
  else
   return null;
 },
 SetKeyValueInternal: function(keyValue){
  var element = this.GetKeyValueInputElement();
  if (element != null) element.value = keyValue == null ? "" : keyValue;
 },
 GetKeyValue: function(){
  return this.GetKeyValueInternal();
 },
 SetKeyValue: function(keyValue){
  this.SetKeyValueInternal(keyValue);
 }
});
ASPxClientDropDownEdit.Cast = ASPxClientControl.Cast;
ASPxClientDropDownCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.droppedControlName = "";
  this.droppedParentNames = [ ];
  this.focusedControlName = "";
 },
 SetFocusedDropDownName: function(name){
  this.focusedControlName = name;
 },
 ResetDroppedDownControl: function(){
  this.droppedControlName = "";
 },
 ResetDroppedDownParentCollection: function(startDroppedDownControlName) {
  var regArray = [ ];
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == startDroppedDownControlName)
    break;
   regArray.push(this.droppedParentNames[i]);
  }
  this.droppedParentNames = regArray;
  if(this.droppedParentNames.length > 0) {
   this.droppedControlName = this.droppedParentNames[this.droppedParentNames.length - 1];
   _aspxArrayRemoveAt(this.droppedParentNames, this.droppedParentNames.length - 1);
  }
 },
 ResetFocusedControl: function(){
  this.focusedControlName = "";
 },
 GetFocusedDropDown: function(){
  var control = this.GetDropDownControlInternal(this.focusedControlName);
  if(control == null) this.ResetFocusedControl();
  return control;
 },
 GetDroppedDropDown: function(){
  var control = this.GetDropDownControlInternal(this.droppedControlName);
  if(control == null) this.ResetDroppedDownControl();
  return control;
 },
 GetDroppedDropDownParents: function(startDroppedDownControlName) {
  var dropDownArray = [ ];
  var isNeedGetControl = false;
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == startDroppedDownControlName) isNeedGetControl = true;
   if(isNeedGetControl)
    var control = this.GetDropDownControlInternal(this.droppedParentNames[i]);
    if(control != null)
     dropDownArray.push(control);
  }
  return dropDownArray;
 },
 FindFirstNameForClose: function(newDroppedDownParentArray) {
  var firstNameToClose = newDroppedDownParentArray.length > 0 ? "" : this.droppedParentNames[i];
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(_aspxArrayIndexOf(newDroppedDownParentArray, this.Get(this.droppedParentNames[i])) == -1) {
    firstNameToClose = this.droppedParentNames[i];
    break;
   }
  }
  return firstNameToClose;
 },
 GetDropDownControlInternal: function(name){
  var control = this.Get(name);
  var isControlExists = control && control.RenderExistsOnPage();
  if(!isControlExists)
   control = null;
  return control;
 },
 IsDroppedDropDownParentExist: function(name) {
  for(var i = 0; i < this.droppedParentNames.length; i++) {
   if(this.droppedParentNames[i] == name)
    return true;
  }
  return false;
 },
 OnDDButtonMouseMove: function(evt){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null)
   dropDownControl.OnDDButtonMouseMove(evt);
 },
 OnDocumentMouseDown: function(evt){
  if(!ASPxClientTouchUI.handleFastTapIfRequired(evt, function(){ this.CloseDropDownByDocumentOrWindowEvent(evt, false); }.aspxBind(this), false))
   this.CloseDropDownByDocumentOrWindowEvent(evt, false);
 },
 OnDocumentMouseUp: function(evt){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null)
   dropDownControl.OnDocumentMouseUp();
 },
 OnBrowserWindowResize: function(evt){
  if(typeof(aspxGetPopupControlCollection) != "undefined" && !aspxGetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked()){
   this.CloseDropDownByDocumentOrWindowEvent(evt, true);
   this.AdjustControls();
  }
 },
 CloseDropDownByDocumentOrWindowEvent: function(evt, causedByWindowResizing){
  var dropDownControl = this.GetDroppedDropDown();
  if(dropDownControl != null && (this.IsEventNotFromControlSelf(evt, dropDownControl) || causedByWindowResizing))
   dropDownControl.CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
  var childrenDropDownsToClose = this.GetDroppedDropDownParents(this.droppedParentNames[0]);
  if(childrenDropDownsToClose.length != 0) {
   childrenDropDownsToClose = childrenDropDownsToClose.reverse();
   this.ResetDroppedDownParentCollection(this.droppedParentNames[0]);
   var rollbackDroppedDownNames = [ ];
   for(var c = 0; c < childrenDropDownsToClose.length; c++) {
    if(this.IsEventNotFromControlSelf(evt, childrenDropDownsToClose[c]))
     childrenDropDownsToClose[c].CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
    else
     rollbackDroppedDownNames.push(childrenDropDownsToClose[c].name);
   }
   if(rollbackDroppedDownNames != 0) {
    rollbackDroppedDownNames = rollbackDroppedDownNames.reverse();
    this.droppedParentNames = rollbackDroppedDownNames;
   }
  }
 },
 AdjustControls: function(){
  this.ForEachControl(function(control) {
   control.AdjustControl(false);
  });
 },
 IsEventNotFromControlSelf: function(evt, control){
  var srcElement = _aspxGetEventSource(evt);
  var mainElement = control.GetMainElement();
  var popupControl = control.GetPopupControl();
  if(!srcElement || !mainElement || !popupControl) return true;
  return (!_aspxGetIsParent(mainElement, srcElement) &&
   !_aspxGetIsParent(popupControl.GetWindowElement(-1), srcElement) &&
   !this.IsEventFromSharedPopupOfInnerEditor(popupControl, srcElement));
 },
 IsEventFromSharedPopupOfInnerEditor: function(popupControl, srcElement) {
  var eventFromPopupOfInnerEditor = false;
  aspxGetControlCollection().ProcessControlsInContainer(popupControl.GetWindowElement(-1),
   function(control){
    if(control.calendarOwnerName) {
     var sharedCalendarPopup = control.GetCalendarOwner().GetPopupControl().GetWindowElement(-1);
     if(_aspxGetIsParent(sharedCalendarPopup, srcElement))
      eventFromPopupOfInnerEditor = true;
    }
  });
  return eventFromPopupOfInnerEditor;
 },
 RegisterDroppedDownControl: function(dropDownControl, droppedDownParentArray){
  var prevDropDownControl = this.GetDroppedDropDown();
  var areDroppedDownsCollectionParents = _aspxArrayIndexOf(droppedDownParentArray, prevDropDownControl) != -1;
  if(prevDropDownControl != null && prevDropDownControl != dropDownControl && !areDroppedDownsCollectionParents)
   prevDropDownControl.OnOpenAnotherDropDown();
  if(this.droppedParentNames.length > 0) {
   var firstDropDownsNameToClose = this.FindFirstNameForClose(droppedDownParentArray);
   if(firstDropDownsNameToClose != "") {
    var childrenDropDownsToClose = this.GetDroppedDropDownParents(firstDropDownsNameToClose);
    this.ResetDroppedDownParentCollection(firstDropDownsNameToClose);
    this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
   }
  }
  this.droppedControlName = dropDownControl.name;
  this.droppedParentNames = [ ];
  for(var i = 0; i < droppedDownParentArray.length; i++)
   this.droppedParentNames.push(droppedDownParentArray[i].name);
 },
 UnregisterDroppedDownControl: function(dropDownControl){
  if(this.droppedControlName == dropDownControl.name)
   this.ResetDroppedDownControl();
  if(this.IsDroppedDropDownParentExist(dropDownControl.name)) {
   var prevDropDownControl = this.GetDroppedDropDown();
   if(prevDropDownControl != null)
    prevDropDownControl.OnOpenAnotherDropDown();
   var childrenDropDownsToClose = this.GetDroppedDropDownParents(dropDownControl.name);
   this.ResetDroppedDownParentCollection(dropDownControl.name);
   _aspxArrayRemoveAt(childrenDropDownsToClose, 0);
   this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
  }
 },
 CloseDroppedDownCollection: function(dropDownParentArray) {
  for(var c = 0; c < dropDownParentArray.length; c++)
   dropDownParentArray[c].OnOpenAnotherDropDown();
 }
});
ASPxClientDateEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.dateFormatter = null;
  this.isASPxClientDateEdit = true;
  this.date = null;
  this.dateOnError = "u";
  this.allowNull = true;
  this.calendarOwnerName = null;
  this.calendarConsumerName = null;
  this.textWasLastTemporaryChanged = false;
  this.showTimeSection = false;
  this.adjustInnerControls = true;
  this.DateChanged = new ASPxClientEvent();
  this.ParseDate = new ASPxClientEvent();
  this.CalendarCustomDisabledDate = new ASPxClientEvent();
 },
 Initialize: function() {
  if(this.HasOwnedCalendar()) {
   this.InitializeCalendarHandlers();
   this.InitializeTimeEditHandlers();
  } else
   this.RegisterSharedCalendar();
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
 },
 InitializeCalendarHandlers: function() {
  var calendar = this.GetCalendar();
  if(calendar) {
   calendar.SelectionChanging.AddHandler(ASPxClientDateEdit.HandleCalendarSelectionChanging);
   calendar.MainElementClick.AddHandler(ASPxClientDateEdit.HandleCalendarMainElementClick);
   var calendarMainElement = calendar.GetMainElement();
   if (__aspxNetscapeFamily && _aspxIsExistsElement(calendarMainElement))
    calendarMainElement.style.borderCollapse = "separate";
  }
 },
 InitializeTimeEditHandlers: function() {
  var timeEdit = this.GetTimeEdit();
  if(timeEdit) {
   timeEdit.InternalValueChanging.AddHandler(ASPxClientDateEdit.HandleTimeEditInternalValueChanging);
   timeEdit.OwnerDateEdit = this;
  }
 },
 RegisterSharedCalendar: function() {
  var calendar = this.GetCalendar();
  if (calendar) {
   ASPxClientDateEdit.SharedCalendarCollection.registerCalendarId(calendar.name);
  }
 },
 HasOwnedCalendar: function() {
  return this.calendarOwnerName == null;
 },
 InlineInitialize: function(){
  this.InitSpecialKeyboardHandling();
  ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing) {
  if((!causedByWindowResizing || !this.pcIsShowingNow) && this.GetShowTimeSection())
   this.ApplyTimeSectionDateChanges();
  ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 OnDropDownCore: function(evt) {
  ASPxClientDropDownEditBase.prototype.OnDropDownCore.call(this, evt);
  if(this.droppedDown) {
   var cal = this.GetCalendar();
   if(cal)
    cal.forceMouseDown = true;
  }
 },
 ShowDropDownArea: function(isRaiseEvent){
  this.InitVisibleDate();
  this.SetActiveControl();
  if(this.GetShowTimeSection()) {
   var timeEdit = this.GetTimeEdit();
   if(timeEdit)
    timeEdit.SetValue(this.date);
  }
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner != null)
   calendarOwner.calendarConsumerName = this.name;
  this.calendarConsumerName = null;
 },
 InitVisibleDate: function() {
  var calendar = this.GetCalendar();
  if(calendar) {
   if(!this.date && this.IsCalendarShared()) {
    var currentDate = new Date();
    calendar.SetVisibleDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()));
   }
   calendar.SetValue(this.date);
  }
 },
 IsCalendarShared: function () {
  var calendar = this.GetCalendar();
  var calendarName = calendar != null ? calendar.name : "";
  return ASPxClientDateEdit.SharedCalendarCollection.calendarIsShared(calendarName);
 },
 SetActiveControl: function() {
  var calendar = this.GetCalendar();
  __aspxActiveCalendar = calendar;
  ASPxClientDateEdit.active = this;
 },
 BeforePopupControlResizing: function() {
  var calendarOwner = this;
  if(this.calendarOwnerName)
   calendarOwner = this.GetCalendarOwner();
  if(calendarOwner.adjustInnerControls && calendarOwner.GetTimeEdit()){
   calendarOwner.GetClock().AdjustControl();
   calendarOwner.GetTimeEdit().AdjustControl();
   calendarOwner.adjustInnerControls = false;
  }
 },
 GetPopupControl: function() {
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner != null)
   return calendarOwner.GetPopupControl();
  return ASPxClientDropDownEditBase.prototype.GetPopupControl.call(this);
 },
 OnPopupControlShown: function() {
  if(this.calendarConsumerName != null)
   aspxGetControlCollection().Get(this.calendarConsumerName).OnPopupControlShown();
  else
   ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
 },
 GetCalendar: function() {
  var name = this.GetDropDownInnerControlName(__aspxCalendarNameSuffix);
  return aspxGetControlCollection().Get(name);
 },
 GetTimeEdit: function() {
  var name = this.GetDropDownInnerControlName(__aspxTimeEditNameSiffix);
  return aspxGetControlCollection().Get(name);
 },
 GetClock: function() {
  var name = this.GetDropDownInnerControlName(__aspxClockNameSiffix);
  return aspxGetControlCollection().Get(name);
 },
 GetCalendarOwner: function() {
  if(!this.calendarOwnerName)
   return null;
  return aspxGetControlCollection().Get(this.calendarOwnerName);
 },
 GetShowTimeSection: function(){
  var calendarOwner = this.GetCalendarOwner();
  if(calendarOwner)
   return calendarOwner.showTimeSection;
  return this.showTimeSection;
 },
 GetFormattedDate: function() {
  if(this.maskInfo != null)
   return this.maskInfo.GetValue();
  if(this.date == null)
   return this.focused ? "" : this.nullText;
  return this.dateFormatter.Format(this.date);
 },
 SetTextWasLastTemporaryChanged: function(value){
  this.textWasLastTemporaryChanged = value;
 },
 GetTextWasLastTemporaryChanged: function(){
  return this.textWasLastTemporaryChanged;
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseDateChanged(processOnServer);
  return processOnServer;
 },
 OnApplyChanges: function(){
  if(this.focused)
   this.OnTextChanged();
 },
 OnCalendarSelectionChanging: function(date, select) {
  if(this.GetShowTimeSection())
   return;
  if(!this.GetCalendar().isDateChangingByKeyboard) {
   this.HideDropDownArea(true);
   if(date != null)
    this.ApplyExistingTime(date);
   this.ChangeDate(date);
   if(select)
    _aspxSetSelection(this.GetInputElement());
  }
 },
 OnCalendarCustomDisabledDate: function(e) {
  this.RaiseCalendarCustomDisabledDate(e);
 },
 ForceRefocusTimeSectionTimeEdit: function(mouseDownSource) {
  var dateEdit = this;
  if(this.calendarConsumerName)
   dateEdit = aspxGetControlCollection().Get(this.calendarConsumerName);
  var timeEdit = dateEdit.GetTimeEdit();
  if(timeEdit.IsEditorElement(mouseDownSource) && !timeEdit.IsElementBelongToInputElement(mouseDownSource)) {
   timeEdit.ForceRefocusEditor();
   return;
  }
  if(!dateEdit.IsEditorElement(mouseDownSource))
   return;
  dateEdit.ForceRefocusEditor();
  var input = timeEdit.GetInputElement();
  if(input)
   input.blur();
  window.setTimeout(function() { ASPxClientEdit.SetFocusedEditor(dateEdit); }, 0);
 },
 ApplyTimeSectionDateChanges: function() {
  var hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
  var date = this.GetCalendar().GetSelectedDate();
  this.GetTimeEdit().ParseValue();
  var timeEditDate = this.GetTimeEdit().GetDate();
  if(timeEditDate) {
   hours = timeEditDate.getHours();
   minutes = timeEditDate.getMinutes();
   seconds = timeEditDate.getSeconds();
   milliseconds = timeEditDate.getMilliseconds();
  }
  if(date) {
   date.setHours(hours);
   date.setMinutes(minutes);
   date.setSeconds(seconds);
   date.setMilliseconds(milliseconds);
  }
  this.ApplyParsedDate(date, true);
 },
 IsEditorElement: function(element) {
  if(this.GetShowTimeSection() && _aspxGetIsParent(this.GetTimeEdit().GetMainElement(), element)) {
   this.lockLostFocus = true;
   return false;
  }
  return ASPxClientDropDownEditBase.prototype.IsEditorElement.call(this, element);
 },
 OnLostFocusCore: function() {
  if(this.GetShowTimeSection() && this.lockLostFocus) {
   this.lockLostFocus = false;
   return;
  }
  ASPxClientDropDownEditBase.prototype.OnLostFocusCore.call(this);
 },
 OnTimeEditLostFocus: function() {
  this.OnLostFocusCore();
 },
 OnTimeEditEnter: function() {
  this.ForceRefocusEditor();
  this.ApplyTimeSectionDateChanges();
  this.HideDropDownArea(true);
  _aspxSetSelection(this.GetInputElement());
 },
 OnTimeEditEsc: function() {
  this.ForceRefocusEditor();
  this.HideDropDownArea(true);
 },
 OnTimeEditTab: function(shiftKey) {
  if(shiftKey && !this.GetCalendarOwner())
   this.ForceRefocusEditor();
  this.ApplyTimeSectionDateChanges();
  this.HideDropDownArea(true);
 },
 OnTimeSectionOkClick: function() {
  this.ApplyTimeSectionDateChanges();
  this.HideDropDownArea(true);
 },
 OnTimeSectionCancelClick: function() {
  this.HideDropDownArea(true);
 },
 OnTimeSectionClearClick: function() {
  this.ChangeDate(null);
  this.HideDropDownArea(true);
 },
 OnTimeEditInternalValueChanging: function(date) {
  var clock = this.GetClock();
  if(clock)
   clock.SetDate(date);
 },
 OnArrowUp: function(evt){
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
  if(!isProcessed && this.droppedDown)
   return this.OnCalendarMethod("OnArrowUp", evt);
  return false;
 },
 OnArrowDown: function(evt){
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
  if(!isProcessed && this.droppedDown)
   return this.OnCalendarMethod("OnArrowDown", evt);
  return false;
 },
 OnArrowLeft: function(evt){
  if (this.droppedDown) {
   this.OnCalendarMethod("OnArrowLeft", evt);
   return true;
  }
  return false;
 },
 OnArrowRight: function(evt){
  if (this.droppedDown) {
   this.OnCalendarMethod("OnArrowRight", evt);
   return true;
  }
  return false;
 },
 OnPageUp: function(evt){
  if (this.droppedDown) {
   this.OnCalendarMethod("OnPageUp", evt);
   return true;
  }
  return false;
 },
 OnPageDown: function(evt){
  if (this.droppedDown) {
   this.OnCalendarMethod("OnPageDown", evt);
   return true;
  }
  return false;
 },
 OnEndKeyDown: function(evt) {
  if (this.droppedDown) {
   this.OnCalendarMethod("OnEndKeyDown", evt);
   return true;
  }
  return false;
 },
 OnHomeKeyDown: function(evt) {
  if (this.droppedDown) {
   this.OnCalendarMethod("OnHomeKeyDown", evt);
   return true;
  }
  return false;
 },
 OnCalendarMethod: function(methodName, evt){
  var calendar = this.GetCalendar();
  if(!calendar.IsFastNavigationActive())
   this.SetTextWasLastTemporaryChanged(false);
  return calendar[methodName](evt);
 },
 OnKeyUp: function(evt){
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)){
   this.SetTextWasLastTemporaryChanged(true);
  }
 },
 OnEnter: function() {
  this.enterProcessed = false;
  if (this.droppedDown) {
   var calendar = this.GetCalendar();
   if (calendar.IsFastNavigationActive())
    calendar.GetFastNavigation().OnEnter();
   else if(this.GetTextWasLastTemporaryChanged()){
    this.ParseValue();
    this.HideDropDownArea(true);
   } else {
    var calendarSelection = this.GetCalendar().GetValue();
    if(this.GetShowTimeSection()) {
     if(calendarSelection) {
      this.ApplyTimeSectionDateChanges();
      _aspxSetSelection(this.GetInputElement());
     }
     this.HideDropDownArea(true);
    } else
     this.OnCalendarSelectionChanging(calendarSelection, true);
   }
   this.enterProcessed = true;
  }
  else
   this.OnApplyChanges();
  this.SetTextWasLastTemporaryChanged(false);
  return this.enterProcessed;
 },
 OnEscape: function() {
  if (this.droppedDown){
   if (this.GetCalendar().IsFastNavigationActive())
    this.GetCalendar().OnEscape();
   else
    this.HideDropDownArea(true);
  } else {
   this.ChangeDate(this.date);
  }
  this.SetTextWasLastTemporaryChanged(false);
  return true;
 },
 OnTab: function(evt){
  if(!this.droppedDown) return;
  var calendar = this.GetCalendar();
  if (calendar.IsFastNavigationActive())
   calendar.GetFastNavigation().Hide();
  if(this.GetShowTimeSection()) {
   this.lockLostFocus = true;
   if(this.GetCalendarOwner()) {
    _aspxPreventEvent(evt);
    this.GetTimeEdit().SetFocus();
   }
   return;
  }
  if(this.GetTextWasLastTemporaryChanged()){
   this.ParseValue();
   this.HideDropDownArea(true);
  } else
   this.OnCalendarSelectionChanging(this.GetCalendar().GetValue(), false);
  this.SetTextWasLastTemporaryChanged(false);
 },
 OnTextChanged: function() {
  if(!this.IsFocusEventsLocked())
   ASPxClientDropDownEditBase.prototype.OnTextChanged.call(this);
 },
 ParseValue: function() {
  this.ParseValueCore(true);
 },
 ParseValueCore: function(raiseChangedEvent) {
  var date;
  if(this.maskInfo != null) {
   date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo);
  } else {
   var text = this.GetInputElement().value;
   var userParseResult = this.GetUserParsedDate(text);
   if(userParseResult !== false) {
    date = userParseResult;
   } else {
    if(text == null || text == "")
     date = null;
    else
     date = this.dateFormatter.Parse(text);
   }
  }
  if(this.GetShowTimeSection() && !this.HasTimeInEditFormat() && date)
   this.ApplyExistingTime(date);
  this.ApplyParsedDate(date, raiseChangedEvent);
 },
 GetUserParsedDate: function(text) {
  if(!this.ParseDate.IsEmpty()) {
   var args = new ASPxClientParseDateEventArgs(text);
   this.ParseDate.FireEvent(this, args);
   if(args.handled)
    return args.date;
  }
  return false;
 },
 ApplyParsedDate: function(date, raiseChangedEvent) {
  if(date === false || !this.GetCalendar().IsDateInRange(date) || this.GetCalendar().IsDateDisabled(date)) {
   switch(this.dateOnError) {
    case "n":
     date = null;
     break;
    case "t":
     date = new Date();
     break;
    default:
     date = this.date;
     break;
   }
  }
  if(!this.allowNull && date == null)
   date = this.date;
  if(raiseChangedEvent)
   this.ChangeDate(date);
  else
   this.SetValue(date);
 },
 HasTimeInEditFormat: function() {
  if(this.maskInfo) {
   for(var i = 0; i < this.maskInfo.parts.length; i++) {
    var part = this.maskInfo.parts[i];
    if(part.dateTimeRole && part.dateTimeRole.toLowerCase() == "h")
     return true;
   }
   return false;
  }
  return this.dateFormatter.mask.toLowerCase().indexOf("h") != -1;
 },
 ApplyExistingTime: function(date) {
  if(this.date == null)  return;
  var savedDay = date.getDate();
  date.setHours(this.date.getHours());
  var diff = date.getDate() - savedDay;
  if(diff != 0) {
   var sign = (diff == 1 || date.getDate() == 1) ? -1 : 1;
   date.setTime(date.getTime() + sign * 3600000);
  }
  date.setMinutes(this.date.getMinutes());
  date.setSeconds(this.date.getSeconds());
  date.setMilliseconds(this.date.getMilliseconds());
 },
 GetValue: function() {
  return this.date;
 },
 GetValueString: function() {
  return this.date != null ? _aspxGetInvariantDateTimeString(this.date) : null;
 },
 SetValue: function(date) {
  this.date = date;
  if(this.maskInfo != null) {
   _aspxMaskDateTimeHelper.SetDate(this.maskInfo, date);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } else {
   this.GetInputElement().value = this.GetFormattedDate();
   this.SyncRawInputValue();
   if(this.CanApplyTextDecorators())
    this.ToggleTextDecoration();
  }
  if(this.styleDecoration)
   this.styleDecoration.Update();
 },
 ChangeDate: function(date) {
  var changed = !_aspxAreDatesEqualExact(this.date, date);
  this.SetValue(date);
  if(changed) {
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
 },
 GetText: function() {
  return this.GetFormattedDate();
 },
 SetText: function(value) {
  ASPxClientTextEdit.prototype.SetValue.call(this, value);
  if(this.maskInfo == null)
   this.ParseValueCore(false);
 },
 GetFormattedText: function() {
  if(this.maskInfo != null)
   return this.GetMaskDisplayText();
  if(this.date == null)
   return this.nullText;
  if(this.displayFormat != null)
   return ASPxFormatter.Format(this.displayFormat, this.date);
  return this.GetFormattedDate();
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  if(htmlEvent.altKey)
   return true;
  if(ASPxClientDropDownEditBase.prototype.ShouldCancelMaskKeyProcessing.call(this, htmlEvent, keyDownInfo))
   return true;
  if(!this.droppedDown)
   return false;
  if(this.GetShowTimeSection() && htmlEvent.keyCode == ASPxKey.Tab)
   return false;
  return !_aspxMaskManager.IsPrintableKeyCode(keyDownInfo)
   && keyDownInfo.keyCode != ASPxKey.Backspace
   && keyDownInfo.keyCode != ASPxKey.Delete;
 },
 DecodeRawInputValue: function(value) {
  if(value == "N") return null;
  var date = new Date();
  date.setTime(Number(value));
  var result = _aspxToUtcTime(date);
  var offsetDiff = result.getTimezoneOffset() - date.getTimezoneOffset();
  if(offsetDiff !== 0)
   result.setTime(result.valueOf() + offsetDiff * 60000);
  return result;
 },
 SyncRawInputValue: function() {
  this.GetRawInputElement().value = this.date == null ? "N" : _aspxToLocalTime(this.date).valueOf();
 },
 HasTextDecorators: function() {
  return (this.maskInfo != null && this.date == null) || ASPxClientDropDownEditBase.prototype.HasTextDecorators.call(this);
 },
 GetMaskDisplayText: function() {
  if(!this.focused) {
   if(this.date == null)
    return this.nullText;
   if(this.HasTextDecorators())
    return this.GetDecoratedText(this.date);
  }
  return this.maskInfo.GetText();
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {
   this.ApplyMaskInfo(false);
  } else {
   var text = this.focused ? this.GetFormattedDate() : this.GetFormattedText();
   var input = this.GetInputElement();
   if(input.value != text)
    input.value = text;
  }
 },
 BeginShowMaskHint: function() {
 },
 RaiseDateChanged: function(processOnServer) {
  if(!this.DateChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.DateChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseCalendarCustomDisabledDate: function(e) {
  this.CalendarCustomDisabledDate.FireEvent(this, e);
 },
 SetDate: function(date) {
  this.SetValue(date);
 },
 GetDate: function() {
  return this.date ? new Date(this.date.valueOf()) : null;
 },
 GetMinDate: function() {
  var cal = this.GetCalendar();
  if(cal)
   return cal.GetMinDate();
  return null;
 },
 SetMinDate: function(date) {
  var cal = this.GetCalendar();
  if(cal)
   cal.SetMinDate(date);
 },
 GetMaxDate: function() {
  var cal = this.GetCalendar();
  if(cal)
   return cal.GetMaxDate();
  return null;
 },
 SetMaxDate: function(date) {
  var cal = this.GetCalendar();
  if(cal)
   cal.SetMaxDate(date);
 }
});
ASPxClientDateEdit.SharedCalendarCollection = (function(){
 var sharedCalendarIdCollection = [];
 return {
  registerCalendarId: function(calendarId) {
   if (_aspxArrayIndexOf(sharedCalendarIdCollection, calendarId) == -1)
    sharedCalendarIdCollection.push(calendarId);
  },
  calendarIsShared: function(calendarId) {
   return _aspxArrayIndexOf(sharedCalendarIdCollection, calendarId) != -1;
  }
 }
})();
ASPxClientDateEdit.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientDateEdit = function(obj) {
 return !!obj.isASPxClientDateEdit;
};
ASPxClientDateEdit.active = null;
ASPxClientDateEdit.HandleCalendarSelectionChanging = function(s, e) {
 if(ASPxClientDateEdit.active == null) return;
 ASPxClientDateEdit.active.OnCalendarSelectionChanging(e.selection.GetFirstDate(), true);
};
ASPxClientDateEdit.HandleCalendarCustomDisabledDate = function(s, e) {
 this.OnCalendarCustomDisabledDate(e);
};
ASPxClientDateEdit.HandleTimeEditInternalValueChanging = function(s, date) {
 if(ASPxClientDateEdit.active == null) return;
 ASPxClientDateEdit.active.OnTimeEditInternalValueChanging(date);
};
ASPxClientDateEdit.HandleCalendarMainElementClick = function(s, e) {
 var dateEdit = ASPxClientDateEdit.active;
 if(dateEdit == null)
  return;
 var focusEditor = true;
 if(dateEdit.GetShowTimeSection())
  focusEditor = !_aspxGetIsParent(dateEdit.GetTimeEdit().GetMainElement(), _aspxGetEventSource(e));
 if(focusEditor)
  dateEdit.SetFocus();
};
ASPxClientParseDateEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(value) {
  this.constructor.prototype.constructor.call(this);
  this.value = value;
  this.date = null;
  this.handled = false;
 }
});
__aspxCCValueInputSuffix = "VI";
ASPxClientComboBoxBase = _aspxCreateClass(ASPxClientDropDownEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.lbEventLockCount = 0;
  this.receiveGlobalMouseWheel = false;
  this.listBox = null;
  this.lastSuccessValue = "";
  this.islastSuccessValueInit = false;
  this.SelectedIndexChanged = new ASPxClientEvent();
 },
 Initialize: function(){
  this.InitializeListBoxOwnerName();
  ASPxClientDropDownEditBase.prototype.Initialize.call(this);
  this.InitLastSuccessValue();
 },
 InitializeListBoxOwnerName: function(){
  var lb = this.GetListBoxControl();
  if(lb)
   lb.ownerName = this.name;
 },
 InitLastSuccessValue: function(){
  this.SetLastSuccessValue(this.GetValue());
 },
 SetLastSuccessValue: function (value) {
  if(this.convertEmptyStringToNull && value === "")
   value = null;
  this.lastSuccessValue = value;
  this.islastSuccessValueInit = true;
 },
 GetDropDownInnerControlName: function(suffix){
  return "";
 },
 GetListBoxControl: function(){
  if(!_aspxIsExists(this.listBox)){
   var name = this.GetDropDownInnerControlName(__aspxListBoxNameSuffix);
   this.listBox = aspxGetControlCollection().Get(name);
  }
  if(this.isNative || (this.listBox && !!this.listBox.GetMainElement()))
   return this.listBox;
  return null;
 },
 GetCallbackArguments: function(){
  return this.GetListBoxCallbackArguments();
 },
 GetListBoxCallbackArguments: function(){
  var lb = this.GetListBoxControl();
  return lb.GetCallbackArguments();
 },
 SendCallback: function(){
  this.CreateCallback(this.GetCallbackArguments());
 },
 SendSpecialCallback: function(args){
  this.CreateCallback(args);
 },
 SetText: function (text){
  var lb = this.GetListBoxControl();
  var index = this.GetAdjustedSelectedIndexByText(lb, text);
  this.SelectIndex(index, false);
  this.SetTextBase(text);
  this.SetLastSuccessTest(text);
  this.SetLastSuccessValue(index >= 0 ? lb.GetValue() : text);
 },
 GetValue: function(){
  var value = this.islastSuccessValueInit ? this.lastSuccessValue : this.GetValueInternal();
  if(this.convertEmptyStringToNull && value === "")
   value = null;
  return value;
 },
 GetValueInternal: function(){
  var text = this.GetTextInternal();
  var textChanges = text != this.lastSuccessText;
  if(textChanges){
   var lb = this.GetListBoxControl();
   if (lb){
    var index = this.GetAdjustedSelectedIndexByText(lb, text);
    this.SelectIndexSilent(lb, index);
    if(index != -1)
     return lb.GetValue();
   }
  }
  return ASPxClientDropDownEditBase.prototype.GetValue.call(this);
 },
 SetValue: function(value){
  var lb = this.GetListBoxControl();
  if(lb){
   lb.SetValue(value);
   var item = lb.GetSelectedItem();
   var text = item ? item.text : value;
   this.OnSelectionChangedCore(text, item, false);
   this.UpdateValueInput();
  }
 },
 GetFormattedText: function() {
  return this.GetText();
 },
 GetAdjustedSelectedIndexByText: function(lb, text){
  var lbSelectedItem = lb.GetSelectedItem();
  if(lbSelectedItem != null && lbSelectedItem.text == text)
   return lbSelectedItem.index;
  return this.FindItemIndexByText(lb, text);
 },
 FindItemIndexByText: function(lb, text){
  if (lb)
   return lb.FindItemIndexByText(text);
 },
 CollectionChanged: function(){
 },
 SelectIndex: function(index, initialize){
  var lb = this.GetListBoxControl();
  var isSelectionChanged = lb.SelectIndexSilentAndMakeVisible(index, initialize);
  var item = lb.GetSelectedItem();
  var text = item != null ? item.text : "";
  if(isSelectionChanged)
   this.OnSelectionChangedCore(text, item, false);
  this.UpdateValueInput();
  return isSelectionChanged;
 },
 OnSelectChanged: function(){
  if(this.lbEventLockCount > 0) return;
  var lb = this.GetListBoxControl();
  var item = lb.GetSelectedItem();
  var text = item != null ? item.text : "";
  this.OnSelectionChangedCore(text, item, false);
  this.OnChange();
 },
 OnSelectionChangedCore: function(text, item, canBeRolledBack){
  this.SetTextBase(text);
  this.ShowItemImage(item);
  if(!canBeRolledBack){
   this.SetLastSuccessTest(text);
   this.SetLastSuccessValue(item != null ? item.value : text);
  }
  if(this.filterStrategy) {
   if(!canBeRolledBack)
    this.filterStrategy.OnSelectionChanged();
   if(__aspxIE) {
    var inputElement = this.GetInputElement();
    if(_aspxGetActiveElement() == inputElement)
     _aspxSetInputSelection(inputElement, inputElement.value.length, inputElement.value.length);
   }
  }
 },
 ShowItemImageByIndex: function(index){
  var item = this.GetItem(index);
  this.ShowItemImage(item);
 },
 ShowItemImage: function(item){
  var imageUrl = item != null ? item.imageUrl : "";
  this.SetSelectedImage(imageUrl);
 },
 GetDropDownImageElement: function(){
  var itemImageCell = this.GetDropDownItemImageCell();
  if(itemImageCell != null)
   return _aspxGetChildByTagName(itemImageCell, "IMG", 0);
  return null;
 },
 SetSelectedImage: function(imageUrl) {
  var imgElement = this.GetDropDownImageElement();
  if(imgElement != null) {
   var imageExists = imageUrl != "";
   imageUrl = imageExists ? imageUrl : ASPx.EmptyImageUrl;
   imgElement.src = imageUrl;
   var itemImageCell = this.GetDropDownItemImageCell();
   if(_aspxGetElementDisplay(itemImageCell) != imageExists)
    _aspxSetElementDisplay(itemImageCell, imageExists);
   if(__aspxIE) {
    this.AdjustControl();
   }
  }
 },
 OnCallback: function(result) {
 },
 OnChange: function(){
  this.UpdateValueInput();
  this.RaisePersonalStandardValidation();
  this.OnValueChanged();
 },
 UpdateValueInput: function() {
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return;
  var processOnServer = ASPxClientTextEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseSelectedIndexChanged(processOnServer);
  return processOnServer;
 },
 RaiseSelectedIndexChanged: function(processOnServer) {
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 AddItem: function(text, value, imageUrl){
  var index = this.GetListBoxControl().AddItem(text, value, imageUrl);
  this.CollectionChanged();
  return index;
 },
 InsertItem: function(index, text, value, imageUrl){
  this.GetListBoxControl().InsertItem(index, text, value, imageUrl);
  this.CollectionChanged();
 },
 RemoveItem: function(index){
  this.GetListBoxControl().RemoveItem(index);
  this.CollectionChanged();
 },
 ClearItems: function(){
  this.GetListBoxControl().ClearItems();
  this.ClearItemsInternal();
 },
 BeginUpdate: function(){
   this.GetListBoxControl().BeginUpdate();
 },
 EndUpdate: function(){
  this.GetListBoxControl().EndUpdate();
  this.CollectionChanged();
 },
 MakeItemVisible: function(index){
 },
 GetItem: function(index){
  var lb = this.GetListBoxControl();
  if(lb)
   return this.GetListBoxControl().GetItem(index);
  else
   return null;
 },
 FindItemByText: function(text) {
  var lb = this.GetListBoxControl();
  if(lb)
   return lb.FindItemByText(text);
  return null;
 },
 FindItemByValue: function(value){
  return this.GetListBoxControl().FindItemByValue(value);
 },
 GetItemCount: function(){
  return this.GetListBoxControl().GetItemCount();
 },
 GetSelectedIndex: function(){
  var lb = this.GetListBoxControl();
  if(lb)
   return lb.GetSelectedIndex();
  else
   return -1;
 },
 SetSelectedIndex: function(index){
  this.SelectIndex(index, false);
 },
 GetSelectedItem: function(){
  var lb = this.GetListBoxControl();
  var index = lb.GetSelectedIndex();
  return lb.GetItem(index);
 },
 SetSelectedItem: function(item){
  var index = (item != null) ? item.index : -1;
  this.SelectIndex(index, false);
 },
 GetText: function(){
  return this.lastSuccessText;
 },
 PerformCallback: function(arg) {
 },
 ClearItemsInternal: function(){
  this.SetValue(null);
  this.CollectionChanged();
 }
});
ASPxClientComboBox = _aspxCreateClass(ASPxClientComboBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.allowMultipleCallbacks = false;
  this.isCallbackMode = false;
  this.loadDropDownOnDemand = false;
  this.needToLoadDropDown = false;
  this.isPerformCallback = false;
  this.changeSelectAfterCallback = 0;
  this.incrementalFilteringMode = "None";
  this.filterStrategy = null;
  this.filterTimer = __aspxWebKitTouchUI ? 300 : 100;
  this.filterMinLength = 0;
  this.initTextCorrectionRequired = false;
  this.isDropDownListStyle = true;
  this.defaultDropDownHeight = "";
  this.dropDownHeight = "";
  this.dropDownWidth = "";
  this.dropDownRows = 7;
  this.enterKeyPressed = false;
  this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = null;
  this.callBackCoreComplete = false;
  this.isNeedToForceFirstShowLoadingPanel = true;
 },
 Initialize: function(){
  this.needToLoadDropDown = this.loadDropDownOnDemand;
  var lb = this.GetListBoxControl();
  this.InitializeListBoxOwnerName();
  this.InitScrollSpacerVisibility();
  this.FilterStrategyInitialize();
  var mainElement = this.GetMainElement();
  var input = this.GetInputElement();
  var ddbutton = this.GetDropDownButton();
  if(this.isDropDownListStyle && __aspxIE){
   _aspxPreventElementDragAndSelect(mainElement, true, true);
   _aspxPreventElementDragAndSelect(input, true, true);
   if(ddbutton)
    _aspxPreventElementDragAndSelect(ddbutton, true);
  }
  if(this.isToolbarItem){
   if(__aspxIE && __aspxBrowserVersion == 9)
    input.onmousedown = function(evt) { _aspxPreventEvent(evt); };
   else {
    mainElement.unselectable="on";
    input.unselectable="on";
    if(input.offsetParent)
     input.offsetParent.unselectable="on";
    if(ddbutton)
     ddbutton.unselectable="on";
    if(lb){
     var table = lb.GetListTable();
     for(var i = 0; i < table.rows.length; i ++){
      for(var j = 0; j < table.rows[i].cells.length; j ++)
       _aspxSetElementAsUnselectable(table.rows[i].cells[j], true);
     }
    }
   }
  }
  this.RemoveRaisePSValidationFromListBox();
  this.RedirectStandardValidators();
  this.InitListBoxScrollStyle();
  ASPxClientComboBoxBase.prototype.Initialize.call(this);
 },
 InitScrollSpacerVisibility: function() {
  var lb = this.GetListBoxControl();
  if(lb) {
   if(lb.GetItemCount() < lb.callbackPageSize) {
    lb.SetScrollSpacerVisibility(true, false);
    lb.SetScrollSpacerVisibility(false, false);
   }
  }
 },
 FilterStrategyInitialize: function() {
  if(this.incrementalFilteringMode == "Contains")
   this.filterStrategy = new ASPxContainsFilteringStrategy(this);
  else if(this.incrementalFilteringMode == "StartsWith")
   this.filterStrategy = new ASPxStartsWithFilteringStrategy(this);
  else if(this.incrementalFilteringMode == "None")
   this.filterStrategy = new ASPxComboBoxDisableFilteringStrategy(this);
  this.filterStrategy.Initialize();
 },
 InlineInitialize: function () {
  this.lastSuccessValue = this.GetDecodeValue(this.lastSuccessValue);
  this.InsureInputValueCorrect();
  this.InitSpecialKeyboardHandling();
  ASPxClientComboBoxBase.prototype.InlineInitialize.call(this);
 },
 InsureInputValueCorrect: function(){
  if(this.initTextCorrectionRequired){
   var lb = this.GetListBoxControl();
   if(lb){
    var initSelectedIndex = lb.GetSelectedIndexInternal();
    if(initSelectedIndex >= 0){
     var initSelectedText = lb.GetItem(initSelectedIndex).text;
     var input = this.GetInputElement();
     var rawInput = this.GetRawInputElement();
     if(rawInput && rawInput.value != initSelectedText){
      rawInput.value = initSelectedText;
      input.value = this.GetDecoratedText(initSelectedText);
     } else if(input.value != initSelectedText)
      input.value = initSelectedText;
    }
   }
  }
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientComboBoxBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var changeEventsMethod = _aspxChangeEventsMethod(enabled);
  var mainElement = this.GetMainElement();
  if(mainElement)
   changeEventsMethod(mainElement, _aspxGetMouseWheelEventName(), aspxCBMouseWheel);
  var btnElement = this.GetDropDownButton();
  if(btnElement)
   changeEventsMethod(btnElement, "onmousemove", aspxCBDDButtonMMove);
 },
 GetDropDownInnerControlName: function(suffix){
  return ASPxClientDropDownEditBase.prototype.GetDropDownInnerControlName.call(this, suffix);
 },
 AdjustControlCore: function() {
  ASPxClientEdit.prototype.AdjustControlCore.call(this);
  this.ResetDropDownSizeCache();
 },
 RemoveRaisePSValidationFromListBox: function() {
  var listBox = this.GetListBoxControl();
  if (listBox)
   listBox.RaisePersonalStandardValidation = function() { };
 },
 RedirectStandardValidators: function() {
  var valueInput = this.GetValueInput();
  if(_aspxIsExistsElement(valueInput) && valueInput.Validators) {
   for(var i = 0; i < valueInput.Validators.length; i++)
    valueInput.Validators[i].controltovalidate = valueInput.id;
  }
 },
 GetValueInputToValidate: function(){
  return this.GetValueInput();
 },
 GetValueInput: function(){
  return document.getElementById(this.name + "_" + __aspxCCValueInputSuffix);
 },
 GetListBoxScrollDivElement: function(){
  return this.GetListBoxControl().GetScrollDivElement();
 },
 RollbackValueInputValue: function(){
  var inputElement = this.GetValueInput();
  if(inputElement){
   inputElement.value = this.lastSuccessValue;
  }
 },
 UpdateValueInput: function() {
  var inputElement = this.GetValueInput();
  if(inputElement){
   var value = this.GetValue();
   inputElement.value = value != null ? value : "";
  }
 },
 VisibleCollectionChanged: function(){
  this.CollectionChangedCore();
 },
 CollectionChanged: function(){
  this.CollectionChangedCore();
 },
 CollectionChangedCore: function(byTimer){
  if(this.GetListBoxControl().APILockCount == 0){
   this.UpdateDropDownPositionAndSize();
   if(__aspxIE){
    var lb = this.GetListBoxControl();
    var selectedIndex = lb.GetSelectedIndex();
    if(selectedIndex > -1){
     var selectedItemTextCell = lb.GetItemFirstTextCell(selectedIndex);
     var controller = aspxGetStateController();
     controller.DeselectElementBySrcElement(selectedItemTextCell);
     controller.SelectElementBySrcElement(selectedItemTextCell);
    }
   }
  }
 },
 UpdateDropDownPositionAndSize: function(){
  this.InitDropDownSize();
  if(this.droppedDown){
   var pc = this.GetPopupControl();
   var element = this.GetMainElement();
   pc.UpdatePositionAtElement(element);
  }
  if (!this.clientVisible)
   this.ResetControlAdjustment();
 },
 InitListBoxScrollStyle: function(){
  this.PreventScrollSpoilDDShowing();
 },
 GetDropDownHeight: function(){
  return (this.ddHeightCache != __aspxInvalidDimension) ? this.ddHeightCache : this.InitListBoxHeight();
 },
 GetDropDownWidth: function(){
  return (this.ddWidthCache != __aspxInvalidDimension && !this.GetIsControlWidthWasChanged()) ? this.ddWidthCache : this.InitListBoxWidth();
 },
 InitDropDownSize: function() {
  if(!this.enabled || this.GetItemCount() == 0) return;
  var pc = this.GetPopupControl();
  if(pc && this.IsDisplayed()) {
   var pcwElement = pc.GetWindowElement(-1);
   if(_aspxIsExistsElement(pcwElement)){
    var isPcwDisplayed = _aspxGetElementDisplay(pcwElement);
    if(!isPcwDisplayed)
     pc.SetWindowDisplay(-1, true);
    var listBoxHeight = this.InitListBoxHeight();
    var listBoxWidth = this.InitListBoxWidth();
    if(listBoxHeight != this.ddHeightCache || listBoxWidth != this.ddWidthCache){
     this.ddHeightCache = listBoxHeight;
     this.ddWidthCache = listBoxWidth;
     pc.SetSize(this.ddWidthCache, this.ddHeightCache);
    }
    if(!isPcwDisplayed)
     pc.SetWindowDisplay(-1, false);
   }
  }
 },
 InitMainElementCache: function(){
  this.mainElementWidthCache = this.GetMainElement().clientWidth;
 },
 GetVisibleItemCount: function(lb){
  var lbTable = lb.GetListTable();
  var count = this.GetItemCount();
  var visibleItemCount = 0;
  for(var i = 0; i < count; i ++){
   if(_aspxGetElementDisplay(lbTable.rows[i]))
    visibleItemCount++;
  }
  return visibleItemCount;
 },
 GetDefaultDropDownHeight: function(listHeight, count){
  if(this.defaultDropDownHeight == ""){
   this.defaultDropDownHeight = ((listHeight / count) * this.dropDownRows) + "px";
  }
  return this.defaultDropDownHeight;
 },
 InitListBoxHeight: function () {
  var lb = this.GetListBoxControl();
  lb.GetMainElement().style.height = "0px";
  var lbHeight = 0;
  if (this.dropDownHeight == "") {
   lbHeight = this.GetListBoxHeightByContent();
  } else {
   lbHeight = this.GetListBoxHeightByServerValue();
  }
  lb.InitializePageSize();
  return lbHeight;
 },
 GetListBoxHeightByContent: function () {
  var lb = this.GetListBoxControl();
  var lbMainElement = lb.GetMainElement();
  var lbScrollDiv = lb.GetScrollDivElement()
  var height = lb.GetListTableHeight();
  var itemCount = this.GetVisibleItemCount(lb);
  if (itemCount > this.dropDownRows)
   height = this.GetDefaultDropDownHeight(height, itemCount);
  else
   height = itemCount == 0 ? "0px" : height + "px";
  lbScrollDiv.style.height = height;
  height = lbScrollDiv.offsetHeight;
  height += _aspxGetTopBottomBordersAndPaddingsSummaryValue(lbMainElement);
  var lbHeaderDiv = lb.GetHeaderDivElement();
  if (_aspxIsExists(lbHeaderDiv))
   height += lbHeaderDiv.offsetHeight;
  return height;
 },
 GetListBoxHeightByServerValue: function () {
  var lb = this.GetListBoxControl();
  var lbMainElement = lb.GetMainElement();
  var lbScrollDiv = lb.GetScrollDivElement()
  var height = this.dropDownHeight;
  lbMainElement.style.height = "0px";
  lbScrollDiv.style.height = "0px";
  lbMainElement.style.height = height;
  var trueLbOffsetHeight = lbMainElement.offsetHeight;
  var trueLbClientHeight = lbMainElement.clientHeight;
  lbScrollDiv.style.height = lbMainElement.clientHeight + "px";
  var lbHeightCorrection = lbMainElement.offsetHeight - trueLbOffsetHeight;
  lbScrollDiv.style.height = (trueLbClientHeight - lbHeightCorrection) + "px";
  height = lbMainElement.offsetHeight;
  return height;
 },
 InitListBoxWidth: function(){
  this.InitMainElementCache();
  var mainElement = this.GetMainElement();
  var lbScrollDiv = this.GetListBoxScrollDivElement();
  var lb = this.GetListBoxControl();
  var lbMainElement = lb.GetMainElement();
  var lbTable = lb.GetListTable();
  var scrollWidth = 0;
  lbMainElement.style.width = "";
  lbScrollDiv.style.paddingRight = "0px";
  lbScrollDiv.style.width = "100%";
  if(this.dropDownWidth != ""){
   lbMainElement.style.width = this.dropDownWidth;
   var width = lbMainElement.clientWidth;
   var scrollInfo = this.SetLbScrollDivAndCorrectionForScroll(lb, width, false);
   width = scrollInfo.scrollDivWidth;
   scrollWidth = scrollInfo.scrollWidth;
   if(!__aspxIE) {
    var difference = lbTable.offsetWidth - lbScrollDiv.clientWidth;
    if(difference > 0){
     lbMainElement.style.width = (lbMainElement.offsetWidth + difference) + "px";
     lbScrollDiv.style.width = (lbMainElement.clientWidth)  + "px";
    }
   }
  } else {
   var width = lbTable.offsetWidth;
   var scrollInfo = this.SetLbScrollDivAndCorrectionForScroll(lb, width, true);
   width = scrollInfo.scrollDivWidth;
   scrollWidth = scrollInfo.scrollWidth;
   if(__aspxFirefox && lbMainElement.offsetWidth < lbScrollDiv.offsetWidth)
    lbMainElement.style.width = "0%";
   var widthDifference = mainElement.offsetWidth - lbMainElement.offsetWidth;
   if(widthDifference > 0){
    lbScrollDiv.style.width = (width + widthDifference) + "px";
    var twoBorderSize = (lbMainElement.offsetWidth - lbMainElement.clientWidth);
    lbMainElement.style.width = (width + widthDifference + twoBorderSize) + "px";
   }
  }
  if(lb.IsMultiColumn())
   lb.CorrectMultiColumnHeaderWidth(scrollWidth);
  return lbScrollDiv.offsetWidth;
 },
 SetLbScrollDivAndCorrectionForScroll: function(lb, width, widthByContent){
  var lbScrollDiv = this.GetListBoxScrollDivElement();
  var scrollWidth = lb.GetVerticalScrollBarWidth();
  var browserPutsScrollBarOnContent = __aspxIE && __aspxBrowserVersion < 8;
  var browserCanHaveScroll = lb.GetVerticalOverflow(lbScrollDiv) == "auto" || this.IsScrollSpoilDDShowing();
  if(browserPutsScrollBarOnContent) {
   width -= scrollWidth;
   lbScrollDiv.style.paddingRight = scrollWidth + "px";
  } else if(widthByContent && browserCanHaveScroll)
   width += scrollWidth;
  lbScrollDiv.style.width = width + "px";
  return {scrollDivWidth: width, scrollWidth: scrollWidth};
 },
 SelectIndexSilent: function(lb, index){
  this.lbEventLockCount ++;
  lb.SelectIndexSilentAndMakeVisible(index);
  this.ShowItemImageByIndex(index);
  this.lbEventLockCount --;
 },
 GetDecoratedText: function (text) {
  var lb = this.GetListBoxControl();
  var selectedItem = this.GetSelectedItem();
  var decoratedText = text;
  if(this.displayFormat != null && lb.IsMultiColumn() && selectedItem != null){
   var textColumnCount = lb.GetItemTextCellCount();
   var texts = [textColumnCount];
   for(var i = 0; i < textColumnCount; i++){
    texts[i] = selectedItem.GetColumnTextByIndex(i)
   }
   return ASPxFormatter.Format(this.displayFormat, texts);
  } else
   return ASPxClientComboBoxBase.prototype.GetDecoratedText.call(this, text);
 },
 CanApplyNullTextDecoration: function () {
  if (this.listBox || !this.loadDropDownOnDemand) {
   var value = this.GetRawInputElement().value;
   var isValueNull = this.convertEmptyStringToNull && value === "" ? true : value === null;
   return (this.GetSelectedIndex() == -1 && isValueNull);
  } else
   return (this.GetValue() != null || this.GetText() != "");
 },
 ShowDropDownArea: function(isRaiseEvent){
  if(this.needToLoadDropDown) {
   this.EnsureDropDownLoaded();
   return;
  }
  var lb = this.GetListBoxControl();
  if(!lb || lb.GetItemCount() == 0)
   return;
  if(!this.filterStrategy.IsShowDropDownAllowed()) {
   this.DropDownButtonPop(true);
   return;
  }
  ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
  var rawText = this.GetTextInternal();
  var lbItem = lb.GetSelectedItem();
  var lbText = lbItem != null ? lbItem.text : "";
  if(rawText != lbText && rawText != null && lbText != ""){
   var newSelectedIndex = this.GetAdjustedSelectedIndexByText(lb, rawText);
   lb.SelectIndexSilent(newSelectedIndex, false);
  }
  this.EnsureSelectedItemVisibleOnShow(lb);
  lb.CallbackSpaceInit();
 },
 ForceShowLoadingPanel: function() {
  if(this.GetItemCount() == 0 && !this.needToLoadDropDown) {
   var lb = this.GetListBoxControl();
   if(lb) {
    var sizes = { width: this.GetWidth(), height: 100 };
    ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, false, sizes);
    lb.SetHeight(sizes.height);
    lb.SetWidth(sizes.width);
   }
  }
 },
 FireFoxRequiresCacheScrollBar: function(){
  return __aspxFirefox && __aspxBrowserVersion >= 3.6;
 },
 BrowserRequiresCacheScrollBar: function(){
  return __aspxWebKitFamily || __aspxOpera || this.FireFoxRequiresCacheScrollBar();
 },
 HideDropDownArea: function(isRaiseEvent){
  if(this.filterStrategy)
   this.filterStrategy.OnBeforeHideDropDownArea();
  if(this.BrowserRequiresCacheScrollBar())
   this.CachedScrollTop();
  ASPxClientDropDownEditBase.prototype.HideDropDownArea.call(this, isRaiseEvent);
  this.PreventScrollSpoilDDShowing();
 },
 EnsureSelectedItemVisibleOnShow: function(listBox){
  if(this.BrowserRequiresCacheScrollBar())
   listBox.RestoreScrollTopFromCache();
  listBox.EnsureSelectedItemVisible();
 },
 CachedScrollTop: function(){
  this.GetListBoxControl().CachedScrollTop();
  if(this.BrowserRequiresCacheScrollBar()){
   var scrollDiv = this.GetListBoxScrollDivElement();
   if(scrollDiv != null)
    scrollDiv.scrollTop = 0;
  }
 },
 IsScrollSpoilDDShowing: function (){
  var pc = this.GetPopupControl();
  if(pc)
   return (__aspxNetscapeFamily && pc.enableAnimation);
 },
 EnableLBDivOverflow: function(){
  var divElement = this.GetListBoxScrollDivElement();
  divElement.style.overflow = "auto";
 },
 DisableLBDivOverflow: function(){
  var divElement = this.GetListBoxScrollDivElement();
  if(divElement)
   divElement.style.overflow = "hidden";
 },
 PreventScrollSpoilDDShowing: function(){
  if(this.IsScrollSpoilDDShowing())
   this.DisableLBDivOverflow();
 },
 IsFilterEnabled: function() {
  return this.incrementalFilteringMode != "None";
 },
 ChangeInputEnabled: function(element, enabled, readOnly){
  ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || (this.isDropDownListStyle && !this.IsFilterEnabled()));
 },
 GetCallbackArguments: function(){
  var args = ASPxClientComboBoxBase.prototype.GetCallbackArguments.call(this);
  args += this.GetCallbackArgumentsInternal();
  return args;
 },
 GetCallbackArgumentsInternal: function(){
  var args = "";
  args = this.filterStrategy.GetCallbackArguments();
  return args;
 },
 ShowLoadingPanel: function() {
  var lb = this.GetListBoxControl();
  var loadingParentElement = lb.GetScrollDivElement().parentNode;
  if(!this.loadingPanelElement)
   this.CreateLoadingPanelWithAbsolutePosition(loadingParentElement, loadingParentElement);
 },
 ShowLoadingDiv: function () {
  var lb = this.GetListBoxControl();
  var loadingParentElement = lb.GetScrollDivElement().parentNode;
  if(!this.loadingDivElement)
   this.CreateLoadingDiv(loadingParentElement);
 },
 HideLoadingPanelOnCallback: function(){
  return false;
 },
 OnCallback: function(result) {
  if(__aspxWebKitTouchUI) {
   if(this.needToLoadDropDown)
    this.OnLoadDropDownOnDemandCallback(result);
   window.setTimeout(function() {
    this.OnCallbackCore(result);
    this.DoEndCallback();
   }.aspxBind(this), 300);
  } else
   this.OnCallbackCore(result);
 },
 OnCallbackCore: function(result) {
  if(this.needToLoadDropDown) {
   if(!__aspxWebKitTouchUI)
    this.OnLoadDropDownOnDemandCallback(result);
  } else if(this.filterStrategy.IsCallbackResultNotDiscarded()) {
   this.OnCallbackBeforeListBox();
   this.GetListBoxControl().OnCallback(result);
   this.OnCallbackInternal(result);
   this.OnCallbackFinally(true);
  }
  this.callBackCoreComplete = true;
 },
 OnLoadDropDownOnDemandCallbackFinalized: function() {
  this.DoReInitializeAfterLoadDropDownOnDemand();
  this.HideLoadingPanel();
  this.HideLoadingDiv();
  var isCallbackForShowDropDownArea = !this.onLoadDropDownOnDemandCallbackFinalizedEventHandler;
  if(isCallbackForShowDropDownArea) {
   if(this.filterStrategy.IsShowDropDownAllowed())
    this.ShowDropDown();
  } else
   this.onLoadDropDownOnDemandCallbackFinalizedEventHandler();
  this.FixButtonState();
 },
 OnCallbackFinalized: function() {
  if(this.needToLoadDropDown)
   this.OnLoadDropDownOnDemandCallbackFinalized();
 },
 OnLoadDropDownOnDemandCallback: function(result) {
  var node = this.GetMainElement();
  var tempDiv = node.ownerDocument.createElement('div');
  tempDiv.innerHTML = eval(result);
  var len = tempDiv.childNodes.length;
  for(ind = 0; ind < len; ind++) {
   _aspxInsertElementAfter(tempDiv.childNodes.item(0), node);
  }
 },
 ProcessCallbackError: function(errorObj){
  this.callBackCoreComplete = true;
  ASPxClientDropDownEditBase.prototype.ProcessCallbackError.call(this, errorObj);
 },
 DoEndCallback: function(){
  if(!this.callBackCoreComplete && __aspxWebKitTouchUI) return;
  this.filterStrategy.BeforeDoEndCallback();
  ASPxClientDropDownEditBase.prototype.DoEndCallback.call(this);
  this.filterStrategy.AfterDoEndCallback();
  this.callBackCoreComplete = false;
 },
 RaiseEndCallback: function(){
  if(this.preventEndCallbackRising)
   this.preventEndCallbackRising = false;
  else
   ASPxClientDropDownEditBase.prototype.RaiseEndCallback.call(this);
 },
 OnCallbackError: function(result, data){
  this.GetListBoxControl().OnCallbackError(result);
  this.OnCallbackFinally(false);
 },
 OnCallbackFinally: function(isSuccessful){
  this.filterStrategy.OnBeforeCallbackFinally();
  this.CollectionChanged();
  this.HideLoadingElements();
  if(this.isNeedToForceFirstShowLoadingPanel)
   this.isNeedToForceFirstShowLoadingPanel = false;
  this.isPerformCallback = false;
  this.changeSelectAfterCallback = 0;
  if(isSuccessful)
   this.filterStrategy.OnAfterCallbackFinally();
 },
 OnCallbackBeforeListBox: function(){
  var lb = this.GetListBoxControl();
  this.changeSelectAfterCallback = lb.changeSelectAfterCallback;
 },
 OnCallbackCorrectSelectedIndex: function(){
  var lb = this.GetListBoxControl();
  if(this.changeSelectAfterCallback != 0)
   this.SetTextInternal(lb.GetSelectedItem().text);
 },
 OnCallbackInternal: function(result){
  this.OnCallbackCorrectSelectedIndex();
  if(this.isPerformCallback) {
   var lb = this.GetListBoxControl();
   var resultIsEmpty = lb.GetItemCount() == 0;
   if(resultIsEmpty)
    this.HideDropDownArea(true);
  }
  this.filterStrategy.OnCallbackInternal(result);
 },
 DoReInitializeAfterLoadDropDownOnDemand: function() {
  this.InitializeListBoxOwnerName();
  this.needToLoadDropDown = false;
 },
 EnsureDropDownLoaded: function(callbackFunction) {
  if(this.needToLoadDropDown) {
   this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = callbackFunction ? function() {
    callbackFunction();
   } : null;
   var args = this.FormatLoadDropDownOnDemandCallbackArguments();
   this.SendLoadDropDownOnDemandCallback(args);
  }
 },
 IsDropDownButtonClick: function(evt) {
  return _aspxGetIsParent(this.GetDropDownButton(), _aspxGetEventSource(evt));
 },
 OnDropDown: function(evt) {
  var returnValue = ASPxClientDropDownEditBase.prototype.OnDropDown.call(this, evt);
  if(this.IsDropDownButtonClick(evt) && this.IsCanToDropDown()) {
   this.OnDropDownButtonClick();
   return returnValue;
  }
  return true;
 },
 OnDropDownButtonClick: function() {
  if(this.filterStrategy != null)
   this.filterStrategy.OnDropDownButtonClick();
  this.ForceRefocusEditor();
 },
 SendCallback: function(){
  if(!this.pcIsShowingNow)
   this.ShowLoadingElements();
  ASPxClientComboBoxBase.prototype.SendCallback.call(this);
 },
 SelectNeighbour: function (step){
  if((this.isToolBarItem && !this.droppedDown) || this.readOnly) return;
  var lb = this.GetListBoxControl();
  var step = this.filterStrategy.GetStepForClientFiltrationEnabled(lb, step);
  this.SelectNeighbourInternal(lb, step);
 },
 SelectNeighbourInternal: function(lb, step){
  if(this.droppedDown)
   this.lbEventLockCount ++;
  lb.SelectNeighbour(step);
  if(this.droppedDown) {
   var selectedItem = lb.GetSelectedItem();
   if (selectedItem) {
    this.OnSelectionChangedCore(selectedItem.text, selectedItem, true);
   }
   this.lbEventLockCount --;
  }
 },
 GetFocusSelectAction: function() {
  return this.isToolbarItem ? null : "all";
 },
 OnSpecialKeyDown: function(evt){
  if(this.filterStrategy)
   this.filterStrategy.OnSpecialKeyDown(evt);
  return ASPxClientEdit.prototype.OnSpecialKeyDown.call(this, evt);
 },
 OnArrowUp: function(evt){
  if(!this.isInitialized) return true;
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
  if (!isProcessed && this.filterStrategy.IsFilterMeetRequirementForMinLength())
   this.SelectNeighbour(-1);
  return true;
 },
 OnTextChanged: function(){
  if(!this.IsFocusEventsLocked())
   ASPxClientComboBoxBase.prototype.OnTextChanged.call(this);
 },
 OnTextChangedInternal: function() {
  ASPxClientComboBoxBase.prototype.OnTextChangedInternal.call(this);
  this.filterStrategy.OnTextChanged();
 },
 OnArrowDown: function(evt){
  if(!this.isInitialized) return true;
  var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
  if (!isProcessed && this.filterStrategy.IsFilterMeetRequirementForMinLength())
   this.SelectNeighbour(1);
  return true;
 },
 OnPageUp: function(){
  if(!this.isInitialized || !this.filterStrategy.IsFilterMeetRequirementForMinLength()) return true;
  return this.OnPageButtonDown(false);
 },
 OnPageDown: function(){
  if(!this.isInitialized || !this.filterStrategy.IsFilterMeetRequirementForMinLength()) return true;
  return this.OnPageButtonDown(true);
 },
 OnPageButtonDown: function(isDown){
  if(!this.isInitialized) return true;
  var lb = this.GetListBoxControl();
  if(lb){
   var direction = isDown ? 1 : -1;
   this.SelectNeighbour(lb.scrollPageSize * direction);
  }
  return true;
 },
 OnHomeKeyDown: function(evt){
  if(!this.isInitialized) return true;
  return this.OnHomeEndKeyDown(evt, true);
 },
 OnEndKeyDown: function(evt){
  if(!this.isInitialized) return true;
  return this.OnHomeEndKeyDown(evt, false);
 },
 OnHomeEndKeyDown: function(evt, isHome){
  if(!this.isInitialized) return true;
  var input = this.GetValueInput();
  if(input.readOnly || evt.ctrlKey){
   var lb = this.GetListBoxControl();
   var count = lb.GetItemCount();
   this.SelectNeighbour(isHome ? -count : count);
   return true;
  }
  return false;
 },
 OnEscape: function() {
  this.filterStrategy.OnEscape();
  ASPxClientComboBoxBase.prototype.OnEscape.call(this);
 },
 OnEnter: function(){
  if(!this.isInitialized) return true;
  if(this.isDropDownListStyle) this.enterKeyPressed = true;
  if(this.filterStrategy.IsCloseByEnterLocked()) return;
  this.enterProcessed = this.droppedDown;
  if(!this.isEnterLocked) {
   this.OnApplyChangesAndCloseWithEvents(false);
   this.filterStrategy.OnAfterEnter();
  }
  return this.enterProcessed;
 },
 OnTab: function(evt){
  if(!this.isInitialized)
   return true;
  this.filterStrategy.OnTab();
 },
 OnApplyChanges: function(){
  if(!this.focused || (this.isDropDownListStyle && !this.IsFilterEnabled())) return;
  this.OnApplyChangesInternal();
 },
 OnApplyChangesAndCloseWithEvents: function (withoutCallback) {
  this.OnApplyChangesInternal(withoutCallback);
  this.HideDropDownArea(true);
 },
 OnApplyChangesInternal: function(withoutCallback){
  var inCallback = this.InCallback();
  var lb = this.GetListBoxControl();
  var text = this.focused ? this.GetInputElement().value : this.lastSuccessText;
  var value = this.listBox.GetSelectedItem() ? this.listBox.GetSelectedItem().value : this.GetValue();
  var isChanged = this.lastSuccessText != text || this.lastSuccessValue != value;
  var isRollback = false;
  if(isChanged){
   var rollbackRequired = this.isDropDownListStyle && this.GetAdjustedSelectedIndexByText(lb, text) < 0;
   if(rollbackRequired) {
    var rollbackToItem = lb.GetSelectedItem();
    isRollback = rollbackToItem == null && this.isCallbackMode;
    if(isRollback) {
     this.RollbackValueInputValue();
     this.RollbackTextInputValue();
    }
    text = rollbackToItem != null ? rollbackToItem.text : this.lastSuccessText;
   }
   if(!isRollback)
    this.SetText(text);
   this.OnChange();
   this.filterStrategy.OnApplyChanges(withoutCallback);
  }
 },
 OnButtonClick: function(number){
  if(number != this.dropDownButtonIndex)
   this.droppedDown ? this.OnApplyChangesAndCloseWithEvents(false) : ASPxClientComboBoxBase.prototype.OnTextChanged.call(this);
  ASPxClientButtonEditBase.prototype.OnButtonClick.call(this, number);
 },
 OnCancelChanges: function(){
  var isCancelProcessed = ASPxClientDropDownEditBase.prototype.OnCancelChanges.call(this);
  this.filterStrategy.OnCancelChanges();
  var lb = this.GetListBoxControl();
  if (_aspxIsExists(lb)) {
   var index = this.GetAdjustedSelectedIndexByText(lb, this.lastSuccessText);
   this.SelectIndexSilent(lb, index);
  }
  return isCancelProcessed;
 },
 ShouldCloseOnMCMouseDown: function () {
  return this.GetInputElement().readOnly;
 },
 OnCloseUp: function(evt){
  var evt = _aspxGetEvent(evt);
  if (__aspxFirefox && evt.type == "mouseup" && _aspxGetEventSource(evt).tagName == "DIV") {
   var scrollDiv = this.GetListBoxControl().GetScrollDivElement();
   var scrollDivID = scrollDiv ? scrollDiv.id : "";
   if (scrollDivID == _aspxGetEventSource(evt).id)
    return;
  }
  ASPxClientDropDownEditBase.prototype.OnCloseUp.call(this, evt);
 },
 OnDDButtonMouseMove: function(evt){
  return (this.droppedDown ? _aspxCancelBubble(evt) : true);
 },
 CloseDropDownByDocumentOrWindowEvent: function(causedByWindowResizing){
  this.OnApplyChangesInternal();
  ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
 },
 IsCanToDropDown: function() {
  if(this.loadDropDownOnDemand) {
   var lb = this.GetListBoxControl();
   var itemCount = lb ? lb.GetItemCount() : 0;
   return (!this.needToLoadDropDown && itemCount > 0);
  }
  return ASPxClientDropDownEditBase.prototype.IsCanToDropDown.call(this);
 },
 OnPopupControlShown: function(){
  if(!this.isInitialized) return;
  if(__aspxOpera)
   this.GetListBoxControl().RestoreScrollTopFromCache();
  if(this.IsScrollSpoilDDShowing())
   _aspxSetTimeout("aspxCBMozillaOverflowOn(\"" + this.name + "\")", 100);
  if(this.lockListBoxClick)
   delete this.lockListBoxClick;
  if(this.InCallback())
   this.ShowLoadingDivAndPanel();
  ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
 },
 OnLBSelectedIndexChanged: function(){
  if(!this.lockListBoxClick) {
   this.OnSelectChanged();
   if(this.IsNavigationOnKeyPress()){
    if(!this.droppedDown) {
     _aspxSetSelection(this.GetInputElement());
    }
   } else
    this.ForceRefocusEditor();
  }
 },
 IsNavigationOnKeyPress: function() {
  var lb = this.GetListBoxControl();
  return lb.IsScrollOnKBNavigationLocked();
 },
 OnListBoxItemMouseUp: function(evt){
  if(!this.lockListBoxClick && !this.InCallback()){
   this.OnApplyChangesInternal();
   this.OnCloseUp(evt);
  }
 },
 OnMouseWheel: function(evt){
  if (this.allowMouseWheel && !this.droppedDown && this.filterStrategy.IsFilterMeetRequirementForMinLength()) {
   var wheelDelta = _aspxGetWheelDelta(evt);
   if(wheelDelta > 0)
    this.SelectNeighbour(-1);
   else  if(wheelDelta < 0)
    this.SelectNeighbour(1);
   return _aspxPreventEvent(evt);
  }
 },
 OnOpenAnotherDropDown: function(){
  this.OnApplyChangesAndCloseWithEvents();
 },
 ParseValue: function() {
  var newText = this.GetInputElement().value;
  var oldText = this.GetText();
  var oldValue = this.GetValue();
  var isNeedToParseValue = oldText != newText;
  if (isNeedToParseValue) {
   if(this.CanTextBeAccepted(newText, oldText)){
    this.SetText(newText);
    this.OnChange();
   } else
    this.SetTextInternal(oldText);
  }
 },
 CanTextBeAccepted: function(newText, oldText){
  var notAnyTextCanBeAccepted = this.isDropDownListStyle;
  if(notAnyTextCanBeAccepted){
   var lb = this.GetListBoxControl();
   var newTextPresentInItemCollection = this.GetAdjustedSelectedIndexByText(lb, newText) != -1;
   return newTextPresentInItemCollection;
  }
  var wasTextErased = !newText && oldText;
  if((!wasTextErased) && this.nullText && this.CanApplyNullTextDecoration()) {
    return false;
  }
  return true;
 },
 MakeItemVisible: function(index){
  var lb = this.GetListBoxControl();
  lb.MakeItemVisible(index);
 },
 PerformCallback: function(arg) {
  this.isPerformCallback = true;
  this.filterStrategy.PerformCallback();
  if(this.needToLoadDropDown) {
   var formatCallbackArg = function(prefix, arg) {
    arg = arg.toString();
    return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
   };
   if(arg === undefined || arg == null)
    arg = "";
   var performArgs = formatCallbackArg("LECC", arg);
   this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = function() {
    var selectedItem = this.listBox.GetSelectedItem();
    if(selectedItem != null)
     this.SetTextInternal(selectedItem.text);
    var lb = this.GetListBoxControl();
    if(lb)
     lb.SetCustomCallbackArg(performArgs);
   };
   var loadItemsRangeArgs = formatCallbackArg("LBCRI", "0:-2");
   var args = this.FormatLoadDropDownOnDemandCallbackArguments(performArgs + loadItemsRangeArgs);
   this.SendLoadDropDownOnDemandCallback(args);
  } else {
   this.ClearItemsInternal();
   this.GetListBoxControl().PerformCallback(arg);
  }
 },
 ClearItemsInternal: function(){
  ASPxClientComboBoxBase.prototype.ClearItemsInternal.call(this);
  var lbScrollDiv = this.GetListBoxScrollDivElement();
  if(lbScrollDiv)
   lbScrollDiv.scrollTop = "0px";
 },
 SendLoadDropDownOnDemandCallback: function(args) {
  this.ShowInputLoadingPanel();
  this.SendSpecialCallback(args);
 },
 ShowInputLoadingPanel: function() {
  var inputElement = this.GetInputElement();
  var parentElement = inputElement.parentNode;
  this.CreateLoadingDiv(parentElement, inputElement);
  this.CreateLoadingPanelWithAbsolutePosition(parentElement, inputElement);
 },
 FormatLoadDropDownOnDemandCallbackArguments: function(arguments) {
  var internalArgs = _aspxIsExists(arguments) ? arguments.toString() : "";
  var resultArgs = __aspxLoadDropDownOnDemandCallbackPrefix + "|0;;";
  return resultArgs + internalArgs;
 },
 CorrectCaretPositionInChrome: function(){
  if(__aspxChrome) _aspxSetCaretPosition(this.GetInputElement(), 0);
 },
 ForceRefocusEditor: function(){
  this.CorrectCaretPositionInChrome();
  ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
 },
 OnFocus: function () {
  if(this.needToLoadDropDown) {
   var args = this.FormatLoadDropDownOnDemandCallbackArguments();
   this.SendLoadDropDownOnDemandCallback(args);
  } else
   this.FixButtonState();
  ASPxClientDropDownEditBase.prototype.OnFocus.call(this);
 },
 FixButtonState: function() {
  var lb = this.GetListBoxControl();
  if(lb && this.ddButtonPushed) {
   this.DropDownButtonPop(true);
  }
 }
});
ASPxClientComboBox.Cast = ASPxClientControl.Cast;
ASPxComboBoxDisableFilteringStrategy = _aspxCreateClass(null, {
 constructor: function(comboBox) {
  this.comboBox = comboBox;
  this.isDropDownListStyle = this.comboBox.isDropDownListStyle;
  this.isApplyAndCloseAfterFiltration = false;
 },
 Initialize: function() {},
 AfterDoEndCallback: function() {},
 BeforeDoEndCallback: function() {},
 IsCallbackResultNotDiscarded: function() { return true; },
 IsCloseByEnterLocked: function() { return false; },
 OnAfterCallbackFinally: function() {
  if(this.isApplyAndCloseAfterFiltration){
   this.comboBox.OnApplyChangesAndCloseWithEvents();
   this.isApplyAndCloseAfterFiltration = false;
  }
 },
 OnAfterEnter: function() {},
 OnApplyChanges: function() {},
 OnBeforeCallbackFinally: function() {},
 OnBeforeHideDropDownArea: function() {},
 OnCallbackInternal: function(result) {},
 OnCancelChanges: function () {
  this.OnFilterRollback();
 },
 OnFilterRollback: function() {},
 OnDropDownButtonClick: function() {},
 OnEscape: function() {},
 OnFilteringKeyUp: function (evt) { },
 OnFilterRollback: function (withoutCallback) { },
 SetFilter: function (value) {},
 Filtering: function() {},
 OnSelectionChanged: function() {},
 OnSpecialKeyDown: function(evt) {},
 OnTab: function() {
  if(this.comboBox.InCallback())
   this.isApplyAndCloseAfterFiltration = true;
  else
   this.comboBox.OnApplyChangesAndCloseWithEvents();
 },
 OnTextChanged: function() {},
 PerformCallback: function() {},
 GetCallbackArguments: function() { return ""; },
 GetInputElement: function() {
  return this.comboBox.GetInputElement();
 },
 GetListBoxControl: function() {
  return this.comboBox.GetListBoxControl();
 },
 GetCurrentSelectedItemCallbackArguments: function () {
  return ASPxFilteringUtils.FormatCallbackArg(__aspxtCurrentSelectedItemCallbackPrefix, "");
 },
 GetStepForClientFiltrationEnabled: function(lb, step) {
  return step;
 },
 IsFilterMeetRequirementForMinLength: function() {
  return true;
 },
 IsShowDropDownAllowed: function() {
  return this.IsFilterMeetRequirementForMinLength();
 }
});
ASPxComboBoxIncrementalFilteringStrategy = _aspxCreateClass(ASPxComboBoxDisableFilteringStrategy, {
 constructor: function(comboBox) {
  this.constructor.prototype.constructor.call(this, comboBox);
  this.currentCallbackIsFiltration = false;
  this.refiltrationRequired = false;
  this.isEnterLocked = false;
  this.isLastFilteredKeyWasTab = false;
  this.filter = "";
  this.filterInitialized = false;
  this.filterTimerId = -1;
  this.filterTimer = comboBox.filterTimer;
  this.hasInputBeenChanged = false;
 },
 Initialize: function() {
   var input = this.GetInputElement();
   _aspxAttachEventToElement(input, "keyup", aspxCBKeyUp);
 },
 ClearFilter: function() {
  this.filter = "";
  this.filterInitialized = false;
 },
 ClearFilterApplied: function() {
  this.filterInitialized = false;
 },
 FilterApplied: function() {
  return this.filterInitialized;
 },
 SetFilter: function(value){
  this.filter = value;
  this.filterInitialized = true;
 },
 FilterCompare: function(value){
  if(!this.filterInitialized && this.hasInputBeenChanged)
   return false;
  return this.filter == value;
 },
 FilterCompareLower: function(value){
  if(!this.filterInitialized)
   return false;
  return _aspxPrepareStringForFilter(this.filter) == value;
 },
 OnCallbackInternal: function(result){
  if(!this.currentCallbackIsFiltration)
   return;
  var lb = this.GetListBoxControl();
  if(lb.GetItemCount() == 0)
   this.comboBox.HideDropDownArea(true);
  else
   this.OnFilterCallbackWithResult(lb);
  this.isEnterLocked = false;
 },
 OnBeforeCallbackFinally: function() {
  this.currentCallbackIsFiltration = false;
 },
 OnEndFiltering: function(visibleCollectionChanged) {
  if(visibleCollectionChanged)
   this.comboBox.VisibleCollectionChanged();
 },
 OnFilteringKeyUp: function(evt){
  if(this.comboBox.InCallback() || !this.comboBox.GetEnabled()) return;
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)){
   this.FilterStopTimer();
   var input = this.GetInputElement();
   var newFilter = _aspxPrepareStringForFilter(input.value);
   if(evt.keyCode == ASPxKey.Backspace && this.FilterCompareLower(newFilter))
    this.FilteringBackspace();
   else
    this.FilterStartTimer();
  }
 },
 OnFilterCallbackHighlightAndSelect: function(lb){
  var firstItemText = lb.GetItem(0).text;
  var isTextClearing = !this.isDropDownListStyle && this.FilterCompare("") && !this.FilterCompare(firstItemText);
  if(!isTextClearing){
   var isFilterRollBack = this.CheckForFilterRollback(lb, firstItemText);
   var isNonFilterChangingCallback = (lb.GetSelectedItem() == null);
   if(isFilterRollBack || isNonFilterChangingCallback) {
    if(this.isLastFilteredKeyWasTab){
     this.isLastFilteredKeyWasTab = false;
     this.comboBox.SelectIndex(0);
     this.comboBox.OnChange();
    } else
     this.HighlightTextAfterCallback(firstItemText);
   }
  }
 },
 OnFilterCallbackWithResult: function(lb) {
  this.OnFilterCallbackHighlightAndSelect(lb);
  var isNeedToKeepDropDownVisible = !this.comboBox.isPerformCallback && !this.isLastFilteredKeyWasTab;
  if(isNeedToKeepDropDownVisible)
   this.EnsureShowDropDownArea();
  this.OnEndFiltering();
 },
 OnSpecialKeyDown: function(evt) {
  if(ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)) {
   this.FilterStopTimer();
   this.hasInputBeenChanged = true;
  }
 },
 OnFilterRollback: function (withoutCallback) {
  if (this.comboBox.InCallback() && this.currentCallbackIsFiltration)
   return;
  if (this.comboBox.isCallbackMode && this.FilterApplied()) {
   if (!withoutCallback) {
    this.isApplyAndCloseAfterFiltration = true;
    if (this.comboBox.GetText() != "" && this.isDropDownListStyle) {
     this.comboBox.GetListBoxControl().ClearItems();
     this.comboBox.SendSpecialCallback(this.GetCurrentSelectedItemCallbackArguments());
    } else
     this.Filtering();
   }
   this.SetFilter(this.comboBox.GetText());
   this.ClearFilterApplied();
  }
 },
 AfterDoEndCallback: function() {
  if(this.refiltrationRequired){
   this.refiltrationRequired = false;
   _aspxSetTimeout("aspxCBFilterByTimer('" + this.comboBox.name + "')", 0);
  }
 },
 BeforeDoEndCallback: function() {
  if(this.refiltrationRequired)
   this.comboBox.preventEndCallbackRising = true;
 },
 GetCallbackArguments: function() {
  var args = "";
  if(!this.FilterCompare(""))
   args = this.GetCallbackArgumentFilter(this.filter);
  return args;
 },
 GetCallbackArgumentFilter: function(value){
  var callbackPrefix = this.isDropDownListStyle ? __aspxCorrectFilterCallbackPrefix : __aspxLoadFilteredItemsCallbackPrefix;
  return ASPxFilteringUtils.FormatCallbackArg(callbackPrefix, value);
 },
 PerformCallback: function() {
   this.ClearFilter();
 },
 SendFilteringCallback: function(){
  this.currentCallbackIsFiltration = true;
  this.comboBox.SendCallback();
 },
 IsCallbackResultNotDiscarded: function(){
  var result = !this.FilterChanged() || !this.currentCallbackIsFiltration;
  if(!result)
    this.refiltrationRequired = true;
  return result;
 },
 IsFilterTimerActive: function() {
  return (this.filterTimerId != -1);
 },
 FilterStopTimer: function() {
  this.filterTimerId = _aspxClearTimer(this.filterTimerId);
 },
 FilterStartTimer: function(){
  this.isEnterLocked = true;
  this.filterTimerId = _aspxSetTimeout("aspxCBFilterByTimer('" + this.comboBox.name + "')", this.filterTimer);
 },
 CheckForFilterRollback: function(lb, firstItemText){
  var isHasCorrection = false;
  var filter = _aspxPrepareStringForFilter(this.filter);
  firstItemText = _aspxPrepareStringForFilter(firstItemText);
  while(!this.IsSatisfy(firstItemText, filter)){
   filter = filter.slice(0, -1);
   isHasCorrection = true;
  }
  if(isHasCorrection){
   this.SetFilter(this.filter.substring(0, filter.length));
   this.GetInputElement().value = this.filter;
  }
  return isHasCorrection;
 },
 EnsureShowDropDownArea: function(){
  if(!this.comboBox.droppedDown && !this.isApplyAndCloseAfterFiltration)
   this.comboBox.ShowDropDownArea(true);
 },
 FilterChanged: function(){
  return !this.FilterCompareLower(_aspxPrepareStringForFilter(this.GetInputElement().value));
 },
 FilteringStop: function(){
  this.isEnterLocked = false;
  if(!this.comboBox.isCallbackMode)
   this.FilteringStopClient();
 },
 FilteringStopClient: function(){
  var lb = this.GetListBoxControl();
  var listTable = lb.GetListTable();
  var count = lb.GetItemCount();
  for(var i = 0; i < count; i ++)
   _aspxSetElementDisplay(listTable.rows[i], true);
  this.comboBox.VisibleCollectionChanged();
  this.ClearFilter();
 },
 FilteringBackspace: function(){
  var input = this.GetInputElement();
  ASPxStartWithFilteringUtils.RollbackOneSuggestedChar(input);
  this.FilterStartTimer();
 },
 CheckFilterLength: function() {
  if(!this.IsFilterMeetRequirementForMinLength()) {
   this.comboBox.HideDropDownArea(true);
   var lb = this.GetListBoxControl();
   this.isApplyAndCloseAfterFiltration = false;
   lb.SelectIndexSilent(-1, false);
   return true;
  }
  return false;
 },
 Filtering: function(){
  this.FilterStopTimer();
  var input = this.comboBox.GetRawInputElement() || this.comboBox.GetInputElement();
  if(!input) return;
  var newFilter = input.value;
  if(!this.FilterCompare(newFilter)){
   this.SetFilter(newFilter);
   if(this.CheckFilterLength())
    return;
   this.EnsureShowDropDownArea();
   if(this.comboBox.isCallbackMode) {
    if(!this.comboBox.droppedDown && this.comboBox.isNeedToForceFirstShowLoadingPanel)
     this.comboBox.ForceShowLoadingPanel();
    this.FilteringOnServer();
   } else {
    this.FilteringOnClient(input);
    this.isApplyAndCloseAfterFiltration = false;
   }
  } else {
   this.isEnterLocked = false;
   this.isApplyAndCloseAfterFiltration = false;
  }
 },
 FilteringOnServer: function(){
  if(!this.comboBox.InCallback()){
   var listBox = this.GetListBoxControl();
   listBox.ClearItems();
   listBox.serverIndexOfFirstItem = 0;
   listBox.SetScrollSpacerVisibility(true, false);
   listBox.SetScrollSpacerVisibility(false, false);
   this.SendFilteringCallback();
  }
 },
 FilteringOnClient: function (input) {
  var filter = _aspxPrepareStringForFilter(this.filter);
  var lb = this.GetListBoxControl();
  var listTable = lb.GetListTable();
  var count = lb.GetItemCount();
  var text = "";
  var isSatisfy = false;
  var firstSatisfyItemIndex = -1;
  if(this.isDropDownListStyle){
   var coincide = new Array(count);
   var maxCoincide = 0;
   for(var i = count - 1; i >= 0; i--){
    coincide[i] = this.GetCoincideCharCount(_aspxPrepareStringForFilter(lb.GetItem(i).text), filter);
    if(coincide[i] > maxCoincide)
     maxCoincide = coincide[i];
   }
   filter = this.filter.substr(0, maxCoincide);
   input.value = filter;
  }
  for(var i = 0; i < count; i ++){
   text = lb.GetItem(i).text;
   if(this.isDropDownListStyle) isSatisfy = coincide[i] == maxCoincide;
   else isSatisfy = this.IsSatisfy(text, filter);
   _aspxSetElementDisplay(listTable.rows[i], isSatisfy);
   if(firstSatisfyItemIndex == -1 && isSatisfy) {
    var isTextClearing = !this.isDropDownListStyle && this.FilterCompare("") && this.filter != text;
    this.OnFirstSatisfiedItemFound(i, text, isTextClearing);
    firstSatisfyItemIndex = i;
   }
  }
  if(this.isDropDownListStyle)
   this.SetFilter(filter);
  var visibleCollectionChanged = firstSatisfyItemIndex != -1;
  if(visibleCollectionChanged)
   lb.CopyCellWidths(0, firstSatisfyItemIndex);
  else
   this.comboBox.HideDropDownArea(true);
  this.isEnterLocked = false;
  this.OnEndFiltering(visibleCollectionChanged);
 },
 GetFirstVisibleItem: function(lb, listTable) {
  var itemCount = lb.GetItemCount();
  for(var i = 0; i < itemCount; i++)
   if(_aspxGetElementDisplay(listTable.rows[i]))
    return i;
  return -1;
 },
 GetVisibleItemsCount: function() {
  var visibleItemCount = 0;
  var lb = this.GetListBoxControl();
  if (_aspxIsExists(lb)) {
   var listTable = lb.GetListTable();
   var itemCount = lb.GetItemCount();
   for(var i = 0; i < itemCount; i++)
    if(_aspxGetElementDisplay(listTable.rows[i]))
     visibleItemCount++;
  }
  return visibleItemCount;
 },
 IsSelectedElementVisible: function(listTable, selectedIndex) {
  return _aspxGetElementDisplay(listTable.rows[selectedIndex]);
 },
 GetStepForClientFiltrationEnabled: function(lb, step) {
  if(this.comboBox.isCallbackMode) return step;
  var listTable = lb.GetListTable();
  var startIndex = this.comboBox.GetSelectedIndex();
  var firstVisibleElementIndex = this.GetFirstVisibleItem(lb, listTable);
  if(startIndex > -1) {
   if(!this.IsSelectedElementVisible(listTable, startIndex))
    return firstVisibleElementIndex - startIndex;
  } else return firstVisibleElementIndex + 1;
  var stepDirection = step > 0 ? 1 : -1;
  var count = lb.GetItemCount();
  var needVisibleItemCount = Math.abs(step);
  var outermostVisibleIndex = startIndex;
  for(var index = startIndex + stepDirection; needVisibleItemCount > 0; index += stepDirection){
   if(index < 0 || count <= index) break;
   if(_aspxGetElementDisplay(listTable.rows[index])) {
    outermostVisibleIndex = index;
    needVisibleItemCount--;
   }
  }
  step = outermostVisibleIndex - this.comboBox.GetSelectedIndex();
  return step;
 },
 GetCoincideCharCount: function(text, filter) {
  while(filter != "" && !this.IsSatisfy(text, filter)) {
   filter = filter.slice(0, -1);
  }
  return filter.length;
 },
 OnSelectionChanged: function() {
 },
 IsFilterMeetRequirementForMinLength: function() {
  var inputElement = this.GetInputElement();
  var isFilterExists = inputElement && (inputElement.value || inputElement.value == "");
  return isFilterExists ? inputElement.value.length >= this.comboBox.filterMinLength : true;
 },
 IsSatisfy: function(text, filter) {},
 OnFirstSatisfiedItemFound: function(index, text, isTextClearing) {},
 HighlightTextAfterCallback: function() {}
});
ASPxContainsFilteringStrategy = _aspxCreateClass(ASPxComboBoxIncrementalFilteringStrategy, {
 constructor: function(comboBox) {
  this.constructor.prototype.constructor.call(this, comboBox);
 },
 IsSatisfy: function(text, filter) {
  return _aspxPrepareStringForFilter(text).indexOf(filter) != -1;
 },
 IsCloseByEnterLocked: function() {
  if(this.isDropDownListStyle) {
   if(this.GetVisibleItemsCount() == 1) return false;
   var selectedItem = this.comboBox.GetSelectedItem();
   if(selectedItem)
    if(this.GetInputElement().value == selectedItem.text)
     return false;
   return true;
  }
  return false;
 },
 FilteringOnClient: function(input) {
  this.UnselectContainsTextInItems();
  ASPxComboBoxIncrementalFilteringStrategy.prototype.FilteringOnClient.call(this, input);
 },
 OnApplyChanges: function (withoutCallback) {
  this.OnFilterRollback(withoutCallback);
 },
 OnBeforeCallbackFinally: function() {
  ASPxComboBoxIncrementalFilteringStrategy.prototype.OnBeforeCallbackFinally.call(this);
  this.ReselectContainsTextInItems();
  this.SetDefautSelection();
 },
 OnDropDownButtonClick: function() {
  if(this.GetVisibleItemsCount() == 0 && this.isDropDownListStyle)
   this.comboBox.OnCancelChanges();
 },
 OnTextChanged: function() {
  if(!this.comboBox.IsFocusEventsLocked())
   if(!this.comboBox.ChangedByEnterKeyPress())
    this.OnFilterRollback();
 },
 OnEndFiltering: function(visibleCollectionChanged) {
  this.SelectContainsTextInItems();
  this.SetDefautSelection();
  ASPxComboBoxIncrementalFilteringStrategy.prototype.OnEndFiltering.call(this, visibleCollectionChanged);
 },
 OnBeforeHideDropDownArea: function(){
  if(!this.comboBox.isCallbackMode)
   this.FilteringStopClient();
 },
 FilteringStopClient: function(){
  ASPxComboBoxIncrementalFilteringStrategy.prototype.FilteringStopClient.call(this);
  this.UnselectContainsTextInItems();
 },
 OnCallbackInternal: function() {
  if(!this.comboBox.isPerformCallback)
   this.ReselectContainsTextInItems();
  ASPxComboBoxIncrementalFilteringStrategy.prototype.OnCallbackInternal.call(this);
 },
 OnFirstSatisfiedItemFound: function() {
 },
 SetDefautSelection: function() {
  var visibleItemsCount = this.GetVisibleItemsCount();
  if(this.isDropDownListStyle && visibleItemsCount == 1) {
   var lb = this.GetListBoxControl();
   var listTable = lb.GetListTable();
   this.comboBox.SelectIndexSilent(lb, this.GetFirstVisibleItem(lb,listTable));
  }
 },
 UnselectContainsTextInItems: function() {
  this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.UnselectContainsTextInElement, true);
 },
 ReselectContainsTextInItems: function() {
  if(this.filter != "")
   this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.ReselectContainsTextInElement, false);
 },
 SelectContainsTextInItems: function() {
  if(this.filter != "")
   this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.SelectContainsTextInElement, false);
 },
 ApplySelectionFunctionToItems: function(selectionFunction, applyToAllColumns) {
  var lb = this.GetListBoxControl();
  var count = lb.GetItemCount();
  for(var i = 0; i < count; i ++) {
   var item = lb.GetItemRow(i);
   if(applyToAllColumns || (!applyToAllColumns && _aspxGetElementDisplay(item)))
    this.ApplySelectionFunctionToItem(item, selectionFunction, applyToAllColumns);
  }
 },
 GetFirstTextCellIndex: function () {
  return this.GetListBoxControl().GetItemFirstTextCellIndex();
 },
 ApplySelectionFunctionToItem: function(item, selectionFunction, applyToAllColumns) {
  var itemValues = this.GetItemValuesByItem(item);
  var itemSelection = ASPxContainsFilteringUtils.GetColumnSelectionsForItem(itemValues, this.GetListBoxControl().textFormatString, this.filter);
  var firstTextCellIndex = this.GetFirstTextCellIndex();
  if(applyToAllColumns) {
   for(var i = 0; i < item.cells.length; i++)
    selectionFunction(item.cells[i], itemSelection[i]);
  } else {
   for(var i = 0; i < itemSelection.length; i++)
    selectionFunction(item.cells[itemSelection[i].index + firstTextCellIndex], itemSelection[i]);
  }
 },
 GetItemValuesByItem: function(item) {
  var result = [];
  for (var i = this.GetFirstTextCellIndex(); i < item.cells.length; i++)
   result.push(_aspxGetInnerText(item.cells[i]));
  return result;
 }
});
ASPxFilteringUtils = {
 EventKeyCodeChangesTheInput: function(evt){
  if(_aspxIsPasteShortcut(evt))
   return true;
  else if(evt.ctrlKey && !evt.altKey)
   return false;
  if(__aspxAndroidMobilePlatform || __aspxMacOSMobilePlatform) return true;
  var keyCode = _aspxGetKeyCode(evt);
  var isSystemKey = ASPxKey.Windows <= keyCode && keyCode <= ASPxKey.ContextMenu;
  var isFKey = ASPxKey.F1 <= keyCode && keyCode <= 127;
  return ASPxKey.Delete <= keyCode && !isSystemKey && !isFKey || keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Space;
 },
 FormatCallbackArg: function(prefix, arg) {
  return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
 }
};
ASPxFormatStringHelper = {
 PlaceHolderTemplateStruct: function(startIndex, length, index, placeHolderString){
  this.startIndex = startIndex;
  this.realStartIndex = 0;
  this.length = length;
  this.realLength = 0;
  this.index = index;
  this.placeHolderString = placeHolderString;
 },
 GetPlaceHolderTemplates: function(formatString){
  formatString = this.CollapseDoubleBrackets(formatString);
  var templates = this.CreatePlaceHolderTemplates(formatString);
  return templates;
 },
 CreatePlaceHolderTemplates: function(formatString){
  var templates = [];
  var templateStrings = formatString.match(/{[^}]+}/g);
  if(templateStrings != null){
   var pos = 0;
   for(var i = 0; i < templateStrings.length; i++){
    var tempString = templateStrings[i];
    var startIndex = formatString.indexOf(tempString, pos);
    var length = tempString.length;
    var indexString = tempString.slice(1).match(/^[0-9]+/);
    var index = parseInt(indexString);
    templates.push(new this.PlaceHolderTemplateStruct(startIndex, length, index, tempString));
    pos = startIndex + length;
   }
  }
  return templates;
 },
 CollapseDoubleBrackets: function(formatString){
  formatString = this.CollapseOpenDoubleBrackets(formatString);
  formatString = this.CollapseCloseDoubleBrackets(formatString);
  return formatString;
 },
 CollapseOpenDoubleBrackets: function(formatString){
  return formatString.replace(/{{/g, "_");
 },
 CollapseCloseDoubleBrackets: function(formatString){
  while(true){
   var index = formatString.lastIndexOf("}}");
   if(index == -1)
    break;
   else
    formatString = formatString.substr(0, index) + "_" + formatString.substr(index + 2);
  }
  return formatString;
 }
};
ASPxStartWithFilteringUtils = {
 HighlightSuggestedText: function(input, suggestedText){
  var currentTextLenght = input.value.length;
  var suggestedTextLenght = suggestedText.length;
  input.value = suggestedText;
  if(currentTextLenght < suggestedTextLenght)
   _aspxSetInputSelection(input, currentTextLenght, suggestedTextLenght);
 },
 RollbackOneSuggestedChar: function(input){
  var currentText = input.value;
  var cutText = currentText.slice(0, -1);
  if(cutText != currentText)
   input.value = cutText;
 }
};
ASPxContainsFilteringUtils = {
 ColumnSelectionStruct: function(index, startIndex, length){
  this.index = index;
  this.length = length;
  this.startIndex = startIndex;
 },
 IsFilterCrossPlaseHolder: function(filterStartIndex, filterEndIndex, template) {
  var left = Math.max(filterStartIndex, template.realStartIndex);
  var right = Math.min(filterEndIndex,  template.realStartIndex + template.realLength);
  return left < right;
 },
 GetColumnSelectionsForItem: function(itemValues, formatString, filterString) {
  if(formatString == "")
   return this.GetSelectionForSingleColumnItem(itemValues, filterString);
  var result = [];
  var formatedString = ASPxFormatter.Format(formatString, itemValues);
  var filterStartIndex = _aspxPrepareStringForFilter(formatedString).indexOf(_aspxPrepareStringForFilter(filterString));
  if(filterStartIndex == -1) return result;
  var filterEndIndex = filterStartIndex + filterString.length;
  var templates = ASPxFormatStringHelper.GetPlaceHolderTemplates(formatString);
  this.SupplyTemplatesWithRealValues(itemValues, templates);
  for(var i = 0; i < templates.length ; i++) {
   if(this.IsFilterCrossPlaseHolder(filterStartIndex, filterEndIndex, templates[i]))
    result.push(this.GetColumnSelectionsForItemValue(templates[i], filterStartIndex, filterEndIndex));
  }
  return result;
 },
 GetColumnSelectionsForItemValue: function(template, filterStartIndex, filterEndIndex) {
  var selectedTextStartIndex = filterStartIndex < template.realStartIndex ? 0 :
   filterStartIndex - template.realStartIndex;
  var selectedTextEndIndex = filterEndIndex >  template.realStartIndex + template.realLength ? template.realLength :
   filterEndIndex - template.realStartIndex;
  var selectedTextLength = selectedTextEndIndex - selectedTextStartIndex;
   return new this.ColumnSelectionStruct(template.index, selectedTextStartIndex, selectedTextLength);
 },
 GetSelectionForSingleColumnItem: function(itemValues, filterString) {
  var selectedTextStartIndex = _aspxPrepareStringForFilter(itemValues[0]).indexOf(_aspxPrepareStringForFilter(filterString));
  var selectedTextLength = filterString.length;
  return [new this.ColumnSelectionStruct(0, selectedTextStartIndex, selectedTextLength)];
 },
 ResetFormatStringIndex: function(formatString, index) {
  if(index != 0)
   return formatString.replace(index.toString(), "0");
  return formatString;
 },
 SupplyTemplatesWithRealValues: function(itemValues, templates) {
  var shift = 0;
  for(var i = 0; i < templates.length; i++) {
   var formatString = this.ResetFormatStringIndex(templates[i].placeHolderString, templates[i].index);
   var currentItemValue = itemValues[templates[i].index];
   templates[i].realLength = ASPxFormatter.Format(formatString, currentItemValue).length;
   templates[i].realStartIndex  += templates[i].startIndex + shift;
   shift += templates[i].realLength - templates[i].placeHolderString.length;
  }
 },
 PrepareElementText: function(itemText) {
  return itemText ? itemText.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
 },
 UnselectContainsTextInElement: function(element, selection) {
  var currentText =  _aspxGetAttribute(element, "DXText");
  if (_aspxIsExists(currentText)) {
   currentText = ASPxContainsFilteringUtils.PrepareElementText(currentText);
   _aspxSetInnerHtml(element, currentText === "" ? "&nbsp;" : currentText);
  }
 },
 ReselectContainsTextInElement: function(element, selection) {
  var currentText = _aspxGetInnerText(element);
  if(currentText.indexOf("</em>") != -1)
   ASPxContainsFilteringUtils.UnselectContainsTextInElement(element, selection);
  return ASPxContainsFilteringUtils.SelectContainsTextInElement(element, selection);
 },
 SelectContainsTextInElement: function(element, selection) {
  if(selection.startIndex == -1) return;
  var currentText =  _aspxGetAttribute(element, "DXText");
  if (!_aspxIsExists(currentText)) _aspxSetAttribute(element, "DXText", _aspxGetInnerText(element));
  var oldInnerText = _aspxGetInnerText(element);
  var newInnerText = ASPxContainsFilteringUtils.PrepareElementText(oldInnerText.substr(0, selection.startIndex)) + "<em>" +
         oldInnerText.substr(selection.startIndex, selection.length) + "</em>" +
         ASPxContainsFilteringUtils.PrepareElementText(oldInnerText.substr(selection.startIndex + selection.length));
  _aspxSetInnerHtml(element, newInnerText);
 }
};
ASPxStartsWithFilteringStrategy = _aspxCreateClass(ASPxComboBoxIncrementalFilteringStrategy, {
 constructor: function(comboBox) {
  this.constructor.prototype.constructor.call(this, comboBox);
 },
 IsSatisfy: function(text, filter) {
  return _aspxPrepareStringForFilter(text).indexOf(filter) == 0;
 },
 FilteringHighlightCompletedText: function(filterItemText){
  var input = this.GetInputElement();
  ASPxStartWithFilteringUtils.HighlightSuggestedText(input, filterItemText);
 },
 HighlightTextAfterCallback: function(firstItemText) {
  var lb = this.GetListBoxControl();
  this.FilteringHighlightCompletedText(firstItemText);
  if(!this.comboBox.isPerformCallback )
   this.comboBox.SelectIndexSilent(lb, 0);
 },
 OnAfterEnter: function() {
  this.ClearInputSelection();
 },
 OnBeforeHideDropDownArea: function() {
  this.FilteringStop();
 },
 OnFirstSatisfiedItemFound: function(index, text, isTextClearing) {
  var lb = this.GetListBoxControl();
  if(!isTextClearing)
   this.FilteringHighlightCompletedText(text);
  this.comboBox.SelectIndexSilent(lb, isTextClearing ? -1 : index);
 },
 OnTab: function() {
  if(this.IsFilterTimerActive() || this.currentCallbackIsFiltration){
   this.isLastFilteredKeyWasTab = true;
   this.Filtering();
  }
     ASPxComboBoxDisableFilteringStrategy.prototype.OnTab.call(this);
 },
 ClearInputSelection: function() {
  var inputElement = this.comboBox.GetInputElement();
  _aspxClearInputSelection(inputElement);
 }
});
ASPxClientNativeComboBox = _aspxCreateClass(ASPxClientComboBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.initSelectedIndex = -1;
  this.raiseValueChangedOnEnter = false;
 },
 Initialize: function(){
  var lb = this.GetListBoxControl();
  if(lb != null) lb.SetMainElement(this.GetMainElement());
  ASPxClientComboBoxBase.prototype.Initialize.call(this);
 },
 InitLastSuccessText: function(){
  this.SelectIndex(this.initSelectedIndex, true);
 },
 FindInputElement: function(){
  return this.GetMainElement();
 },
 GetDropDownInnerControlName: function(suffix){
  return this.name + suffix;
 },
 PerformCallback: function(arg) {
  this.GetListBoxControl().PerformCallback(arg);
 },
 GetTextInternal: function(){
  var selectedItem = this.GetSelectedItem();
  return (selectedItem != null) ? selectedItem.text : "";
 },
 HasTextDecorators: function() {
  return false;
 },
 SetText: function (text){
  var lb = this.GetListBoxControl();
  var index = this.FindItemIndexByText(lb, text);
  this.SelectIndex(index, false);
  this.SetLastSuccessTest((index > -1) ? text : "");
  this.SetLastSuccessValue((index > -1) ? lb.GetValue() : null);
 },
 GetValue: function(){
  var selectedItem = this.GetSelectedItem();
  return (selectedItem != null) ? selectedItem.value : null;
 },
 SetValue: function(value){
  var lb = this.GetListBoxControl();
  if(lb){
   lb.SetValue(value);
   var item = lb.GetSelectedItem();
   var text = item ? item.text : value;
   this.SetLastSuccessTest((item != null) ? text : "");
   this.SetLastSuccessValue(item != null) ? item.value : null;
  }
 },
 ForceRefocusEditor: function(){
 },
 OnCallback: function(result) {
  this.GetListBoxControl().OnCallback(result);
  if(this.GetItemCount() > 0)
   this.SetSelectedIndex(0);
 },
 OnTextChanged: function() {
  this.OnChange();
 },
 SetTextInternal: function(text){
 },
 SetTextBase: function(text){
 },
 ChangeEnabledAttributes: function(enabled){
  this.GetMainElement().disabled = !enabled;
 }
});
ASPxClientTokenBox = _aspxCreateClass(ASPxClientComboBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.hoverTokenClasses = [""];
  this.hoverTokenCssArray = [""];
  this.hoverTokenRemoveButtonClasses = [""];
  this.hoverTokenRemoveButtonCssArray = [""];
  this.valueSeparator = ',';
  this.textSeparator = ',';
  this.showDropDownOnFocus = "Auto";
  this.allowDuplicateTokens = false;
  this.editorTimer = null;
  this.encodeHtml = true;
  this.TokensChanged = new ASPxClientEvent();
  this.lastInputText = "";
 },
 Initialize: function() {
  if(this.IsVisible())
   this.InternalInitialize();
  ASPxClientComboBox.prototype.Initialize.call(this);
 },
 InternalInitialize: function() {
  this.AdjustSampleToken();
  this.SyncHtmlTokensElementsWithTokenCollection();
  this.AdjustTokens(true);
  this.AdjustInput(false);
 },
 InlineInitialize: function() {
  this.initSelectedIndex = -1;
  this.initTextCorrectionRequired = false;
  ASPxClientComboBox.prototype.InlineInitialize.call(this);
 },
 SyncHtmlTokensElementsWithTokenCollection: function(){
  var tokens = this.GetTokenCollection();
  for(var i = 0; i < tokens.length; i++) {
   if(!this.GetTokenHtmlElement(i)){
    this.AddTokenHtmlElementInternal(i, tokens[i], true);
   }
  }
 },
 AdjustControl: function() {
  ASPxClientComboBox.prototype.AdjustControl.call(this);
  if(this.IsVisible() && this.isInitialized) {
   this.AdjustSampleToken();
   this.AdjustTokens(false);
   this.AdjustInput(false);
  }
 },
 AdjustSampleToken: function() {
  var sizes = this.GetTokenAndTokenTextMaxWidth();
  var sampleToken = this.GetSampleTokenElement();
  this.SetTokenElementStylesInternal(sampleToken, sizes);
 },
 AdjustTokens: function(needTokenHover) {
  var sizes = this.GetTokenAndTokenTextMaxWidth();
  var tokens = this.GetTokenCollection();
  for(var i = 0; i < tokens.length; i++) {
   var tokenElement = this.GetTokenHtmlElement(i);
   this.SetTokenElementStylesInternal(tokenElement, sizes);
  }
 },
 SetTokenElementStylesInternal: function(tokenElement, sizes) {
  tokenElement.style.maxWidth = sizes.tokenMaxWidth + "px";
  _aspxSetStyles(tokenElement.childNodes[0], {
   textOverflow: "ellipsis",
   whiteSpace: "nowrap",
   overflow: "hidden"
  });
  tokenElement.childNodes[0].style.maxWidth = sizes.tokenTextMaxWidth + "px";
  tokenElement.childNodes[0].style.maxHeight = "none";
 },
 SetTokenHover: function(tokenElement, state) {
  var controller = aspxGetStateController();
  if(state) {
   controller.AddHoverItem(tokenElement.id, this.hoverTokenClasses, this.hoverTokenCssArray, "", null, null, true);
   controller.AddHoverItem(tokenElement.childNodes[1].id, this.hoverTokenRemoveButtonClasses, this.hoverTokenRemoveButtonCssArray, "", null, null, true);
  } else {
   controller.RemoveHoverItem(tokenElement.id);
   controller.RemoveHoverItem(tokenElement.childNodes[1].id);
  }
 },
 GetTokenHtmlElement: function(index) {
  return document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + index);
 },
 GetTokenTextHtmlElement: function(index) {
  return document.getElementById(this.name + "_" + __aspxTokenBoxTokenTextSuffix + index)
 },
 GetTokenRemoveButtonHtmlElement: function(index) {
  return document.getElementById(this.name + "_" + __aspxTokenBoxTokenRemoveButtonSuffix + index)
 },
 GetTokenAndTokenTextMaxWidth: function() {
  var sampleToken = this.GetSampleTokenElement();
  var input = this.GetInputElement();
  var inputParentWidth = _aspxGetClearClientWidth(input.parentElement);
  var testSampleToken = sampleToken.cloneNode(true);
  testSampleToken.style.position = "absolute";
  testSampleToken.style.top = __aspxInvalidPosition + "px";
  testSampleToken.style.left = __aspxInvalidPosition + "px";
  testSampleToken.childNodes[0].innerHTML = "";
  testSampleToken.id += "_testSampleToken";
  document.body.appendChild(testSampleToken);
  testSampleToken.style.display = "";
  var testSampleTokenFullNullWidth = _aspxGetLeftRightBordersAndPaddingsSummaryValue(testSampleToken) + _aspxGetLeftRightMargins(testSampleToken);
  var testSampleTokenTextSpanFullNullWidth = _aspxGetLeftRightBordersAndPaddingsSummaryValue(testSampleToken.childNodes[0]) + _aspxGetLeftRightMargins(testSampleToken.childNodes[0]);
  var testSampleTokenRBFullWidth = testSampleToken.childNodes[1].offsetWidth + _aspxGetLeftRightMargins(testSampleToken.childNodes[1]);
  var tokenMaxWidth = inputParentWidth - testSampleTokenFullNullWidth;
  var tokenTextMaxWidth = tokenMaxWidth - (testSampleTokenTextSpanFullNullWidth + testSampleTokenRBFullWidth);
  document.body.removeChild(testSampleToken);
  return {"tokenMaxWidth": tokenMaxWidth, "tokenTextMaxWidth": tokenTextMaxWidth};
 },
 getInputElementHeight: function() {
  var inputElementHeight = ASPxClientComboBox.prototype.getInputElementHeight.call(this);
  var tokens = this.GetTokenCollection(),
   inputElement = this.GetInputElement(),
   inputStyle = _aspxGetCurrentStyle(inputElement),
   inputRectTop = inputElement.getBoundingClientRect().top + _aspxPxToFloat(inputStyle.marginTop);
  for(var i = 0; i < tokens.length; i++) {
   var tokenElement = this.GetTokenHtmlElement(i),
    tokenStyle = _aspxGetCurrentStyle(tokenElement),
    tokenRect = tokenElement.getBoundingClientRect(),
    tokenRectBottom = tokenRect.bottom + _aspxPxToFloat(tokenStyle.marginBottom);
   if(tokenRectBottom <= inputRectTop)
    inputElementHeight -= tokenRect.height + _aspxGetTopBottomMargins(tokenElement, tokenStyle);
  }
  return inputElementHeight;
 },
 GetTokensHiddenField: function() {
  return document.getElementById(this.name + "_" + __aspxTokensHiddenFieldSuffix);
 },
 GetTokensValuesHiddenField: function() {
  return document.getElementById(this.name + "_" + __aspxTokensValuesHiddenFieldSuffix);
 },
 GetTokenCollection: function() {
  var tokensHiddenField = this.GetTokensHiddenField();
  return _aspxEvalJSON(tokensHiddenField.value.toString(), this.name);
 },
 GetTokenValuesCollection: function() {
  var tokensValuesHiddenField = this.GetTokensValuesHiddenField();
  return _aspxEvalJSON(tokensValuesHiddenField.value.toString(), this.name);
 },
 SetTokenCollection: function(collection) {
  this.ClearTokenCollection();
  for(var i = 0; i < collection.length; i++) {
   this.AddTokenInternal(collection[i], true);
  }
 },
 SetTokenCollectionInternal: function(tokenCollection, tokenValueCollection, callByApi) {
  var tokenCollectionString = _aspxToJson(_aspxGetDistinctArray(tokenCollection));
  var tokenValueCollectionString = _aspxToJson(_aspxGetDistinctArray(tokenValueCollection));
  var tokensHiddenField = this.GetTokensHiddenField();
  var tokensValueHiddenField = this.GetTokensValuesHiddenField();
  tokensHiddenField.value = tokenCollectionString;
  tokensValueHiddenField.value = tokenValueCollectionString;
  if(!callByApi) {
   if(this.OnTokensChanged())
    this.SendPostBackInternal("");
  }
  if(this.HasTextDecorators()) {
   this.ToggleTextDecoration();
   if(this.styleDecoration) {
    this.styleDecoration.Update();
   }
  }
 },
 ClearTokenCollection: function() {
  var count = this.GetTokenCollection().length;
  for(var i = 0; i < count; i++) {
   this.RemoveToken(0, true);
  }
 },
 AddToken: function(text) {
  this.AddTokenInternal(text, true);
 },
 AddTokenInternal: function(text, callByApi) {
  var item = this.FindItemByText(text);
  var value = item ? item.value : text;
  var input = this.GetTokensHiddenField();
  var tokens = this.GetTokenCollection();
  var tokensValue = this.GetTokenValuesCollection();
  var lb = this.GetListBoxControl();
  if(this.incrementalFilteringMode != "None" && !(text == null || text == "")) {
   if(lb && !(callByApi || this.AllowCustomToken())) {
    var selectedItem = lb.GetSelectedItem();
    if(selectedItem != null && !lb.FindItemByText(text) && selectedItem.text.toLowerCase().indexOf(text.toLowerCase()) != -1) {
     text = selectedItem.text;
     value = selectedItem.value;
    }
   }
  }
  var allowAddToken = !this.IsCustomToken(text) || this.AllowCustomToken();
  if(this.incrementalFilteringMode != "None")
   this.ClearFilterInternal();
  if((allowAddToken || callByApi) && _aspxArrayIndexOf(tokens, text) == -1 && text != "") {
   this.AddTokenHtmlElementInternal(tokens.length, text, true);
   tokens.push(text);
   tokensValue.push(value);
   this.SetTokenCollectionInternal(tokens, tokensValue, !!callByApi);
  }
  if(lb)
   lb.SetSelectedIndex(-1);
  if(this.IsCanToDropDown()) {
   if(!this.droppedDown && this.IsFocusEventsLocked() && !callByApi)
    this.ShowDropDown();
  } else {
   if(this.droppedDown)
    this.HideDropDown();
  }
 },
 AddTokenHtmlElementInternal: function(index, text, needTokenHover) {
  var tokenText = this.encodeHtml ? _aspxEncodeHtml(text) : text;
  var tokenElement = this.GetNewHtmlTokenItem(index, tokenText);
  this.ResetInputSize();
  var element = index == 0 ? this.GetTokensHiddenField() : this.GetTokenHtmlElement(index - 1).nextSibling;
  element.parentNode.insertBefore(tokenElement, element);
  if(needTokenHover)
   this.SetTokenHover(tokenElement, true);
  return tokenElement;
 },
 IsCustomToken: function(text) {
  return !this.GetListBoxControl().FindItemByText(text);
 },
 AllowCustomToken: function() {
  return !this.isDropDownListStyle;
 },
 GetTokenIndexByText: function(text) {
  var tokens = this.GetTokenCollection();
  for(var i = 0; i < tokens.length; i++) {
   if(tokens[i].toString() == text)
    return i;
  }
  return -1;
 },
 OnTokensChanged: function() {
  this.AdjustInput(false);
  var processOnServer = this.RaiseTokensChanged();
  processOnServer = ASPxClientTextEdit.prototype.RaiseValueChangedEvent.call(this);
  return processOnServer;
 },
 RaiseTokensChanged: function() {
  if(!this.TokensChanged.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.TokensChanged.FireEvent(this, args);
  }
  return this.autoPostBack;
 },
 OnListBoxItemMouseUp: function(evt) {
  var index = this.GetSelectedIndex();
  this.GetInputElement().value = "";
  this.AddTokenInternal(this.GetItem(index).text);
  ASPxClientComboBox.prototype.SetValue.call(this, null);
  return false;
 },
 ShouldCloseOnMCMouseDown: function(evt) {
  return false;
 },
 OnFocus: function() {
  if(this.CorrectFocusWhenDisabled())
   return;
  if(this.editorTimer)
   clearTimeout(this.editorTimer);
  this.editorTimer = setTimeout(function() { this.AdjustInput(true); }.aspxBind(this), 0);
  ASPxClientComboBox.prototype.OnFocus.call(this);
  if(this.IsCanToDropDown())
   this.ToggleDropDown();
 },
 IsCanToDropDown: function() {
  var result = this.showDropDownOnFocus == "Always" || (this.showDropDownOnFocus == "Auto" && this.incrementalFilteringMode == "None");
  return result && ASPxClientComboBox.prototype.IsCanToDropDown.call(this);
 },
 ValidateWithPatterns: function() {
  if(this.validationPatterns.length > 0) {
   var validate = function(tokenBox, validator, value) {
    if(!validator.EvaluateIsValid(value)) {
     tokenBox.SetIsValid(false, true );
     tokenBox.SetErrorText(validator.errorText, true );
     return;
    }
   };
   var coll = this.GetValue().split(this.valueSeparator);
   for(var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if(coll.length > 1) {
     for(var vi = 0; vi < coll.length; vi++) {
      validate(this, validator, coll[vi]);
     }
    } else {
     validate(this, validator, this.GetValue());
    }
   }
  }
 },
 RemoveTokenByText: function(text) {
  var index = this.GetTokenIndexByText(text);
  if(index != -1)
   this.RemoveToken(index, true);
 },
 RemoveToken: function(index, callByApi) {
  if(this.CanChange() || callByApi) {
   var tokens = this.GetTokenCollection();
   var tokensValue = this.GetTokenValuesCollection();
   if(tokens.length > 0) {
    tokens.splice(index, 1);
    tokensValue.splice(index, 1);
    var tokenElement = this.GetTokenHtmlElement(index);
    var tokensParent = tokenElement.parentNode;
    this.SetTokenHover(tokenElement, false);
    tokensParent.removeChild(tokenElement);
    this.RefreshHtmlTokenIndices();
    this.SetTokenCollectionInternal(tokens, tokensValue, !!callByApi);
   }
  }
 },
 CanChange: function() {
  return !this.readOnly && this.enabled && this.clientEnabled;
 },
 RefreshHtmlTokenIndices: function() {
  var parent = this.GetTokensHiddenField().parentNode;
  var ind = 0;
  for(var i = 0; i < parent.childNodes.length; i++) {
   var tokenElement = parent.childNodes[i];
   var indexOfTokenId = tokenElement.id.indexOf(this.name + "_" + __aspxTokenBoxTokenSuffix);
   if(indexOfTokenId >= 0) {
    this.SetTokenHover(tokenElement, false);
    tokenElement.id = this.name + "_" + __aspxTokenBoxTokenSuffix + ind.toString();
    this.SetTokenHover(tokenElement, true);
    ind++;
   }
  }
 },
 GetNewHtmlTokenItem: function(index, text) {
  var tokenElement = this.GetSampleTokenElement().cloneNode(true);
  tokenElement.childNodes[0].innerHTML = text;
  tokenElement.childNodes[0].id = this.name + "_" + __aspxTokenBoxTokenTextSuffix + index;
  tokenElement.childNodes[1].id = this.name + "_" + __aspxTokenBoxTokenRemoveButtonSuffix + index;
  tokenElement.id = this.name + "_" + __aspxTokenBoxTokenSuffix + index;
  tokenElement.style.display = "";
  return tokenElement;
 },
 GetSampleTokenElement: function() {
  return document.getElementById(this.name + "_" +  __aspxTokenBoxTokenSuffix + "-1");
 },
 GetText: function() {
  var tokens = this.GetTokenCollection();
  return tokens.join(this.textSeparator);
 },
 SetText: function(text) {
  this.ClearTokenCollection();
  if(text != null && text != "") {
   var tokens = text.split(this.textSeparator);
   if(tokens.length > 0) {
    for(var i = 0; i < tokens.length; i++) {
     this.AddTokenInternal(tokens[i], true);
    }
   }
  }
 },
 GetValue: function() {
  var tokensValues = this.GetTokenValuesCollection();
  return tokensValues.join(this.valueSeparator);
 },
 SetValue: function(value) {
  this.ClearTokenCollection();
  if(value != null && value != "") {
   var values = value.split(this.valueSeparator);
   for(var i = 0; i < values.length; i++) {
    var item = this.FindItemByValue(values[i]);
    this.AddTokenInternal(item != null ? item.text : values[i].toString(), true);
   }
  }
 },
 OnTextChanged: function() { },
 OnValueChanged: function() { },
 OnApplyChangesInternal: function() { },
 ParseValue: function() { },
 CanApplyNullTextDecoration: function () { return this.GetTokenCollection().length == 0; },
 ToggleTextDecorationCore: function() {
  var input = this.GetInputElement();
  var value = this.CanApplyTextDecorators() && (this.GetTokenCollection().length == 0) ? this.nullText : "";
  if(input.value != value)
   input.value = value;
  this.AdjustInput();
 },
 ClearFilterInternal: function() {
  this.GetInputElement().value = "";
  this.filterStrategy.ClearFilter();
  this.filterStrategy.isEnterLocked = false;
  this.filterStrategy.FilteringStopClient();
 },
 OnEscape: function() {
  this.GetInputElement().value = "";
  if(this.filterStrategy)
   this.filterStrategy.Filtering();
  this.HideDropDownArea(true);
  return this.droppedDown;
 },
 OnEnter: function() {
  var inputValue = this.GetInputElement().value;
  if(inputValue){
   this.GetInputElement().value = "";
   this.AddTokenInternal(inputValue);
  }
  return true;
 },
 EnsureSelectedItemVisibleOnShow: function() {},
 RaiseValueChangedEvent: function() { return false; },
 OnSpecialKeyDown: function(evt){
  if(_aspxGetKeyCode(evt) == ASPxKey.Backspace && this.GetInputElement().value == "") {
   if(this.CanChange()) {
    var tokens = this.GetTokenCollection()
    if(tokens.length > 0) {
     var index = tokens.length - 1;
     var text = tokens[index];
     this.RemoveToken(index, false);
     if(this.AllowCustomToken() || this.IsFilterEnabled()) {
      this.GetInputElement().value = text;
      _aspxSetSelection(this.GetInputElement());
     }
    }
   }
   return true;
  } else
   return ASPxClientComboBox.prototype.OnSpecialKeyDown.call(this, evt);
 },
 ContainsSeparator: function(text) {
  var delimiters = [',', ';', this.textSeparator];
  var delimiterPosition = -1;
  if(this.AllowCustomToken())
   delimiters.push(this.valueSeparator);
  delimiters = _aspxGetDistinctArray(delimiters);
  for(var i = 0; i < delimiters.length; i++) {
   if(text.indexOf(delimiters[i]) >= 0)
    delimiterPosition = delimiterPosition == -1 ? text.indexOf(delimiters[i]) : Math.min(text.indexOf(delimiters[i]), delimiterPosition);
  }
  return delimiterPosition;
 },
 OnLostFocus: function() {
  var focusLockedOrCorrected = this.IsFocusEventsLocked() || this.NeedFocusCorrectionWhenDisabled() && !this.GetEnabled();
  if(!focusLockedOrCorrected) {
   var lb = this.GetListBoxControl();
   if(lb)
    lb.SetSelectedIndex(-1);
   this.AddTokenInternal(this.GetInputElement().value, false);
   this.GetInputElement().value = "";
   if(this.droppedDown)
    this.HideDropDown();
  }
  ASPxClientComboBox.prototype.OnLostFocus.call(this);
  if(this.IsVisible())
   this.AdjustInput(false);
  clearTimeout(this.editorTimer);
  this.editorTimer = null;
  if(this.incrementalFilteringMode != "None" && !focusLockedOrCorrected) {
   this.filterStrategy.isApplyAndCloseAfterFiltration = true;
   this.ClearFilterInternal();
  }
 },
 ToggleDropDown: function() {
  this.OnApplyChanges();
  if(!this.droppedDown)
   this.ShowDropDownArea(true);
 },
 ResetInputSize: function() {
  this.GetInputElement().style.width = __aspxTokenBoxInputMinWidth + "px";
 },
 AdjustInput: function(startTimer) {
  this.AdjustInputInternal(!startTimer);
  if(this.droppedDown)
   this.RelocationPopup();
  if(startTimer) {
   this.SplitInputTextAndAddTokenInternal();
   this.editorTimer = setTimeout(function() { this.AdjustInput(startTimer); }.aspxBind(this), 0);
  }
 },
 AdjustInputInternal: function(force) {
  var input = this.GetInputElement();
  if(force || this.lastInputText != input.value.toString()) {
   this.lastInputText = input.value.toString();
   var lastToken = document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + (this.GetTokenCollection().length - 1));
   var tokensOffset = 0;
   if(lastToken) {
    var lastTokenCss = _aspxGetCurrentStyle(lastToken);
    if(this.rtl)
     tokensOffset = lastToken.offsetLeft - _aspxPxToInt(lastTokenCss.marginLeft);
    else
     tokensOffset = lastToken.offsetLeft + lastToken.offsetWidth + _aspxPxToInt(lastTokenCss.marginRight);
   }
   var parentElementFW = Math.max(_aspxGetLeftRightMargins(input.parentElement), 0) + input.parentElement.offsetWidth;
   var inputLRMBPSV = _aspxGetLeftRightMargins(input) + _aspxGetLeftRightBordersAndPaddingsSummaryValue(input);
   var maxInputWidthWT = this.rtl ? tokensOffset - inputLRMBPSV : (_aspxGetClearClientWidth(input.parentElement) - tokensOffset) - inputLRMBPSV;
   var maxInputWidth = _aspxGetClearClientWidth(input.parentElement) - inputLRMBPSV;
   var textWidth = _aspxGetSizeOfText(input.value.toString(), _aspxGetCurrentStyle(input)).width;
   var inputWidth = Math.max(__aspxTokenBoxInputMinWidth, textWidth) > maxInputWidthWT ? maxInputWidth : maxInputWidthWT;
   input.style.width = ((inputWidth / parentElementFW) * 100) + "%";
  }
 },
 SplitInputTextAndAddTokenInternal: function() {
  var input = this.GetInputElement();
  var text = input.value.toString();
  var delimiterPosition = this.ContainsSeparator(text);
  if(delimiterPosition >= 0) {
   var texts = [text.substr(0, delimiterPosition), text.substr(delimiterPosition + 1)];
   var tokenText = texts[0];
   var inputText = texts[1];
   input.value = inputText;
   if(texts[0] != "") {
    this.AddTokenInternal(tokenText);
    if(this.incrementalFilteringMode != "None") {
     this.filterStrategy.isApplyAndCloseAfterFiltration = true;
    }
   }
  }
 },
 RelocationPopup: function() {
  var pc = this.GetPopupControl();
  var element = pc.GetWindowElement(-1);
  var popupElement = this.GetMainElement();
  var horizontalPopupPosition = pc.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, true, false);
  var verticalPopupPosition = pc.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, false, false);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  pc.SetWindowPos(-1, element, clientX, clientY);
 }
});
var __aspxDropDownCollection = null;
function aspxGetDropDownCollection(){
 if(__aspxDropDownCollection == null)
  __aspxDropDownCollection  = new ASPxClientDropDownCollection();
 return __aspxDropDownCollection;
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxDropDownDocumentMouseDown);
function aspxDropDownDocumentMouseDown(evt){
 return aspxGetDropDownCollection().OnDocumentMouseDown(evt);
}
_aspxAttachEventToDocument("mouseup", aspxDropDownDocumentMouseUp);
function aspxDropDownDocumentMouseUp(evt){
 return aspxGetDropDownCollection().OnDocumentMouseUp(evt);
}
function aspxDDDropDown(name, evt){
 if(_aspxGetIsLeftButtonPressed(evt)){
  var dd = aspxGetControlCollection().Get(name);
  if(dd)
   return dd.OnDropDown(evt);
 }
}
function aspxDDMC_MD(name, evt) {
 var dd = aspxGetControlCollection().Get(name);
 if(dd)
  dd.OnMainCellMouseDown(evt);
}
function aspxDDRefocusClick(name, evt) {
 var dd = aspxGetControlCollection().Get(name);
 if (dd && dd.GetInputElement() && _aspxGetEventSource(evt).id != dd.GetInputElement().id)
  dd.ForceRefocusEditor(evt);
}
function aspxDDBPCShown(name){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.OnPopupControlShown();
}
function aspxDDBRaiseDropDownByTimer(name){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.RaiseDropDown();
}
function aspxCBLBSelectedIndexChanged(name, evt){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.OnLBSelectedIndexChanged();
}
function aspxCBLBItemMouseUp(name, evt){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.OnListBoxItemMouseUp(evt);
}
function aspxCBMozillaOverflowOn(name){
 var cb = aspxGetControlCollection().Get(name);
 cb.EnableLBDivOverflow();
}
function aspxCBDDButtonMMove(evt){
 return aspxGetDropDownCollection().OnDDButtonMouseMove(evt);
}
function aspxCBMouseWheel(evt){
 var srcElement = _aspxGetEventSource(evt);
 var focusedCB = aspxGetDropDownCollection().GetFocusedDropDown();
 if(focusedCB != null && _aspxGetIsParent(focusedCB.GetMainElement(), srcElement))
  return focusedCB.OnMouseWheel(evt);
}
function aspxCBKeyUp(evt){
 var cb = aspxGetDropDownCollection().GetFocusedDropDown();
 if (cb != null)
  cb.filterStrategy.OnFilteringKeyUp(evt);
}
function aspxCBFilterByTimer(name){
 var cb = aspxGetControlCollection().Get(name);
 if(cb != null) cb.filterStrategy.Filtering();
}
function aspxDECalOkClick() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionOkClick();
}
function aspxDECalCancelClick() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionCancelClick();
}
function aspxDECalClearClick() {
 var edit = ASPxClientDateEdit.active;
 if(edit)
  edit.OnTimeSectionClearClick();
}
function aspxDETimeEditKeyDown(s,e) {
 var edit = ASPxClientDateEdit.active;
 if(!edit) return;
 switch(e.htmlEvent.keyCode) {
  case ASPxKey.Enter:
   edit.OnTimeEditEnter();
   break;
  case ASPxKey.Esc:
   edit.OnTimeEditEsc();
   break;
  case ASPxKey.Tab:
   edit.OnTimeEditTab(e.htmlEvent.shiftKey);
   break;
 }
}
function aspxDETimeEditLostFocus() {
 var edit = ASPxClientDateEdit.active;
 if(!edit) return;
 edit.OnTimeEditLostFocus();
}
function aspxTBIKeyUp(name, evt) {
 aspxEKeyUp(name, evt);
}
function aspxTRBClick(name, evt) {
 var tokenElement = _aspxGetEventSource(evt).parentElement;
 var tb = aspxGetControlCollection().Get(name);
 if(tb) {
  var index = tokenElement.id.substring((tb.name + "_" + __aspxTokenBoxTokenSuffix).length);
  tb.RemoveToken(index, false);
 }
 return _aspxCancelBubble(evt);
}
function aspxME_MD(name, evt) {
 var tb = aspxGetControlCollection().Get(name);
 if(tb && !tb.focused)
  tb.SetFocus();
}
ASPxDateFormatter = _aspxCreateClass(null, {
 constructor: function() {
  this.date = new Date(2000, 0, 1);
  this.mask;
  this.specifiers = {};
  this.spPositions = [];
  this.knownSpecifiers = ["d", "M", "y", "H", "h", "m", "s", "f", "F", "g", "t"];
  this.savedYear = -1;
  this.isYearParsed = false;
  this.parsedMonth = -1;
  this.replacers = {
   "d": this.ReplaceDay,
   "M": this.ReplaceMonth,
   "y": this.ReplaceYear,
   "H": this.ReplaceHours23,
   "h": this.ReplaceHours12,
   "m": this.ReplaceMinutes,
   "s": this.ReplaceSeconds,
   "F": this.ReplaceMsTrimmed,
   "f": this.ReplaceMs,
   "g": this.ReplaceEra,
   "t": this.ReplaceAmPm
  };
  this.parsers = {
   "d": this.ParseDay,
   "M": this.ParseMonth,
   "y": this.ParseYear,
   "H": this.ParseHours,
   "h": this.ParseHours,
   "m": this.ParseMinutes,
   "s": this.ParseSeconds,
   "F": this.ParseMs,
   "f": this.ParseMs,
   "g": this.ParseEra,
   "t": this.ParseAmPm
  };
 },
 Format: function(date) {
  this.date = date;
  var sp;
  var pos;
  var replacerKey;
  var result = this.mask;
  for(var i = 0; i < this.spPositions.length; i++) {
   pos = this.spPositions[i];
   sp = this.specifiers[pos];
   replacerKey = sp.substr(0, 1);
   if(this.replacers[replacerKey]) {
    result = result.substr(0, pos) + this.replacers[replacerKey].call(this, sp.length) + result.substr(pos + sp.length);
   }
  }
  return result;
 },
 Parse: function(str) {
  var now = new Date();
  this.savedYear = now.getFullYear();
  this.isYearParsed = false;
  this.parsedMonth = -1;
  this.date = new Date(2000, 0, now.getDate());
  this.strToParse = str;
  this.catchNumbers(str);
  var parserKey;
  var sp;
  var pos;
  var parseResult;
  var error = false;
  this.hasAmPm = false;
  for(var i = 0; i < this.spPositions.length; i++) {
   pos = this.spPositions[i];
   sp = this.specifiers[pos];
   parserKey = sp.substr(0, 1);
   if(this.parsers[parserKey]) {
    parseResult = this.parsers[parserKey].call(this, sp.length);
    if(!parseResult) {
     error = true;
     break;
    }
   }
  }
  if(error)
   return false;
  if(this.hasAmPm) {
   if(!this.fixHours())
    return false;
  }
  if(!this.isYearParsed)
   this.date.setYear(this.savedYear);
  if(this.parsedMonth < 0)
   this.parsedMonth = now.getMonth();
  this.ApplyMonth();
  return this.date;
 },
 ApplyMonth: function() {
  var trial;
  var day = this.date.getDate();
  while(true) {
   trial = new Date();
   trial.setTime(this.date.getTime());
   trial.setMonth(this.parsedMonth);
   if(trial.getMonth() == this.parsedMonth)
    break;
   --day;
   this.date.setDate(day);
  }
  _aspxFixTimezoneGap(this.date, trial);
  this.date = trial;
 },
 SetFormatString: function(mask) {
  if(mask.length == 2 && mask.charAt(0) == "%")
   mask = mask.charAt(1);
  this.specifiers = {};
  this.spPositions = [];
  this.mask = "";
  var subt = 0;
  var pos = 0;
  var startPos = 0;
  var ch;
  var prevCh = "";
  var skip = false;
  var backslash = false;
  var sp = "";
  while(true) {
   ch = mask.charAt(pos);
   if(ch == "") {
    if(sp.length > 0)
     this.RegisterSpecifier(startPos, sp);
    break;
   }
   if(ch == "\\" && !backslash) {
    backslash = true;
    subt++;
   } else {
    if(!backslash && (ch == "'" || ch == '"')) {
     skip = !skip;
     subt++;
    } else {
     if(!skip) {
      if(ch == "/")
       ch = __aspxCultureInfo.ds;
      else if(ch == ":")
       ch = __aspxCultureInfo.ts;
      else if(this.IsKnownSpecifier(ch)) {
       if(prevCh.length == 0)
        prevCh = ch;
       if(ch == prevCh)
        sp += ch;
       else {
        if(sp.length > 0)
         this.RegisterSpecifier(startPos, sp);
        sp = ch;
        startPos = pos - subt;
       }
      }
     }
     this.mask += ch;
    }
    backslash = false;
   }
   prevCh = ch;
   pos++;
  }
  this.spPositions.reverse();
 },
 RegisterSpecifier: function(pos, sp) {
  this.spPositions.push(pos);
  this.specifiers[pos] = sp;
 },
 ReplaceDay: function(length) {
  if(length < 3) {
   var value = this.date.getDate().toString();
   return length == 2 ? this.padLeft(value, 2) : value;
  } else if(length == 3) {
   return __aspxCultureInfo.abbrDayNames[this.date.getDay()];
  } else {
   return __aspxCultureInfo.dayNames[this.date.getDay()];
  }
 },
 ReplaceMonth: function(length) {
  var value = 1 + this.date.getMonth();
  switch(length) {
   case 1:
    return value.toString();
   case 2:
    return this.padLeft(value.toString(), 2);
   case 3:
    return __aspxCultureInfo.abbrMonthNames[value - 1];
   default:
    for(var i in this.specifiers) {
     var spec = this.specifiers[i];
     if(spec == "d" || spec == "dd")
      return __aspxCultureInfo.genMonthNames[value - 1];
  }
    return __aspxCultureInfo.monthNames[value - 1];
  }
 },
 ReplaceYear: function(length) {
  var value = this.date.getFullYear();
  if(length <= 2)
   value = value % 100;
  return this.padLeft(value.toString(), length);
 },
 ReplaceHours23: function(length) {
  var value = this.date.getHours().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceHours12: function(length) {
  var value = this.date.getHours() % 12;
  if(value == 0)
   value = 12;
  value = value.toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceMinutes: function(length) {
  var value = this.date.getMinutes().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceSeconds: function(length) {
  var value = this.date.getSeconds().toString();
  return length > 1 ? this.padLeft(value, 2) : value;
 },
 ReplaceMsTrimmed: function(length) {
  return this.formatMs(length, true);
 },
 ReplaceMs: function(length) {
  return this.formatMs(length, false);
 },
 ReplaceEra: function(length) {
  return "A.D.";
 },
 ReplaceAmPm: function(length) {
  var value = this.date.getHours() < 12 ? __aspxCultureInfo.am : __aspxCultureInfo.pm;
  return length < 2 ? value.charAt(0) : value;
 },
 catchNumbers: function(str) {
  this.parseNumbers = [];
  var regex = /\d+/g;
  var match;
  for(;;) {
   match = regex.exec(str);
   if(!match)
    break;
   this.parseNumbers.push(this.parseDecInt(match[0]));
  }
  var spCount = 0;
  var now = new Date();
  for(var i in this.specifiers) {
   var sp = this.specifiers[i];
   if(sp.constructor != String || !this.IsNumericSpecifier(sp)) continue;
   spCount++;
   if(this.parseNumbers.length < spCount) {
    var defaultValue = 0;
    if(sp.charAt(0) == "y") defaultValue = now.getFullYear();
    this.parseNumbers.push(defaultValue);
   }
  }
  var excess = this.parseNumbers.length - spCount;
  if(excess > 0)
   this.parseNumbers.splice(spCount, excess);
  this.currentParseNumber = this.parseNumbers.length - 1;
 },
 popParseNumber: function() {
  return this.parseNumbers[this.currentParseNumber--];
 },
 findAbbrMonth: function() {
  return this.findMonthCore(__aspxCultureInfo.abbrMonthNames);
 },
 findFullMonth: function() {
  return this.findMonthCore(__aspxCultureInfo.genMonthNames);
 },
 findMonthCore: function(monthNames) {
  var inputLower = this.strToParse.toLowerCase();
  for(var i = 0; i < monthNames.length; i++) {
   var monthName = monthNames[i].toLowerCase();
   if(monthName.length > 0 &&  inputLower.indexOf(monthName) > -1) {
    var empty = "";
    for(var j = 0; j < monthName.length; j++) empty += " ";
    this.strToParse = this.strToParse.replace(new RegExp(monthName, "gi"), empty);
    return 1 + parseInt(i);
   }
  }
  return false;
 },
 ParseDay: function(length) {
  if(length < 3) {
   var value = this.popParseNumber();
   if(value < 1 || value > 31)
    return false;
   this.date.setDate(value);
  }
  return true;
 },
 ParseMonth: function(length) {
  var value;
  switch(length){
   case 1:
   case 2:
    value = this.popParseNumber();
    break;
   case 3:
    value = this.findAbbrMonth();
    break;
   default:
    value = this.findFullMonth();
    break;
  }
  if(value < 1 || value > 12)
   return false;
  this.parsedMonth = value - 1;
  return true;
 },
 ParseYear: function(length) {
  var value = this.popParseNumber();
  if(value > 9999)
   return false;
  if(value < 100)
   value = _aspxExpandTwoDigitYear(value);
  this.date.setFullYear(value);
  this.isYearParsed = true;
  return true;
 },
 ParseHours: function(length) {
  var value = this.popParseNumber();
  if(value > 23)
   return false;
  this.date.setHours(value);
  return true;
 },
 ParseMinutes: function(length) {
  var value = this.parseMinSecCore();
  if(value == -1)
   return false;
  this.date.setMinutes(value);
  return true;
 },
 ParseSeconds: function(length) {
  var value = this.parseMinSecCore();
  if(value == -1)
   return false;
  this.date.setSeconds(value);
  return true;
 },
 ParseMs: function(length) {
  if(length > 3)
   length = 3;
  var thr = 1;
  for(var i = 0; i < length; i++)
   thr *= 10;
  thr -= 1;
  var value = this.popParseNumber();
  while(value > thr)
   value /= 10;
  this.date.setMilliseconds(Math.round(value));
  return true;
 },
 ParseEra: function(length) {
  return true;
 },
 ParseAmPm: function(length) {
  this.hasAmPm = __aspxCultureInfo.am.length > 0 && __aspxCultureInfo.pm.length > 0;
  return true;
 },
 parseDecInt: function(str) {
  return parseInt(str, 10);
 },
 padLeft: function(str, length) {
  while(str.length < length)
   str = "0" + str;
  return str;
 },
 formatMs: function(length, trim) {
  var value = Math.floor(this.date.getMilliseconds() * Math.pow(10, length - 3));
  value = this.padLeft(value.toString(), length);
  if(trim) {
   var pos = value.length - 1;
   var req = false;
   while(value.charAt(pos) == "0") {
    req = true;
    pos--;
   }
   if(req)
    value = value.substring(0, pos + 1);
  }
  return value;
 },
 parseMinSecCore: function() {
  var value = this.popParseNumber();
  return value > 59 ? -1 : value;
 },
 fixHours: function() {
  var state = this.getAmPmState(this.strToParse);
  if(!state) return true;
  var h = this.date.getHours();
  switch(state) {
   case "P":
    if(h > 12) return false;
    if(h < 12)
     this.date.setHours(12 + h);
    break;
   case "A":
    if(h == 12)
     this.date.setHours(0);
  }
  return true;
 },
 getAmPmState: function(str, skipCorrection) {
  var am = __aspxCultureInfo.am.charAt(0).toLowerCase();
  var pm = __aspxCultureInfo.pm.charAt(0).toLowerCase();
  var amMatches = new RegExp(am, "gi").exec(str);
  var pmMatches = new RegExp(pm, "gi").exec(str);
  var amCount = amMatches ? amMatches.length : 0;
  var pmCount = pmMatches ? pmMatches.length : 0;
  var hasAm = amCount > 0;
  var hasPm = pmCount > 0;
  if(hasAm ^ hasPm && amCount < 2 && pmCount < 2)
   return hasAm ? "A" : "P";
  if(!skipCorrection) {
   str = str.replace(new RegExp(this.getDayMonthNameReplacePattern(), "gi"), "");
   return this.getAmPmState(str, true);
  }
  return null;
 },
 getDayMonthNameReplacePattern: function() {
  if(!this.dayMonthNameReplacePattern)
   return this.createDayMonthNameReplacePattern();
  return this.dayMonthNameReplacePattern;
 },
 createDayMonthNameReplacePattern: function() {
  var parts = [ ] ;
  parts.push("(?:");
  parts.push(this.createReplacePattern(__aspxCultureInfo.monthNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.genMonthNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.abbrMonthNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.abbrDayNames));
  parts.push(this.createReplacePattern(__aspxCultureInfo.dayNames));
  parts.push(")");
  return parts.join("");
 },
 createReplacePattern: function(names) {
  return names && names.length > 0 ? "\\b" + names.join("\\b|\\b") + "\\b" : "";
 },
 IsNumericSpecifier: function(sp) {
  var ch = sp.charAt(0);
  if(ch == "g" || ch == "t" || ((ch == "M" || ch == "d") && sp.length > 2))
   return false;
  return true;
 },
 IsKnownSpecifier: function(sp) {
  if(sp.length > 1)
   sp = sp.charAt(0);
  for(var i = 0; i < this.knownSpecifiers.length; i++) {
   if(this.knownSpecifiers[i] == sp)
    return true;
  }
  return false;
 }
});
ASPxDateFormatter.Create = function(format) {
 var instance = new ASPxDateFormatter();
 instance.SetFormatString(format);
 return instance;
};
ASPxDateFormatter.ExpandPredefinedFormat = function(format) {
 switch(format) {
  case "d":
   return __aspxCultureInfo.shortDate;
  case "D":
   return __aspxCultureInfo.longDate;
  case "t":
   return __aspxCultureInfo.shortTime;
  case "T":
   return __aspxCultureInfo.longTime;
  case "g":
   return __aspxCultureInfo.shortDate + " " + __aspxCultureInfo.shortTime;
  case "f":
   return __aspxCultureInfo.longDate + " " + __aspxCultureInfo.shortTime;
  case "G":
   return __aspxCultureInfo.shortDate + " " + __aspxCultureInfo.longTime;
  case "F":
  case "U":
   return __aspxCultureInfo.longDate + " " + __aspxCultureInfo.longTime;
  case "M":
  case "m":
   return __aspxCultureInfo.monthDay;
  case "Y":
  case "y":
   return __aspxCultureInfo.yearMonth;
  case "O":
  case "o":
   return "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffff";
  case "R":
  case "r":
   return "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
  case "s":
   return "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
  case "u":
    return "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
 }
 return format;
};
var __aspxCalendarWeekCount = 6;
var __aspxCalendarMsPerDay = 86400000;
var __aspxActiveCalendar = null;
ASPxClientCalendar = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.SelectionChanging = new ASPxClientEvent();
  this.SelectionChanged = new ASPxClientEvent();
  this.VisibleMonthChanged = new ASPxClientEvent();
  this.CustomDisabledDate = new ASPxClientEvent();
  this.isMouseDown = false;
  this.forceMouseDown = false;
  this.supportGestures = true;
  this.swipeGestureStated = false;
  this.updateAnimationProcessing = false;
  this.selection = new ASPxClientCalendarSelection();
  this.selectionTransaction = null;
  this.selectionStartDate = null;
  this.selectionPrevStartDate = null;
  this.lastSelectedDate = null;
  this.selectionCtrl = false;
  this.selectionByWeeks = false;
  this.nodeCache = { };
  this.titleFormatter = null;
  this.visibleDate = new Date();
  this.firstDayOfWeek = 0;
  this.columns = 1;
  this.rows = 1;
  this.enableFast = true;
  this.enableMulti = false;
  this.minDate = null;
  this.maxDate = null;
  this.customDraw = false;
  this.showWeekNumbers = true;
  this.showDayHeaders = true;
  this.isDateEditCalendar = false;
  this.disabledDates = [ ];
  this.sizingConfig.allowSetHeight = false;
  this.isDateChangingByKeyboard = false;
  this.MainElementClick = new ASPxClientEvent();
 },
 Initialize: function() {
  this.selectionTransaction = new ASPxClientCalendarSelectionTransaction(this);
  this.selectionPrevStartDate = this.selection.GetFirstDate();
  this.SaveClientState();
  ASPxClientEdit.prototype.Initialize.call(this);
  var mainElement = this.GetMainElement();
  _aspxPreventElementDragAndSelect(mainElement, false, false);
  if(__aspxOpera)
   _aspxSetElementAsUnselectable(mainElement, true, true);
  if(!ASPxClientCalendar.AreDatesEqual(this.currentDate, new Date()))
   this.Update();
 },
 InlineInitialize: function(){
  this.CreateViews();
  if(this.enableFast)
   this.fastNavigation = new ASPxClientCalendarFastNavigation(this);
  this.InitSpecialKeyboardHandling();
  if(this.enableSlideCallbackAnimation && !this.enableSwipeGestures && typeof(ASPxAnimationHelper) != "undefined")
   ASPxAnimationHelper.getSlideAnimationContainer(this.GetCallbackAnimationElement(), true, false);
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(!this.CustomDisabledDate.IsEmpty())
   this.Update();
 },
 FindInputElement: function() {
  return this.GetChild("_KBS");
 },
 FindStateInputElement: function() {
  return _aspxGetElementById(this.name + "_STATE");
 },
 GetClearButton: function() {
  return this.GetChild("_BC");
 },
 GetTodayButton: function() {
  return this.GetChild("_BT");
 },
 GetValue: function() {
  return this.selection.GetFirstDate();
 },
 GetValueString: function() {
  var value = this.GetValue();
  return value == null ? null : _aspxGetInvariantDateString(value);
 },
 SetValue: function(date) {
  if(date)
   this.SetVisibleDate(date);
  this.SetSelectedDate(date);
 },
 GetFastNavigation: function() {
  return this.fastNavigation;
 },
 GetViewKey: function(row, column) {
  return row + "x" + column;
 },
 GetView: function(row, column) {
  var key = this.GetViewKey(row, column);
  return this.views[key];
 },
 CreateViews: function() {
  this.views = { };
  var key;
  for(var row = 0 ; row < this.rows; row++) {
   for(var col = 0; col < this.columns; col++) {
    key = this.GetViewKey(row, col);
    var view = new ASPxClientCalendarView(this, row, col);
    view.Initialize();
    this.views[key] = view;
   }
  }
 },
 IsFastNavigationActive: function() {
  if (this.fastNavigation)
   return this.fastNavigation.GetPopup().IsVisible();
  return false;
 },
 IsDateSelected: function(date) {
  return this.selection.Contains(date);
 },
 IsDateVisible: function(date) {
  var startDate = ASPxClientCalendar.CloneDate(this.GetView(0, 0).visibleDate);
  startDate.setDate(1);
  var endDate = ASPxClientCalendar.CloneDate(this.GetView(this.rows - 1, this.columns - 1).visibleDate);
  endDate.setDate(ASPxClientCalendar.GetDaysInMonth(endDate.getMonth(), endDate.getFullYear()));
  return (date >= startDate) && (date < endDate);
 },
 IsDateWeekend: function(date) {
  var day = date.getDay();
  return day == 0 || day == 6;
 },
 IsCustomDisabledDatesViaCallback: function(){
  return (this.callBack != null && this.CustomDisabledDate.IsEmpty() && this.disabledDates.length > 0);
 },
 IsDateDisabled: function(date) {
  if(date != null) {
   var length = this.disabledDates.length;
   if(length > 0 && date != null) {
    for(var i = 0; i < length; i++) {
     var disabledDate = this.disabledDates[i];
     if(disabledDate.getDate() == date.getDate() &&
      disabledDate.getMonth() == date.getMonth() &&
      disabledDate.getFullYear() == date.getFullYear())
      return true;
    }
   }
   if(this.OnCustomDisabledDate(date).isDisabled)
    return true;
  }
  return false;
 },
 IsMultiView: function() {
  return this.columns > 1 || this.rows > 1;
 },
 IsDateInRange: function(date) {
  return date == null ||
   ((this.minDate == null || date >= this.minDate) &&
    (this.maxDate == null || date <= this.maxDate));
 },
 AddCallbackCustomDisabledDates: function(dates) {
  var callbackCustomDisabledDates = eval(dates);
  for(var i = 0; i < callbackCustomDisabledDates.length; i++) {
   var contains = false;
   var date = callbackCustomDisabledDates[i];
   for(var j = 0; j < this.disabledDates.length; j++) {
    var disabledDate = this.disabledDates[j];
    if(disabledDate.getDate() == date.getDate() &&
     disabledDate.getMonth() == date.getMonth() &&
     disabledDate.getFullYear() == date.getFullYear()) {
     contains = true;
     break;
    }
   }
   if(!contains)
    this.disabledDates.push(date);
  }
 },
 GetCachedElementById: function(id) {
  if(!_aspxIsExistsElement(this.nodeCache[id]))
   this.nodeCache[id] = _aspxGetElementById(id);
  return this.nodeCache[id];
 },
 ShowLoadingPanel: function(){
  this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
 },
 ShowLoadingDiv: function () {
  this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetMainElement());
 },
 GetCallbackAnimationElement: function() {
  if(this.columns === 1 && this.rows === 1)
   return this.views[this.GetViewKey(0, 0)].GetMonthTable();
  return this.GetMainElement();
 },
 CanHandleGesture: function(evt) {
  var source = _aspxGetEventSource(evt);
  var element = this.GetMainElement();
  if(this.columns === 1 && this.rows === 1)
   element = this.views[this.GetViewKey(0, 0)].GetMonthCell();
  return _aspxGetIsParent(element, source);
 },
 AllowStartGesture: function() {
  return ASPxClientControl.prototype.AllowStartGesture.call(this) && (!this.enableMulti || !this.selectionTransaction.isActive) && !this.updateAnimationProcessing;
 },
 StartGesture: function() {
  this.swipeGestureStated = true;
 },
 AllowExecuteGesture: function(value) {
  return true;
 },
 ExecuteGesture: function(value, count) {
  if(!count) count = 1;
  this.OnShiftMonth((value > 0 ? -1 : 1) * count);
 },
 Update: function() {
  if(this.customDraw) {
   if(this.callBack) {
    this.ShowLoadingElements();
    this.CreateCallback("UPDATE");
   }
   else {
    this.SendPostBack("");
   }
  }
  else {
   if(this.IsAnimationEnabled())
    this.StartBeforeUpdateAnimation();
   else
    this.UpdateInternal();
  }
 },
 UpdateInternal: function() {
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.Update();
  }
  if(this.IsAnimationEnabled())
   this.StartAfterUpdateAnimation();
 },
 IsAnimationEnabled: function() {
  return this.enableSlideCallbackAnimation || this.enableCallbackAnimation;
 },
 StartBeforeUpdateAnimation: function() {
  this.updateAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(this.enableSlideCallbackAnimation && this.slideAnimationDirection)
   ASPxAnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeforeUpdateAnimation.aspxBind(this));
  else if(this.enableCallbackAnimation)
   ASPxAnimationHelper.fadeOut(element, this.FinishBeforeUpdateAnimation.aspxBind(this));
  else
   this.FinishBeforeUpdateAnimation();
 },
 FinishBeforeUpdateAnimation: function() {
  this.UpdateInternal();
 },
 StartAfterUpdateAnimation: function() {
  var element = this.GetCallbackAnimationElement();
  if(this.enableSlideCallbackAnimation && this.slideAnimationDirection)
   ASPxAnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishAfterUpdateAnimation.aspxBind(this));
  else if(this.enableCallbackAnimation)
   ASPxAnimationHelper.fadeIn(element, this.FinishAfterUpdateAnimation.aspxBind(this));
  else
   this.FinishAfterUpdateAnimation();
 },
 FinishAfterUpdateAnimation: function() {
  this.updateAnimationProcessing = false;
  this.slideAnimationDirection = null;
  this.CheckRepeatGesture();
 },
 ApplySelectionByDiff: function(selection, save) {
  var toShow = [ ];
  var toHide = [ ];
  var dates =  selection.GetDates();
  var oldDates = this.selection.GetDates();
  var date;
  for(var i = 0; i < dates.length; i++) {
   date = dates[i];
   if(!this.selection.Contains(date))
    toShow.push(date);
  }
  for(var i = 0; i < oldDates.length; i++) {
   date = oldDates[i];
   if(!selection.Contains(date))
    toHide.push(date);
  }
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.UpdateSelection(toHide, false);
   view.UpdateSelection(toShow, true);
  }
  this.selection.Assign(selection);
  if(save)
   this.SaveClientState();
 },
 ImportEtalonStyle: function(info, suffix) {
  var cell = this.GetEtalonStyleCell(suffix);
  if(_aspxIsExistsElement(cell))
   info.Import(cell);
 },
 GetEtalonStyleCell: function(name) {
  return this.GetCachedElementById(this.name + "_EC_" + name);
 },
 SaveClientState: function() {
  var element = this.FindStateInputElement();
  if (element != null) {
   var visibleDate = this.visibleDate;
   if(visibleDate > this.GetNETMaxDate())
    visibleDate = this.GetNETMaxDate();
   var state = _aspxGetInvariantDateString(visibleDate);
   if(this.selection.count > 0)
    state += ":" + this.FormatDates(this.selection.GetDates(), ":");
   element.value = state;
  }
 },
 GetNETMaxDate: function() {
  return new Date(9999, 11, 31, 23, 59, 59, 999);
 },
 FormatDates: function(dates, separator) {
  var result = "";
  for(var i = 0; i < dates.length; i++) {
   if (result.length > 0)
    result += separator;
   result += _aspxGetInvariantDateString(dates[i]);
  }
  return result;
 },
 InitializeKeyHandlers: function() {
  this.AddKeyDownHandler(ASPxKey.Enter, "OnEnterDown");
  this.AddKeyDownHandler(ASPxKey.Esc, "OnEscape");
  this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
  this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
  this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
  this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
  this.AddKeyDownHandler(ASPxKey.Left, "OnArrowLeft");
  this.AddKeyDownHandler(ASPxKey.Right, "OnArrowRight");
  this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
  this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
  this.AddKeyPressHandler(ASPxKey.Enter, "OnEnterPressed");
 },
 OnArrowUp: function(evt) {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnArrowUp(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.GetPrevWeekDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "up");
  }
  return true;
 },
 OnArrowDown: function(evt) {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnArrowDown(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.GetNextWeekDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, true);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "down");
  }
  return true;
 },
 OnArrowLeft: function(evt) {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnArrowLeft(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.GetYesterDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "left");
  }
  return true;
 },
 OnArrowRight: function(evt) {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnArrowRight(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.GetTomorrowDate(this.lastSelectedDate);
   this.CorrectVisibleMonth(newDate, true);
   this.DoKeyboardSelection(newDate, evt.shiftKey, "right");
  }
  return true;
 },
 OnCallback: function(result){
  var table = this.GetMainElement();
  for(var rowIndex = 0; rowIndex < this.rows; rowIndex++) {
   for(var cellIndex = 0; cellIndex < this.columns; cellIndex++) {
    _aspxSetInnerHtml(table.rows[rowIndex].cells[cellIndex], result[rowIndex * this.columns + cellIndex]);
   }
  }
  if(this.IsCustomDisabledDatesViaCallback()) {
   this.AddCallbackCustomDisabledDates(result[result.length - 1]);
  }
  this.CreateViews();
  this.InitializeGestures();
  this.InitializeEnabled();
  if(!this.isDateEditCalendar)
   this.SetFocus();
 },
 OnPageUp: function(evt) {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnPageUp(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate) {
    if (evt.ctrlKey)
     newDate = ASPxClientCalendar.GetPrevYearDate(this.lastSelectedDate);
    else
     newDate = ASPxClientCalendar.GetPrevMonthDate(this.lastSelectedDate);
   }
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate);
  }
  return true;
 },
 OnPageDown: function(evt) {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnPageDown(evt);
  else if (!this.readOnly) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate) {
    if (evt.ctrlKey)
     newDate = ASPxClientCalendar.GetNextYearDate(this.lastSelectedDate);
    else
     newDate = ASPxClientCalendar.GetNextMonthDate(this.lastSelectedDate);
   }
   this.CorrectVisibleMonth(newDate, true);
   this.DoKeyboardSelection(newDate);
  }
  return true;
 },
 OnEndKeyDown: function(evt) {
  if (!this.readOnly && !this.IsFastNavigationActive()) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.CloneDate(this.lastSelectedDate);
   newDate = ASPxClientCalendar.GetLastDayInMonthDate(newDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey);
  }
  return true;
 },
 OnHomeKeyDown: function(evt) {
  if (!this.readOnly && !this.IsFastNavigationActive()) {
   var newDate = this.GetNearestDayForToday();
   if (this.lastSelectedDate)
    newDate = ASPxClientCalendar.CloneDate(this.lastSelectedDate);
   newDate = ASPxClientCalendar.GetFirstDayInMonthDate(newDate);
   this.CorrectVisibleMonth(newDate, false);
   this.DoKeyboardSelection(newDate, evt.shiftKey);
  }
  return true;
 },
 OnEnterDown: function() {
  if (this.IsFastNavigationActive()) {
   this.GetFastNavigation().OnEnter();
   return true;
  }
  return false;
 },
 OnEnterPressed: function() {
  return true;
 },
 OnEscape: function() {
  if (this.IsFastNavigationActive())
   this.GetFastNavigation().OnEscape();
  return true;
 },
 OnShiftMonth: function(offset) {
  if(offset) {
   var date = ASPxClientCalendar.AddMonths(this.visibleDate, offset);
   this.OnVisibleMonthChanged(date);
  }
 },
 OnDayMouseDown: function(date, shift, ctrl, byWeeks) {
  this.isMouseDown = true;
  this.selectionByWeeks = byWeeks;
  if(!this.enableMulti && this.enableSwipeGestures)
   return;
  this.selectionTransaction.Start();
  if(this.enableMulti) {
   if(ctrl) {
    this.selectionCtrl = true;
    this.selectionTransaction.CopyFromBackup();
   } else
    this.selectionCtrl = false;
   if(shift && this.selectionPrevStartDate) {
    this.selectionStartDate = this.selectionPrevStartDate;
    this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
    if(byWeeks)
     this.selectionTransaction.selection.AddWeek(date);
   } else {
    this.selectionStartDate = date;
    this.selectionPrevStartDate = date;
    if(byWeeks)
     this.selectionTransaction.selection.AddWeek(date);
    else
     this.selectionTransaction.selection.Add(date);
   }
  }
  else
   this.selectionTransaction.selection.Add(date);
  if(date > this.GetNETMaxDate())
   this.selectionTransaction.CopyFromBackup();
  if(this.enableMulti)
   this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
  this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
 },
 OnDayMouseOver: function(date) {
  if(!this.enableMulti && this.enableSwipeGestures)
   return;
  if(this.enableMulti) {
   if(this.selectionCtrl)
    this.selectionTransaction.CopyFromBackup();
   else
    this.selectionTransaction.selection.Clear();
   this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
   if(this.selectionByWeeks) {
    this.selectionTransaction.selection.AddWeek(date);
    this.selectionTransaction.selection.AddWeek(this.selectionStartDate);
   }
  }
  else {
   this.selectionTransaction.selection.Clear();
   this.selectionTransaction.selection.Add(date);
  }
  if(this.enableMulti)
   this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
  this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
 },
 OnDayMouseUp: function(date) {
  if (!__aspxIE && this.isMouseDown)
   this.OnMainElementClick();
  this.isMouseDown = false;
  if(!this.enableMulti && this.enableSwipeGestures && this.swipeGestureStated) {
   this.swipeGestureStated = false;
   return;
  }
  if(this.enableMulti) {
   if(this.selectionCtrl && this.selectionTransaction.backup.Contains(date) &&
    ASPxClientCalendar.AreDatesEqual(date, this.selectionStartDate)) {
    if(this.selectionByWeeks)
     this.selectionTransaction.selection.RemoveWeek(date);
    else
     this.selectionTransaction.selection.Remove(date);
   }
  }
  else if(this.enableSwipeGestures && !this.swipeGestureStated) {
   this.selectionTransaction.selection.Add(date);
   if(date > this.GetNETMaxDate())
    this.selectionTransaction.CopyFromBackup();
   this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
  }
  this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
  this.OnSelectionChanging();
 },
 OnTodayClick: function() {
  var now = new Date();
  var date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  if(this.IsDateInRange(date)) {
   if(!this.IsDateDisabled(date)) {
    this.selectionTransaction.Start();
    this.selectionTransaction.selection.Add(date);
    this.OnSelectionChanging();
   }
   if(!ASPxClientCalendar.AreDatesOfSameMonth(date, this.visibleDate))
    this.OnVisibleMonthChanged(date);
  }
 },
 OnClearClick: function() {
  this.selectionTransaction.Start();
  this.OnSelectionChanging();
  this.selectionStartDate = null;
  this.selectionPrevStartDate = null;
  this.lastSelectedDate = null;
 },
 OnSelectMonth: function(row, column) {
  var txn = this.selectionTransaction;
  txn.Start();
  var date = ASPxClientCalendar.CloneDate(this.GetView(row, column).visibleDate);
  date.setDate(1);
  do {
   if(this.IsDateInRange(date) && !this.IsDateDisabled(date))
    txn.selection.Add(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  } while(date.getDate() > 1);
  this.OnSelectionChanging();
 },
 OnTitleClick: function(row, column) {
  this.fastNavigation.activeView = this.GetView(row, column);
  this.fastNavigation.Prepare();
  this.fastNavigation.Show();
 },
 OnMainElementClick: function(mouseEvt) {
  this.MainElementClick.FireEvent(this, mouseEvt);
 },
 OnSelectionChanging: function() {
  if(!this.SelectionChanging.IsEmpty()){
   var args = new ASPxClientCalendarSelectionEventArgs(false, this.selectionTransaction.selection);
   this.SelectionChanging.FireEvent(this, args);
  }
  var changed = this.selectionTransaction.IsChanged();
  this.selectionTransaction.Commit();
  if(changed)
   this.OnValueChanged();
 },
 OnVisibleMonthChanged: function(date) {
  var offsetInternal = ASPxClientCalendar.GetOffsetInMonths(this.visibleDate, date);
  this.SetVisibleDate(date);
  var processOnServer = this.RaiseVisibleMonthChanged(offsetInternal);
  if(processOnServer && !this.customDraw)
   this.SendPostBackInternal("");
 },
 OnSelectionCancelled: function() {
  this.isMouseDown = false;
  this.selectionTransaction.Rollback();
 },
 OnCustomDisabledDate: function(date) {
  return this.RaiseCustomDisabledDate(date);
 },
 RaiseCustomDisabledDate: function(date) {
  var args = new ASPxClientCalendarCustomDisabledDateEventArgs(date);
  this.CustomDisabledDate.FireEvent(this, args);
  return args;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseSelectionChanged(processOnServer);
  return processOnServer;
 },
 SetVisibleDate: function(date) {
  var old = this.visibleDate;
  this.visibleDate = date;
  this.SaveClientState();
  this.slideAnimationDirection = this.IsAnimationEnabled() ? ((old < this.visibleDate) ? ASPxAnimationHelper.SLIDE_LEFT_DIRECTION : ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION) : null;
  if(!ASPxClientCalendar.AreDatesOfSameMonth(date, old)){
   this.Update();
  }
 },
 SetSelectedDate: function(date) {
  if(this.IsDateInRange(date) && !this.IsDateDisabled(date)) {
   var selection = new ASPxClientCalendarSelection();
   if(date != null) {
    selection.Add(date);
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
   }
   this.ApplySelectionByDiff(selection, true);
  }
 },
 CorrectVisibleMonth: function(newDate, isForwardDirection) {
  var offset = ASPxClientCalendar.GetOffsetInMonths(this.visibleDate, newDate);
  if (this.IsMultiView() && offset != 0) {
   var view = isForwardDirection ? this.GetView(this.rows - 1, this.columns - 1) :
            this.GetView(0, 0);
   offset = this.IsDateVisible(newDate) ? 0 :
       ASPxClientCalendar.GetOffsetInMonths(view.visibleDate, newDate);
  }
  if(!this.IsDateInRange(newDate) || this.IsDateDisabled(newDate))
   offset = 0;
  if (offset != 0)
   this.OnShiftMonth(offset);
 },
 DoKeyboardSelection: function(date, shift, direction) {
  if (this.IsDateInRange(date)) {
   this.isDateChangingByKeyboard = true;
   var existDate = this.IsDateDisabled(date) ? this.GetNearestDayForDate(date, direction) : date;
   if(existDate != null) {
    this.selectionTransaction.Start();
    if(this.enableMulti && shift && this.selectionStartDate) {
     this.selectionTransaction.selection.AddRange(this.selectionStartDate, existDate);
     this.RemoveDisabledDatesFromSelection(this.selectionTransaction.selection);
    } else {
     this.selectionTransaction.selection.Add(existDate);
     this.selectionStartDate = existDate;
    }
    this.lastSelectedDate = ASPxClientCalendar.CloneDate(existDate);
    this.OnSelectionChanging();
   }
   this.isDateChangingByKeyboard = false;
  }
 },
 RemoveDisabledDatesFromSelection: function(selection) {
  var selectedDates = selection.GetDates();
  for(var i = 0; i < selectedDates.length; i++) {
   if(this.IsDateDisabled(selectedDates[i]))
    selection.Remove(selectedDates[i]);
  }
 },
 GetNearestDayForToday: function() {
  var now = new Date();
  var ret = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  if (this.minDate && !this.IsDateInRange(ret))
   ret = ASPxClientCalendar.CloneDate(this.IsDateDisabled(this.minDate) ? this.GetNearestDayForDate(this.minDate, "left") : this.minDate);
  return ret;
 },
 GetNearestDayForDate: function(date, direction) {
  var nearestDate = null;
  var nextDate = date;
  while(nearestDate == null) {
   switch(direction) {
    case "up":
     nextDate = new Date(nextDate.getTime() - (7 * 24 * 60 * 60 * 1000));
     break
    case "down":
     nextDate = new Date(nextDate.getTime() + (7 * 24 * 60 * 60 * 1000));
     break
    case "left":
     nextDate = new Date(nextDate.getTime() - (1 * 24 * 60 * 60 * 1000));
     break
    case "right":
     nextDate = new Date(nextDate.getTime() + (1 * 24 * 60 * 60 * 1000));
     break
   };
   if(!this.IsDateInRange(nextDate))
    return null;
   nearestDate = this.IsDateDisabled(nextDate) ? null : nextDate;
  }
  return nearestDate;
 },
 UseDelayedSpecialFocus: function() {
  return true;
 },
 GetDelayedSpecialFocusTriggers: function() {
  var list = ASPxClientEdit.prototype.GetDelayedSpecialFocusTriggers.call(this);
  if(this.enableFast)
   list.push(this.GetFastNavigation().GetPopup().GetWindowElement(-1));
  return list;
 },
 GetSelectedDate: function() {
  return this.GetValue();
 },
 GetVisibleDate: function() {
  return this.visibleDate;
 },
 SelectDate: function(date) {
  if(date) {
   this.selection.Add(date);
   this.SaveClientState();
   this.Update();
  }
 },
 SelectRange: function(start, end) {
  if(start && end) {
   this.selection.AddRange(start, end);
   this.SaveClientState();
   this.Update();
  }
 },
 DeselectDate: function(date) {
  if(date) {
   this.selection.Remove(date);
   this.SaveClientState();
   this.Update();
  }
 },
 DeselectRange: function(start, end) {
  if(start && end) {
   this.selection.RemoveRange(start, end);
   this.SaveClientState();
   this.Update();
  }
 },
 ClearSelection: function() {
  this.selection.Clear();
  this.SaveClientState();
  this.Update();
 },
 GetSelectedDates: function() {
  return this.selection.GetDates();
 },
 RaiseSelectionChanged: function(processOnServer){
  if(!this.SelectionChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.SelectionChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseVisibleMonthChanged: function(offsetInternal){
  var processOnServer = this.autoPostBack;
  if(!this.VisibleMonthChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   args.offsetInternal = offsetInternal;
   this.VisibleMonthChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 ChangeEnabledAttributes: function(enabled){
  _aspxChangeDocumentEventsMethod(enabled)("mouseup", aspxCalDocMouseUp);
  _aspxChangeEventsMethod(enabled)(this.GetMainElement(), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.name));
  var inputElement = this.GetInputElement();
  if(inputElement)
   this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
  var btnElement = this.GetTodayButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetClearButton();
  if(btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.ChangeEnabledAttributes(enabled);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  var btnElement = this.GetTodayButton();
  if(btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetClearButton();
  if(btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  for(var key in this.views) {
   var view = this.views[key];
   if(view.constructor != ASPxClientCalendarView) continue;
   view.ChangeEnabledStateItems(enabled);
  }
  this.UpdateInternal();
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
 },
 GetMinDate: function() {
  return this.minDate;
 },
 SetMinDate: function(date) {
  this.minDate = date;
  this.Update();
 },
 GetMaxDate: function() {
  return this.maxDate;
 },
 SetMaxDate: function(date) {
  this.maxDate = date;
  this.Update();
 }
});
ASPxClientCalendar.Cast = ASPxClientControl.Cast;
ASPxClientCalendarCustomDisabledDateEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(date) {
  this.constructor.prototype.constructor.call(this);
  this.date = date;
  this.isDisabled = false;
 }
});
ASPxClientCalendar.AnonymousHandlers = {
 MainElementClick: function(name) {
  return function(e) {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.OnMainElementClick(e);
  };
 },
 SelectMonth: function(name, row, column) {
  return function() {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.OnSelectMonth(row, column);
  };
 },
 DayMouseEvent: function(name, row, column, index, byWeeks) {
  return function(e) {
   var cal = aspxGetControlCollection().Get(name);
   if(!cal)
    return;
   var view = cal.GetView(row, column);
   var date = view.GetDateByIndex(index);
   if(byWeeks)
    date = ASPxClientCalendar.AddDays(date, cal.firstDayOfWeek - date.getDay());
   var allowed = cal.IsDateInRange(date) && (view.IsDateVisible(date) || byWeeks) && !cal.IsDateDisabled(date);
   switch(e.type) {
    case "mousedown":
     if(allowed && _aspxGetIsLeftButtonPressed(e))
      cal.OnDayMouseDown(date, e.shiftKey, e.ctrlKey, byWeeks);
     break;
    case "mouseover":
     if(allowed) {
      if(cal.forceMouseDown)
       cal.OnDayMouseDown(date, false, false, false);
      else if(cal.isMouseDown)
       cal.OnDayMouseOver(date);
     }
     break;
    case "mouseup":
     if(cal.isMouseDown) {
      if(allowed)
       cal.OnDayMouseUp(date);
      else
       cal.OnSelectionCancelled();
     }
     break;
   }
  };
 },
 FastNavMonthClick: function(name, month) {
  return function() {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.fastNavigation.OnMonthClick(month);
  };
 },
 FastNavYearClick: function(name, index) {
  return function() {
   var cal = aspxGetControlCollection().Get(name);
   cal && cal.fastNavigation.OnYearClick(index);
  };
 }
};
ASPxClientCalendar.AreDatesEqual = function(date1, date2) {
 if(date1 == date2)
  return true;
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate();
}
ASPxClientCalendar.AreDatesOfSameMonth = function(date1, date2) {
 if(!date1 || !date2)
  return false;
 return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth();
}
ASPxClientCalendar.GetUTCTime = function(date) {
 return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
}
ASPxClientCalendar.GetFirstDayOfYear = function(date) {
 return new Date(date.getFullYear(), 0, 1);
}
ASPxClientCalendar.GetDayOfYear = function(date) {
 var ms = ASPxClientCalendar.GetUTCTime(date) -
  ASPxClientCalendar.GetUTCTime(ASPxClientCalendar.GetFirstDayOfYear(date));
 return 1 + Math.floor(ms / __aspxCalendarMsPerDay);
}
ASPxClientCalendar.GetISO8601WeekOfYear = function(date) {
 var firstDate = new Date(date.getFullYear(), 0, 1);
 var firstDayOfWeek = firstDate.getDay();
 if(firstDayOfWeek == 0)
  firstDayOfWeek = 7;
 var daysInFirstWeek = 8 - firstDayOfWeek;
 var lastDate = new Date(date.getFullYear(), 11, 31);
 var lastDayOfWeek = lastDate.getDay();
 if(lastDayOfWeek == 0)
  lastDayOfWeek = 7;
 var daysInLastWeek = 8 - lastDayOfWeek;
 var fullWeeks = Math.ceil((ASPxClientCalendar.GetDayOfYear(date) - daysInFirstWeek) / 7);
 var result = fullWeeks;
 if(daysInFirstWeek > 3)
  result++;
 var isThursday = firstDayOfWeek == 4 || lastDayOfWeek == 4;
 if(result > 52 && !isThursday)
  result = 1;
 if(result == 0)
  return ASPxClientCalendar.GetISO8601WeekOfYear(new Date(date.getFullYear() - 1, 11, 31));
 return result;
}
ASPxClientCalendar.GetNextWeekDate = function(date) {
 var ret = new Date(date.getTime());
 var newDay = date.getDate() + 7;
 ret.setDate(newDay);
 return ret;
}
ASPxClientCalendar.GetPrevWeekDate = function(date) {
 var ret = new Date(date.getTime());
 var newDay = date.getDate() - 7;
 ret.setDate(newDay);
 return ret;
}
ASPxClientCalendar.GetYesterDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(ret.getDate() - 1);
 return ret;
}
ASPxClientCalendar.GetTomorrowDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(ret.getDate() + 1);
 return ret;
}
ASPxClientCalendar.GetNextMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInNextMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() + 1, ret.getFullYear());
 if (ret.getDate() > maxDateInNextMonth)
  ret.setDate(maxDateInNextMonth);
 ret.setMonth(ret.getMonth() + 1);
 return ret;
}
ASPxClientCalendar.GetNextYearDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() + 1);
 if (ret.getDate() > maxDateInPrevYearMonth)
  ret.setDate(maxDateInPrevYearMonth);
 ret.setFullYear(ret.getFullYear() + 1);
 return ret;
}
ASPxClientCalendar.GetPrevMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() - 1, ret.getFullYear());
 if (ret.getDate() > maxDateInPrevMonth)
  ret.setDate(maxDateInPrevMonth);
 ret.setMonth(ret.getMonth() - 1);
 return ret;
}
ASPxClientCalendar.GetPrevYearDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() - 1);
 if (ret.getDate() > maxDateInPrevYearMonth)
  ret.setDate(maxDateInPrevYearMonth);
 ret.setFullYear(ret.getFullYear() - 1);
 return ret;
}
ASPxClientCalendar.GetFirstDayInMonthDate = function(date) {
 var ret = new Date(date.getTime());
 ret.setDate(1);
 return ret;
}
ASPxClientCalendar.GetLastDayInMonthDate = function(date) {
 var ret = new Date(date.getTime());
 var maxDateInYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear());
 ret.setDate(maxDateInYearMonth);
 return ret;
}
ASPxClientCalendar.AddDays = function(startDate, dayCount) {
 var date = ASPxClientCalendar.CloneDate(startDate);
 var dayDiff = 0;
 var hourInc = 3600000;
 if(dayCount < 0)
  hourInc = -1 * hourInc;
 dayCount = Math.abs(dayCount);
 while(true) {
  if(dayDiff == dayCount && startDate.getHours() == date.getHours())
   return date;
  if(dayDiff > dayCount) {
   date.setTime(-1 * hourInc + date.getTime());
   return date;
  }
  var day = date.getDate();
  date.setTime(hourInc + date.getTime());
  if(day != date.getDate())
   dayDiff++;
 }
 return date;
}
ASPxClientCalendar.AddMonths = function(date, count) {
 var newDate = ASPxClientCalendar.CloneDate(date);
 newDate.setMonth(count + newDate.getMonth());
 _aspxFixTimezoneGap(date, newDate);
 if(newDate.getDate() < date.getDate())
  newDate = ASPxClientCalendar.AddDays(newDate, -newDate.getDate());
 return newDate;
}
ASPxClientCalendar.CloneDate = function(date) {
 var cloned = new Date();
 cloned.setTime(date.getTime());
 return cloned;
}
ASPxClientCalendar.GetDecadeStartYear = function(year) {
 return 10 * Math.floor(year / 10);
}
ASPxClientCalendar.GetDaysInRange = function(start, end) {
 return 1 + (ASPxClientCalendar.GetUTCTime(end) - ASPxClientCalendar.GetUTCTime(start)) / __aspxCalendarMsPerDay;
};
ASPxClientCalendar.GetDaysInMonth = function(month, year) {
 var d = new Date(year, month + 1, 0);
 return d.getDate();
};
ASPxClientCalendar.GetOffsetInMonths = function(start, end) {
 return end.getMonth() - start.getMonth() + 12 * (end.getFullYear() - start.getFullYear());
};
ASPxClientCalendarSelection = _aspxCreateClass(null, {
 constructor: function() {
  this.dates = { };
  this.count = 0;
 },
 Assign: function(source) {
  this.Clear();
  for(var key in source.dates) {
   var item = source.dates[key];
   if(item.constructor != Date) continue;
   this.Add(item);
  }
 },
 Clear: function() {
  if(this.count > 0) {
   this.dates = { };
   this.count = 0;
  }
 },
 Equals: function(selection) {
  if(this.count != selection.count)
   return false;
  for(var key in this.dates) {
   if(this.dates[key].constructor != Date) continue;
   if(!selection.ContainsKey(key))
    return false;
  }
  return true;
 },
 Contains: function(date) {
  var key = this.GetKey(date);
  return this.ContainsKey(key);
 },
 ContainsKey: function(key) {
  return !!this.dates[key];
 },
 Add: function(date) {
  var key = this.GetKey(date);
  if(!this.ContainsKey(key)) {
   this.dates[key] = ASPxClientCalendar.CloneDate(date);
   this.count++;
  }
 },
 AddArray: function(dates) {
  for(var i = 0; i < dates.length; i++)
   this.Add(dates[i]);
 },
 AddRange: function(start, end)  {
  if(end < start) {
   this.AddRange(end, start);
   return;
  }
  var count = ASPxClientCalendar.GetDaysInRange(start, end);
  var date = ASPxClientCalendar.CloneDate(start);
  for(var i = 0; i < count; i++) {
   this.Add(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  }
 },
 AddWeek: function(startDate) {
  this.AddRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
 },
 Remove: function(date) {
  var key = this.GetKey(date);
  if(this.ContainsKey(key)) {
   delete this.dates[key];
   this.count--;
  }
 },
 RemoveArray: function(dates) {
  for(var i = 0; i < dates.length; i++)
   this.Remove(dates[i]);
 },
 RemoveRange: function(start, end) {
  if(end < start) {
   this.RemoveRange(end, start);
   return;
  }
  var count = ASPxClientCalendar.GetDaysInRange(start, end);
  var date = ASPxClientCalendar.CloneDate(start);
  for(var i = 0; i < count; i++) {
   this.Remove(date);
   date = ASPxClientCalendar.AddDays(date, 1);
  }
 },
 RemoveWeek: function(startDate) {
  this.RemoveRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
 },
 GetDates: function() {
  var result = [ ];
  for(var key in this.dates) {
   var item = this.dates[key];
   if(item.constructor != Date) continue;
   result.push(ASPxClientCalendar.CloneDate(item));
  }
  return result;
 },
 GetFirstDate: function() {
  if(this.count == 0)
   return null;
  for(var key in this.dates) {
   var item = this.dates[key];
   if(item.constructor != Date) continue;
   return ASPxClientCalendar.CloneDate(item);
  }
  return null;
 },
 GetKey: function(date) {
  return _aspxGetInvariantDateString(date);
 }
});
ASPxClientCalendarSelectionTransaction = _aspxCreateClass(null, {
 constructor: function(calendar) {
  this.calendar = calendar;
  this.isActive = false;
  this.backup = new ASPxClientCalendarSelection();
  this.selection = new ASPxClientCalendarSelection;
 },
 Start: function() {
  if(this.isActive)
   this.Rollback();
  this.backup.Assign(this.calendar.selection);
  this.selection.Clear();
  this.isActive = true;
  __aspxActiveCalendar = this.calendar;
 },
 Commit: function() {
  this.calendar.ApplySelectionByDiff(this.selection, true);
  this.Reset();
 },
 Rollback: function() {
  this.calendar.ApplySelectionByDiff(this.backup);
  this.Reset();
 },
 Reset: function() {
  this.backup.Clear();
  this.selection.Clear();
  this.isActive = false;
  __aspxActiveCalendar = null;
 },
 CopyFromBackup: function() {
  this.selection.Assign(this.backup);
 },
 IsChanged: function() {
  return !this.backup.Equals(this.selection);
 }
});
ASPxClientCalendarView = _aspxCreateClass(null, {
 constructor: function(calendar, row, column) {
  this.row = row;
  this.column = column;
  this.calendar = calendar;
  var temp = column + row;
  this.isLowBoundary = temp == 0;
  this.isHighBoundary = temp == calendar.rows + calendar.columns - 2;
  this.visibleDate = null;
  this.startDate = null;
  this.dayFunctions = {};
  this.dayFunctionsWithWeekSelection = {};
 },
 Initialize: function() {
  this.dayCellCache = {};
  this.dayStyleCache = {};
  this.UpdateDate();
  this.UpdateSelection(this.calendar.selection.GetDates(), true);
  this.MakeDisabledStateItems();
 },
 AttachMouseEvents: function(eventMethod, styleMethod) {
  var index;
  var cell;
  if (this.calendar.showDayHeaders) {
   var headCells = this.GetMonthTable().rows[0].cells;
   var dayNameIndex = 0;
   if (this.calendar.showWeekNumbers) {
    dayNameIndex++;
    cell = headCells[0];
    if (this.calendar.enableMulti) {
     eventMethod(cell, "click", ASPxClientCalendar.AnonymousHandlers.SelectMonth(this.calendar.name, this.row, this.column));
     styleMethod(cell, "cursor", _aspxGetPointerCursor());
    }
    this.AttachCancelSelect(eventMethod, cell);
   }
   for (var j = 0; j < 7; j++)
    this.AttachCancelSelect(eventMethod, headCells[dayNameIndex++]);
  }
  for (var i = 0; i < __aspxCalendarWeekCount; i++) {
   if (this.calendar.showWeekNumbers) {
    cell = this.GetWeekNumberCell(i);
    if (this.calendar.enableMulti)
     this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(7 * i, true));
    else
     this.AttachCancelSelect(eventMethod, cell);
   }
   var date;
   for (var j = 0; j < 7; j++) {
    index = i * 7 + j;
    cell = this.GetDayCell(index);
    date = this.GetDateByIndex(index);
    if(!this.calendar.enableMulti && this.IsDateVisible(date) && this.calendar.IsDateInRange(date) && !this.calendar.IsDateDisabled(date)) {
     if (!cell.style.cursor || cell.style.cursor == _aspxGetPointerCursor())
      styleMethod(cell, "cursor", _aspxGetPointerCursor());
    }
    this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(index, false));
   }
  }
 },
 AttachDayMouseEvents: function(method, cell, handler) {
  var types = ["down", "up", "over"];
  for (var i = 0; i < types.length; i++)
   method(cell, "mouse" + types[i], handler);
 },
 AttachCancelSelect: function(method, element) {
  method(element, "mouseup", aspxCalCancelSelect);
 },
 GetDayMouseEventFunction: function(index, selectWeeks) {
  var hash = selectWeeks ? this.dayFunctionsWithWeekSelection : this.dayFunctions;
  if (!hash[index])
   hash[index] = ASPxClientCalendar.AnonymousHandlers.DayMouseEvent(this.calendar.name, this.row, this.column, index, selectWeeks);
  return hash[index];
 },
 UpdateDate: function() {
  this.visibleDate = ASPxClientCalendar.AddMonths(this.calendar.visibleDate,
   this.row * this.calendar.columns + this.column);
  var date = ASPxClientCalendar.CloneDate(this.visibleDate);
  date.setDate(1);
  var offset = date.getDay() - this.calendar.firstDayOfWeek;
  if (offset < 0)
   offset += 7;
  this.startDate = ASPxClientCalendar.AddDays(date, -offset);
 },
 GetDateByIndex: function(index) {
  return ASPxClientCalendar.AddDays(this.startDate, index);
 },
 GetIndexByDate: function(date) {
  return ASPxClientCalendar.GetDaysInRange(this.startDate, date) - 1;
 },
 IsDateOtherMonth: function(date) {
  if (date == null)
   return false;
  return date.getMonth() != this.visibleDate.getMonth() ||
   date.getFullYear() != this.visibleDate.getFullYear();
 },
 GetDayCell: function(index) {
  if(_aspxIsExistsElement(this.dayCellCache[index]))
   return this.dayCellCache[index];
  var mt = this.GetMonthTable();
  var colIndex = index % 7;
  var rowIndex = (index - colIndex) / 7;
  if (this.calendar.showDayHeaders)
   rowIndex++;
  if (this.calendar.showWeekNumbers)
   colIndex++;
  var cell = mt.rows[rowIndex].cells[colIndex];
  this.dayCellCache[index] = cell;
  return cell;
 },
 GetMonthTable: function() {
  return this.GetCachedElementById("mt");
 },
 GetMonthCell: function() {
  return this.GetCachedElementById("mc");
 },
 GetWeekNumberCell: function(index) {
  if (this.calendar.showDayHeaders)
   index++;
  return this.GetMonthTable().rows[index].cells[0];
 },
 GetPrevYearCell: function() {
  return this.GetCachedElementById("PYC");
 },
 GetPrevMonthCell: function() {
  return this.GetCachedElementById("PMC");
 },
 GetTitleCell: function() {
  return this.GetCachedElementById("TC");
 },
 GetTitleElement: function() {
  return this.GetCachedElementById("T");
 },
 GetNextMonthCell: function() {
  return this.GetCachedElementById("NMC");
 },
 GetNextYearCell: function() {
  return this.GetCachedElementById("NYC");
 },
 Update: function() {
  this.dayStyleCache = {};
  this.UpdateDate();
  this.UpdateDays();
  this.UpdateTitle();
  this.UpdateSelection(this.calendar.selection.GetDates(), true);
 },
 UpdateDays: function() {
  var date = ASPxClientCalendar.CloneDate(this.startDate);
  var offset = this.calendar.firstDayOfWeek - 1;
  if (offset < 0)
   offset += 7;
  var weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
  var cell;
  for (var i = 0; i < __aspxCalendarWeekCount; i++) {
   if (this.calendar.showWeekNumbers)
    this.GetWeekNumberCell(i).innerHTML = (weekNumber < 10 ? "0" : "") + weekNumber.toString();
   for (var j = 0; j < 7; j++) {
    cell = this.GetDayCell(i * 7 + j);
    cell.innerHTML = this.IsDateVisible(date) ? date.getDate() : "&nbsp;";
    this.ApplyDayCellStyle(cell, date);
    date = ASPxClientCalendar.AddDays(date, 1);
   }
   if (++weekNumber > 52)
    weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
  }
 },
 UpdateTitle: function() {
  var el = this.GetTitleElement();
  if (!el) return;
  if (!this.titleFormatter) {
   this.titleFormatter = new ASPxDateFormatter();
   this.titleFormatter.SetFormatString(this.calendar.rtl ? "MMMM yyyy" : __aspxCultureInfo.yearMonth);
  }
  el.innerHTML = this.titleFormatter.Format(this.visibleDate);
 },
 UpdateSelection: function(dates, showSelection) {
  var index;
  var maxIndex = 7 * __aspxCalendarWeekCount - 1;
  for (var i = 0; i < dates.length; i++) {
   index = this.GetIndexByDate(dates[i]);
   if (index < 0 || index > maxIndex || !this.IsDateVisible(dates[i]))
    continue;
   this.ApplySelectionToCell(index, showSelection);
  }
 },
 ApplySelectionToCell: function(index, showSelection) {
  var cell = this.GetDayCell(index);
  if (showSelection) {
   var info;
   if (!this.dayStyleCache[index]) {
    var backup = new ASPxClientCalendarStyleInfo();
    backup.Import(cell);
    this.dayStyleCache[index] = backup;
    info = backup.Clone();
   } else
    info = this.dayStyleCache[index].Clone();
   this.calendar.ImportEtalonStyle(info, "DS");
  } else
   info = this.dayStyleCache[index];
  info.Apply(cell);
 },
 ApplyDayCellStyle: function(cell, date) {
  cell.style.cursor = "";
  var cal = this.calendar;
  var info = new ASPxClientCalendarStyleInfo();
  var needPointer = false;
  cal.ImportEtalonStyle(info, "D");
  if (this.IsDateVisible(date)) {
   if (cal.IsDateWeekend(date))
    cal.ImportEtalonStyle(info, "DW");
   if (this.IsDateOtherMonth(date))
    cal.ImportEtalonStyle(info, "DA");
   if(!cal.IsDateInRange(date))
    cal.ImportEtalonStyle(info, "DO");
   if(cal.IsDateDisabled(date)) {
    cal.ImportEtalonStyle(info, "DDD");
   }
   if (ASPxClientCalendar.AreDatesEqual(this.GetActualTodayDate(), date))
    cal.ImportEtalonStyle(info, "DT");
   if (!cal.clientEnabled)
    cal.ImportEtalonStyle(info, "DD");
   else if (!cal.enableMulti)
    needPointer = true;
  }
  info.Apply(cell);
  if (needPointer)
   _aspxSetPointerCursor(cell);
 },
 GetActualTodayDate: function() {
  if (!this.calendar || !this.calendar.actualTodayDate)
   return new Date();
  return this.calendar.actualTodayDate;
 },
 GetIDPostfix: function() {
  return "_" + this.row.toString() + "x" + this.column.toString();
 },
 GetCachedElementById: function(postfix) {
  if (this.calendar.IsMultiView())
   postfix += this.GetIDPostfix();
  return this.calendar.GetCachedElementById(this.calendar.name + "_" + postfix);
 },
 IsDateVisible: function(date) {
  var result = !this.calendar.IsMultiView() || !this.IsDateOtherMonth(date);
  if (!result) {
   result = result || this.isLowBoundary && date <= this.visibleDate ||
    this.isHighBoundary && date >= this.visibleDate;
  }
  return result;
 },
 MakeDisabledStateItems: function() {
  var cells = this.GetAuxCells();
  for (var i = 0; i < cells.length; i++)
   this.AddAuxDisabledStateItem(cells[i], this.GetAuxId(i));
  var element = this.GetTitleCell();
  if (element)
   this.AddHeaderDisabledStateItem(element);
  var element = this.GetTitleElement();
  if (element)
   this.AddHeaderDisabledStateItem(element);
 },
 AddAuxDisabledStateItem: function(element, id) {
  var cell = this.calendar.GetEtalonStyleCell("DD");
  element.id = id;
  aspxGetStateController().AddDisabledItem(id, cell.className, cell.style.cssText, null, null, null);
 },
 AddHeaderDisabledStateItem: function(element) {
  var cell = this.calendar.GetEtalonStyleCell("DD");
  aspxGetStateController().AddDisabledItem(element.id, cell.className, cell.style.cssText, null, null, null);
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetPrevYearCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  var element = this.GetPrevMonthCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  var element = this.GetTitleElement();
  if (element) {
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
   this.ChangeTitleElementEnabledAttributes(element, _aspxChangeStyleAttributesMethod(enabled));
  }
  var element = this.GetNextMonthCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  var element = this.GetNextYearCell();
  if (element)
   this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
  if (this.calendar.enabled && !this.calendar.readOnly)
   this.AttachMouseEvents(_aspxChangeEventsMethod(enabled), _aspxInitiallyChangeStyleAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled) {
  this.SetAuxCellsEnabled(enabled);
  this.SetHeaderCellsEnabled(enabled);
 },
 ChangeTitleElementEnabledAttributes: function(element, method) {
  method(element, "cursor");
 },
 ChangeButtonEnabledAttributes: function(element, method) {
  method(element, "onclick");
  method(element, "ondblclick");
 },
 SetAuxCellsEnabled: function(enabled) {
  var cells = this.GetAuxCells();
  for (var i = 0; i < cells.length; i++)
   aspxGetStateController().SetElementEnabled(cells[i], enabled);
 },
 SetHeaderCellsEnabled: function(enabled) {
  var element = this.GetPrevYearCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetPrevMonthCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetTitleCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetTitleElement();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetNextMonthCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
  var element = this.GetNextYearCell();
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 GetAuxCells: function() {
  if (this.auxCells == null) {
   this.auxCells = [];
   var table = this.GetMonthTable();
   for (var i = 0; i < table.rows.length; i++) {
    var row = table.rows[i];
    if (i == 0 && this.calendar.showDayHeaders) {
     for (var j = 0; j < row.cells.length; j++)
      this.auxCells.push(row.cells[j]);
    }
    if (i > 0 && this.calendar.showWeekNumbers)
     this.auxCells.push(row.cells[0]);
   }
  }
  return this.auxCells;
 },
 GetAuxId: function(index) {
  return this.calendar.name + "_AUX_" + this.row + "_" + this.column + "_" + index;
 }
});
ASPxClientCalendarFastNavigation = _aspxCreateClass(null, {
 constructor: function(calendar) {
  this.calendar = calendar;
  this.activeMonth = -1;
  this.activeYear = -1;
  this.startYear = -1;
  this.activeView = null;
  this.InitializeUI();
 },
 InitializeUI: function() {
  var item;
  var prefix = this.GetId();
  for(var m = 0; m < 12; m++) {
   item = this.GetMonthItem(m);
   if(!_aspxIsExistsElement(item))
    break;
   item.id = prefix + "_M" + m;
   _aspxAttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavMonthClick(this.calendar.name, m));
  }
  for(var i = 0; i < 10; i++) {
   item = this.GetYearItem(i);
   if(!_aspxIsExistsElement(item))
    break;
   item.id = prefix + "_Y" + i;
   _aspxAttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavYearClick(this.calendar.name, i));
  }
  _aspxAttachEventToElement(this.GetPopup().GetWindowElement(-1), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.calendar.name));
 },
 Show: function() {
  this.GetPopup().ShowAtElement(this.activeView.GetTitleElement());
 },
 Hide: function() {
  this.GetPopup().Hide();
 },
 SetMonth: function(month) {
  if(month != this.activeMonth) {
   var prevCell = this.GetMonthItem(this.activeMonth);
   var cell = this.GetMonthItem(month);
   if(_aspxIsExistsElement(prevCell))
    this.ApplyItemStyle(prevCell, false, "M");
   this.ApplyItemStyle(cell, true, "M");
   this.activeMonth = month;
  }
 },
 ShiftMonth: function(offset) {
  var month = (this.activeMonth + offset) % 12;
  month = (month < 0) ? month + 12 : month;
  this.SetMonth(month);
 },
 SetYear: function(year) {
  var startYear = Math.floor(year / 10) * 10;
  this.SetStartYear(startYear);
  this.SetYearIndex(year - startYear);
 },
 SetYearIndex: function(index) {
  var prevIndex = this.activeYear - this.startYear;
  if(index != prevIndex) {
   var prevCell = this.GetYearItem(prevIndex);
   if(_aspxIsExistsElement(prevCell))
    this.ApplyItemStyle(prevCell, false, "Y");
   var cell = this.GetYearItem(index);
   this.ApplyItemStyle(cell, true, "Y");
   this.activeYear = index + this.startYear;
  }
 },
 SetStartYear: function(year) {
  if(this.startYear == year) return;
  this.startYear = year;
  this.PrepareYearList();
 },
 ShiftYear: function(offset) {
  this.SetYear(this.activeYear + offset);
 },
 ShiftStartYear: function(offset) {
  this.SetStartYear(this.startYear + offset);
 },
 ApplyChanges: function() {
  this.GetPopup().Hide();
  var offset = ASPxClientCalendar.GetOffsetInMonths(this.calendar.visibleDate, new Date(this.activeYear, this.activeMonth, 1));
  offset -= this.activeView.row * this.calendar.columns + this.activeView.column;
  if(offset != 0) {
   var date = ASPxClientCalendar.AddMonths(this.calendar.visibleDate, offset);
   this.calendar.OnVisibleMonthChanged(date);
  }
  this.calendar.OnMainElementClick();
 },
 CancelChanges: function() {
  this.GetPopup().Hide();
  this.calendar.OnMainElementClick();
 },
 Prepare: function() {
  var date = this.activeView.visibleDate;
  this.activeYear = date.getFullYear();
  this.activeMonth = date.getMonth();
  this.startYear = ASPxClientCalendar.GetDecadeStartYear(this.activeYear);
  this.PrepareMonthList();
  this.PrepareYearList();
 },
 PrepareMonthList: function() {
  var item;
  for(var month = 0; month < 12; month++) {
   item = this.GetMonthItem(month);
   if(item == null)
    return;
   this.ApplyItemStyle(item, month == this.activeMonth, "M");
  }
 },
 PrepareYearList: function() {
  var year = this.startYear;
  var item;
  for(var index = 0; index < 10; index++) {
   item = this.GetYearItem(index);
   if(item == null)
    return;
   item.innerHTML = year;
   this.ApplyItemStyle(item, year == this.activeYear, "Y");
   year++;
  }
 },
 GetMonthItem: function(month) {
  var t = this.GetCachedElementById("m");
  if(!_aspxIsExistsElement(t))
   return null;
  var colIndex = month % 4;
  var rowIndex = (month - colIndex) / 4;
  return t.rows[rowIndex].cells[colIndex];
 },
 GetYearItem: function(index) {
  var t = this.GetCachedElementById("y");
  if(!_aspxIsExistsElement(t) || index < 0 || index > 9)
   return null;
  var colIndex = index % 5;
  var rowIndex = (index - colIndex) / 5;
  if(rowIndex == 0)
   colIndex++;
  return t.rows[rowIndex].cells[colIndex];
 },
 GetPopup: function() {
  return aspxGetControlCollection().Get(this.GetId());
 },
 ApplyItemStyle: function(item, isSelected, type) {
  var info = new ASPxClientCalendarStyleInfo();
  this.calendar.ImportEtalonStyle(info, "FN" + type);
  if(isSelected)
   this.calendar.ImportEtalonStyle(info, "FN" + type + "S");
  info.Apply(item);
 },
 GetCachedElementById: function(postfix) {
  return this.calendar.GetCachedElementById(this.GetId() + "_" + postfix);
 },
 GetId: function() {
  return this.calendar.name + "_FNP";
 },
 OnArrowUp: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(-5);
  else
   this.ShiftMonth(-4);
 },
 OnArrowDown: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(5);
  else
   this.ShiftMonth(4);
 },
 OnArrowLeft: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(-1);
  else
   this.ShiftMonth(-1);
 },
 OnArrowRight: function(evt) {
  if(!evt.shiftKey)
   this.ShiftYear(1);
  else
   this.ShiftMonth(1);
 },
 OnPageUp: function(evt) {
  this.ShiftYear(-10);
 },
 OnPageDown: function(evt) {
  this.ShiftYear(10);
 },
 OnEnter: function() {
  this.ApplyChanges();
 },
 OnEscape: function() {
  this.CancelChanges();
 },
 OnMonthClick: function(month) {
  this.SetMonth(month);
 },
 OnYearClick: function(index) {
  this.SetYearIndex(index);
 },
 OnYearShuffle: function(offset) {
  this.ShiftStartYear(offset);
 },
 OnOkClick: function() {
  this.ApplyChanges();
 },
 OnCancelClick: function() {
  this.CancelChanges();
 }
});
ASPxClientCalendarStyleInfo = _aspxCreateClass(null, {
 constructor: function() {
  this.className = "";
  this.cssText = "";
 },
 Clone: function() {
  var clone = new ASPxClientCalendarStyleInfo();
  clone.className = this.className;
  clone.cssText = this.cssText;
  return clone;
 },
 Apply: function(element) {
  if(element.className != this.className)
   element.className = this.className;
  if(element._style != this.cssText) {
   element.style.cssText = this.cssText;
   element._style = this.cssText;
  }
 },
 Import: function(element) {
  if(element.className.length > 0) {
   if(this.className.length > 1)
    this.className += " ";
   this.className +=  element.className;
  }
  var cssText = element.style.cssText;
  if(cssText.length > 0) {
   var pos = cssText.length - 1;
   while(pos > -1 && cssText.charAt(pos) == " ")
    --pos;
   if(cssText.charAt(pos) != ";")
    cssText += ";";
   this.cssText += cssText;
  }
 }
});
ASPxClientCalendarSelectionEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, selection){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.selection = selection;
 }
});
function aspxCalShiftMonth(name, monthOffset) {
 if(monthOffset != 0) {
  var edit = aspxGetControlCollection().Get(name);
  if(edit != null) {
   edit.OnShiftMonth(monthOffset);
  }
 }
}
function aspxCalTodayClick(name) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnTodayClick();
}
function aspxCalClearClick(name) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnClearClick();
}
function aspxCalTitleClick(name, row, column) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.OnTitleClick(row, column);
}
function aspxCalFNYShuffle(name, offset) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null)
  edit.fastNavigation.OnYearShuffle(offset);
}
function aspxCalFNBClick(name, action) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit != null) {
  switch(action) {
   case "ok":
    edit.fastNavigation.OnOkClick();
    break;
   case "cancel":
    edit.fastNavigation.OnCancelClick();
    break;
  }
 }
}
function aspxCalDocMouseUp(evt) {
 var target = _aspxGetEventSource(evt);
 if(__aspxActiveCalendar != null && _aspxIsExistsElement(target)) {
  __aspxActiveCalendar.forceMouseDown = false;
  if(__aspxActiveCalendar.isMouseDown) {
   for(var key in __aspxActiveCalendar.views) {
    var view = __aspxActiveCalendar.views[key];
    if(view.constructor != ASPxClientCalendarView) continue;
    var monthCell = view.GetMonthCell();
    var parent = target.parentNode;
    while(_aspxIsExistsElement(parent)) {
     if(parent == monthCell)
      return;
     parent = parent.parentNode;
    }
   }
   __aspxActiveCalendar.OnSelectionCancelled();
  }
  __aspxActiveCalendar = null;
 }
}
function aspxCalCancelSelect() {
 if(__aspxActiveCalendar != null) {
  __aspxActiveCalendar.forceMouseDown = false;
  __aspxActiveCalendar.OnSelectionCancelled();
 }
}
var __aspxLBSerializingSeparator = "|";
var __aspxLBSerializingSeparatorLength = __aspxLBSerializingSeparator.length;
var __aspxLoadRangeItemsCallbackPrefix = "LBCRI";
var __aspxLBIPostfixes = ['C', 'I', 'T'];
var __aspxLBIIdSuffix = "LBI";
var __aspxLBSIIdSuffix = __aspxLBIIdSuffix + "-1";
var __aspxLBTSIdSuffix = "_TS";
var __aspxLBBSIdSuffix = "_BS";
var __aspxLBHeaderDivIdSuffix = "_H";
var __aspxLTableIdSuffix = "_LBT";
var __aspxLEVISuffix = "_VI";
var __aspxLBDSuffix = "_D";
var __aspxEmptyItemsRange = "0:-1";
var __aspxNbsp = "&nbsp;";
var __aspxNameSeparator = "_";
var __aspxNbspChar = String.fromCharCode(160);
var ListBoxSelectionMode = { Single : 0, Multiple : 1, CheckColumn : 2 };
ASPxClientListEdit = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.SelectedIndexChanged = new ASPxClientEvent();
  this.savedSelectedIndex = -1;
 },
 FindInputElement: function() {
  return this.FindStateInputElement();
 },
 FindStateInputElement: function(){
  return document.getElementById(this.name + __aspxLEVISuffix);
 },
 GetItem: function(index) {
  throw "Not implemented";
 },
 GetItemValue: function(index) {
  throw "Not implemented";
 },
 GetValue: function(){
  return this.GetItemValue(this.GetSelectedIndex());
 },
 GetSelectedIndexInternal: function(){
  return this.savedSelectedIndex;
 },
 SetSelectedIndexInternal: function(index){
  this.savedSelectedIndex = index;
 },
 FindItemIndexByValue: function(value){
  for(var i = 0; i < this.GetItemCount(); i++){
   if(this.GetItemValue(i) == value)
    return i;
  }
  return -1;
 },
 RaiseItemClick: function() {
  var processOnServer = this.autoPostBack;
  if(!this.ItemClick.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseItemDoubleClick: function() {
  var processOnServer = this.autoPostBack;
  if(!this.ItemDoubleClick.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ItemDoubleClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseValueChangedAdditionalEvents(processOnServer);
  return processOnServer;
 },
 RaiseValueChangedAdditionalEvents: function(processOnServer){
  return this.RaiseSelectedIndexChanged(processOnServer);
 },
 RaiseSelectedIndexChanged: function (processOnServer) {
  this.RaiseValidationInternal();
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 UpdateHiddenInputs: function(){
  var element = this.FindStateInputElement();
  if(_aspxIsExistsElement(element)) {
   var value = this.GetValue();
   if (value == null)
    value = "";
   element.value = value;
  }
 },
 GetSelectedItem: function(){
  var index = this.GetSelectedIndexInternal();
  return this.GetItem(index);
 },
 GetSelectedIndex: function(){
  return this.GetSelectedIndexInternal();
 },
 SetSelectedItem: function(item){
  var index = (item != null) ? item.index : -1;
  this.SetSelectedIndex(index);
 },
 SetSelectedIndex: function(index){
  this.SelectIndexSilent(index);
 },
 SelectIndexSilent: function(index){
  throw "Not implemented";
 },
 OnValueChanged: function () {
  var processOnServer = this.RaiseValueChangedEvent() && this.GetIsValid();
  if (processOnServer)
   this.SendPostBackInternal("");
 }
});
ASPxClientListEditItem = _aspxCreateClass(null, {
 constructor: function(listEditBase, index, text, value, imageUrl){
  this.listEditBase = listEditBase;
  this.index = index;
  this.imageUrl = imageUrl;
  this.text = text;
  this.value = value;
 }
});
ASPxClientListBoxItem = _aspxCreateClass(ASPxClientListEditItem, {
 constructor: function(listEditBase, index, texts, value, imageUrl, selected){
  this.constructor.prototype.constructor.call(this, listEditBase, index, null, value, imageUrl);
  this.selected = selected ? selected : false;
  this.texts = texts;
  this.text = listEditBase.FormatText(texts);
 },
 GetColumnText: function(columnIndexOrFieldName){
  var columnIndex = -1;
  if(typeof(columnIndexOrFieldName) == "string")
   columnIndex = _aspxArrayIndexOf(this.listEditBase.columnFieldNames, columnIndexOrFieldName);
  else if(typeof(columnIndexOrFieldName) == "number")
   columnIndex = columnIndexOrFieldName;
  return this.GetColumnTextByIndex(columnIndex);
 },
 GetColumnTextByIndex: function(columnIndex){
  if(0 <= columnIndex && columnIndex < this.texts.length)
   return this.texts[columnIndex];
  else
   return null;
 }
});
_aspxListBoxScrollCallbackHelperBase = _aspxCreateClass(null, {
 constructor: function(listBoxControl) {
  this.listBoxControl = listBoxControl;
  this.itemsRange = "";
  this.defaultItemsRange = "0:" + (this.listBoxControl.callbackPageSize - 1);
 },
 OnScroll: function(){ },
 Reset: function(){ },
 IsScrolledToTopSpacer: function(){ return false; },
 IsScrolledToBottomSpacer: function(){ return false; },
 GetIsNeedToHideTopSpacer: function(){ return false; },
 GetIsNeedCallback: function(){ return false; },
 GetItemsRangeForLoad: function(){ return this.defaultItemsRange; },
 SetItemsRangeForLoad: function(){}
});
_aspxListBoxScrollCallbackHelper = _aspxCreateClass(_aspxListBoxScrollCallbackHelperBase, {
 constructor: function(listBoxControl) {
  this.constructor.prototype.constructor.call(this, listBoxControl);
  this.isScrolledToTopSpacer = false;
  this.isScrolledToBottomSpacer = false;
 },
 OnScroll: function(){
  this.DetectScrollDirection();
  this.ResetItemsRange();
  if(this.GetIsAnySpacerVisible())
   this.RecalcItemsRangeForLoad();
 },
 DetectScrollDirection: function(){
  var listBoxControl = this.listBoxControl;
  var divElement = listBoxControl.GetScrollDivElement();
  var listTable = listBoxControl.GetListTable();
  var scrollTop = divElement.scrollTop;
  var scrollBottom = divElement.scrollTop + divElement.clientHeight;
  var isTopSpacerVisible = listBoxControl.GetScrollSpacerVisibility(true);
  var isBottomSpacerVisible = listBoxControl.GetScrollSpacerVisibility(false);
  var topSpacerHeight = listBoxControl.GetScrollSpacerVisibility(true) ? parseInt(listBoxControl.GetScrollSpacerElement(true).clientHeight) : 0;
  this.isScrolledToTopSpacer = (scrollTop < topSpacerHeight) && isTopSpacerVisible;
  this.isScrolledToBottomSpacer = (scrollBottom >= topSpacerHeight + listTable.clientHeight) && isBottomSpacerVisible;
 },
 Reset: function(){
  this.ResetItemsRange();
  this.isScrolledToTopSpacer = false;
  this.isScrolledToBottomSpacer = false;
 },
 ResetItemsRange: function(){
  this.itemsRange = "";
 },
 RecalcItemsRangeForLoad: function(){
  if(this.listBoxControl.isCallbackMode) {
   if(this.isScrolledToTopSpacer || this.isScrolledToBottomSpacer)
    this.SetItemsRangeForLoad(this.isScrolledToTopSpacer);
  }
 },
 IsScrolledToTopSpacer: function(){
  return this.isScrolledToTopSpacer;
 },
 IsScrolledToBottomSpacer: function(){
  return this.isScrolledToBottomSpacer;
 },
 GetIsAnySpacerVisible: function(){
  return this.isScrolledToTopSpacer || this.isScrolledToBottomSpacer;
 },
 GetIsNeedCallback: function(){
  return !this.GetIsItemsRangeEmpty();
 },
 GetIsNeedToHideTopSpacer: function(){
  return this.isScrolledToTopSpacer && this.GetIsItemsRangeEmpty();
 },
 GetItemsRangeForLoad: function(){
  return (!this.GetIsItemsRangeEmpty() ? this.itemsRange : this.defaultItemsRange);
 },
 SetItemsRangeForLoad: function(isForTop){
  var listbox = this.listBoxControl;
  var beginIndex = isForTop ?
   listbox.serverIndexOfFirstItem - listbox.callbackPageSize :
   listbox.serverIndexOfFirstItem + listbox.GetItemCount();
  beginIndex = beginIndex < 0 ? 0 : beginIndex;
  var endIndex = isForTop ?
   listbox.serverIndexOfFirstItem - 1 :
   beginIndex + listbox.callbackPageSize - 1;
  this.itemsRange = beginIndex + ":" + endIndex;
  this.isScrolledToTopSpacer = isForTop;
  this.isScrolledToBottomSpacer = !isForTop;
 },
 GetIsItemsRangeEmpty: function(){
  return (this.itemsRange == "" || this.itemsRange == __aspxEmptyItemsRange);
 }
});
ASPxClientListBoxBase = _aspxCreateClass(ASPxClientListEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.APILockCount = 0;
  this.enableSyncOnPerfCallback = false;
  this.scrollOnKBNavigationLockCount = 0;
  this.isComboBoxList = false;
  this.isSyncEnabled = true;
  this.ownerName = "";
  this.selectionEventsLockCount = 0;
  this.syncLockCount = 0;
  this.encodeHtml = true;
  this.serializingHelper = null;
  this.deletedItems = [];
  this.insertedItems = [];
  this.itemsValue = [];
  this.ItemDoubleClick = new ASPxClientEvent();
  this.ItemClick = new ASPxClientEvent();
 },
 InlineInitialize: function () {
  ASPxClientListEdit.prototype.InlineInitialize.call(this);
  for (var i = 0; i < this.itemsValue.length; i++)
   this.itemsValue[i] = this.GetDecodeValue(this.itemsValue[i]);
 },
 LockScrollOnKBNavigation: function(){
  this.scrollOnKBNavigationLockCount++;
 },
 UnlockScrollOnKBNavigation: function(){
  this.scrollOnKBNavigationLockCount--;
 },
 IsScrollOnKBNavigationLocked: function() {
  return this.scrollOnKBNavigationLockCount > 0;
 },
 LockSelectionEvents: function(){
  this.selectionEventsLockCount++;
 },
 UnlockSelectionEvents: function(){
  this.selectionEventsLockCount--;
 },
 IsSelectionEventsLocked: function(){
  return this.selectionEventsLockCount > 0;
 },
 LockSynchronizationOnInternalCallback: function(){
  if(!this.enableSyncOnPerfCallback)
   this.LockSynchronization();
 },
 UnlockSynchronizationOnInternalCallback: function (){
  if(!this.enableSyncOnPerfCallback)
   this.UnlockSynchronization();
 },
 GetItemCount: function(){
  return 0;
 },
 GetItemValue: function(index){
  if(0 <= index && index < this.GetItemCount())
   return this.PrepareItemValue(this.itemsValue[index]);
  return null;
 },
 GetItemTexts: function(item) {
  return item.text;
 },
 PrepareItemValue: function(value) {
  return (typeof(value) == "string" && value == "" && this.convertEmptyStringToNull) ? null : value;
 },
 LoadItemsFromCallback: function(isToTop, itemStrings){
 },
 SetValue: function(value){
  var index = this.FindItemIndexByValue(value);
  this.SelectIndexSilentAndMakeVisible(index);
 },
 FindItemIndexByText: function(text){
  for(var i = 0; i < this.GetItemCount(); i ++){
   if(this.GetItem(i).text == text)
    return i;
  }
  return -1;
 },
 SelectIndex: function (index){
  if(this.SelectIndexSilentAndMakeVisible(index, false)){
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
 },
 SelectIndexSilentAndMakeVisible: function(index){
  var selectionChanged = this.SelectIndexSilent(index);
  if(!this.IsScrollOnKBNavigationLocked())
   this.MakeItemVisible(index);
  return selectionChanged;
 },
 FormatText: function (texts) {
  return texts;
 },
 MakeItemVisible: function(index){
 },
 InitOnContainerMadeVisible: function(){
 },
 AddItem: function(texts, value, imageUrl){
  var index = this.GetItemCount();
  this.InsertItemInternal(index, texts, value, imageUrl);
  return index;
 },
 InsertItem: function(index, texts, value, imageUrl){
  this.InsertItemInternal(index, texts, value, imageUrl);
 },
 InsertItemInternal: function(index, text, value, imageUrl){
 },
 BeginUpdate: function(){
  this.APILockCount ++;
 },
 EndUpdate: function(){
  this.APILockCount --;
  this.Synchronize();
 },
 ClearItems: function(){
  this.BeginUpdate();
  this.UpdateArraysItemsCleared();
  this.ClearItemsCore();
  this.EndUpdate();
 },
 ClearItemsCore: function(){
 },
 ClearItemsForPerformCallback: function(){
  this.itemsValue = [];
  this.ClearItemsCore();
 },
 RemoveItem: function(index){
 },
 FindItemByText: function(text){
  var index = this.FindItemIndexByText(text);
  return this.GetItem(index);
 },
 FindItemByValue: function(value){
  var index = this.FindItemIndexByValue(value);
  return this.GetItem(index);
 },
 PerformCallback: function(arg) {
 },
 GetCallbackArguments: function(){
  var args = this.GetCustomCallbackArg();
  args += this.GetLoadItemsRangeCallbackArg();
  return args;
 },
 GetLoadItemsRangeCallbackArg: function(){
  return this.FormatCallbackArg(__aspxLoadRangeItemsCallbackPrefix, this.GetItemsRangeForLoad());
 },
 FormatCallbackArg: function(prefix, arg) {
  arg = arg.toString();
  return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
 },
 GetItemsRangeForLoad: function(){
  return __aspxEmptyItemsRange;
 },
 GetCallbackOwnerControl: function(){
  if(this.ownerName && !this.ownerControl)
   this.ownerControl = aspxGetControlCollection().Get(this.ownerName);
  return this.ownerControl;
 },
 GetCustomCallbackArg: function(){
  return this.GetSyncHiddenInput("CustomCallback").value;
 },
 SetCustomCallbackArg: function(arg){
  this.GetSyncHiddenInput("CustomCallback").value = arg;
 },
 FormatAndSetCustomCallbackArg: function(arg){
  arg = _aspxIsExists(arg) ? arg.toString() : ""
  var formatArg = this.FormatCallbackArg("LECC", arg);
  this.SetCustomCallbackArg(formatArg);
 },
 SendCallback: function(){
 },
 LockSynchronization: function(){
  this.syncLockCount++;
 },
 UnlockSynchronization: function(){
  this.syncLockCount--;
 },
 IsSyncLocked: function(){
  return this.syncLockCount > 0;
 },
 IsSyncEnabled: function(){
  return this.isSyncEnabled && !this.IsSyncLocked();
 },
 RegisterInsertedItem: function(index, text, value, imageUrl){
  if(this.IsSyncEnabled()){
   this.RefreshSynchroArraysIndex(index, true);
   var item = this.CreateItem(index, text, value, imageUrl);
   this.insertedItems.push(item);
   this.Synchronize();
  }
 },
 CreateItem: function(index, text, value, imageUrl, selected){
  return new ASPxClientListBoxItem(this, index, text, value, imageUrl, selected);
 },
 UpdateSyncArraysItemDeleted: function(item, isValueRemovingRequired){
  if(isValueRemovingRequired)
   _aspxArrayRemoveAt(this.itemsValue, item.index);
  if(this.IsSyncEnabled()){
   var index = this.FindItemInArray(this.insertedItems, item);
   if(index == -1){
    this.RefreshSynchroArraysIndex(item.index, false);
    this.deletedItems.push(item);
   } else {
    this.RefreshSynchroArraysIndex(item.index, false);
    _aspxArrayRemoveAt(this.insertedItems, index);
   }
   this.Synchronize();
  }
 },
 UpdateArraysItemsCleared: function(){
  if(this.IsSyncEnabled()){
   for(var i = this.GetItemCount() - 1; i >= 0; i --)
    this.UpdateSyncArraysItemDeleted(this.GetItem(i), false);
  }
  this.itemsValue = [];
 },
 RefreshSynchroArraysIndex: function(startIndex, isIncrease){
  this.RefreshSynchroArrayIndexIndex(this.deletedItems, startIndex, isIncrease);
  this.RefreshSynchroArrayIndexIndex(this.insertedItems, startIndex, isIncrease);
 },
 RefreshSynchroArrayIndexIndex: function(array, startIndex, isIncrease){
    var delta = isIncrease ? 1 : -1;
    for(var i = 0; i < array.length; i ++){
   if(array[i].index >= startIndex)
    array[i].index += delta;
  }
 },
 FindItemInArray: function(array, item){
  for(var i = array.length - 1; i >= 0; i--){
   var currentItem = array[i];
   if ((!this.encodeHtml || currentItem.text == item.text) && currentItem.value == item.value &&
    currentItem.imageUrl == item.imageUrl)
    break;
  }
  return i;
 },
 GetSyncHiddenInput: function(syncType){
  return _aspxGetElementById(this.name + syncType);
 },
 Synchronize: function(){
  if(this.APILockCount == 0){
   if(this.IsSyncEnabled()){
    this.SynchronizeItems(this.deletedItems, "DeletedItems");
    this.SynchronizeItems(this.insertedItems, "InsertedItems");
   }
   this.CorrectSizeByTimer();
  }
 },
 CorrectSizeByTimer: function(){
 },
 SynchronizeItems: function(items, syncType){
  var inputElement = this.GetSyncHiddenInput(syncType);
  if(!_aspxIsExistsElement(inputElement))
   return;
  inputElement.value = _aspxEncodeHtml(this.SerializeItems(items));
 },
 GetSerializingHelper: function(){
  if(this.serializingHelper == null)
   this.serializingHelper = this.CreateSerializingHelper();
  return this.serializingHelper;
 },
 CreateSerializingHelper: function(){
  return new _aspxListBoxBaseItemsSerializingHelper(this);
 },
 SerializeItems: function(items){
  var serialiser = this.GetSerializingHelper();
  return serialiser.SerializeItems(items);
 },
 DeserializeItems: function(serializedItems){
  var serialiser = this.GetSerializingHelper();
  return serialiser.DeserializeItems(serializedItems);
 }
});
_aspxListBoxBaseItemsSerializingHelper = _aspxCreateClass(null, {
 constructor: function(listBoxControl) {
  this.listBoxControl = listBoxControl;
  this.startPos = 0;
 },
 SerializeItems: function(items){
  var sb = [ ];
  for(var i = 0; i < items.length; i++)
   this.SerializeItem(sb, items[i]);
  return sb.join("");
 },
 SerializeItem: function(sb, item) {
  if(!item)
   return;
  this.SerializeAtomValue(sb, item.index);
  this.SerializeAtomValue(sb, item.value);
  this.SerializeAtomValue(sb, item.imageUrl);
  var texts = this.listBoxControl.GetItemTexts(item);
  if(typeof(texts) == "string")
   this.SerializeAtomValue(sb, texts);
  else {
   for(var i = 0; i < texts.length; i++)
    this.SerializeAtomValue(sb, texts[i]);
  }
 },
 SerializeAtomValue: function(sb, value) {
  var valueStr = _aspxIsExists(value) ? value.toString() : "";
  sb.push(valueStr.length);
  sb.push('|');
  sb.push(valueStr);
 },
 DeserializeItems: function(serializedItems){
  var deserializedItems = [];
  var evalItems = _aspxEvalJSON(serializedItems, this.listBoxControl.name);
  if(evalItems.length > 0) {
   var textsCount = this.listBoxControl.isNative ? 1 : this.listBoxControl.GetItemTextCellCount();
   var itemLength = (this.listBoxControl.imageCellExists ? 1 : 0) + 1 + textsCount;
   var index = 0, selected, value, texts, imageUrl, item;
   for (var i = 0; i < evalItems.length; i += itemLength, index ++) {
    selected = typeof (evalItems[i]) == "object";
    value = selected ? evalItems[i][0] : evalItems[i];
    texts = textsCount > 0 ? evalItems.slice(i + 1, i + 1 + textsCount) : evalItems[i + 1];
    imageUrl = this.listBoxControl.imageCellExists ? evalItems[i + itemLength - 1] : "";
    item = this.listBoxControl.CreateItem(index, texts, value, imageUrl, selected);
    deserializedItems.push(item);
   }
   return deserializedItems;
  }
 },
 ParseItemIndex: function(serializedItem){
  return parseInt(this.ParseString(serializedItem));
 },
 ParseItemValue: function(serializedItem){
  return this.ParseString(serializedItem);
 },
 ParseString: function(str){
  var indexOfSeparator = str.indexOf(__aspxLBSerializingSeparator, this.startPos);
  var strLength = parseInt(str.substring(this.startPos, indexOfSeparator));
  var strStartPos = indexOfSeparator + __aspxLBSerializingSeparatorLength;
  this.startPos = strStartPos + strLength;
  return str.substring(strStartPos, strStartPos + strLength);
 },
 ParseTexts: function(serializedItems){
  return this.ParseString(serializedItems);
 },
 DeserializeValues: function(serializedValues){
  var deserializedValues = [];
  this.startPos = 0;
  while(this.startPos < serializedValues.length){
   deserializedValues.push(this.ParseItemValue(serializedValues));
  }
  return deserializedValues;
 }
});
_aspxListBoxItemsSerializingHelper = _aspxCreateClass(_aspxListBoxBaseItemsSerializingHelper, {
 constructor: function(listBoxControl) {
  this.constructor.prototype.constructor.call(this, listBoxControl);
 },
 ParseTexts: function(serializedItems){
  var textColumnCount = this.listBoxControl.GetItemTextCellCount();
  return (textColumnCount > 1) ? this.DeserializeItemTexts(serializedItems, textColumnCount)
   : this.constructor.prototype.ParseTexts.call(this, serializedItems);
 },
 DeserializeItemTexts: function(serializedItem, textColumnCount){
  var text = "";
  var texts = [];
  for(var i = 0; i < textColumnCount; i++)
   texts.push(this.ParseString(serializedItem));
  return texts;
 }
});
_aspxListBoxSingleSelectionHelper = _aspxCreateClass(null, {
 constructor: function(listBoxControl) {
  this.listBoxControl = listBoxControl;
  this.savedSelectedIndex = -1;
  this.updateHiddenInputsLockCount = 0;
  this.cachedSelectionChangedArgs = [];
 },
 ClearSelection: function(){
  this.SetSelectedIndexCore(-1);
  this.OnSelectionCleared();
 },
 OnSelectionCleared: function(){
  this.cachedSelectionChangedArgs = [];
 },
 GetSelectedIndexInternal: function(){
  return this.savedSelectedIndex;
 },
 SetSelectedIndexInternal: function(index){
  this.savedSelectedIndex = index;
 },
 SetSelectedIndexCore: function(index){
  if(index != this.savedSelectedIndex && -1 <= index && index < this.GetItemCount()){
   this.BeginSelectionUpdate();
   this.SetSelectedIndexInternal(index);
   this.EndSelectionUpdate();
   return true;
  }
  return false;
 },
 GetSelectedIndex: function(){
  return this.GetSelectedIndexInternal();
 },
 SetSelectedIndex: function(index){
  this.ChangeSelectedItem(index);
  this.SetSelectedIndexCore(index);
  this.OnItemSelectionChanged(index, true);
 },
 GetSelectedIndices: function(){
  var selectedIndex = this.GetSelectedIndexInternal();
  return selectedIndex != -1 ? [selectedIndex] : [];
 },
 GetSelectedValues: function(){
  var selectedValue =  this.listBoxControl.GetValue();
  return selectedValue != null ? [selectedValue] : [];
 },
 GetSelectedItems: function(){
  var selectedItem = this.listBoxControl.GetSelectedItem();
  return selectedItem != null? [selectedItem] : [];
 },
 SelectIndices: function(indices){},
 SelectItems: function(items){},
 SelectValues: function(values){},
 UnselectIndices: function (selected) { this.SetSelectedIndex(-1); },
 UnselectItems: function(items){},
 UnselectValues: function(values){},
 GetIsItemSelected: function(index){ return index == this.GetSelectedIndexInternal(); },
 ResetSelectionCollectionsCache: function(){ },
 OnItemClick: function(index, evt){
  var selected = true;
  this.BeginSelectionUpdate();
  this.ChangeSelectedItem(index);
  var selectedIndexChanged = this.SetSelectedIndexCore(index);
  this.EndSelectionUpdate();
  if(selectedIndexChanged)
   this.OnItemSelectionChanged(index, selected);
 },
 ChangeSelectedItem: function(newSelectedIndex){
  var selected = true;
  var oldSelectedIndex = this.GetSelectedIndexInternal();
  this.BeginSelectionUpdate();
  this.SetItemSelectionState(oldSelectedIndex, !selected);
  this.SetItemSelectionState(newSelectedIndex, selected);
  this.EndSelectionUpdate();
 },
 SetItemSelectionState: function(itemIndex, selected, controller){
  this.BeginSelectionUpdate();
  this.listBoxControl.SetItemSelectionAppearance(itemIndex, selected, controller);
  this.EndSelectionUpdate();
 },
 GetFocusedIndex: function(){
  return this.GetSelectedIndexInternal();
 },
 BeginSelectionUpdate: function(){
  this.updateHiddenInputsLockCount++;
 },
 EndSelectionUpdate: function(){
  this.updateHiddenInputsLockCount--;
  if(!this.IsUpdateInternalSelectionStateLocked()){
   this.listBoxControl.UpdateInternalState();
   this.FlushSelectionChanged();
  }
 },
 IsUpdateInternalSelectionStateLocked: function(){
  return this.updateHiddenInputsLockCount > 0;
 },
 GetItemCount: function(){
  return this.listBoxControl.GetItemCount();
 },
 OnItemSelectionChanged: function(index, selected){
  if(this.IsUpdateInternalSelectionStateLocked()){
   var a = {Index: index, Selected: selected};
   this.cachedSelectionChangedArgs.push(a);
  }
  else
   this.listBoxControl.OnItemSelectionChanged(index, selected);
 },
 FlushSelectionChanged: function(){
  if(this.IsUpdateInternalSelectionStateLocked())
   return;
  for(var i = 0; i < this.cachedSelectionChangedArgs.length; i++)
   this.listBoxControl.OnItemSelectionChanged(this.cachedSelectionChangedArgs[i].Index, this.cachedSelectionChangedArgs[i].Selected);
  this.cachedSelectionChangedArgs = [];
 },
 OnItemInserted: function(index){
  if(index <= this.savedSelectedIndex && this.savedSelectedIndex != -1)
   this.SetSelectedIndexInternal(this.savedSelectedIndex + 1);
 },
 OnItemRemoved: function(index){
  var selectedIndex = this.GetSelectedIndex();
  if(index < this.savedSelectedIndex)
   this.SetSelectedIndexInternal( this.savedSelectedIndex - 1);
  else if(index == this.savedSelectedIndex)
   this.SetSelectedIndexInternal(-1);
 },
 OnItemsCleared: function(){
  this.ClearSelection();
 }
});
_aspxListBoxMultiSelectionHelper = _aspxCreateClass(_aspxListBoxSingleSelectionHelper, {
 constructor: function(listBoxControl) {
  this.constructor.prototype.constructor.call(this, listBoxControl);
  this.selectedValuesCache = [];
  this.selectedItemsCache = [];
  this.savedSelectedIndices = [];
  this.selectedIndicesSortingRequired = false;
  this.focusedIndex = -1;
  this.lastIndexFocusedWithoutShift = -1;
 },
 SetSelectedIndex: function(index){
  this.SingleIndexSelection(index);
 },
 ResetSelectionCollectionsCache: function(){
  this.selectedIndicesSortingRequired = true;
  this.selectedItemsCache = [];
  this.selectedValuesCache = [];
 },
 GetSelectedIndices: function(){
  return this.GetSortedSelectedIndices().slice();
 },
 GetSortedSelectedIndices: function() {
  if(this.savedSelectedIndices.length > 1 && this.selectedIndicesSortingRequired)
   this.SortSelectedIndices();
  return this.savedSelectedIndices;
 },
 GetSelectedValues: function(){
  if(this.savedSelectedIndices.length == 0)
   return [];
  if(this.selectedValuesCache.length == 0)
   this.selectedValuesCache = this.GetSelectedValuesCore();
  return this.selectedValuesCache;
 },
 GetSelectedValuesCore: function(){
  var selectedValues = [];
  var selectedIndices = this.GetSortedSelectedIndices();
  if(selectedIndices.length == 0)
   return selectedValues;
  for(var i = 0; i < selectedIndices.length; i++)
   selectedValues.push(this.listBoxControl.GetItemValue([selectedIndices[i]]));
  return selectedValues;
 },
 GetSelectedItems: function(){
  if(this.savedSelectedIndices.length == 0)
   return [];
  if(this.selectedItemsCache.length == 0)
   this.selectedItemsCache = this.GetSelectedItemsCore();
  return this.selectedItemsCache;
 },
 GetSelectedItemsCore: function(){
  var selectedItems = [];
  for(var i = 0; i < this.savedSelectedIndices.length; i++)
   selectedItems.push(this.listBoxControl.GetItem(this.savedSelectedIndices[i]));
  return selectedItems;
 },
 SetIndicesSelectionState: function(indices, selected){
  this.BeginSelectionUpdate();
  var controller = typeof(aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
  var itemCount = this.listBoxControl.GetItemCount();
  if(indices){
   for(var i = 0; i < indices.length; i++){
    var index = indices[i];
    if(index >= 0 && index < itemCount)
     this.SetItemSelectionState(indices[i], selected, controller);
   }
  } else
   this.SetAllItemsSelectionState(selected, controller);
  this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
  this.EndSelectionUpdate();
 },
 SetItemsSelectionState: function(items, selected){
  var indices = items ? this.ConvertItemsToIndices(items) : null;
  this.SetIndicesSelectionState(indices, selected);
 },
 SetValuesSelectionState: function(values, selected){
  var indices = values ? this.ConvertValuesToIndices(values)  : null;
  this.SetIndicesSelectionState(indices, selected);
 },
 ConvertValuesToIndices: function(values){
  var indices = [];
  for(var i = 0; i < values.length; i++)
   indices.push(this.listBoxControl.FindItemIndexByValue(values[i]));
  return indices;
 },
 ConvertItemsToIndices: function(items){
  var indices = [];
  for(var i = 0; i < items.length; i++)
   indices.push(items[i].index);
  return indices;
 },
 SelectIndices: function(indices){
  this.SetIndicesSelectionState(indices, true);
 },
 SelectItems: function(items){
  this.SetItemsSelectionState(items, true);
 },
 SelectValues: function(values){
  this.SetValuesSelectionState(values, true);
 },
 UnselectIndices: function(indices){
  this.SetIndicesSelectionState(indices, false);
 },
 UnselectItems: function(items){
  this.SetItemsSelectionState(items, false);
 },
 UnselectValues: function(values){
  this.SetValuesSelectionState(values, false);
 },
 GetIsItemSelected: function(index){
  return _aspxArrayBinarySearch(this.GetSortedSelectedIndices(), index) > -1;
 },
 OnItemClick: function(index, evt){
  this.BeginSelectionUpdate();
  var ctrlKey = evt.ctrlKey || evt.metaKey;
  var shift = evt.shiftKey;
  if(ctrlKey)
   this.AddSelectedIndex(index);
  else if(shift){
   var startIndex = index > this.lastIndexFocusedWithoutShift ? this.lastIndexFocusedWithoutShift + 1 : index;
   var endIndex = index > this.lastIndexFocusedWithoutShift ? index : this.lastIndexFocusedWithoutShift - 1;
   this.SelectRangeIndicesOnly(startIndex, endIndex);
   this.SetFocusedIndexInternal(index, true);
  }else
   this.SingleIndexSelection(index);
  this.EndSelectionUpdate();
 },
 OnItemCheckBoxClick: function(index, evt){
  this.BeginSelectionUpdate();
  this.AddSelectedIndex(index);
  this.EndSelectionUpdate();
 },
 AddSelectedIndex: function(index){
  this.SetFocusedIndexInternal(index, false);
  var indexInSelectedIndices = _aspxArrayIndexOf(this.savedSelectedIndices, index);
  var selectionOperation = indexInSelectedIndices == -1;
  this.SetItemSelectionState(index, selectionOperation);
  this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
 },
 SelectRangeIndicesOnly: function(startIndex, endIndex){
  this.BeginSelectionUpdate();
  var controller = typeof(aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
  var itemCount = this.GetItemCount();
  for(var i = 0; i < itemCount; i ++) {
   if(i == this.lastIndexFocusedWithoutShift)
    continue;
   this.SetItemSelectionState(i, i >= startIndex && i <= endIndex, controller);
  }
  this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
  this.EndSelectionUpdate();
 },
 SingleIndexSelection: function(index){
  this.SetFocusedIndexInternal(-1, false);
  this.SelectRangeIndicesOnly(index, index);
  this.SetFocusedIndexInternal(index, false);
 },
 SetAllItemsSelectionState: function(selected, controller){
  this.BeginSelectionUpdate();
  this.savedSelectedIndices = [ ];
  var itemCount = this.GetItemCount();
  for(var i = 0; i < itemCount; i ++) {
   this.SetItemSelectionStateCore(i, selected, controller);
   if(selected)
    this.PushSelectedIndex(i);
   this.OnItemSelectionChanged(i, selected);
  }
  this.ResetSelectionCollectionsCache();
  this.EndSelectionUpdate();
 },
 SetItemSelectionState: function(itemIndex, selected, controller){
  this.SetItemSelectionStateCore(itemIndex, selected, controller);
  this.ResetSelectionCollectionsCache();
  var indexInSelectionArray = _aspxArrayIndexOf(this.savedSelectedIndices, itemIndex);
  if(selected && indexInSelectionArray == -1){
   this.PushSelectedIndex(itemIndex);
   this.OnItemSelectionChanged(itemIndex, true);
  }
  if(!selected && indexInSelectionArray != -1){
   this.RemoveSelectedIndexAt(indexInSelectionArray);
   this.OnItemSelectionChanged(itemIndex, false);
  }
 },
 GetFirstSelectedIndex: function(){
  var selectedIndices = this.GetSelectedIndices();
  var selectedIndicesCount = selectedIndices.length;
  var firstSelectedIndex = -1;
  if(selectedIndicesCount > 0){
   firstSelectedIndex = selectedIndices[0];
   for(var i = 1; i < selectedIndices.length; i++){
    if(firstSelectedIndex > selectedIndices[i])
     firstSelectedIndex = selectedIndices[i];
   }
  }
  return firstSelectedIndex;
 },
 PushSelectedIndex: function(index){
  this.savedSelectedIndices.push(index);
 },
 RemoveSelectedIndex: function(index){
  _aspxArrayRemove(this.savedSelectedIndices, index);
 },
 RemoveSelectedIndexAt: function(indexInArray){
  _aspxArrayRemoveAt(this.savedSelectedIndices, indexInArray);
 },
 SortSelectedIndices: function(){
  _aspxArrayIntegerAscendingSort(this.savedSelectedIndices);
  this.selectedIndicesSortingRequired = false;
 },
 SetItemSelectionStateCore: function(itemIndex, selected, controller){
  _aspxListBoxSingleSelectionHelper.prototype.SetItemSelectionState.call(this, itemIndex, selected, controller);
 },
 GetFocusedIndex: function(){
  return this.focusedIndex;
 },
 SetFocusedIndexInternal: function(index, isShiftPressed){
  if(!isShiftPressed)
   this.lastIndexFocusedWithoutShift = index;
  this.focusedIndex = index;
 },
 OnItemInserted: function(index){
  this.ResetSelectionCollectionsCache();
  _aspxListBoxSingleSelectionHelper.prototype.OnItemInserted.call(this, index);
  if(this.focusedIndex >= index)
   this.focusedIndex ++;
  for(var i = 0; i < this.savedSelectedIndices.length; i++){
   if(this.savedSelectedIndices[i] >= index)
    this.savedSelectedIndices[i]++;
  }
 },
 OnItemRemoved: function(index){
  this.ResetSelectionCollectionsCache();
  _aspxListBoxSingleSelectionHelper.prototype.OnItemRemoved.call(this, index);
  if(this.focusedIndex == index)
   this.focusedIndex = -1;
  else if(this.focusedIndex > index)
   this.focusedIndex --;
  if(this.GetIsItemSelected(index))
   this.RemoveSelectedIndex(index);
  for(var i = 0; i < this.savedSelectedIndices.length; i++){
   if(this.savedSelectedIndices[i] > index)
    this.savedSelectedIndices[i]--;
  }
  if(this.GetSelectedIndex() == -1)
   this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
 },
 ClearSelection: function(){
  this.ResetSelectionCollectionsCache();
  _aspxArrayClear(this.savedSelectedIndices);
  this.OnSelectionCleared();
  this.SetSelectedIndexCore(-1);
 }
});
_aspxCheckBoxListMultiSelectionHelper = _aspxCreateClass(_aspxListBoxMultiSelectionHelper, {
 OnItemClick: function(index){
  this.BeginSelectionUpdate();
  this.AddSelectedIndex(index);
  this.EndSelectionUpdate();
 },
 GetFocusedItemIndex: function(){
  return this.lastIndexFocusedWithoutShift;
 }
});
_aspxListBoxCheckSelectionHelper = _aspxCreateClass(_aspxListBoxMultiSelectionHelper, {
 OnItemClick: function(index, evt){
  this.BeginSelectionUpdate();
  if(evt.shiftKey)
   _aspxListBoxMultiSelectionHelper.prototype.OnItemClick.call(this, index, evt);
  else
   this.AddSelectedIndex(index);
  this.EndSelectionUpdate();
 }
});
ASPxClientListBox = _aspxCreateClass(ASPxClientListBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.freeUniqIndex = -1;
  this.isHasFakeRow = false;
  this.headerDiv = null;
  this.headerTable = null;
  this.listTable = null;
  this.sampleItemFirstTextCell = null;
  this.width = "";
  this.hasSampleItem = false;
  this.hoverClasses = [""];
  this.hoverCssArray = [""];
  this.selectedClasses = [""];
  this.selectedCssArray = [""];
  this.disabledClasses = [""];
  this.disabledCssArray = [""];
  this.imageCellExists = false;
  this.scrollHandlerLockCount = 0;
  this.columnFieldNames = [];
  this.textFormatString = "";
  this.defaultImageUrl = "";
  this.selectionMode = 0;
  this.initSelectedIndices = [];
  this.itemHorizontalAlign = "";
  this.emptyTextRowCellIndices = null;
  this.allowMultipleCallbacks = false;
  this.isCallbackMode = false;
  this.callbackPageSize = -1;
  this.isTopSpacerVisible = false;
  this.isBottomSpacerVisible = false;
  this.serverIndexOfFirstItem = 0;
  this.scrollHelper = null;
  this.changeSelectAfterCallback = 0;
  this.ownerControl = null;
  this.SampleItem = null;
  this.scrollDivElement = null;
  this.scrollPageSize = 4;
  this.itemsValue = [];
  this.cachedValue = null;
  this.tempCache = new ASPxClientTemporaryCache();
  this.sizingConfig.adjustControl = true;
  this.disableScrolling = false;
  this.icbFocusedStyle = null;
  this.icbImageProperties = null;
  this.internalCheckBoxCollection = null;
  this.focusableCheckInput = null;
  this.nativeCheckOnFocusHandler = null;
 },
 Initialize: function() {
  this.LockScrollHandler();
  this.InitDXTextAttributes();
  this.InitScrollPos();
  if(__aspxWebKitTouchUI && !this.disableScrolling)
   ASPxClientTouchUI.MakeScrollable(this.GetScrollDivElement(), {showHorizontalScrollbar: false});
  this.CreateInternalCheckBoxCollection();
  this.InitSelection();
  this.AdjustControl();
  this.InitializeLoadOnDemand();
  this.UnlockScrollHandler();
  this.freeUniqIndex = this.GetItemCount();
  ASPxClientEdit.prototype.Initialize.call(this);
  if(__aspxFirefox)
   _aspxSetAttribute(this.GetScrollDivElement(), "tabIndex", "-1");
 },
 InitDXTextAttributes: function(){
  if(this.emptyTextRowCellIndices != null){
   var itemWithDXTextCount = this.emptyTextRowCellIndices.length;
   for(var i = 0; i < itemWithDXTextCount; i++){
    var itemIndex = this.emptyTextRowCellIndices[i][0];
    var cellIndices = this.emptyTextRowCellIndices[i][1];
    var itemRow = this.GetItemRow(itemIndex);
    for(var j = 0; j < cellIndices.length; j++){
     _aspxSetAttribute(itemRow.cells[cellIndices[j]], "DXText", "");
    }
   }
  }
 },
 InitSelection: function(){
  var valueFromLastTime = this.GetValueFromValueInput();
  if(this.MultiSelectionMode()){
   if(valueFromLastTime != ""){
    var serialiser = this.GetSerializingHelper();
    var selectedValuesFromLastTime = serialiser.DeserializeValues(valueFromLastTime);
    var selectedIdicesFromLastTime = [];
    for(var i = 0; i < selectedValuesFromLastTime.length; i++)
     selectedIdicesFromLastTime.push(this.FindItemIndexByValue(selectedValuesFromLastTime[i]));
    this.SelectIndices(selectedIdicesFromLastTime);
   } else
    this.SelectIndices(this.initSelectedIndices);
  } else {
   var selectedIndex = (valueFromLastTime != "") ?
    this.FindItemIndexByValue(valueFromLastTime) : this.GetSelectedIndexInternal();
   this.SetSelectedIndexInternal(selectedIndex);
   this.SelectIndexSilent(selectedIndex);
  }
  this.CacheValue();
 },
 CreateInternalCheckBoxCollection: function() {
  if (this.IsNativeCheckBoxes() || this.internalCheckBoxCollection)
   return;
  this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.icbImageProperties, false, false, null, true);
  var count = this.GetItemCount();
  var enabled = this.GetEnabled();
  var changeEventMethod = _aspxChangeEventsMethod(enabled);
  for(var i = 0; i < count; i++)
   this.AddInternalCheckBoxToCollectionCore(i, enabled, changeEventMethod);
 },
 AddInternalCheckBoxToCollection: function(index) {
  if(!this.internalCheckBoxCollection)
   return;
  var enabled = this.GetEnabled();
  var changeEventMethod = _aspxChangeEventsMethod(enabled);
  this.AddInternalCheckBoxToCollectionCore(index, enabled, changeEventMethod);
 },
 AddInternalCheckBoxToCollectionCore: function(index, enabled, changeEventMethod) {
  var inputElement = this.GetItemCheckBoxInput(index)
  if(inputElement) {
   var internalCheckBox = this.internalCheckBoxCollection.Add(this.GetInternalCheckBoxKey(index), inputElement);
   internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
   internalCheckBox.SetEnabled(enabled);
   internalCheckBox.autoSwitchEnabled = false;
   this.ChangeSpecialInputEnabledAttributes(inputElement, changeEventMethod, true);
   internalCheckBox.CheckedChanged.AddHandler(
    function(s, e) {
     if(_aspxGetKeyCode(e) == ASPxKey.Space) {
      var element = _aspxGetEventSource(e);
      this.GetItemSelectionHelper().OnItemCheckBoxClick(this.FindInternalCheckBoxIndex(element), e);
     }
    }.aspxBind(this)
   );
   internalCheckBox.Focus.AddHandler(
    function(s, e) {
     var index = this.FindInternalCheckBoxIndex(s.mainElement);
     window.setTimeout(function() { this.ScrollToItemVisible(index); }.aspxBind(this), 50);
    }.aspxBind(this)
   );
  }
 },
 ClearInternalCheckBoxCollection: function() {
  if(this.internalCheckBoxCollection)
   this.internalCheckBoxCollection.Clear();
 },
 RemoveInternalCheckBoxFromCollecntion: function(index) {
  if(this.internalCheckBoxCollection)
   this.internalCheckBoxCollection.Remove(this.GetItemValue(index));
 },
 GetInternalCheckBoxKey: function(index) {
  return this.name + __aspxNameSeparator + this.GetItemValue(index);
 },
 GetInternalCheckBox: function (index) {
  if (this.internalCheckBoxCollection == null)
   this.CreateInternalCheckBoxCollection()
  if(this.internalCheckBoxCollection)
   return this.internalCheckBoxCollection.Get(this.GetInternalCheckBoxKey(index));
  return null;
 },
 IsNativeCheckBoxes: function() {
  return !this.icbImageProperties;
 },
 SetCheckBoxChecked: function(index, checked) {
  if(this.IsNativeCheckBoxes()) {
   var checkBox = this.GetItemCheckBoxInput(index);
   checkBox.checked = checked;
  }
  else {
   var internalCheckBox = this.GetInternalCheckBox(index);
   internalCheckBox.SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
  }
 },
 SetCheckBoxEnabled: function(index, enabled) {
  var inputElement;
  if(this.IsNativeCheckBoxes()) {
   var checkbox = this.GetItemCheckBoxInput(index);
   checkbox.disabled = !enabled;
   this.ChangeNativeCheckEnabledAttributes(checkbox, _aspxChangeEventsMethod(this.GetEnabled()));
   inputElement = checkbox;
  }
  else {
   var internalCheckBox = this.GetInternalCheckBox(index);
   internalCheckBox.SetEnabled(enabled);
   inputElement = internalCheckBox.inputElement;
  }
  this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
 },
 ClearItems: function() {
  ASPxClientListBoxBase.prototype.ClearItems.call(this);
  this.ClearInternalCheckBoxCollection();
 },
 OnDelayedSpecialFocusMouseDown: function(evt) {
  if(this.GetIsCheckColumnExists())
   this.SetFocusableCheckInput(this.GetCheckBoxInputFromEvent(evt));
  ASPxClientListBoxBase.prototype.OnDelayedSpecialFocusMouseDown.call(this, evt);
 },
 GetCheckBoxInputFromEvent: function(evt) {
  var element = _aspxGetEventSource(evt);
  if(this.IsNativeCheckBoxes())
   return element.type == "checkbox" ? element : null;
  var index = this.FindInternalCheckBoxIndex(element);
  return index > -1 ? this.GetInternalCheckBox(index).inputElement : null;
 },
 FindInternalCheckBoxIndex: function(element) {
  var level = 5;
  while(level > 0) {
   var id = element.id;
   if(id && element.tagName == "TD" && id.slice(-1) == __aspxLBIPostfixes[0])
    return element.parentNode.rowIndex;
   element = element.parentNode;
   level--;
  }
  return -1;
 },
 IsCheckBoxClicked: function(evt) {
  return !!this.GetCheckBoxInputFromEvent(evt);
 },
 GetFocusableInputElement: function() {
  return this.focusableCheckInput || this.GetInputElement();
 },
 SetFocusableCheckInput: function(element) {
  this.focusableCheckInput = element;
 },
 OnFocusCore: function() {
  if(this.UseDelayedSpecialFocus())
   window.clearTimeout(this.specialFocusTimer);
  if(this.focused) {
   this.UnlockFocusEvents();
   return;
  }
  ASPxClientListBoxBase.prototype.OnFocusCore.call(this);
 },
 OnLostFocusCore: function() {
  if(!this.IsFocusEventsLocked())
   this.SetFocusableCheckInput(null);
  ASPxClientListBoxBase.prototype.OnLostFocusCore.call(this);
 },
 GetValueFromValueInput: function(){
  if(this.ShouldRestoreSelectionAfterBackPressed()){
   var valueInput = this.FindStateInputElement();
   if(_aspxIsExistsElement(valueInput))
      return valueInput.value;
  }
  return "";
 },
 ShouldRestoreSelectionAfterBackPressed: function(){
  return __aspxIE || __aspxChrome;
 },
 GetInitSelectedIndex: function(){
  return this.savedSelectedIndex;
 },
 CacheValue: function(){
  this.cachedValue = this.GetValue();
 },
 InitScrollPos: function(){
  if(!this.isComboBoxList && this.isCallbackMode && this.GetInitSelectedIndex() == -1)
   this.GetScrollDivElement().scrollTop = 0;
 },
 InitializeLoadOnDemand: function(){
  var loadOnDemandRequired = this.isCallbackMode && this.GetEnabledByServer();
  this.scrollHelper = loadOnDemandRequired ? new _aspxListBoxScrollCallbackHelper(this) : new _aspxListBoxScrollCallbackHelperBase(this);
 },
 InlineInitialize: function(){
  this.InitializeNativeCheckHandlers();
  this.LockScrollHandler();
  if(!this.disableScrolling)
   this.InitSpecialKeyboardHandling();
  this.InitializeItemsAttributes();
  this.GenerateStateItems();
  this.UnlockScrollHandler();
  ASPxClientListBoxBase.prototype.InlineInitialize.call(this);
 },
 InitializeNativeCheckHandlers: function() {
  this.nativeCheckOnFocusHandler = function(evt) {
   this.SetFocusableCheckInput(_aspxGetEventSource(evt));
  }.aspxBind(this);
 },
 ChangeNativeCheckEnabledAttributes: function(element, method) {
  if(this.nativeCheckOnFocusHandler)
   method(element, "focus", this.nativeCheckOnFocusHandler);
 },
 InitializeItemsAttributes: function() {
  var listTable = this.GetListTable();
  if(this.isHasFakeRow){
   this.LockSynchronization();
   this.ClearItems();
   this.UnlockSynchronization();
  }
  listTable.ListBoxId = this.name;
  var rows = listTable.rows;
  var count = rows.length;
  var rowIdConst = this.name + "_";
  if(this.hasSampleItem)
   this.InitializeItemAttributes(this.GetSampleItemRow(), rowIdConst + __aspxLBSIIdSuffix);
  rowIdConst += __aspxLBIIdSuffix;
  for(var i = 0; i < count; i ++)
   this.InitializeItemAttributes(rows[i], rowIdConst + i);
 },
 InitializeItemAttributes: function(row, rowId) {
  var cells = row.cells;
  var itemCellsIdSuffixes = this.GetItemCellsIdPostfixes();
  for(var i = 0; i < row.cells.length; i++) {
   cells[i].style.textAlign = this.itemHorizontalAlign;
   cells[i].id = rowId + itemCellsIdSuffixes[i];
  }
  if(this.GetIsCheckColumnExists() && this.IsNativeCheckBoxes() && rowId != this.GetSampleItemRowID()) {
   var input = this.GetItemCheckBoxInput(row.rowIndex);
   this.ChangeNativeCheckEnabledAttributes(input, _aspxChangeEventsMethod(this.GetEnabled()));
   this.ChangeSpecialInputEnabledAttributes(input, _aspxChangeEventsMethod(this.GetEnabled()));
  }
 },
 InitializePageSize: function(){
  var divElement = this.GetScrollDivElement();
  var listTable = this.GetListTable();
  var rows = listTable.rows;
  var count = rows.length;
  if(divElement && count > 0)
   this.scrollPageSize = Math.round(divElement.clientHeight / rows[0].offsetHeight) - 1;
 },
 GenerateStateItems: function() {
  if(typeof(aspxGetStateController) == "undefined") return;
  var itemCellsIdSuffixes = this.GetItemCellsIdPostfixes();
  var count = this.GetItemCount();
  var constName = this.name + "_" + __aspxLBIIdSuffix;
  var name = "";
  var controller = aspxGetStateController();
  var i = this.hasSampleItem ? -1 : 0 ;
  for(; i < count; i ++){
   name = constName + i;
   if(!__aspxWebKitTouchUI)
    controller.AddHoverItem(name, this.hoverClasses, this.hoverCssArray, itemCellsIdSuffixes, null, null, true);
   controller.AddSelectedItem(name, this.selectedClasses, this.selectedCssArray, itemCellsIdSuffixes, null, null, true);
   controller.AddDisabledItem(name, this.disabledClasses, this.disabledCssArray, itemCellsIdSuffixes, null, null, true);
  }
 },
 AfterInitialize: function() {
  if(this.disableScrolling) {
   var scrollDiv = this.GetScrollDivElement();
   var mainElement = this.GetMainElement();
   scrollDiv.style.height = mainElement.style.height = _aspxGetClearClientHeight(this.GetListTable()) + "px";
  }
  this.CallbackSpaceInit(true);
  this.constructor.prototype.AfterInitialize.call(this);
 },
 GetEnabledByServer: function(){
  return this.enabled;
 },
 SetEnabled: function(enabled){
  ASPxClientListBoxBase.prototype.SetEnabled.call(this, enabled);
  this.CallbackSpaceInit(false);
 },
 CallbackSpaceInit: function(isInitialization){
  if(this.isCallbackMode){
   this.SetBottomScrollSpacerVisibility(this.GetScrollSpacerVisibility(false));
   this.SetTopScrollSpacerVisibility(this.GetScrollSpacerVisibility(true));
   if(isInitialization || this.isComboBoxList){
    this.EnsureSelectedItemVisible();
    _aspxAttachEventToElement(this.GetScrollDivElement(), "scroll", aspxLBScroll);
   }
  }
 },
 GetListTable: function() {
  return this.tempCache.Get("ListTable", this.GetListTableCore, this);
 },
 GetListTableCore: function(){
  if(!_aspxIsExistsElement(this.listTable))
   this.listTable = _aspxGetElementById(this.name + __aspxLTableIdSuffix);
  return this.listTable;
 },
 GetListTableHeight: function(){
  return this.GetListTable().offsetHeight;
 },
 GetHeaderDivElement: function(){
  if(!_aspxIsExistsElement(this.headerDiv))
   this.headerDiv = _aspxGetElementById(this.name + __aspxLBHeaderDivIdSuffix);
  return this.headerDiv;
 },
 GetHeaderTableElement: function(){
  if(!_aspxIsExistsElement(this.headerTable)){
   var headerDiv = this.GetHeaderDivElement();
   this.headerTable = _aspxGetChildByTagName(headerDiv, "table", 0);
  }
  return this.headerTable;
 },
 GetScrollDivElement: function(){
  if(!_aspxIsExistsElement(this.scrollDivElement))
   this.scrollDivElement = document.getElementById(this.name + __aspxLBDSuffix);
  return this.scrollDivElement;
 },
 GetItemElement: function(index){
  var itemElement = this.GetItemRow(index);
  return __aspxWebKitFamily && itemElement != null ? itemElement.cells[0] : itemElement;
 },
 GetItemRow: function(index){
  var listTable = this.GetListTable();
  if(listTable && index >= 0)
   return listTable.rows[index] || null;
  return null;
 },
 GetItemTexts: function(item) {
  return item.texts ? item.texts : [ item.text ];
 },
 GetItemCount: function(){
  var lbt = this.GetListTable();
  if(lbt)
   return this.GetListTable().rows.length;
  return 0;
 },
 GetItemCellCount: function(){
  if(this.hasSampleItem)
   return this.GetSampleItemRow().cells.length;
  else if(this.GetItemCount() > 0){
   var listTable = this.GetListTable();
   return listTable.rows[0].cells.length;
  }
  return 0;
 },
 GetItemTextCellCount: function(){
  return this.GetItemCellCount() - this.GetItemFirstTextCellIndex();
 },
 GetItemFirstTextCellIndex: function(){
    var itemFirstTextCellIndex  = 0;
  if(this.GetIsCheckColumnExists())
   itemFirstTextCellIndex++;
  if(this.imageCellExists)
   itemFirstTextCellIndex++;
  return itemFirstTextCellIndex;
 },
 GetItemFirstTextCell: function(index){
  var rowElement = this.GetItemRow(index);
  if(rowElement == null)
   return null;
   return rowElement.cells[this.GetItemFirstTextCellIndex()];
 },
 GetItemTopOffset: function(index){
  var itemElement = this.GetItemElement(index);
  return (itemElement != null) ? itemElement.offsetTop + this.GetTopScrollSpacerHeight() : 0;
 },
 GetItemHeight: function(index){
  var itemElement = this.GetItemElement(index);
  return (itemElement != null) ? itemElement.offsetHeight : 0;
 },
 GetItemCheckBoxInput: function(index){
  var itemRow = this.GetItemRow(index);
  var checkBoxCell = itemRow.cells[this.GetCheckBoxCellIndex()];
  return _aspxGetElementsByTagName(checkBoxCell, "input")[0];
 },
 GetIsCheckColumnExists: function(){
  if(!this.checkCellExists)
   this.checkCellExists = this.CheckColumnSelectionMode();
  return this.checkCellExists;
 },
 GetCheckBoxCellIndex: function(){
  return 0;
 },
 GetImageCellIndex: function(){
  return this.GetIsCheckColumnExists() ? 1 : 0;
 },
 GetItemCellsIdPostfixes: function(){
  if(this.itemCellsIdPostfixes == null){
   this.itemCellsIdPostfixes = [];
   var i = 0;
   if(this.GetIsCheckColumnExists()) {
    this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[0]);
    i++;
   }
   if(this.imageCellExists){
    this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[1]);
    i++;
   }
   var cellCount = this.GetItemCellCount();
   for(; i < cellCount; i++)
    this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[2] + i);
  }
  return this.itemCellsIdPostfixes;
 },
 AdjustControl: function (nestedCall) {
  if(this.IsAdjustmentRequired())
   this.heightCorrected = false;
  ASPxClientEdit.prototype.AdjustControl.call(this, nestedCall);
 },
 AdjustControlCore: function(){
  if(this.disableScrolling)
   return;
  ASPxClientEdit.prototype.AdjustControlCore.call(this);
  this.CorrectSize();
  this.EnsureSelectedItemVisible();
  if(!this.isComboBoxList && __aspxIE && __aspxBrowserVersion >= 7)
   this.CorrectWidth();
 },
 CorrectSize: function() {
  if(this.isComboBoxList || this.disableScrolling)
   return;
  this.LockScrollHandler();
  this.CorrectHeight();
  this.CorrectWidth();
  this.InitializePageSize();
  this.UnlockScrollHandler();
 },
 OnCorrectSizeByTimer: function() {
  if(this.IsVisible())
   this.CorrectSize();
 },
 SetProtectionFromFlick_inFF: function(changeVisibility, changeDisplay){
  if(!__aspxFirefox) return;
  var listTable = this.GetListTable();
  if(changeVisibility)
   listTable.style.visibility = "hidden";
  if(changeDisplay)
   listTable.style.display = "none";
 },
 ResetProtectionFromFlick_inFF: function(){
  if(!__aspxFirefox) return;
  var listTable = this.GetListTable();
  listTable.style.visibility = "";
  listTable.style.display = "";
 },
 CorrectHeight: function(){
  if(__aspxFirefox && this.heightCorrected) return;
  this.heightCorrected = true;
  var mainElement = this.GetMainElement();
  var divElement = this.GetScrollDivElement();
  divElement.style.height = "0px";
  var height = mainElement.offsetHeight;
  divElement.style.height = height + "px";
  var extrudedHeight = mainElement.offsetHeight;
  var heightCorrection = extrudedHeight - height;
  if(heightCorrection > 0){
   var divHeight = divElement.offsetHeight;
   this.SetProtectionFromFlick_inFF(true, false);
   divElement.style.height = (divHeight - heightCorrection) + "px";
   this.ResetProtectionFromFlick_inFF();
   extrudedHeight = mainElement.offsetHeight;
   var paddingsHeightCorrection = extrudedHeight - height;
   if(paddingsHeightCorrection > 0)
    divElement.style.height = (divHeight - heightCorrection - paddingsHeightCorrection) + "px";
  }
 },
 IsMultiColumn: function(){
  return this.columnFieldNames.length > 0;
 },
 CorrectWidth: function(){
  if(this.IsMultiColumn())
   this.CorrectMultiColumnWidth();
  else
   this.CorrectNonMultiColumnWidth();
 },
 CorrectMultiColumnWidth: function(){
  var scrollDivElement = this.GetScrollDivElement();
  var scrollBarWidth = this.GetVerticalScrollBarWidth();
  var browserPutsScrollBarOnContent = __aspxIE && __aspxBrowserVersion < 8;
  if(browserPutsScrollBarOnContent)
   scrollDivElement.style.paddingRight = scrollBarWidth + "px";
  if(__aspxIE && (__aspxBrowserVersion == 6 || __aspxBrowserVersion == 7)){
   this.CollapseMultiColumnHeaderWidth();
   var listTable = this.GetListTable();
   var mainElement = this.GetMainElement();
   listTable.style.width = "";
   scrollDivElement.style.width = (mainElement.clientWidth - scrollBarWidth) + "px";
   listTable.style.width = "100%";
  }
  this.CorrectMultiColumnHeaderWidth(scrollBarWidth);
  if(this.rtl && __aspxIE && __aspxBrowserVersion < 8)
   this.FixIE7MultiColumnRtl();
 },
 CollapseMultiColumnHeaderWidth:function(){
  var headerDivElement = this.GetHeaderDivElement();
  headerDivElement.style.width = "0px";
 },
 CorrectMultiColumnHeaderWidth: function(scrollBarWidth){
  var scrollDivElement = this.GetScrollDivElement();
  var headerDivElement = this.GetHeaderDivElement();
  if(_aspxIsExistsElement(headerDivElement)){
   var headerTable;
   if(__aspxWebKitFamily){
    headerTable = this.GetHeaderTableElement();
    if(!_aspxIsExistsElement(headerTable))
     headerTable = null;
   }
   if(headerTable)
    headerTable.style.width = "0";
   if(__aspxIE && __aspxBrowserVersion < 8)
    headerDivElement.style.width = scrollDivElement.style.width;
   headerDivElement.style.paddingRight = scrollBarWidth + "px";
   if(headerTable)
    window.setTimeout(function() { headerTable.style.width = "100%"; }, 0);
  }
 },
 FixIE7MultiColumnRtl: function() {
  var tables = [ this.GetHeaderTableElement(), this.GetListTable() ];
  for(var i = 0; i < tables.length; i++) {
   var table = tables[i];
   if(!table) continue;
   var backup = table.style.tableLayout;
   table.style.tableLayout = "auto";
   table.offsetWidth;
   table.style.tableLayout = backup;
  }
 },
 CorrectNonMultiColumnWidth: function(){
  var divElement = this.GetScrollDivElement();
  if(__aspxIE && __aspxBrowserMajorVersion < 8) {
   var mainElement = this.GetMainElement();
   var scrollBarWidth = this.GetVerticalScrollBarWidth();
   mainElement.style.width = "";
   divElement.style.width = "100%";
   if(__aspxIE)
    divElement.style.paddingRight = "0px";
   if(this.width != ""){
    mainElement.style.width = this.width;
    if (this.width !== "100%") {
     divElement.style.width = "0px";
     var widthCorrectrion = scrollBarWidth;
     var correctedWidth = mainElement.clientWidth - widthCorrectrion;
     if (correctedWidth >= 0)
      divElement.style.width = correctedWidth + "px";
    }
   } else {
    var widthCorrectrion = 0;
    if(this.IsListBoxWidthLessThenList())
     widthCorrectrion -= scrollBarWidth;
    divElement.style.width = (mainElement.clientWidth + widthCorrectrion) + "px";
   }
   if(__aspxIE)
    divElement.style.paddingRight = scrollBarWidth + "px";
  } else {
   if(this.width == ""){
    var listTable = this.GetListTable();
    var mainElement = this.GetMainElement();
    if(listTable.offsetWidth != 0 || !__aspxNetscapeFamily){
     divElement.style.width = (listTable.offsetWidth + this.GetVerticalScrollBarWidth()) + "px";
     if(__aspxFirefox)
      mainElement.style.width = divElement.offsetWidth + "px";
    }
   } else {
    var mainElement = this.GetMainElement();
    mainElement.style.width = this.width;
    if (this.width !== "100%") {
     divElement.style.width = __aspxWebKitFamily ? "1px" : "0px";
     divElement.style.width = mainElement.clientWidth + "px";
    }
   }
  }
 },
 UpdateAdjustmentFlags: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = _aspxGetCurrentStyle(mainElement);
   this.UpdatePercentSizeConfig([this.width], [mainElementStyle.height, mainElement.style.height]);
  }
 },
 EnsureSelectedItemVisible: function(){
  var index = this.GetSelectedIndex();
  if(index != -1)
   this.MakeItemVisible(index);
 },
 MakeItemVisible: function(index){
  if(!this.IsItemVisible(index))
   this.ScrollItemToTop(index);
 },
 IsItemVisible: function(index){
  var scrollDiv = this.GetScrollDivElement();
  var itemElement = this.GetItemElement(index);
  var topVisible = false;
  var bottomVisible = false;
  if(itemElement != null){
   var itemOffsetTop = itemElement.offsetTop + this.GetTopScrollSpacerHeight();
   topVisible = itemOffsetTop >= scrollDiv.scrollTop;
   bottomVisible = itemOffsetTop + itemElement.offsetHeight < scrollDiv.scrollTop + scrollDiv.clientHeight;
  }
  return (topVisible && bottomVisible);
 },
 ScrollItemToTop: function(index){
  this.LockScrollHandler();
  this.SetScrollTop(this.GetItemTopOffset(index));
  this.UnlockScrollHandler();
 },
 ScrollToItemVisible: function(index){
  if(!this.IsItemVisible(index)){
   var scrollDiv = this.GetScrollDivElement();
   var scrollTop = scrollDiv.scrollTop;
   var scrollDivHeight = scrollDiv.clientHeight;
   var itemOffsetTop = this.GetItemTopOffset(index);
   var itemHeight = this.GetItemHeight(index);
   var itemAbove = scrollTop > itemOffsetTop;
   var itemBelow = scrollTop  + scrollDivHeight < itemOffsetTop + itemHeight;
   if(itemAbove)
    scrollDiv.scrollTop = itemOffsetTop;
   else if(itemBelow){
    var scrollPaddings = scrollDiv.scrollHeight - this.GetListTable().offsetHeight -
     this.GetTopScrollSpacerHeight() - this.GetBottomScrollSpacerHeight();
    scrollDiv.scrollTop = itemOffsetTop + itemHeight - scrollDivHeight + scrollPaddings;
   }
  }
 },
 SetScrollTop: function(scrollTop){
  var scrollDiv = this.GetScrollDivElement();
  if(scrollDiv){
   scrollDiv.scrollTop = scrollTop;
   if(__aspxOpera)
    this.CachedScrollTop();
  }
 },
 CachedScrollTop: function(){
  var scrollDiv = this.GetScrollDivElement();
  scrollDiv.cachedScrollTop = scrollDiv.scrollTop;
 },
 RestoreScrollTopFromCache: function(){
    var scrollDiv = this.GetScrollDivElement();
    if(scrollDiv && _aspxIsExists(scrollDiv.cachedScrollTop))
   scrollDiv.scrollTop = scrollDiv.cachedScrollTop;
 },
 IsListBoxWidthLessThenList: function(){
  var divElement = this.GetScrollDivElement();
  var listTable = this.GetListTable();
  var listTabelWidth = listTable.style.width;
  var isLess = false;
  listTable.style.width = "";
  isLess = listTable.offsetWidth < divElement.offsetWidth;
  listTable.style.width = listTabelWidth;
  return isLess;
 },
 GetVerticalScrollBarWidth: function(){
  var divElement = this.GetScrollDivElement();
  if(!this.verticalScrollBarWidth || this.verticalScrollBarWidth <= 0){
   this.verticalScrollBarWidth = this.GetVerticalScrollBarWidthCore(divElement);
   return this.verticalScrollBarWidth;
  } else
   return this.GetIsVerticalScrollBarVisible(divElement) ? this.verticalScrollBarWidth : 0;
 },
 GetIsVerticalScrollBarVisible: function(divElement){
  var verticalOverflow = this.GetVerticalOverflow(divElement);
  if(verticalOverflow != "auto"){
   var listTable = this.GetListTable();
   return divElement.clientHeight < listTable.offsetHeight;
  } else {
   var borderWidthWithScroll = divElement.offsetWidth - divElement.clientWidth;
   return borderWidthWithScroll == this.scrollDivBordersWidthWithScroll;
  }
 },
 GetVerticalScrollBarWidthCore: function(divElement){
  var overflowYReserv = this.GetVerticalOverflow(divElement);
  this.SetVerticalOverflow(divElement, "auto");
  this.scrollDivBordersWidthWithScroll = divElement.offsetWidth - divElement.clientWidth;
  if(__aspxIE && __aspxBrowserVersion >= 7)
   return this.scrollDivBordersWidthWithScroll;
  this.SetProtectionFromFlick_inFF(false, true);
  this.SetVerticalOverflow(divElement, "hidden");
  var bordersWidthWithoutScroll = divElement.offsetWidth - divElement.clientWidth;
  this.SetVerticalOverflow(divElement, overflowYReserv);
  this.ResetProtectionFromFlick_inFF();
  return this.scrollDivBordersWidthWithScroll - bordersWidthWithoutScroll;
 },
 GetVerticalOverflow: function(element){
  if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
   return element.style.overflowY;
  return element.style.overflow;
 },
 SetVerticalOverflow: function(element, value){
  if(__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
   element.style.overflowY = value;
  else
   element.style.overflow = value;
 },
 MultiSelectionMode: function(){
  return this.selectionMode != ListBoxSelectionMode.Single;
 },
 CheckColumnSelectionMode: function(){
  return this.selectionMode == ListBoxSelectionMode.CheckColumn;
 },
 OnItemClick: function(index, evt){
  if(!this.isInitialized)
   return;
  if(this.readOnly)
   return this.OnItemClickOrDblClickReadOnly();
  if(this.CheckColumnSelectionMode() && this.IsCheckBoxClicked(evt))
   this.GetItemSelectionHelper().OnItemCheckBoxClick(index, evt);
  else
   this.GetItemSelectionHelper().OnItemClick(index, evt);
  this.SetFocus();
  this.RaiseItemClick();
 },
 OnItemClickOrDblClickReadOnly: function(){
  return false;
 },
 OnItemDblClick: function(){
  if(this.readOnly)
   return this.OnItemClickOrDblClickReadOnly();
  return this.RaiseItemDoubleClick();
 },
 CanChangeSelection: function(){
  return !this.readOnly || !this.isInitialized;
 },
 SelectIndexSilent: function(index){
  return this.SetItemSelectionStateSilent(index);
 },
 SetItemSelectionStateSilent: function(index){
  if(!this.CanChangeSelection())
   return;
  var oldSelectionIndex = this.GetSelectedIndex();
  this.LockSelectionEvents();
  this.SetSelectedIndexCore(index);
  this.UnlockSelectionEvents();
  return index != oldSelectionIndex;
 },
 SetItemSelectionAppearance: function(index, selected, controller){
  if(!this.CanChangeSelection())
   return;
  if(!controller)
   controller = aspxGetStateController();
  if(!this.isInitialized)
   this.SetHoverElement(null);
  var itemFirstTextCell = this.GetItemFirstTextCell(index);
  if(selected)
   controller.SelectElementBySrcElement(itemFirstTextCell);
  else
   controller.DeselectElementBySrcElement(itemFirstTextCell);
  if(!this.isInitialized)
   this.SetHoverElement(itemFirstTextCell);
 },
 GetItemSelectionHelper: function(){
  if(!this.itemSelectionHelper)
   this.itemSelectionHelper = this.CreateItemSelectionHelper();
  return this.itemSelectionHelper;
 },
 CreateItemSelectionHelper: function(){
  if(this.selectionMode == ListBoxSelectionMode.Single)
   return new _aspxListBoxSingleSelectionHelper(this);
  else if(this.selectionMode == ListBoxSelectionMode.Multiple)
   return new _aspxListBoxMultiSelectionHelper(this);
  else if(this.selectionMode == ListBoxSelectionMode.CheckColumn)
   return new _aspxListBoxCheckSelectionHelper(this);
 },
 GetValue: function(){
  var index = this.GetSelectedIndex();
  if(0 <= index && index < this.itemsValue.length)
   return this.itemsValue[index];
  return null;
 },
 SetValue: function(value){
  var index = this.FindItemIndexByValue(value);
  this.SetSelectedIndex(index);
 },
 GetSelectedItem: function(){
  var index = this.GetSelectedIndex();
  return this.GetItem(index);
 },
 GetSelectedIndex: function(){
  if(!this.isInitialized)
   return this.GetSelectedIndexInternal();
  return this.GetItemSelectionHelper().GetSelectedIndex();
 },
 SetSelectedIndex: function(index){
  this.LockSelectionEvents();
  this.SetSelectedIndexCore(index);
  this.EnsureSelectedItemVisible(index);
  this.UnlockSelectionEvents();
 },
 SetSelectedIndexCore: function(index){
  this.GetItemSelectionHelper().SetSelectedIndex(index);
 },
 GetSelectedIndices: function(){
  return this.GetItemSelectionHelper().GetSelectedIndices();
 },
 GetSelectedValues: function(){
  return this.GetItemSelectionHelper().GetSelectedValues();
 },
 GetSelectedItems: function(){
  return this.GetItemSelectionHelper().GetSelectedItems();
 },
 SelectAll: function(){
  this.SelectIndices();
 },
 UnselectAll: function(){
  this.UnselectIndices();
 },
 SelectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectIndices(indices);
  this.UnlockSelectionEvents();
 },
 SelectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectItems(items);
  this.UnlockSelectionEvents();
 },
 SelectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectValues(values);
  this.UnlockSelectionEvents();
 },
 UnselectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectIndices(indices);
  this.UnlockSelectionEvents();
 },
 UnselectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectItems(items);
  this.UnlockSelectionEvents();
 },
 UnselectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectValues(values);
  this.UnlockSelectionEvents();
 },
 GetIsItemSelected: function(index){
  return this.GetItemSelectionHelper().GetIsItemSelected(index);
 },
 GetFocusedIndex: function(){
  return this.GetItemSelectionHelper().GetFocusedIndex();
 },
 UpdateInternalState: function(){
  this.UpdateHiddenInputs();
 },
 IsUpdateHiddenInputsLocked: function(){
  return this.GetItemSelectionHelper().IsUpdateInternalSelectionStateLocked();
 },
 UpdateHiddenInputs: function(){
  if(this.IsUpdateHiddenInputsLocked())
   return;
  if(this.MultiSelectionMode()){
   var element = this.FindStateInputElement();
   if(_aspxIsExistsElement(element)) {
    var sb = [ ];
    var serialiser = this.GetSerializingHelper();
    var selectedIndices = this.GetSelectedIndices();
    for(var i = 0; i < selectedIndices.length; i++)
     serialiser.SerializeAtomValue(sb, this.GetItemValue(selectedIndices[i]));
    element.value = sb.join("");
   }
  } else
   ASPxClientListBoxBase.prototype.UpdateHiddenInputs.call(this);
 },
 UseDelayedSpecialFocus: function() {
  return true;
 },
 ShowLoadingPanel: function() {
  if(!this.isComboBoxList){
   var loadingParentElement = this.GetScrollDivElement().parentNode;
   this.CreateLoadingPanelWithAbsolutePosition(loadingParentElement);
  }
 },
 ShowLoadingDiv: function () {
  if(!this.isComboBoxList){
   var loadingParentElement = this.GetScrollDivElement().parentNode;
   this.CreateLoadingDiv(loadingParentElement);
  }
 },
 ParseCallbackResult: function(result){
  var gottenEgdeOfCollection = false;
  var nothingToLoad = result == "[]";
  var isLoadindToTopByScroll = this.scrollHelper.IsScrolledToTopSpacer();
  if(!nothingToLoad){
   var deserializedItems = this.DeserializeItems(result);
   this.LoadItemsFromCallback(isLoadindToTopByScroll, deserializedItems);
   gottenEgdeOfCollection = deserializedItems.length != this.callbackPageSize;
  }
  var noMoreItemsForLoadThisDirection = nothingToLoad || gottenEgdeOfCollection;
  this.SetScrollSpacerVisibility(isLoadindToTopByScroll, !noMoreItemsForLoadThisDirection);
  this.scrollHelper.Reset();
 },
 LoadItemsFromCallback: function(isToTop, deserializedItems){
  this.LockSynchronizationOnInternalCallback();
  this.BeginUpdate();
  var isMultiSelect = this.MultiSelectionMode();
  if(isToTop){
   var scrollHeightCorrection = 0;
   for(var i = deserializedItems.length - 1; i >= 0; i --){
    this.InsertItem(0, deserializedItems[i].texts, deserializedItems[i].value, deserializedItems[i].imageUrl);
    scrollHeightCorrection += this.GetItemHeight(0);
   }
   this.GetScrollDivElement().scrollTop += scrollHeightCorrection;
   this.serverIndexOfFirstItem -= deserializedItems.length;
   if(this.serverIndexOfFirstItem < 0) this.serverIndexOfFirstItem = 0;
  } else {
   for(var i = 0; i < deserializedItems.length; i ++){
    var itemIndex = this.AddItem(deserializedItems[i].texts, deserializedItems[i].value, deserializedItems[i].imageUrl);
    this.SelectValueOnLoad(itemIndex, deserializedItems[i].selected, isMultiSelect);
   }
  }
  if(this.changeSelectAfterCallback != 0) {
   var newIndex = this.GetSelectedIndex() + this.changeSelectAfterCallback;
   newIndex = this.GetAdjustedIndex(newIndex);
   this.SelectIndexSilent(newIndex);
   if(this.scrollHelper.isScrolledToTopSpacer)
    this.ScrollItemToTop(newIndex);
   else
    this.ScrollToItemVisible(newIndex);
  }
  this.EndUpdate();
  this.UnlockSynchronizationOnInternalCallback();
 },
 SelectValueOnLoad: function (index, selected, isMultiSelect) {
  if (selected && this.changeSelectAfterCallback == 0) {
   if (isMultiSelect) {
    this.SelectIndices([index]);
   } else {
    this.SelectIndex(index);
   }
  }
 },
 CreateSerializingHelper: function(){
  return new _aspxListBoxItemsSerializingHelper(this);
 },
 InCallback: function(){
  var callbackOwner = this.GetCallbackOwnerControl();
  if(callbackOwner != null)
   return callbackOwner.InCallback();
  return ASPxClientListEdit.prototype.InCallback.call(this);
 },
 GetItemsRangeForLoad: function(){
  return this.scrollHelper.GetItemsRangeForLoad();
 },
 GetScrollSpacerElement: function(isTop){
  return document.getElementById(this.name + (isTop ? __aspxLBTSIdSuffix : __aspxLBBSIdSuffix));
 },
 GetScrollSpacerVisibility: function(isTop){
  if(!this.clientEnabled)
   return false;
  return isTop ? this.isTopSpacerVisible : this.isBottomSpacerVisible;
 },
 SetScrollSpacerVisibility: function(isTop, visibility){
  this.LockScrollHandler();
  var spacer = this.GetScrollSpacerElement(isTop);
  if(spacer){
   if(visibility)
    spacer.style.height = this.GetScrollDivElement().clientHeight + "px";
   if(this.clientEnabled){
    if(isTop)
     this.isTopSpacerVisible = visibility;
    else
     this.isBottomSpacerVisible = visibility;
   }
   if(_aspxGetElementDisplay(spacer) != visibility){
    _aspxSetElementDisplay(spacer, visibility);
    _aspxGetElementVisibility(spacer, visibility);
   }
  }
  this.UnlockScrollHandler();
 },
 SetTopScrollSpacerVisibility: function(visibility){
  this.SetScrollSpacerVisibility(true, visibility);
 },
 SetBottomScrollSpacerVisibility: function(visibility){
  this.SetScrollSpacerVisibility(false, visibility);
 },
 GetTopScrollSpacerHeight: function(){
  return this.GetScrollSpacerVisibility(true) ? this.GetScrollSpacerElement(true).clientHeight : 0;
 },
 GetBottomScrollSpacerHeight: function(){
  return this.GetScrollSpacerVisibility(false) ? this.GetScrollSpacerElement(false).clientHeight : 0;
 },
 SendCallback: function(){
  if(!this.InCallback()){
   this.ShowLoadingElements();
   var callbackOwner = this.GetCallbackOwnerControl();
   if(callbackOwner != null)
    callbackOwner.SendCallback();
    else {
    var argument = this.GetCallbackArguments();
    this.CreateCallback(argument);
   }
  }
 },
 OnCallback: function(result) {
  this.ParseCallbackResult(result);
  this.OnCallbackFinally();
 },
 OnCallbackError: function(result){
  ASPxClientListBoxBase.prototype.OnCallbackError.call(this, result);
  this.OnCallbackFinally();
 },
 OnCallbackFinally: function(){
  this.HideLoadingPanel();
  this.changeSelectAfterCallback = 0;
 },
 LockScrollHandler: function(){
  this.scrollHandlerLockCount ++;
 },
 UnlockScrollHandler: function(){
  this.scrollHandlerLockCount --;
 },
 IsScrollHandlerLocked: function(){
  return this.scrollHandlerLockCount > 0;
 },
 OnScroll: function(){
  if(this.IsScrollHandlerLocked()) return;
  if(this.IsVisible() && !this.InCallback() && ( this.GetScrollSpacerVisibility(true) || this.GetScrollSpacerVisibility(false))) {
   this.scrollHelper.OnScroll();
   if(this.scrollHelper.GetIsNeedToHideTopSpacer())
    this.SetTopScrollSpacerVisibility(false);
   if(this.scrollHelper.GetIsNeedCallback())
    this.SendCallback();
  }
 },
 OnBrowserWindowResize: function(evt) {
    if (this.IsVisible())
     this.CorrectSize();
 },
 KeyboardSupportAllowed: function(){
  return !this.CheckColumnSelectionMode();
 },
 InitializeKeyHandlers: function() {
  if(this.KeyboardSupportAllowed()){
   this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
   this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
   this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
   this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
   this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
   this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
  }
 },
 OnArrowUp: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(-1);
  return true;
 },
 OnArrowDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(1);
  return true;
 },
 OnPageUp: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(-this.scrollPageSize);
  return true;
 },
 OnPageDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(this.scrollPageSize);
  return true;
 },
 OnHomeKeyDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(-this.GetItemCount());
  return true;
 },
 OnEndKeyDown: function(evt){
  if(this.isInitialized)
   this.SelectNeighbour(this.GetItemCount());
  return true;
 },
 GetAdjustedIndex: function(index){
  if(index < 0) index = 0;
  else{
   var itemCount = this.GetItemCount();
   if(index >= itemCount) index = itemCount - 1;
  }
  return index;
 },
 SelectNeighbour: function (step) {
  var itemCount = this.GetItemCount();
  if (itemCount > 0) {
   this.changeSelectAfterCallback = 0;
   var selectedIndex = this.GetFocusedIndex();
   var pageDownSize = step == 1 ? this.scrollPageSize + 1 : this.scrollPageSize;
   var isFirstPageDown = selectedIndex == -1 && step == pageDownSize && step > 1;
   var newSelectedIndex = isFirstPageDown ? step : selectedIndex + step;
   newSelectedIndex = this.GetAdjustedIndex(newSelectedIndex);
   if (selectedIndex != newSelectedIndex) {
    this.LockScrollOnKBNavigation();
    this.SetSelectedIndexCore(newSelectedIndex);
    this.UnlockScrollOnKBNavigation();
   }
   if (this.GetIsNeedToCallbackLoadItemsToTop(newSelectedIndex, step, itemCount)) {
    this.LoadItemsOnCallback(true, newSelectedIndex);
   } else if (this.GetIsNeedToCallbackLoadItemsToBottom(newSelectedIndex, step, itemCount)) {
    this.LoadItemsOnCallback(false, newSelectedIndex);
   }
   this.ScrollToItemVisible(newSelectedIndex);
  }
 },
 GetIsNeedToCallbackLoadItemsToTop: function(selectedIndex, step, itemCount){
  return this.isCallbackMode && this.GetScrollSpacerVisibility(true) &&
   this.serverIndexOfFirstItem > 0 && ((step < 0 && selectedIndex <= 0) || step <= -itemCount);
 },
 GetIsNeedToCallbackLoadItemsToBottom: function(selectedIndex, step, itemCount){
  return this.isCallbackMode && this.GetScrollSpacerVisibility(false) &&
   ((step > 0 && selectedIndex >= itemCount - 1) || step >= itemCount);
 },
 LoadItemsOnCallback: function(isToTop, index){
  this.changeSelectAfterCallback = index - this.GetSelectedIndex();
  this.scrollHelper.SetItemsRangeForLoad(isToTop);
  this.SendCallback();
 },
 FindInputElement: function(){
  return document.getElementById(this.name + "_KBS");
 },
 SetHoverElement: function(element){
  aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
 },
 InitOnContainerMadeVisible: function(){
  this.AdjustControl();
 },
 ClearItemsCore: function(){
  this.ClearListTableContent();
  this.OnItemsCleared();
  this.SetValue(null);
 },
 OnItemsCleared: function(){
  this.GetItemSelectionHelper().OnItemsCleared();
 },
 CopyCellWidths: function(sourceRowIndex, destinationRowIndex){
  var cellCount = this.GetItemCellCount();
  var sourceRow = this.GetItemRow(sourceRowIndex);
  var destRow = this.GetItemRow(destinationRowIndex);
  for(var i = 0; i < cellCount; i++)
   destRow.cells[i].style.width = sourceRow.cells[i].style.width;
 },
 RemoveItem: function(index){
  if(index == 0 && this.GetItemCount() > 1)
   this.CopyCellWidths(0, 1);
  if(0 <= index && index < this.GetItemCount()){
   if(this.GetIsCheckColumnExists() && !this.IsNativeCheckBoxes())
    this.RemoveInternalCheckBoxFromCollecntion(index);
   this.UpdateSyncArraysItemDeleted(this.GetItem(index), true);
   var row = this.GetItemRow(index);
   if(_aspxIsExistsElement(row))
    row.parentNode.removeChild(row);
   this.OnItemRemoved(index);
  }
 },
 GetItem: function(index){
  var listTable = this.GetListTable();
  if(!listTable || index < 0 || index >= listTable.rows.length)
   return null;
  var row = listTable.rows[index];
  var image = this.imageCellExists ? _aspxGetChildByTagName(row.cells[this.GetImageCellIndex()], "IMG", 0) : null;
  var src = image == null ? "" : ASPxImageUtils.GetImageSrc(image);
  var i = this.GetItemFirstTextCellIndex();
  var texts = [];
  for(;i < row.cells.length; i ++){
   var textCell = row.cells[i];
   if(typeof(textCell.attributes["DXText"]) != "undefined")
    texts.push(_aspxGetAttribute(textCell, "DXText"));
   else {
    var text = _aspxGetInnerText(textCell);
    if(__aspxIE && __aspxBrowserVersion >= 9 && !this.encodeHtml)
     text = this.PrepareItemTextForIE(text);
    text = text.replace(new RegExp(__aspxNbspChar, "g"), " ");
    texts.push(text);
   }
  }
  return new ASPxClientListBoxItem(this, index, texts, this.itemsValue[index], src, this.GetIsItemSelected(index));
 },
 PrepareItemTextForIE: function(text, index) {
  if (!index && index !== 0)
   return this.PrepareItemTextForIE(text, 0);
  if (text[index] === '\r' && text[index + 1] === '\n')
   return this.PrepareItemTextForIE(text, index + 2);
  return text.substr(index);
 },
 PerformCallback: function(arg) {
  this.SetScrollSpacerVisibility(true, false);
  this.SetScrollSpacerVisibility(false, false);
  this.ClearItemsForPerformCallback();
  this.serverIndexOfFirstItem = 0;
  this.SetScrollSpacerVisibility(true, false);
  this.SetScrollSpacerVisibility(false, false);
  this.FormatAndSetCustomCallbackArg(arg);
  this.SendCallback();
 },
 GetTableRowParent: function(table){
  if(table.tBodies.length > 0)
   return table.tBodies[0];
  return table;
 },
 ProtectWhitespaceSerieses: function(text){
  if(text == "")
   text = __aspxNbsp;
  else {
    if(text.charAt(0) == ' ')
    text = __aspxNbsp + text.slice(1);
   if(text.charAt(text.length - 1) == ' ')
    text = text.slice(0, -1) + __aspxNbsp;
   text = text.replace(new RegExp("  ", "g"), " &nbsp;");
  }
  return text;
 },
 CreateItem: function(index, texts, value, imageUrl, selected){
  return new ASPxClientListBoxItem(this, index, texts, value, imageUrl, selected);
 },
 InsertItemInternal: function(index, texts, value, imageUrl){
  if(!texts || texts.length == 0)
   texts = [""];
  else if(typeof(texts) == "string")
   texts = [ texts ];
  if(typeof (value) == "undefined")
   value = texts[0];
  if(!_aspxIsExists(imageUrl))
   imageUrl = "";
  var newItemRow = this.CreateNewItem();
  _aspxRemoveAttribute(newItemRow, "id");
  var listTable = this.GetListTable();
  var tbody = this.GetTableRowParent(listTable);
  var isAdd = listTable.rows.length <= index;
  if(isAdd)
   tbody.appendChild(newItemRow);
  else
   tbody.insertBefore(newItemRow, this.GetItemRow(index));
  var newIndex = this.FindFreeIndex();
  var newId = this.CreateItemId(newIndex);
  var newClientId = this.CreateItemClientId(newIndex);
  this.InitializeItemAttributes(newItemRow, newClientId, true);
  var sampleItemFirstTextCell = this.GetSampleItemFirstTextCell();
  var itemCellsIdPostfixes = this.GetItemCellsIdPostfixes();
  var styleController = aspxGetStateController();
  aspxAddHoverItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes,
   styleController.GetHoverElement(sampleItemFirstTextCell), __aspxHoverItemKind), true);
  aspxAddSelectedItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes,
   styleController.GetSelectedElement(sampleItemFirstTextCell), __aspxSelectedItemKind), true);
  aspxAddDisabledItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes,
   styleController.GetDisabledElement(sampleItemFirstTextCell), __aspxDisabledItemKind), true);
  _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxHoverItemKind);
  _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxSelectedItemKind);
  _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxDisabledItemKind);
  this.PrepareItem(newItemRow, texts, imageUrl);
  _aspxArrayInsert(this.itemsValue, value, index);
  this.RegisterInsertedItem(index, texts, value, imageUrl);
  if(this.GetIsCheckColumnExists() && !this.IsNativeCheckBoxes())
   this.AddInternalCheckBoxToCollection(index);
  this.OnItemInserted(index);
 },
 PrepareItem: function(newItemRow, texts, imageUrl){
  var i = 0;
  if(this.GetIsCheckColumnExists())
   i ++;
  if(this.imageCellExists) {
   this.PrepareItemImage(newItemRow, i, imageUrl);
   i ++;
  }
  var cellCount = this.GetItemCellCount();
  for(var j = 0; i < cellCount; i++, j++)
   this.PrepareItemTextCell(newItemRow.cells[i], texts[j])
 },
 PrepareItemImage: function(newItemRow, imageCellIndex, imageUrl){
  var imageCell = newItemRow.cells[imageCellIndex];
  var image = _aspxGetChildByTagName(imageCell, "IMG", 0);
  if(!image){
   image = document.createElement("IMG");
   imageCell.innerHTML = "";
   imageCell.appendChild(image);
  }
  ASPxImageUtils.SetImageSrc(image, imageUrl);
 },
 PrepareItemTextCell: function(cell, text){
  if(!_aspxIsExists(text))
   text = "";
  if(this.encodeHtml)
   text = _aspxEncodeHtml(text);
  cell.innerHTML = this.ProtectWhitespaceSerieses(text);
  if(text == "")
   _aspxSetAttribute(cell, "DXText", text);
 },
 ClearListTableContent: function(){
  var tBody = this.GetTableRowParent(this.GetListTable());
  if(__aspxIE)
   tBody.innerText = "";
  else
   tBody.innerHTML = "";
 },
 FormatText: function(texts){
  if(typeof(texts) == "string")
   return texts;
  else if(!this.IsMultiColumn())
   return texts[0];
  else
   return this.FormatTextCore(texts);
 },
 FormatTextCore: function(texts){
  if(this.isComboBoxList)
   return ASPxFormatter.Format(this.textFormatString, texts);
  else
   return texts.join("; ");
 },
 OnItemInserted: function(index){
  this.GetItemSelectionHelper().OnItemInserted(index);
 },
 OnItemRemoved: function(index){
  this.GetItemSelectionHelper().OnItemRemoved(index);
 },
 CreateItemId: function(index){
  return __aspxLBIIdSuffix + index;
 },
 CreateItemClientId: function(index){
  return this.name + "_" + __aspxLBIIdSuffix + index;
 },
 CreateNewItem: function(){
  var newItemRow = this.GetSampleItemRow();
  if (_aspxIsExistsElement(newItemRow))
   newItemRow = newItemRow.cloneNode(true);
  return newItemRow;
 },
 CreateStyleClasses: function(id, postfixes, item, kind){
  var classes = [];
  if(item && item[kind]){
   classes[0] = [];
   classes[0][0] = item[kind].classNames;
   classes[0][1] = item[kind].cssTexts;
   classes[0][2] = [];
   classes[0][2][0] = id;
   classes[0][3] = postfixes;
  }
  return classes;
 },
 CorrectSizeByTimer: function(){
  if(this.APILockCount == 0 && this.IsDisplayed())
   _aspxSetTimeout("aspxLBCorrectSizeByTimer(\""+this.name+"\");", 0);
 },
 FindFreeIndex: function(){
  return this.freeUniqIndex ++;
 },
 GetSampleItemRowID: function(){
  return this.name + "_" + __aspxLBSIIdSuffix;
 },
 GetSampleItemRow: function(){
  if(this.SampleItem == null)
   this.SampleItem = _aspxGetElementById(this.GetSampleItemRowID());
  return this.SampleItem;
 },
 GetSampleItemFirstTextCell: function(){
  if(!_aspxIsExistsElement(this.sampleItemFirstTextCell)){
   var sampleItemRow = this.GetSampleItemRow();
   if(_aspxIsExistsElement(sampleItemRow))
    this.sampleItemFirstTextCell = sampleItemRow.cells[this.imageCellExists ? 1 : 0];
  }
  return this.sampleItemFirstTextCell;
 },
 ChangeEnabledAttributes: function(enabled){
  this.ChangeListTableEvents(this.GetListTable(), _aspxChangeEventsMethod(enabled));
  var inputElement = this.GetInputElement();
  if(inputElement)
   this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled){
  var controller = aspxGetStateController();
  controller.SetElementEnabled(this.GetMainElement(), enabled);
  var count = this.GetItemCount();
  var i = this.hasSampleItem ? -1 : 0 ;
  var checkColumnExists = this.GetIsCheckColumnExists();
  for(; i < count; i ++){
   var element = this.GetItemFirstTextCell(i);
   if(element)
    controller.SetElementEnabled(element, enabled);
   if(checkColumnExists && i >= 0)
    this.SetCheckBoxEnabled(i, enabled);
  }
 },
 ChangeListTableEvents: function(listTable, method){
  if(this.isComboBoxList){
   method(listTable, "mouseup", aspxLBIClick);
   if(__aspxFirefox)
    method(listTable, "mousedown", _aspxPreventEvent);
  }
  else{
   method(listTable, "click", aspxLBIClick);
   method(listTable, "dblclick", aspxLBIClick);
   if(this.MultiSelectionMode())
    _aspxAttachEventToElement(listTable, "selectstart", aspxLBTSelectStart);
  }
 },
 IsValueChanged: function(){
  return this.cachedValue != this.GetValue();
 },
 OnItemSelectionChanged: function(index, selected){
  if(this.CheckColumnSelectionMode())
   this.SetCheckBoxChecked(index, selected);
  if (!this.IsSelectionEventsLocked()) {
   this.SetRaiseSelectedIndexChangedArguments(this.autoPostBack, index, selected);
   var valueChanged = this.IsValueChanged();
   if (valueChanged) {
    this.RaisePersonalStandardValidation();
    this.OnValueChanged();
   } else {
    if(this.RaiseSelectedIndexChanged())
     this.SendPostBackInternal("");
   }
  }
  this.CacheValue();
 },
 SetRaiseSelectedIndexChangedArguments: function(processOnServer, index, selected){
  this.selectedIndexChangedArguments = {
   processOnServer: processOnServer,
   index: index,
   selected: selected
  };
 },
 GetRaiseSelectedIndexChangedArguments: function(){
  if(!this.selectedIndexChangedArguments)
   this.SetRaiseSelectedIndexChangedArguments(false, this.GetSelectedIndex(), true);
  return this.selectedIndexChangedArguments;
 },
 RaiseSelectedIndexChanged: function (processOnServer) {
  this.RaiseValidationInternal();
  var savedArgs = this.GetRaiseSelectedIndexChangedArguments();
  processOnServer = savedArgs.processOnServer || processOnServer;
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientListEditItemSelectedChangedEventArgs(savedArgs.index, savedArgs.selected, processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 SetWidth: function(width) {
  this.width = width + "px";
   this.GetScrollDivElement().style.width = "100%";
   this.constructor.prototype.SetWidth.call(this, width);
 },
 SetHeight: function(height) {
  this.heightCorrected = false;
  this.constructor.prototype.SetHeight.call(this, height);
 }
});
ASPxClientNativeListBox = _aspxCreateClass(ASPxClientListBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 SetMainElement: function(mainElement){
  this.mainElement = mainElement;
 },
 FindInputElement: function(){
  return this.GetMainElement();
 },
 GetOptionCount: function(){
  return this.GetMainElement().options.length;
 },
 GetOption: function(index){
  return this.GetMainElement().options[index];
 },
 GetItemCount: function(){
  return this.GetOptionCount();
 },
 SelectIndexSilent: function(index){
  var selectedIndex = this.GetSelectedIndexInternal();
  var isValidIndex = (-1 <= index && index < this.GetItemCount());
  if((selectedIndex != index && isValidIndex) || !this.isInitialized){
   this.SetSelectedIndexInternal(index);
   return true;
  }
  return false;
 },
 GetSelectedIndexInternal: function(){
  return this.GetMainElement().selectedIndex;
 },
 SetSelectedIndexInternal: function(index){
  this.GetMainElement().selectedIndex = index;
 },
 ClearItemsCore: function(){
  this.GetMainElement().innerHTML = "";
 },
 RemoveItem: function(index){
  if(0 <= index && index < this.GetItemCount()){
   var oldSelectedIndex = this.GetSelectedIndexInternal();
   this.UpdateSyncArraysItemDeleted(this.GetItem(index), true);
   var option = this.GetOption(index);
   this.GetMainElement().removeChild(option);
   this.UpdateOptionValues();
   this.OnItemRemoved(oldSelectedIndex, index);
  }
 },
 OnItemRemoved: function(oldSelectedIndex, newSelectedIndex){
  if(newSelectedIndex == oldSelectedIndex && !this.MultiSelectionMode())
   this.SetSelectedIndexInternal(-1);
 },
 MultiSelectionMode: function(){
  return this.GetMainElement().multiple;
 },
 GetItem: function(index){
  if(0 <= index && index < this.GetOptionCount()) {
   var text = this.GetOption(index).text;
   var selected = this.GetMainElement().options[index].selected
   if(_aspxIsExists(text))
    return new ASPxClientListBoxItem(this, index, text, this.itemsValue[index], "", selected);
  }
  return null;
 },
 PerformCallback: function(arg) {
  this.ClearItemsForPerformCallback();
  this.FormatAndSetCustomCallbackArg(arg);
  this.SendCallback();
 },
 SendCallback: function(){
  if(!this.InCallback()){
   var callbackOwner = this.GetCallbackOwnerControl();
   if(callbackOwner != null)
    callbackOwner.SendCallback();
    else {
    var argument = this.GetCallbackArguments();
    this.CreateCallback(argument);
   }
  }
 },
 ParseCallbackResult: function(result){
  var deserializedItems = this.DeserializeItems(result);
  this.LoadItemsFromCallback(true, deserializedItems);
 },
 InsertItemInternal: function(index, text, value, imageUrl) {
  if(typeof (value) == "undefined")
   value = text;
  var oldSelectedIndex = this.GetSelectedIndexInternal();
  var isAdd = this.GetOptionCount() <= index;
  var newOption = document.createElement("OPTION");
  if(isAdd)
   this.GetMainElement().appendChild(newOption);
  else
   this.GetMainElement().insertBefore(newOption, this.GetOption(index));
  newOption.innerHTML = text;
  this.UpdateOptionValues();
  _aspxArrayInsert(this.itemsValue, value, index);
  this.RegisterInsertedItem(index, text, value, imageUrl);
  if(index == oldSelectedIndex && index != -1)
   this.SetSelectedIndex(index + 1);
 },
 UpdateOptionValues: function() {
  if(this.APILockCount == 0){
   for(var i = 0; i < this.GetOptionCount(); i++)
    this.GetOption(i).value = i;
  }
 },
 ChangeEnabledAttributes: function(enabled){
  if(!this.isComboBoxList)
   this.GetMainElement().disabled = !enabled;
 },
 OnCallback: function(result) {
  this.ParseCallbackResult(result);
 },
 OnItemDblClick: function(){
  this.RaiseItemDoubleClick();
 },
 LoadItemsFromCallback: function(isToTop, deserializedItems){
  this.BeginUpdate();
  this.LockSynchronizationOnInternalCallback();
  var mainElement = this.GetMainElement();
  for (var i = deserializedItems.length - 1; i >= 0; i--) {
   this.InsertItemInternal(0, deserializedItems[i].text, deserializedItems[i].value, deserializedItems[i].imageUrl);
   if (deserializedItems[i].selected) {
    var index = deserializedItems[i].index;
    mainElement.options[0].selected = true;
   }
  }
  this.UnlockSynchronizationOnInternalCallback();
  this.EndUpdate();
 },
 EndUpdate: function(){
  ASPxClientListBoxBase.prototype.EndUpdate.call(this);
  this.UpdateOptionValues();
 },
 GetSelectedIndices: function(){
  var selectedIndices = [];
  var mainElement = this.GetMainElement();
  for(var i = 0; i < mainElement.options.length; i++){
   if(mainElement.options[i].selected)
    selectedIndices.push(i);
  }
  return selectedIndices;
 },
 GetSelectedValues: function(){
  var selectedValues = [];
  var selectedIndices = this.GetSelectedIndices();
  for(var i = 0; i < selectedIndices.length; i++)
   selectedValues.push(this.GetItemValue(selectedIndices[i]));
  return selectedValues;
 },
 GetSelectedItems: function(){
  var selectedItems = [];
  var selectedIndices = this.GetSelectedIndices();
  for(var i = 0; i < selectedIndices.length; i++)
   selectedItems.push(this.GetItem(selectedIndices[i]));
  return selectedItems;
 },
 SelectAll: function(){
  this.SetAllItemsSelectedValue(true);
 },
 UnselectAll: function(){
  this.SetAllItemsSelectedValue(false);
 },
 SetAllItemsSelectedValue: function(selected){
  var mainElement = this.GetMainElement();
  for(var i = 0; i < mainElement.options.length; i++)
   mainElement.options[i].selected = selected;
 },
 SelectIndices: function(indices){
  this.SetIndicesSelectionState(indices, true);
 },
 UnselectIndices: function(indices){
  this.SetIndicesSelectionState(indices, false);
 },
 SetIndicesSelectionState: function(indices, selected){
  var mainElement = this.GetMainElement();
  for(var i = 0; i < indices.length; i++){
   mainElement.options[indices[i]].selected = selected;
  }
 },
 SelectItems: function(items){
  if(_aspxIsExists(items))
   this.SetItemsSelectionState(items, true);
  else
   this.SelectAll();
 },
 UnselectItems: function(items){
  if(_aspxIsExists(items))
   this.SetItemsSelectionState(items, false);
  else
   this.UnselectAll();
 },
 SetItemsSelectionState: function(items, selected){
  var mainElement = this.GetMainElement();
  for(var i = 0; i < items.length; i++){
   mainElement.options[items[i].index].selected = selected;
  }
 },
 SelectValues: function(values){
  this.SetValuesSelectedState(values, true);
 },
 UnselectValues: function(values){
  this.SetValuesSelectedState(values, false);
 },
 SetValuesSelectedState: function(values, selected){
  var mainElement = this.GetMainElement();
  var index;
  for(var i = 0; i < values.length; i++){
   index = this.FindItemIndexByValue(values[i]);
   mainElement.options[index].selected = selected;
  }
 }
});
ASPxClientListBox.Cast = ASPxClientControl.Cast;
ASPxClientCheckListBase = _aspxCreateClass(ASPxClientListEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.imageProperties = null;
  this.internalButtonCollection = null;
  this.icbFocusedStyle = [];
  this.items = [];
 },
 Initialize: function() {
  ASPxClientListEdit.prototype.Initialize.call(this);
  this.UpdateInternalSelectedIndex();
 },
 UpdateInternalSelectedIndex: function() {
  var selectedIndexFromServer = this.GetSelectedIndex();
  if(__aspxIE) {
   var stateInput = this.FindStateInputElement();
   if(stateInput) {
    var restoredSelectedIndex = stateInput.value;
    if(restoredSelectedIndex != '' && restoredSelectedIndex != selectedIndexFromServer)
     this.SetSelectedIndex(restoredSelectedIndex);
   }
  }
 },
 CreateButtonInternalCollection: function() {
  this.internalButtonCollection = new ASPxCheckBoxInternalCollection(this.imageProperties, false, true, ASPxCheckEditElementHelper.Instance);
  var instance = this;
  for(var i = 0; i < this.GetItemCount(); i++) {
   var icbInputElement = this.GetItemInput(i);
   var internalButton = this.internalButtonCollection.Add(icbInputElement.id, icbInputElement, this.GetItemElement(i));
   internalButton.CreateFocusDecoration(this.icbFocusedStyle);
   internalButton.SetEnabled(this.GetEnabled());
   internalButton.readOnly = this.readOnly;
   internalButton.CheckedChanged.AddHandler(function(s, e) { instance.OnItemClick(instance.GetItemIndexByElement(_aspxGetEventSource(e))); });
   internalButton.Focus.AddHandler(function(s, e) { instance.OnFocus(); });
   internalButton.LostFocus.AddHandler(function(s, e) { instance.OnLostFocus(); });
   this.attachToCellsClick(i);
   this.PrepareInternalButton(internalButton, i);
  }
 },
 CheckableElementsExist: function() {
  return !!this.imageProperties;
 },
 SetFocus: function() {
  this.UpdateFocus();
 },
 UpdateFocus: function() {
 },
 IsElementBelongToInputElement: function(element) {
  return this.GetItemIndexByElement(element) != -1;
 },
 attachToCellsClick: function(index) {
  var element = this.GetItemElement(index);
  _aspxAttachEventToElement(element, "click", function(evt) {
   var src = _aspxGetEventSource(evt);
   var label = ASPxCheckEditElementHelper.Instance.GetLabelElement(element);
   var button = this.internalButtonCollection.Get(this.GetItemInput(index).id);
   if (!_aspxGetIsParent(button.mainElement, src) && src !== label && src.parentElement !== label) {
    ASPxCheckEditElementHelper.Instance.InvokeClick(button, evt);
   }
  }.aspxBind(this));
 },
 GetItemIndexByElement: function(element) {
  for (var i = 0; i < this.GetItemCount(); i++) {
   var itemElement = this.GetItemElement(i);
   if (_aspxGetIsParent(itemElement, element))
    return i;
  }
  return -1;
 },
 GetItemInput: function(index) {
  return this.GetChild("_RB" + index + "_I");
 },
 GetItemElement: function(index) {
  return this.GetChild("_RB" + index);
 },
 GetItemCount: function() {
  return this.items.length;
 },
 OnItemClick: function(index) {
 },
 OnItemClickReadonly: function() {
  var index = this.GetSelectedIndexInternal();
  this.SelectIndexSilent(index);
 },
 UpdateHiddenInputs: function(index) {
  var stateInput = this.FindStateInputElement();
  if(_aspxIsExistsElement(stateInput))
   stateInput.value = index;
  var valueInput = this.GetValueInputElement();
  if(_aspxIsExistsElement(valueInput)) {
   var value = this.GetValue();
   valueInput.value = _aspxIsExists(value) ? value : " ";
  }
 },
 GetItemValue: function(index){
  if (index > -1 && index < this.items.length) {
   if (typeof(this.items[index].value) == "string" && this.items[index].value == "" && this.convertEmptyStringToNull)
    return null;
   else
    return this.items[index].value;
  }
  return null;
 },
 SetValue: function(value) {
  for (var i = 0; i < this.items.length; i++) {
   if(this.GetItemValue(i) == value) {
    this.SelectIndexSilent(i);
    return;
   }
  }
  this.SelectIndexSilent(-1);
 },
 CreateItems: function(itemsProperties){
  for (var i = 0; i < itemsProperties.length; i++)
   this.CreateItem(i, itemsProperties[i][0], this.GetDecodeValue(itemsProperties[i][1]), itemsProperties[i][2]);
 },
 CreateItem: function(index, text, value, imageUrl){
  var item = new ASPxClientListEditItem(this, index, text, value, imageUrl);
  this.items.push(item);
 },
 GetItem: function(index){
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 ChangeEnabledAttributes: function(enabled){
  if(!this.CheckableElementsExist()) {
   for(var i = 0; i < this.GetItemCount(); i++){
    var element = this.GetItemInput(i);
    if(element){
     this.ChangeItemEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
     element.disabled = !enabled;
    }
   }
  } else {
   var selectedIndex = this.GetSelectedIndexInternal();
   this.UpdateCheckableElementDecorations(selectedIndex, enabled);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  if(this.isNative){
   for(var i = 0; i < this.GetItemCount(); i++){
    var element = this.GetItemInput(i);
    if(element)
     aspxGetStateController().SetElementEnabled(element, enabled);
   }
  }
 },
 ChangeItemEnabledAttributes: function(element, method){
  method(element, "onclick");
 }
});
ASPxClientRadioButtonList = _aspxCreateClass(ASPxClientCheckListBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientRadioButtonList = true;
 },
 InlineInitialize: function() {
  var selectedIndex = this.GetSelectedIndex();
  this.UpdateHiddenInputs(selectedIndex);
  if(this.CheckableElementsExist())
   this.CreateButtonInternalCollection();
  this.SetSelectedIndex(this.GetSelectedIndex());
  ASPxClientCheckListBase.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  ASPxClientCheckListBase.prototype.Initialize.call(this);
 },
 PrepareInternalButton: function(internalRadioButton){
  internalRadioButton.autoSwitchEnabled = false;
 },
 GetInputElement: function() {
  if(this.isNative) {
   var index = this.GetSelectedIndexInternal();
   return this.GetItemInput(index);
  } else
   return this.GetValueInputElement();
 },
 GetValueInputElement: function() {
  if(this.valueInput == null) {
   this.valueInput = _aspxCreateHiddenField(null, this.name + "_ValueInput");
   var stateInput = this.FindStateInputElement();
   stateInput.parentNode.insertBefore(this.valueInput, stateInput);
  }
  return this.valueInput;
 },
 GetValueInputToValidate: function() {
  return this.GetValueInputElement();
 },
 SelectIndexSilent: function(index) {
  var itemCount = this.GetItemCount();
  var isValidIndex = (-1 <= index && index < itemCount);
  if(isValidIndex) {
   if(this.CheckableElementsExist())
    this.UpdateCheckableElementDecorations(index, this.GetEnabled());
   else {
    for(var i = 0; i < itemCount; i++) {
     var element = this.GetItemInput(i);
     if(element)
      element.checked = (i == index);
    }
   }
   this.SetSelectedIndexInternal(index);
   this.UpdateHiddenInputs(index);
  }
 },
 UpdateCheckableElementDecorations: function(selectedIndex, enabled) {
  if(this.CheckableElementsExist()) {
   for(var i = 0; i < this.items.length; i++) {
    var inputElement = this.GetItemInput(i);
    var internalButton = this.internalButtonCollection.Get(inputElement.id);
    internalButton.SetEnabled(enabled);
    internalButton.SetValue(i == selectedIndex ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
   }
  }
 },
 UpdateFocus: function() {
  var index = this.GetSelectedIndexInternal();
  if(index == -1)
   index = 0;
  var itemElement = this.GetItemInput(index);
  if (itemElement != null && _aspxGetActiveElement() != itemElement && _aspxIsEditorFocusable(itemElement))
   _aspxSetFocus(itemElement);
 },
 OnItemClick: function(index) {
  if(this.GetSelectedIndexInternal() != index) {
   this.SelectIndexSilent(index);
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
  this.UpdateFocus();
 }
});
ASPxClientRadioButtonList.Cast = ASPxClientControl.Cast;
ASPxClientCheckBoxList = _aspxCreateClass(ASPxClientCheckListBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.selectionEventsLockCount = 0;
 },
 InlineInitialize: function() {
  if(this.CheckableElementsExist())
   this.CreateButtonInternalCollection();
  ASPxClientCheckListBase.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  ASPxClientCheckListBase.prototype.Initialize.call(this);
  this.InitSelection();
 },
 InitSelection: function() {
  this.SelectIndices(this.initSelectedIndices);
  this.CacheValue();
 },
 PrepareInternalButton: function(internalCheckBox, index){
  internalCheckBox.autoSwitchEnabled = true;
  internalCheckBox.SetChecked(this.GetItemSelectionHelper().GetIsItemSelected(index));
 },
 SelectIndexSilent: function(index) {
  var itemCount = this.GetItemCount();
  var isValidIndex = (-1 <= index && index < itemCount);
  if(isValidIndex) {
   this.UpdateHiddenInputs(index);
  }
 },
 UpdateCheckableElementDecorations: function(selectedIndex, enabled) {
  if(this.CheckableElementsExist()) {
   for(var i = 0; i < this.items.length; i++) {
    var inputElement = this.GetItemInput(i);
    var internalButton = this.internalButtonCollection.Get(inputElement.id);
    internalButton.SetEnabled(enabled);
   }
  }
 },
 SetSelectionDecoration: function(index, selected){
  if(this.CheckableElementsExist()){
   var inputElement = this.GetItemInput(index);
   var internalButton = this.internalButtonCollection.Get(inputElement.id);
   internalButton.SetValue(selected ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
  } else {
   var element = this.GetItemInput(index);
   if(element)
    element.checked = (selected);
  }
 },
 OnItemClick: function(index) {
  this.GetItemSelectionHelper().OnItemClick(index);
 },
 UpdateFocus: function() {
  var index = this.GetItemSelectionHelper().GetFocusedItemIndex();
  if(index == -1)
   index = this.GetSelectedIndexInternal();
  if(index == -1)
   index = 0;
  var itemElement = this.GetItemInput(index);
  if (itemElement != null && _aspxGetActiveElement() != itemElement && _aspxIsEditorFocusable(itemElement))
   _aspxSetFocus(itemElement);
 },
 UpdateInternalState: function(){
  this.UpdateHiddenInputs();
 },
 IsUpdateHiddenInputsLocked: function(){
  return this.GetItemSelectionHelper().IsUpdateInternalSelectionStateLocked();
 },
 UpdateHiddenInputs: function(){
  if(this.IsUpdateHiddenInputsLocked())
   return;
  var element = this.FindStateInputElement();
  if(_aspxIsExistsElement(element)) {
   var sb = [ ];
   var serialiser = this.GetSerializingHelper();
   var selectedIndices = this.GetSelectedIndices();
   for(var i = 0; i < selectedIndices.length; i++)
    serialiser.SerializeAtomValue(sb, selectedIndices[i]);
   element.value = sb.join("");
  }
 },
 GetSerializingHelper: function(){
  if(this.serializingHelper == null)
   this.serializingHelper = new _aspxListBoxBaseItemsSerializingHelper(this);
  return this.serializingHelper;
 },
 SetItemSelectionAppearance: function(index, selected, controller){
 },
 LockSelectionEvents: function(){
  this.selectionEventsLockCount++;
 },
 UnlockSelectionEvents: function(){
  this.selectionEventsLockCount--;
 },
 IsSelectionEventsLocked: function(){
  return this.selectionEventsLockCount > 0;
 },
 CacheValue: function(){
  this.cachedValue = this.GetValue();
 },
 IsValueChanged: function(){
  return this.cachedValue != this.GetValue();
 },
 OnItemSelectionChanged: function(index, selected){
  this.SetSelectionDecoration(index, selected);
  if (!this.IsSelectionEventsLocked()) {
   this.SetRaiseSelectedIndexChangedArguments(this.autoPostBack, index, selected);
   var valueChanged = this.IsValueChanged();
   if (valueChanged) {
    this.RaisePersonalStandardValidation();
    this.OnValueChanged();
   } else {
    if(this.RaiseSelectedIndexChanged())
     this.SendPostBackInternal("");
   }
  }
  this.CacheValue();
 },
 SetRaiseSelectedIndexChangedArguments: function(processOnServer, index, selected){
  this.selectedIndexChangedArguments = {
   processOnServer: processOnServer,
   index: index,
   selected: selected
  };
 },
 GetRaiseSelectedIndexChangedArguments: function(){
  if(!this.selectedIndexChangedArguments)
   this.SetRaiseSelectedIndexChangedArguments(false, this.GetSelectedIndex(), true);
  return this.selectedIndexChangedArguments;
 },
 RaiseSelectedIndexChanged: function (processOnServer) {
  this.RaiseValidationInternal();
  var savedArgs = this.GetRaiseSelectedIndexChangedArguments();
  processOnServer = savedArgs.processOnServer || processOnServer;
  if(!this.SelectedIndexChanged.IsEmpty()){
   var args = new ASPxClientListEditItemSelectedChangedEventArgs(savedArgs.index, savedArgs.selected, processOnServer);
   this.SelectedIndexChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetItemSelectionHelper: function(){
  if(!this.itemSelectionHelper)
   this.itemSelectionHelper = this.CreateItemSelectionHelper();
  return this.itemSelectionHelper;
 },
 CreateItemSelectionHelper: function(){
  return new _aspxCheckBoxListMultiSelectionHelper(this);
 },
 GetItem: function(index){
  var item = ASPxClientCheckListBase.prototype.GetItem.call(this, index);
  item.selected = this.GetItemSelectionHelper().GetIsItemSelected(index);
  return item;
 },
 SetValue: function(value){
  var index = this.FindItemIndexByValue(value);
  this.SetSelectedIndex(index);
 },
 GetSelectedIndexInternal: function(){
  if(!this.isInitialized)
   return ASPxClientCheckListBase.prototype.GetSelectedIndexInternal.call(this);
  return this.GetItemSelectionHelper().GetSelectedIndex();
 },
 SetSelectedIndex: function(index){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SetSelectedIndex(index);
  this.UnlockSelectionEvents();
 },
 GetSelectedIndices: function(){
  return this.GetItemSelectionHelper().GetSelectedIndices();
 },
 GetSelectedValues: function(){
  return this.GetItemSelectionHelper().GetSelectedValues();
 },
 GetSelectedItems: function(){
  return this.GetItemSelectionHelper().GetSelectedItems();
 },
 SelectAll: function(){
  this.SelectIndices();
 },
 UnselectAll: function(){
  this.UnselectIndices();
 },
 SelectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectIndices(indices);
  this.UnlockSelectionEvents();
 },
 SelectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectItems(items);
  this.UnlockSelectionEvents();
 },
 SelectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().SelectValues(values);
  this.UnlockSelectionEvents();
 },
 UnselectIndices: function(indices){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectIndices(indices);
  this.UnlockSelectionEvents();
 },
 UnselectItems: function(items){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectItems(items);
  this.UnlockSelectionEvents();
 },
 UnselectValues: function(values){
  this.LockSelectionEvents();
  this.GetItemSelectionHelper().UnselectValues(values);
  this.UnlockSelectionEvents();
 }
});
ASPxClientCheckBoxList.Cast = ASPxClientControl.Cast;
ASPxClientListEditItemSelectedChangedEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(index, isSelected, processOnServer){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.index = index;
  this.isSelected = isSelected;
 }
});
function aspxLBTSelectStart(evt){
 var element = _aspxGetEventSource(evt);
 var shiftPressed = evt.shiftKey;
 var ctrlKey = evt.ctrlKey || evt.metaKey;
 if(shiftPressed || ctrlKey){
  _aspxClearSelection();
  _aspxPreventEventAndBubble(evt);
 }
}
function aspxLBIClick(evt){
 if(ASPxClientTouchUI.isMouseEventFromScrolling) return;
 var element = _aspxGetEventSource(evt);
 while(element != null && element.tagName != "BODY"){
  if(element.tagName == "TR"){
   var table = element.offsetParent;
   if(table && table.ListBoxId){
    var lb = aspxGetControlCollection().Get(table.ListBoxId);
    if(lb != null) {
     var retValue;
     if(evt.type == "dblclick")
      retValue =lb.OnItemDblClick();
     else if(!lb.isComboBoxList || _aspxGetIsLeftButtonPressed(evt))
      retValue = lb.OnItemClick(element.rowIndex, evt);
     if(typeof(retValue) != "undefined")
      return retValue;
    }
    break;
   }
  }
  element = element.parentNode;
 }
}
function aspxNLBIDClick(evt){
 var element = _aspxGetEventSource(evt);
 if(element != null && element.tagName == "SELECT"){
  var lb = aspxGetControlCollection().Get(element.id);
  if(lb != null)
   lb.OnItemDblClick();
 }
}
function aspxLBScroll(evt){
 var sourceId = _aspxGetEventSource(evt).id;
 if(sourceId.slice(-__aspxLBDSuffix.length) == __aspxLBDSuffix){
  var name = sourceId.slice(0, -2);
  var lb = aspxGetControlCollection().Get(name);
  if(lb != null && lb.isInitialized)
   lb.OnScroll();
 }
}
function aspxLBCorrectSizeByTimer(name){
 var lb = aspxGetControlCollection().Get(name);
 if(lb != null)
  lb.OnCorrectSizeByTimer();
}
function aspxERBLIClick(name, index) {
 var list = aspxGetControlCollection().Get(name);
 if(list != null)
  list.OnItemClick(index);
}
function aspxERBLICancel(name) {
 var list = aspxGetControlCollection().Get(name);
 if(list != null)
  list.OnItemClickReadonly();
}

var __aspxSpindButtonIdPostfix = "_B";
var __aspxNumberDecimalSeparator = ",";
__aspxSERepeatBtnMinIntervalDelay = 5;
__aspxSERepeatBtnMaxIntervalDelay = 300;
ASPxClientSpinEditBase = _aspxCreateClass(ASPxClientButtonEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.largeDecButtonIndex = -1;
  this.incButtonIndex = -2;
  this.decButtonIndex = -3;
  this.largeIncButtonIndex = -4;
  this.valueChangedDelay = 0;
  this.valueChangedTimerID = -1;
  this.repeatButtonTimerID = -1;
  aspxGetSpinEditCollection().Add(this);
 },
 Initialize: function() {
  this.AssignButtonAttributes();
  ASPxClientButtonEditBase.prototype.Initialize.call(this);
 },
 AdjustControlCore: function() {
  ASPxClientButtonEditBase.prototype.AdjustControlCore.call(this);
  if(this.GetIncDecButtonsContainer()) {
   this.CorrectVerticalAlignment(_aspxAdjustHeightInContainer, this.GetIncDecButtonsContainer, "Btns");
   this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetIncDecButtonsImages, "Imgs");
  }
 },
 AssignButtonAttributes: function() {
  var buttons = [
   this.GetIncrementButton(),
   this.GetDecrementButton(),
   this.GetLargeIncrementButton(),
   this.GetLargeDecrementButton()
  ];
  for (var i = 0; i < buttons.length; i++) {
   var button = buttons[i];
   if (!_aspxIsExistsElement(button)) continue;
   _aspxPreventElementDragAndSelect(button, true);
   button.needClearSelection = true;
   if (!__aspxNetscapeFamily)
    button.unselectable = "on";
   var img = _aspxGetElementsByTagName(button, "img")[0];
   if(_aspxIsExistsElement(img))
    _aspxPreventImageDragging(img);
   this.AttachButtonEvents(button);
  }
 },
 AttachButtonEvents: function(button){
  _aspxAttachEventToElement(button, "mouseout", function () { this.ClearButtonRepeatClickTimer(); }.aspxBind(this));
  _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseDownEventName, function (evt) { this.OnButtonMouseDown(evt, button.id); }.aspxBind(this));
  _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseUpEventName, function () { this.OnButtonMouseUp(button.id); }.aspxBind(this));
 },
 GetIncDecButtonsContainer: function() {
  if(this.GetIncrementButton())
   return this.GetIncrementButton().parentNode;
  if(this.GetDecrementButton())
   return this.GetDecrementButton().parentNode;
  return null;
 },
 GetIncDecButtonsImages: function() {
  var elements = [];
  if(this.GetIncrementButton())
   elements.push(_aspxGetChildByTagName(this.GetIncrementButton(), "IMG", 0));
  if(this.GetDecrementButton())
   elements.push(_aspxGetChildByTagName(this.GetDecrementButton(), "IMG", 0));
  return elements;
 },
 GetIncrementButton: function() {
  return this.GetButton(this.incButtonIndex);
 },
 GetDecrementButton: function() {
  return this.GetButton(this.decButtonIndex);
 },
 GetLargeIncrementButton: function() {
  return this.GetButton(this.largeIncButtonIndex);
 },
 GetLargeDecrementButton: function() {
  return this.GetButton(this.largeDecButtonIndex);
 },
 GetButtonNumber: function(id) {
  var pos = id.lastIndexOf(__aspxSpindButtonIdPostfix);
  if (pos > -1)
   return id.substring(pos + __aspxSpindButtonIdPostfix.length, id.length);
  return null;
 },
 GetNextTimerInterval: function(iterationIndex) {
  var coef = 1 / iterationIndex;
  if (coef < 0.13)
   coef = 0.13;
  return coef * __aspxSERepeatBtnMaxIntervalDelay;
 },
 DoRepeatButtonClick: function(num, iterationIndex) {
  this.ProcessInternalButtonClick(num);
  var timerInterval = this.GetNextTimerInterval(iterationIndex);
  if (iterationIndex < 50)
   iterationIndex++;
  this.SetButtonRepeatClickTimer(num, timerInterval, iterationIndex);
 },
 SetButtonRepeatClickTimer: function(num, timerInterval, iterationIndex) {
  if(this.repeatButtonTimerIDLocked) return;
  var str = "aspxSRepeatButtonClick(\"" + this.name + "\"," +
     num.toString() + "," + iterationIndex.toString() + ")";
  this.repeatButtonTimerID = _aspxSetTimeout(str, timerInterval);
 },
 ClearButtonRepeatClickTimer: function() {
  this.repeatButtonTimerIDLocked = true;
  this.repeatButtonTimerID = _aspxClearTimer(this.repeatButtonTimerID);
  window.setTimeout(function () { this.repeatButtonTimerIDLocked = false; }.aspxBind(this), 0);
 },
 ProcessInternalButtonClick: function(buttonIndex) {
 },
 OnButtonMouseDown: function(evt, id) {
  var num = this.GetButtonNumber(id);
  if (num != null)
   this.SetButtonRepeatClickTimer(num, 300, 1);
  if (__aspxNetscapeFamily || ASPxClientTouchUI.isTouchEvent(evt))
   evt.preventDefault();
 },
 OnButtonMouseUp: function(id) {
  this.ClearButtonRepeatClickTimer();
 },
 OnValueChanged: function() {
  if (this.valueChangedDelay == 0)
   this.OnValueChangedTimer();
  else {
   if (this.valueChangedTimerID > -1) {
    window.clearTimeout(this.valueChangedTimerID);
    this.valueChangedTimerID = -1;
   }
   this.valueChangedTimerID = window.setTimeout("aspxSEValueChanged(\"" + this.name + "\")", this.valueChangedDelay);
  }
 },
 OnValueChangedTimer: function() {
  if (this.valueChangedTimerID > -1) {
   window.clearTimeout(this.valueChangedTimerID);
   this.valueChangedTimerID = -1;
  }
  this.RaisePersonalStandardValidation();
  this.InvokeActualOnValueChanged();
 },
 InvokeActualOnValueChanged: function() {
  ASPxClientButtonEditBase.prototype.OnValueChanged.call(this);
 },
 ChangeEnabledAttributes: function(enabled) {
  ASPxClientButtonEditBase.prototype.ChangeEnabledAttributes.call(this, enabled);
  var btnElement = this.GetIncrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetDecrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetLargeIncrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
  btnElement = this.GetLargeDecrementButton();
  if (btnElement)
   this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
 },
 ChangeEnabledStateItems: function(enabled) {
  this.ClearButtonRepeatClickTimer();
  ASPxClientButtonEditBase.prototype.ChangeEnabledStateItems.call(this, enabled);
  var btnElement = this.GetIncrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetDecrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetLargeIncrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
  btnElement = this.GetLargeDecrementButton();
  if (btnElement)
   aspxGetStateController().SetElementEnabled(btnElement, enabled);
 },
 OnMouseOver: function(evt) {
 }
});
ASPxClientSpinEditConsts = {
 INT_32_MAX_VALUE: 2147483647,
 INT_32_MIN_VALUE: -2147483648,
 DECIMAL_MIN_VALUE: -79228162514264337593543950335,
 DECIMAL_MAX_VALUE: 79228162514264337593543950335
};
ASPxClientSpinEdit = _aspxCreateClass(ASPxClientSpinEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.NumberChanged = new ASPxClientEvent();
  this.decimalPlaces = 0;
  this.number = 0;
  this.inc = 1;
  this.largeInc = 10;
  this.minValue = 0;
  this.maxValue = 0;
  this.allowNull = true;
  this.numberType = "f";
  this.maxLength = 0;
  this.inputValueBeforeFocus = null;
  this.valueChangedProcsCalledBeforeLostFocus = false;
  this.lockValueChanged = false;
  this.isValidating = false;
  this.pasteTimerID = -1;
  this.keyUpProcessing = false;
  this.isChangingCheckProcessed = false;
 },
 Initialize: function() {
  ASPxClientSpinEditBase.prototype.Initialize.call(this);
  this.filedsInitialize();
  this.GenerateValidationRegExp();
 },
 InlineInitialize: function() {
  this.UpdateLastCorrectValueString();
  ASPxClientSpinEditBase.prototype.InlineInitialize.call(this);
 },
 filedsInitialize: function() {
  if(!this.UseRestrictions()) {
   var isDecimal = this.numberType == "f";
   this.minValue = isDecimal ? ASPxClientSpinEditConsts.DECIMAL_MIN_VALUE :
    ASPxClientSpinEditConsts.INT_32_MIN_VALUE;
   this.maxValue = isDecimal ? ASPxClientSpinEditConsts.DECIMAL_MAX_VALUE :
    ASPxClientSpinEditConsts.INT_32_MAX_VALUE;
  }
 },
 GenerateValidationRegExp: function() {
  var decimalSeparator = "";
  var allowDecimalSeparatorSymbols = "";
  if (this.IsFloatNumber()) {
   decimalSeparator = this.GetDecimalSeparatorRegExpString(__aspxNumberDecimalSeparator);
   for (var i = 0; i < __aspxPossibleNumberDecimalSeparators.length; i++)
    allowDecimalSeparatorSymbols += this.GetDecimalSeparatorRegExpString(__aspxPossibleNumberDecimalSeparators[i]);
  }
  this.allowSymbolRegExp = new RegExp("[-0-9" + allowDecimalSeparatorSymbols + "]");
  this.validNumberRegExp = new RegExp("^[-]?[0-9]*[" + decimalSeparator + "]?[0-9]*([0-9]+)?$");
  var validFormattedNumberRegExpString = "^[-]?[0-9]*[" + decimalSeparator + "]?[0-9]";
  if (this.decimalPlaces != 0)
   validFormattedNumberRegExpString += "{0," + this.decimalPlaces + "}$";
  else
   validFormattedNumberRegExpString += "*([0-9]+)?$";
  this.validFormattedNumberRegExp = new RegExp(validFormattedNumberRegExpString);
 },
 GetDecimalSeparatorRegExpString: function(decimalSeparator) {
  return decimalSeparator == "." ? "\\." : decimalSeparator;
 },
 ChangeNumber: function(offset) {
  if (!this.readOnly) {
   var newNumber = this.GetValidNumber(_aspxCorrectJSFloatNumber(this.number + offset), this.number);
   if (newNumber != this.number) {
    this.SetNumberInternal(newNumber);
    this.OnValueChanged();
   }
   _aspxSetSelection(this.GetInputElement());
  }
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  var ret = false;
  this.ParseValueAfterPaste();
  if (this.largeDecButtonIndex == buttonIndex) {
   this.ChangeNumber(-this.largeInc);
   ret = true;
  } else if (this.incButtonIndex == buttonIndex) {
   this.ChangeNumber(this.inc);
   ret = true;
  } else if (this.decButtonIndex == buttonIndex) {
   this.ChangeNumber(-this.inc);
   ret = true;
  } else if (this.largeIncButtonIndex == buttonIndex) {
   this.ChangeNumber(this.largeInc);
   ret = true;
  }
  return ret;
 },
 GetCorrectNumberInRange: function(number) {
  if (this.UseRestrictions() && number > this.maxValue)
   number = this.maxValue;
  if (this.UseRestrictions() && number < this.minValue)
   number = this.minValue;
  return number;
 },
 GetValidNumber: function(number, oldNumber) {
  var validNumber = 0;
  if (this.UseRestrictions() && number < this.minValue && (this.number == null || number > this.number))
   validNumber = this.minValue;
  else if (this.UseRestrictions() && number > this.maxValue && (this.number == null || number < this.number))
   validNumber = this.maxValue;
  else if ((!this.UseRestrictions() || number <= this.maxValue) &&
   (!this.UseRestrictions() || number >= this.minValue))
   validNumber = number;
  else
   validNumber = this.number;
  if (!this.IsFloatNumber())
   validNumber = Math.round(validNumber);
  if ((this.maxLength > 0) && (validNumber.toString().length > this.maxLength))
   validNumber = oldNumber;
  return validNumber;
 },
 GetValueType: function() {
  return this.IsFloatNumber() ? "Decimal" : "Int";
 },
 GetFormattedNumber: function(number) {
  if (number == null)
   return "";
  var value = String(number);
  if (__aspxNumberDecimalSeparator != ".") {
   if (value.indexOf(".") != -1)
    value = value.replace(".", __aspxNumberDecimalSeparator);
  }
  value = this.GetCorrectFormattedNumberString(value);
  return value;
 },
 IsFloatNumber: function() {
  return this.numberType == "f";
 },
 Validate: function() {
  this.isValidating = true;
  ASPxClientSpinEditBase.prototype.Validate.call(this);
  this.isValidating = false;
 },
 ConvertToStringWithCorrectSeparator: function(string) {
  for(var i = 0; i < __aspxPossibleNumberDecimalSeparators.length; i++)
   if(__aspxPossibleNumberDecimalSeparators[i] !== __aspxNumberDecimalSeparator)
    string = string.replace(__aspxPossibleNumberDecimalSeparators[i], __aspxNumberDecimalSeparator)
  return string;
 },
 ParseValue: function(withSelection) {
  if (!_aspxIsExists(withSelection))
   withSelection = true;
  if(this.isValidating)
   withSelection = false;
  var inputElement = this.GetInputWithNumber();
  if (_aspxIsExistsElement(inputElement)) {
   var valueString = inputElement.value;
   var newNumber = (valueString != "") ? this.ParseValueInternal(valueString) : null;
   if ((newNumber != null) && !isNaN(newNumber)) {
    if (newNumber != this.number) {
     newNumber = this.GetCorrectNumberInRange(newNumber);
     var isEqual = newNumber == this.number;
     this.SetNumberInternal(newNumber, withSelection);
     if (!isEqual)
      this.OnValueChanged();
    } else
     this.SetFormattedNumberInInput(newNumber, withSelection)
   }
   else {
    if (this.allowNull)
     this.SetNumberInternal(null, withSelection);
    else
     this.SetNumberInternal(this.GetCorrectNumberInRange(0), withSelection);
    this.OnValueChanged();
   }
  }
 },
 ParseValueAfterPaste: function() {
  if (this.isChangingCheckProcessed) {
   this.ParseValue();
   this.isChangingCheckProcessed = false;
  }
 },
 ParseValueOnPaste: function() {
  var inputElement = this.GetInputElement();
  if (_aspxIsExistsElement(inputElement)) {
   var valueString = inputElement.value;
   if (valueString != "") {
    valueString = this.ConvertToStringWithCorrectSeparator(valueString);
    if (!this.IsValidNumberString(valueString)) {
     valueString = this.lastValue;
     inputElement.value = this.lastValue;
    }
    else
     this.lastValue = valueString;
   }
   var newNumber = (valueString != "") ? this.ParseValueInternal(valueString) : null;
   if (newNumber != null)
    this.SetFormattedNumberInInput(newNumber);
  }
 },
 ParseValueInternal: function(value) {
  if (value == null || value.toString() == "")
   return null;
  if (__aspxNumberDecimalSeparator != ".") {
   if (value.indexOf(__aspxNumberDecimalSeparator) != -1)
    value = value.replace(__aspxNumberDecimalSeparator, ".");
  }
  if (typeof (value) == "number")
   return value;
  return this.ParseNumber(value.toString(), this.GetValueType());
 },
 ParseNumber: function(value, type) {
  if (type == "Decimal")
   return parseFloat(value, 10);
  return parseInt(value, 10);
 },
 RaiseValueChangedEvent: function() {
  return this.OnNumberChanged();
 },
 SetNumberInternal: function(value, withSelection) {
  if (!_aspxIsExists(withSelection))
   withSelection = true;
  this.number = this.RoundNumber(value);
  this.SetFormattedNumberInInput(this.number, withSelection);
  if (this.HasTextDecorators())
   this.SyncRawInputValue();
 },
 RoundNumber: function(number) {
  if(this.decimalPlaces <= 0 || number == null)
   return number;
  return parseFloat(number.toFixed(this.decimalPlaces));
 },
 SetFormattedNumberInInput: function(number, withSelection) {
  if (!_aspxIsExists(withSelection))
   withSelection = true;
  var inputElement = this.GetInputElement();
  if (inputElement != null) {
   if (withSelection)
    this.UpdateSelectionStartAndEndPosition(inputElement);
   var formattedNumber = this.GetFormattedNumber(number);
   if (formattedNumber.toString() != inputElement.value) {
    inputElement.value = formattedNumber;
    if (this.HasTextDecorators())
     this.SyncRawInputValue();
   }
   if (withSelection)
    _aspxSetSelectionCore(inputElement, inputElement.selectionStart, inputElement.selectionEnd);
   this.UpdateLastCorrectValueString();
  }
 },
 UseRestrictions: function() {
  return (this.maxValue != 0 || this.minValue != 0);
 },
 UpdateLastCorrectValueString: function() {
  this.lastValue = this.GetInputWithNumber().value;
 },
 GetValue: function() {
  var input = this.GetInputWithNumber();
  if (!_aspxIsExistsElement(input))
   return null;
  if (input.value == "")
   return null;
  else
   return this.number;
 },
 SetValue: function(number) {
  if(typeof(number) === "string" && number !== "")
   number = parseFloat(number);
  this.number = this.RoundNumber(number);
  ASPxClientSpinEditBase.prototype.SetValue.call(this, this.GetFormattedNumber(this.number));
 },
 OnKeyPress: function(evt) {
  ASPxClientSpinEditBase.prototype.OnKeyPress.call(this, evt);
  if(!this.IsValueChangeAllowed()) return;
  if(this.valueChangedProcsCalledBeforeLostFocus)
   this.valueChangedProcsCalledBeforeLostFocus = false;
  var inputElement = this.GetInputElement();
  if (!inputElement) {
   if (this.pasteTimerID != -1)
    this.ClearTextChangingTimer();
   return;
  }
  this.keyUpProcessing = true;
  if (!__aspxIE && _aspxIsPasteShortcut(evt)) {
   this.keyUpProcessing = false;
   return true;
  }
  if (evt.altKey || evt.ctrlKey)
   return true;
  if (this.IsSpecialKey(evt, false)) {
   this.keyUpProcessing = true;
   return true;
  }
  var keyCode = _aspxGetKeyCode(evt);
  this.UpdateSelectionStartAndEndPosition(inputElement);
  var selectionStart = inputElement.selectionStart;
  var selectionEnd = inputElement.selectionEnd;
  var pressed = String.fromCharCode(keyCode);
  if (!this.IsAllowableSymbol(pressed) && keyCode !== ASPxKey.Enter) {
   this.keyUpProcessing = false;
   return _aspxPreventEvent(evt);
  }
  if (this.IsSignSymbol(pressed)) {
   var isAllowTypeNumberSignSymbol = this.IsAllowTypeNumberSignSymbol(selectionStart, selectionEnd);
   this.keyUpProcessing = isAllowTypeNumberSignSymbol;
   return isAllowTypeNumberSignSymbol ? true : _aspxPreventEvent(evt);
  }
  if (this.IsDecimalSeparatorSymbol(pressed)) {
   var isAllowTypeDecimalSeparator = this.IsAllowTypeDecimalSeparatorSymbol(selectionStart, selectionEnd);
   if (isAllowTypeDecimalSeparator)
    this.TypeDecimalSeparator(selectionStart, selectionEnd);
   this.keyUpProcessing = isAllowTypeDecimalSeparator;
   return _aspxPreventEvent(evt);
  }
  if (!this.IsAllowTypeDigitToCurrentPosition(selectionStart, selectionEnd, pressed)) {
   this.keyUpProcessing = false;
   return _aspxPreventEvent(evt);
  }
  return true;
 },
 OnKeyUp: function(evt) {
  ASPxClientSpinEditBase.prototype.OnKeyUp.call(this, evt);
  if (this.keyUpProcessing) {
   this.UpdateLastCorrectValueString();
   this.keyUpProcessing = false;
  }
  if (this.IsPageOrArrowKey(evt))
   this.OnPageOrArrowKeyUp();
 },
 OnKeyDown: function(evt) {
  if (evt.keyCode == ASPxKey.Enter)
   this.OnTextChanged();
  ASPxClientSpinEditBase.prototype.OnKeyDown.call(this, evt);
  if (this.IsPageOrArrowKey(evt))
   this.OnPageOrArrowKeyDown(evt);
  if ((__aspxIE || __aspxWebKitFamily) && this.IsSpecialKey(evt, true))
   this.keyUpProcessing = true;
 },
 OnPageOrArrowKeyDown: function(evt) {
  var btnIndex = this.GetButtonIndexByKeyCode(_aspxGetKeyCode(evt), evt.ctrlKey);
  if (__aspxOpera)
   this.SetButtonRepeatClickTimer(btnIndex, 60, 1);
  else {
   this.ProcessInternalButtonClick(btnIndex);
   _aspxPreventEvent(evt);
  }
 },
 OnPageOrArrowKeyUp: function(evt) {
  if (__aspxOpera)
   this.ClearButtonRepeatClickTimer();
 },
 IsValueChangeAllowed: function() {
  return !this.readOnly && this.clientEnabled;
 },
 OnFocus: function() {
  if(this.IsValueChangeAllowed()) {
   this.SaveIEOnValueChangedEmulationData();
  }
  ASPxClientSpinEditBase.prototype.OnFocus.call(this);
  if(this.IsValueChangeAllowed())
   this.SetTextChangingTimer();
 },
 OnLostFocus: function() {
  if(this.isInitialized && this.IsValueChangeAllowed()) {
   this.ClearTextChangingTimer();
   this.EmulateOnValueChanged();
  }
  ASPxClientSpinEditBase.prototype.OnLostFocus.call(this);
 },
 OnLostFocusCore: function() {
  if(this.lockValueChanged && !this.IsFocusEventsLocked())
   ASPxClientSpinEditBase.prototype.OnValueChanged.call(this);
  ASPxClientSpinEditBase.prototype.OnLostFocusCore.call(this);
 },
 OnNumberChanged: function() {
  var processOnServer = ASPxClientSpinEditBase.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseNumberChanged(processOnServer);
  if (this.focused)
   this.valueChangedProcsCalledBeforeLostFocus = true;
  return processOnServer;
 },
 OnValueChanged: function() {
  if(!this.lockValueChanged)
   ASPxClientSpinEditBase.prototype.OnValueChanged.call(this);
 },
 OnMouseOver: function(evt) {
  if (_aspxGetIsLeftButtonPressed(evt) && !this.HasTextDecorators())
   this.OnTextChangingCheck();
 },
 OnMouseWheel: function(evt) {
  if(!this.allowMouseWheel || !this.GetEnabled())
   return;
  this.ParseValue();
  var wheelDelta = _aspxGetWheelDelta(evt);
  if (wheelDelta > 0)
   this.ChangeNumber(this.inc);
  else if (wheelDelta < 0)
   this.ChangeNumber(-this.inc);
  _aspxPreventEvent(evt);
 },
 OnTextChangingCheck: function(evt) {
  var input = this.GetInputWithNumber();
  if (!input)
   return;
  var curValueString = input.value.toString();
  this.isChangingCheckProcessed = true;
  if ((this.lastValue != curValueString) && !this.keyUpProcessing) {
   var isChromeOnAndroid = __aspxAndroidMobilePlatform && __aspxChrome;
   var difIsLastDS = (this.lastValue + __aspxNumberDecimalSeparator) == curValueString;
   if (!(isChromeOnAndroid && difIsLastDS))
    this.OnPaste();
  }
 },
 OnPaste: function() {
  this.ParseValueOnPaste();
 },
 OnTextChanged: function() {
  this.ParseValue(false);
 },
 GetButtonIndexByKeyCode: function(keyCode, ctrl) {
  var ret = 0;
  switch (keyCode) {
   case ASPxKey.Up:
    ret = ctrl ? this.largeIncButtonIndex : this.incButtonIndex;
    break;
   case ASPxKey.Down:
    ret = ctrl ? this.largeDecButtonIndex : this.decButtonIndex;
    break;
   case ASPxKey.PageUp:
    ret = this.largeIncButtonIndex;
    break;
   case ASPxKey.PageDown:
    ret = this.largeDecButtonIndex;
    break;
  }
  return ret;
 },
 SaveIEOnValueChangedEmulationData: function() {
  this.valueChangedProcsCalledBeforeLostFocus = false;
  var input = this.GetInputWithNumber();
  if (_aspxIsExistsElement(input))
   this.inputValueBeforeFocus = input.value;
 },
 EmulateOnValueChanged: function() {
  if (!this.valueChangedProcsCalledBeforeLostFocus) {
   var input = this.GetInputWithNumber();
   if (_aspxIsExistsElement(input) && input.value != this.inputValueBeforeFocus) {
    this.OnTextChanged();
    this.RaiseValidationInternal();
    this.RaisePersonalStandardValidation();
   }
  }
 },
 SetTextChangingTimer: function() {
  var str = "aspxSETextChangingCheck(\"" + this.name + "\")";
  this.pasteTimerID = _aspxSetInterval(str, __aspxPasteCheckInterval);
 },
 ClearTextChangingTimer: function() {
  this.pasteTimerID = _aspxClearInterval(this.pasteTimerID);
 },
 IsAllowableSymbol: function(symbol) {
  return this.allowSymbolRegExp.test(symbol);
 },
 IsAllowTypeNumberSignSymbol: function(selectionStart, selectionEnd) {
  var curValueString = this.GetInputElement().value.toString();
  if ((curValueString != null) && this.IsSignSymbol(curValueString.charAt(0)))
   return (selectionStart == 0) && (selectionEnd > 0);
  else
   return (selectionStart == 0);
 },
 IsAllowTypeDecimalSeparatorSymbol: function(selectionStart, selectionEnd) {
  if (this.maxLength > 0 && selectionStart >= this.maxLength)
   return false;
  var unselectedText = this.GetUnselectedText(selectionStart, selectionEnd);
  var decimalSepIndex = unselectedText.indexOf(__aspxNumberDecimalSeparator);
  if ((this.decimalPlaces != 0) && (decimalSepIndex == -1)) {
   var possibleValueString = this.GetPossibleValueString(selectionStart, selectionEnd, __aspxNumberDecimalSeparator);
   return this.IsValidFormattedNumberString(possibleValueString);
  }
  return decimalSepIndex == -1;
 },
 IsAllowTypeDigitToCurrentPosition: function(selectionStart, selectionEnd, pressedSymbol) {
  var possibleValueString = this.GetPossibleValueString(selectionStart, selectionEnd, pressedSymbol);
  var decimalSepIndex = possibleValueString.indexOf(__aspxNumberDecimalSeparator);
  if ((this.decimalPlaces != 0) && (decimalSepIndex != -1))
   return this.IsValidFormattedNumberString(possibleValueString);
  return true;
 },
 IsValidNumberString: function(numString) {
  return this.validNumberRegExp.test(numString);
 },
 IsValidFormattedNumberString: function(numString) {
  return this.validFormattedNumberRegExp.test(numString);
 },
 GetCorrectFormattedNumberString: function(numString) {
  var ret = numString;
  if (!this.IsValidFormattedNumberString(numString)) {
   if (numString.toLowerCase().indexOf("e") > -1)
    numString = ASPxClientSpinEdit.RemoveExponentialNotation(numString);
   var decimalSepIndex = numString.indexOf(__aspxNumberDecimalSeparator);
   if (decimalSepIndex > -1) {
    ret = numString.substring(0, decimalSepIndex);
    if (this.IsFloatNumber()) {
     if (this.decimalPlaces > 0)
      ret += numString.substr(decimalSepIndex, this.decimalPlaces + 1);
     else
      ret += numString.substr(decimalSepIndex);
    }
   }
   else
    ret = numString;
  }
  return ret;
 },
 GetPossibleValueString: function(selectionStart, selectionEnd, pressedSymbol) {
  var curValueString = this.GetInputElement().value.toString();
  var newValueString = curValueString.substring(0, selectionStart);
  newValueString += pressedSymbol;
  var selectionLength = selectionEnd - selectionStart;
  newValueString += curValueString.substr(selectionEnd, curValueString.length - selectionLength);
  return newValueString;
 },
 GetUnselectedText: function (selectionStart, selectionEnd) {
  return this.GetPossibleValueString(selectionStart, selectionEnd, "");
 },
 IsDecimalSeparatorSymbol: function(symbol) {
  for (var i = 0; i < __aspxPossibleNumberDecimalSeparators.length; i++)
   if (__aspxPossibleNumberDecimalSeparators[i] == symbol)
    return true;
  return false;
 },
 IsValidMinMaxValue: function(minValue, maxValue) {
  if (typeof (maxValue) != "number")
   maxValue = this.ParseValueInternal(maxValue.toString());
  if (typeof (minValue) != "number")
   minValue = this.ParseValueInternal(minValue.toString());
  return (isNaN(maxValue) || isNaN(minValue)) ? false : (maxValue >= minValue);
 },
 IsSpecialKey: function(evt, inKeyDown) {
  var keyCode = _aspxGetKeyCode(evt);
  return keyCode == 0 || keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Tab ||
   (inKeyDown && keyCode == ASPxKey.Delete) || keyCode > 60000 ;
 },
 IsPageOrArrowKey: function(evt) {
  var keyCode = _aspxGetKeyCode(evt);
  if (__aspxOpera && evt.ctrlKey && (keyCode == ASPxKey.Up || keyCode == ASPxKey.Down))
   return false;
  else
   return keyCode == ASPxKey.Up || keyCode == ASPxKey.Down ||
       keyCode == ASPxKey.PageUp || keyCode == ASPxKey.PageDown;
 },
 IsSignSymbol: function(symbol) {
  return symbol == "-";
 },
 TypeDecimalSeparator: function(selectionStart, selectionEnd) {
  var possibleValueString = this.GetPossibleValueString(selectionStart, selectionEnd, __aspxNumberDecimalSeparator);
  var inputElement = this.GetInputElement();
  inputElement.value = possibleValueString;
  var decimalSepIndex = possibleValueString.indexOf(__aspxNumberDecimalSeparator);
  _aspxSetCaretPosition(inputElement, decimalSepIndex + 1);
 },
 UpdateSelectionStartAndEndPosition: function(inputElement) {
  if (__aspxIE && __aspxBrowserVersion < 9 && document.selection) {
   inputElement.selectionStart = 0;
   inputElement.selectionEnd = 0;
   var curRange = document.selection.createRange();
   var copyRange = curRange.duplicate();
   curRange.move('character', -inputElement.value.length);
   curRange.setEndPoint('EndToStart', copyRange);
   inputElement.selectionStart = curRange.text.length;
   inputElement.selectionEnd = inputElement.selectionStart + copyRange.text.length;
  }
 },
 GetInputWithNumber: function() {
  if (!this.focused && this.HasTextDecorators())
   return this.GetRawInputElement();
  return this.GetInputElement();
 },
 GetDecoratedText: function(value) {
  if (typeof value == "string" && !!this.displayFormat)
   value = this.ParseValueInternal(value);
  var result = ASPxClientSpinEditBase.prototype.GetDecoratedText.call(this, value).toString();
  if(!this.displayFormat && __aspxNumberDecimalSeparator !== ".")
   result = result.replace('.', __aspxNumberDecimalSeparator);
  return result;
 },
 RaiseNumberChanged: function(processOnServer) {
  if (!this.NumberChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.NumberChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 SetNumber: function(number) {
  this.SetValue(number);
 },
 GetNumber: function() {
  return this.number;
 },
 GetText: function () {
  if (this.maskInfo != null)
   return this.maskInfo.GetText();
  else {
   var isNullText = this.number === null && this.nullText !== "";
   var inputElementText = this.GetInputElement().value;
   return isNullText ? "" : this.GetDecoratedText(inputElementText).toString();
  }
 },
 SetText: function(text) {
  ASPxClientSpinEditBase.prototype.SetValue.call(this, text);
  this.ParseValue(false);
 },
 SetMinValue: function(value) {
  if (this.IsValidMinMaxValue(value, this.maxValue)) {
   this.minValue = this.ParseValueInternal(value.toString());
   this.EnsureCurrentNumberInBoundries();
  }
 },
 GetMinValue: function() {
  return this.minValue;
 },
 SetMaxValue: function(value) {
  if (this.IsValidMinMaxValue(this.minValue, value)) {
   this.maxValue = this.ParseValueInternal(value.toString());
   this.EnsureCurrentNumberInBoundries();
  }
 },
 GetMaxValue: function() {
  return this.maxValue;
 },
 EnsureCurrentNumberInBoundries: function() {
  var value = this.GetValue();
  if (value != null)
   this.SetNumber(this.GetCorrectNumberInRange(value));
 },
 GetParsedNumber: function() {
  var inputElement = this.GetInputElement();
  var valueString = inputElement.value;
  var newNumber = valueString != "" ? this.ParseValueInternal(valueString) : null;
  if ((newNumber != null) && !isNaN(newNumber)) {
   if (newNumber != this.number)
    newNumber = this.GetCorrectNumberInRange(newNumber);
  } else
   newNumber = this.GetCorrectNumberInRange(0);
  return newNumber;
 },
 RestoreSelectionStartAndEndPosition: function() {
  var inputElement = this.GetInputElement();
  _aspxSetSelectionCore(inputElement, inputElement.selectionStart, inputElement.selectionEnd);
 },
 SaveSelectionStartAndEndPosition: function() {
  this.UpdateSelectionStartAndEndPosition(this.GetInputElement());
 }
});
ASPxClientSpinEdit.Cast = ASPxClientControl.Cast;
ASPxClientSpinEdit.RemoveExponentialNotation = function(numString) {
 var mantissaPossition = numString.toLowerCase().indexOf("e");
 var ret = numString;
 if (mantissaPossition > -1) {
  var isNegative = numString.indexOf("-") == 0;
  var isNegativeMantissa = numString.lastIndexOf("-") > 0;
  var mantissa = numString.replace(new RegExp('^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?)'), "");
  var numberBase = numString.replace(new RegExp('([eE][+-]?[0-9]+)'), "");
  numberBase = numberBase.replace("+", "");
  numberBase = numberBase.replace("-", "");
  var decimalDecimalSeparator = ".";
  if (numberBase.indexOf(decimalDecimalSeparator) == -1) {
   numberBase = numberBase.replace(decimalDecimalSeparator, __aspxNumberDecimalSeparator);
   decimalDecimalSeparator = __aspxNumberDecimalSeparator;
  }
  var numberParts = numberBase.split(decimalDecimalSeparator);
  if (numberParts.length == 1)
   numberParts[1] = "";
  var zeroNumbers = parseInt(mantissa, 10);
  if (isNegativeMantissa) {
   zeroNumbers -= 1;
   ret = "0" + __aspxNumberDecimalSeparator + ASPxClientSpinEdit.GetZeros(zeroNumbers) +
     numberParts[0] + numberParts[1];
  }
  else {
   zeroNumbers -= numberParts[0].length + numberParts[1].length - 1;
   ret = numberParts[0] + numberParts[1] + ASPxClientSpinEdit.GetZeros(zeroNumbers);
  }
  if (isNegative)
   ret = _aspxInsert(ret, "-", 0);
 }
 return ret;
}
ASPxClientSpinEdit.GetZeros = function(length) {
 var zeros = [];
 for (var i = 0; i < length; i++)
  zeros.push('0');
 return zeros.join("");
}
function aspxSEMouseOver(name, evt) {
 var edit = aspxGetControlCollection().Get(name);
 if (edit != null) edit.OnMouseOver(evt);
}
function aspxSETextChangingCheck(name) {
 var edit = aspxGetControlCollection().Get(name);
 if (edit != null) edit.OnTextChangingCheck();
}
function aspxSEValueChanged(name) {
 var spinEdit = aspxGetControlCollection().Get(name);
 if (spinEdit != null) spinEdit.OnValueChangedTimer();
}
function aspxSRepeatButtonClick(name, buttonIndex, iterationIndex) {
 var spinEdit = aspxGetControlCollection().Get(name);
 if (spinEdit != null) spinEdit.DoRepeatButtonClick(buttonIndex, iterationIndex);
}
var __aspxSpinEditCollection = null;
function aspxGetSpinEditCollection() {
 if (__aspxSpinEditCollection == null)
  __aspxSpinEditCollection = new ASPxClientSpinEditCollection();
 return __aspxSpinEditCollection;
}
ASPxClientSpinEditCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 GetSpinEdit: function(id) {
  return this.Get(this.GetSpinEditName(id));
 },
 GetSpinEditName: function(id) {
  var pos = id.lastIndexOf(__aspxSpindButtonIdPostfix);
  if (pos > -1)
   return id.substring(0, pos);
  pos = id.lastIndexOf(__aspxTEInputSuffix);
  if (pos > -1)
   return id.substring(0, pos);
  return id;
 }
});
ASPxClientTimeEdit = _aspxCreateClass(ASPxClientSpinEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.date = null;
  this.DateChanged = new ASPxClientEvent();
  this.InternalValueChanging = new ASPxClientEvent();
  this.OwnerDateEdit = null;
 },
 Initialize: function() {
  ASPxClientSpinEditBase.prototype.Initialize.call(this);
  if(!_aspxMaskDateTimeHelper.HasDateParts(this.maskInfo) && this.date == null) {
   var date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo);
   this.SetValue(date);
  }
  this.SubscribeInputElementClick();
 },
 SubscribeInputElementClick: function() {
  var editor = this;
  _aspxAttachEventToElement(this.GetInputElement().parentNode, "click", function(){
   editor.FillMaskInfo();
   if(editor.maskInfo.ApplyFixes(null))
    editor.ApplyMaskInfo(false);
  });
 },
 ApplyMaskInfo: function(applyCaret) {
  var input = this.GetInputElement();
  var prev =  input.value;
  ASPxClientSpinEditBase.prototype.ApplyMaskInfo.call(this, applyCaret);
  if(prev != input.value)
   this.RaiseInternalValueChanging(_aspxMaskDateTimeHelper.GetDate(this.maskInfo));
 },
 SetDate: function(date) {
  this.SetValue(date);
 },
 GetDate: function() {
  return this.date ? new Date(this.date.valueOf()) : null;
 },
 SetValue: function(date) {
  this.date = date;
  _aspxMaskDateTimeHelper.SetDate(this.maskInfo, date);
  this.ApplyMaskInfo(false);
  this.SavePrevMaskValue();
 },
 GetValue: function() {
  return this.date;
 },
 GetValueString: function() {
  return this.date != null ? _aspxGetInvariantDateTimeString(this.date) : null;
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  var delta;
  var result = false;
  if(buttonIndex == this.incButtonIndex) {
   delta = 1;
   result = true;
  } else if(buttonIndex == this.decButtonIndex) {
   delta = -1;
   result = true;
  }
  if(result && !this.readOnly) {
   _aspxMaskManager.OnMouseWheel(this.maskInfo, delta);
   this.ApplyMaskInfo(true);
  }
  this.SetFocus();
  return result;
 },
 ParseValue: function() {
  var date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo, this.date);
  var changed = !_aspxAreDatesEqualExact(this.date, date);
  if(changed) {
   this.SetValue(date);
   this.RaisePersonalStandardValidation();
   this.OnValueChanged();
  }
 },
 OnTextChanged: function() {
  this.ParseValue();
 },
 RaiseInternalValueChanging: function(date) {
  if(!this.InternalValueChanging.IsEmpty())
   this.InternalValueChanging.FireEvent(this, date);
 },
 OnMouseWheel: function(evt) {
  if(!this.allowMouseWheel || !this.GetEnabled())
   return;
  ASPxClientTextEdit.prototype.OnMouseWheel.call(this, evt);
 },
 InvokeActualOnValueChanged: function() {
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 RaiseValueChangedEvent: function() {
  if(!this.isInitialized) return false;
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseDateChanged(processOnServer);
  return processOnServer;
 },
 RaiseDateChanged: function(processOnServer) {
  if(!this.DateChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.DateChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetMaskDisplayText: function() {
  if(!this.focused) {
   if(_aspxMaskDateTimeHelper.HasDateParts(this.maskInfo) && this.date == null)
    return this.nullText;
   if(this.HasTextDecorators())
    return this.GetDecoratedText(this.date);
  }
  return this.maskInfo.GetText();
 },
 HasTextDecorators: function() {
  return this.date == null || ASPxClientSpinEditBase.prototype.HasTextDecorators.call(this);
 },
 SyncRawInputValue: function() {
  this.GetRawInputElement().value = this.date == null ? "N" : _aspxToLocalTime(this.date).valueOf();
 },
 DecodeRawInputValue: function(value) {
  if(value == "N") return null;
  var date = new Date();
  date.setTime(Number(value));
  var result = _aspxToUtcTime(date);
  var offsetDiff = result.getTimezoneOffset() - date.getTimezoneOffset();
  if(offsetDiff !== 0)
   result.setTime(result.valueOf() + offsetDiff * 60000);
  return result;
 },
 BeginShowMaskHint: function() {
 },
 OnLostFocusCore: function() {
  ASPxClientEdit.prototype.OnLostFocusCore.call(this);
  this.EndShowMaskHint();
  this.HideMaskHint();
  if(!this.IsFocusEventsLocked()) {
   if(this.maskInfo.ApplyFixes(null))
    this.ApplyMaskInfo(false);
   this.RaiseStandardOnChange();
  }
  this.ToggleTextDecoration();
 }
});
ASPxClientTimeEdit.Cast = ASPxClientControl.Cast;

ASPxClientCheckBox = _aspxCreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientCheckEdit = true;
  this.valueChecked = true;
  this.valueUnchecked = false;
  this.valueGrayed = null;
  this.allowGrayed = false;
  this.isNative = false;
  this.stateController = null;
  this.imageProperties = null;
  this.allowGrayedByClick = true;
  this.internalCheckBox = null;
  this.icbFocusedStyle = [];
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
  this.CheckedChanged = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  this.isNative = !this.imageProperties;
  this.allowGrayed = this.IsGrayedAllowed();
  this.stateController = ASPxCheckableElementStateController.Create(this.imageProperties, this.valueChecked,  this.valueUnchecked, this.valueGrayed, this.allowGrayed);
  if(!this.isNative)
   this.CreateInternalCheckBox();
  ASPxClientEdit.prototype.InlineInitialize.call(this);
 },
 Initialize: function() {
  ASPxClientEdit.prototype.Initialize.call(this);
  if(!_aspxIsExistsElement(this.GetMainElement()))
   return;
  if(!this.isNative) {
   this.previousValue = this.GetStateInput().value;
   this.SetValue(this.GetValue());
  }
  else
   this.previousValue = this.GetInputElement().checked;
 },
 GetInputElement: function() {
  if(this.isNative)
   return ASPxClientEdit.prototype.GetInputElement.call(this);
  else
   return this.GetStateInput();
 },
 CreateInternalCheckBox: function() {
  var instance = this;
  this.internalCheckBox = new ASPxClientCheckBoxInternal(this.GetStateInput(), this.stateController, this.allowGrayed, this.allowGrayedByClick, ASPxCheckEditElementHelper.Instance, this.GetMainElement(), true);
  this.internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
  this.internalCheckBox.SetEnabled(this.GetEnabled());
  this.internalCheckBox.readOnly = this.readOnly;
  this.internalCheckBox.CheckedChanged.AddHandler(function(s, e) { instance.OnClick(e); });
  this.internalCheckBox.Focus.AddHandler(function() { instance.OnFocus(); });
  this.internalCheckBox.LostFocus.AddHandler(function() { instance.OnLostFocus(); });
  if(__aspxWebKitFamily)
   _aspxAttachEventToElement(this.internalCheckBox.mainElement.parentNode, "selectstart", _aspxPreventEventAndBubble);
 },
 FindInputElement: function() {
  var element = this.GetMainElement();
  if(_aspxIsExistsElement(element) && element.tagName != "INPUT")
   element = this.GetChild("_I");
  return element;
 },
 IsGrayedAllowed: function() {
  for(var propertyKey in this.imageProperties)
   if(this.imageProperties[propertyKey].length === 3)
    return true;
  return false;
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseCheckedChanged(processOnServer);
  return processOnServer;
 },
 OnClick: function() {
  if(this.ToogleCheckState() && !this.focused)
   this.SetFocus();
 },
 ToogleCheckState: function() {
  if(!this.GetEnabled() || this.readOnly)
   return false;
  var value = this.GetCorrectValue(this.previousValue);
  value = this.stateController.GetNextCheckBoxValue(value, this.allowGrayedByClick && this.allowGrayed);
  this.SetValue(value);
  this.OnValueChanged();
  return true;
 },
 IsElementBelongToInputElement: function(element) {
  return false;
 },
 ForceRefocusEditor: function() {
  if(this.isNative)
   ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
 },
 GetValue: function() {
  var value = this.stateController.GetValueByInputKey(this.GetStateInput().value);
  if(value === "" && this.convertEmptyStringToNull)
   value = null;
  return value;
 },
 SetValue: function(value) {
  this.previousValue = value;
  value = this.GetCorrectValue(value);
  if(this.isNative)
   this.GetInputElement().checked = (this.previousValue == this.valueChecked);
  else
   this.internalCheckBox.SetValue(value);
  this.GetStateInput().value = this.stateController.GetInputKeyByValue(value);
  this.OnValueSet();
 },
 GetICBMainElement: function() {
  return ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(this.GetStateInput());
 },
 GetLabelElement: function() {
  return ASPxCheckEditElementHelper.Instance.GetLabelElement(this.GetMainElement());
 },
 GetStateInput: function() {
  return this.GetChild("_S");
 },
 GetCorrectValue: function(value) {
  var stateIsExist = typeof(this.stateController.GetInputKeyByValue(value)) != "undefined";
  if(!stateIsExist)
   return this.allowGrayed ? this.valueGrayed : this.valueUnchecked;
  return value;
 },
 OnValueSet: function() {},
 RaiseCheckedChanged: function(processOnServer) {
  if(!this.CheckedChanged.IsEmpty()) {
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 SetEnabled: function(enabled) {
  ASPxClientEdit.prototype.SetEnabled.call(this, enabled);
  if(!this.isNative)
    this.internalCheckBox.SetEnabled(enabled);
 },
 GetChecked: function() {
  return this.stateController.GetCheckStateByInputKey(this.GetStateInput().value) == ASPxClientCheckBoxCheckState.Checked;
 },
 SetChecked: function(isChecked) {
  this.SetCheckState(isChecked ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
 },
 GetText: function() {
  var labelElement = this.GetLabelElement();
  return (labelElement != null) ? labelElement.innerHTML : "";
 },
 GetCheckState: function() {
  var internalCheckeState = this.stateController.GetCheckStateByInputKey(this.GetStateInput().value);
  if(internalCheckeState != ASPxClientCheckBoxCheckState.Indeterminate || this.allowGrayed)
   return internalCheckeState;
  else
   return ASPxClientCheckBoxCheckState.Unchecked;
 },
 SetCheckState: function(checkState) {
  if(checkState != ASPxClientCheckBoxCheckState.Indeterminate || this.allowGrayed) {
   var value = this.stateController.GetValueByCheckState(checkState);
   this.SetValue(value);
  }
 },
 SetText: function(text) {
  var labelElement = this.GetLabelElement();
  if(labelElement != null)
   _aspxSetInnerHtml(labelElement, text);
 },
 ChangeEnabledAttributes: function(enabled){
  if(this.isNative) {
   this.ChangeInputEnabledAttributes(this.GetInputElement(), _aspxChangeAttributesMethod(enabled));
   this.GetInputElement().disabled = !enabled;
  } else
   this.internalCheckBox.SetEnabled(enabled);
 },
 ChangeEnabledStateItems: function(enabled){
  aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
 },
 ChangeInputEnabledAttributes: function(element, method){
  method(element, "onclick");
 }
});
ASPxClientCheckBox.Cast = ASPxClientControl.Cast;
ASPxClientRadioButton = _aspxCreateClass(ASPxClientCheckBox, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientRadioButton = true;
  this.groupName = "";
 },
 OnValueSet: function() {
  if(this.previousValue === true)
   this.UncheckOtherGroupMembers(true );
 },
 OnClick: function() {
  if(!this.previousValue) {
   this.UncheckOtherGroupMembers();
   ASPxClientCheckBox.prototype.OnClick.call(this);
  } else {
   if(!this.focused)
    this.SetFocus();
  }
 },
 CreateInternalCheckBox: function() {
  ASPxClientCheckBox.prototype.CreateInternalCheckBox.call(this);
  this.internalCheckBox.autoSwitchEnabled = false;
 },
 UncheckOtherGroupMembers: function(suppressEvents) {
  var members = this.GetGroupMembers();
  for(var i = 0; i < members.length; i++) {
   var radioButton = members[i];
   if(!_aspxIsExistsElement(radioButton.GetMainElement()))
    members[i] = null;
   else {
    if(radioButton != this && radioButton.GetValue()){
     radioButton.SetValue(false);
     if(!suppressEvents)
      radioButton.RaiseValueChangedEvent();
    }
   }
  }
 },
 OnReadonlyClick: function() {
  if(!this.previousValue) {
   var members = this.GetGroupMembers();
   for(var i = 0; i < members.length; i++) {
    var radioButton = members[i];
    radioButton.SetValue(radioButton.GetValue());
   }
  }
 },
 GetGroupName: function() {
  if(!this.isNative)
   return this.groupName;
  var inputElement = this.GetInputElement();
  if (!_aspxIsExistsElement(inputElement))
   return null;
  var name = inputElement.name;
  if(!name.length)
   name = "";
  return name;
 },
 GetGroupMembers: function() {
  var result = [ ];
  var groupName = this.GetGroupName();
  if(groupName.length > 0) {
   aspxGetControlCollection().ForEachControl(function(control) {
    if(ASPxIdent.IsASPxClientRadioButton(control)) {
     var controlGroupName = control.GetGroupName();
     if (controlGroupName != null && controlGroupName == groupName)
      result.push(control);
    }
   });
  } else {
   result.push(this);
  }
  return result;
 },
 GetChecked: function() {
  return this.GetValue() == true;
 },
 SetChecked: function(isChecked) {
  this.SetValue(isChecked);
 }
});
ASPxClientRadioButton.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientCheckEdit = function(obj) {
 return !!obj.isASPxClientCheckEdit;
};
ASPxIdent.IsASPxClientRadioButton = function(obj) {
 return !!obj.isASPxClientRadioButton;
};
ASPxIdent.IsASPxClientCheckBox = function(obj) {
 return ASPxIdent.IsASPxClientCheckEdit(obj) && !ASPxIdent.IsASPxClientRadioButton(obj);
};
function aspxChkOnClick(name) {
 var edit = aspxGetControlCollection().Get(name);
 if(edit)
  edit.OnClick();
}
function aspxERBOnReadonlyClick(name) {
 var rb = aspxGetControlCollection().Get(name);
 if(rb)
  rb.OnReadonlyClick();
}

(function () {
 var ASPxClientTabControlBase = _aspxCreateClass(ASPxClientControl, {
  ActiveRowItemCssClass: "dxtc-activeRowItem",
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.activeTabIndex = 0;
   this.callbackCount = 0;
   this.cookieName = "";
   this.emptyHeight = false;
   this.emptyWidth = false;
   this.tabAlign = "Left";
   this.tabPosition = "Top";
   this.tabs = [];
   this.tabsContentRequest = [];
   this.useClientVisibility = true;
   this.enableScrolling = !!this.GetScrollVisibleArea();
   this.firstShownTabIndex = 0;
   this.scrollManager = null;
   this.scrollingFillerElementWidth = 5000;
   this.handleClickOnWholeTab = true;
   this.deferredActions = [];
   this.isFullyInitializedInline = false;
   this.isFullyInitialized = false;
   this.initializationStepPassed = false;
   this.sizingConfig.correction = true;
   this.sizingConfig.adjustControl = true;
   this.primaryDimension = "width";
   this.secondaryDimension = "height";
   this.adjustmentFlagsUpdated = false;
   this.adjustmentVars = {
    tabsHeight: {
     needCalculate: true
    },
    indentsSizes: { },
    scrolling: { },
    content: { },
    tabs: {
     lastSizes: { }
    }
   };
   this.stripMarginsCorrected = false;
   this.elementsSavedSizes = null;
   this.isLoadTabByCallback = false;
   this.isActiveTabChanged = false;
   this.isTabStripContainerLoaded = false;
   this.shouldRaiseActiveTabChangedEvent = false;
   this.cacheEnabled = false;
   this.cacheDataFieldName = "aspxCache_CacheData";
   this.flexStrip = {
    available: false,
    enabled: false,
    timerID: -1,
    timeout: 500
   };
   this.contentObserving = {
    enabled: false,
    canObserve: false,
    collapsingEnabled: !__aspxIE || __aspxBrowserMajorVersion != 8,
    timerID: -1,
    timeout: 500
   };
   this.minLeftIndentSizeLite = 0;
   this.minRightIndentSizeLite = 0;
   this.minScrollVisibleAreaSize = 50;
   this.TabClick = new ASPxClientEvent();
   this.ActiveTabChanged = new ASPxClientEvent();
   this.ActiveTabChanging = new ASPxClientEvent();
  },
  Initialize: function () {
   this.constructor.prototype.Initialize.call(this);
   if(this.IsStateControllerEnabled())
    ASPxClientTabControlBase.PrepareStateController();
   if(this.IsControlVisible()) {
    this.InitializeTabControl();
    this.UpdateLayout();
   }
   this.initializationStepPassed = true;
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   this.PrepareControlElements();
   var tabsCell = this.GetTabsCell();
   if(tabsCell && this.IsStateControllerEnabled())
    aspxAssignAccessabilityEventsToChildrenLinks(tabsCell);
   this.UpdateAdjustmentFlags();
   this.UpdateTabsAdjustmentFlags();
   if(this.enableScrolling) {
    this.InitializeScrolling();
    this.GetScrollableArea().style.position = "relative";
    var sva = this.GetScrollVisibleArea();
    sva.style.overflow = "hidden";
    sva.style.position = "relative";
    _aspxSetElementFloat(sva, this.rtl ? "right" : "left");
   }
   if(this.IsControlVisible())
    this.InitializeTabControlInline();
  },
  InitializeTabControlInline: function () {
   _aspxRemoveClassNameFromElement(this.GetMainElement(), "dxtc-init");
   if(!this.IsDisplayTableSupported())
    _aspxRemoveClassNameFromElement(this.GetMainContainer(), "dxtc-init");
   if(this.GetTabStripContainer())
    this.StoreInitialIndentsSize();
   if(this.enableScrolling) {
    this.GetScrollVisibleArea().style.width = "1px";
    var tabStrip = this.GetTabsCell();
    var tabStripChilds = _aspxGetChildNodesByTagName(tabStrip, "LI");
    var scrollFiller = tabStripChilds[tabStripChilds.length - 1];
    scrollFiller.style.width = this.scrollingFillerElementWidth + "px";
   }
   this.InitializeEnabledAndVisible();
   this.InitializeTabControlCore();
   this.isFullyInitializedInline = true;
  },
  InitializeTabControl: function () {
   if(!this.isFullyInitializedInline)
    this.InitializeTabControlInline();
   this.CalculateSizes();
   this.AdjustPageContents();
   this.SubsribeForDomObserver();
   this.RefreshTabsTextAppearance();
   this.isFullyInitialized = true;
  },
  RefreshTabsTextAppearance: function() {
   if(!__aspxIE || __aspxBrowserMajorVersion > 7 || !this.GetTabsCell())
    return;
   for(var i = 0; i < this.tabs.length; i++) {
    if(!this.IsTabVisible(i))
     continue;
    var tabTextCell = this.GetTabTextCell(i, i === this.activeTabIndex);
    if(!tabTextCell)
     continue;
    var textContainers = _aspxGetChildNodesByTagName(tabTextCell, "SPAN");
    if(textContainers.length === 0)
     continue;
    var textContainer = textContainers[0];
    textContainer.style.width = "0px";
    var dummy = textContainer.offsetWidth;
    textContainer.style.width = "";
   }
  },
  SubsribeForDomObserver: function() {
   this.contentObserving.enabled = !!this.GetContentsCell();
   if(!this.contentObserving.enabled)
    return;
   this.EnableContentObservation();
   var callbackFunc = function(element) {
    this.OnContentSizeObserving(element);
   }.aspxBind(this);
   _aspxGetDomObserver().subscribe(this.name + this.GetContentsCellID(), callbackFunc);
  },
  EnableContentObservation: function() {
   this.adjustedSizes = this.GetAdjustedSizes();
   this.contentObserving.canObserve = true;
  },
  OnContentSizeObserving: function(element) {
   if(!this.contentObserving.canObserve || this.IsPartiallyInitialized() || !this.IsAdjustmentAllowed())
    return;
   if(this.contentObserving.collapsingEnabled)
    this.CollapseControl();
   if(this.IsAdjustmentRequiredCore()) {
    var activeContentElement = this.GetContentElement(this.activeTabIndex);
    if(activeContentElement) {
     aspxGetControlCollection().AdjustControlsCore(activeContentElement, true);
     this.DoSafeScrollPositionOperation(function () {
       this.AdjustControlCore();
     }.aspxBind(this));
    }
    else if(this.contentObserving.collapsingEnabled)
     this.ExpandControl();
   }
   else if(this.contentObserving.collapsingEnabled)
    this.ExpandControl();
  },
  IsAdjustmentRequiredCore: function() {
   var sizes = this.GetAdjustedSizes(),
    checkOnlyPrimarySize = this.emptyHeight && this.contentObserving.collapsingEnabled,
    result = (checkOnlyPrimarySize && sizes[this.primaryDimension] !== this.adjustedSizes[this.primaryDimension])
     || (!checkOnlyPrimarySize && (sizes.width !== this.adjustedSizes.width || sizes.height !== this.adjustedSizes.height));
   if(result)
    this.adjustedSizes = sizes;
   return result;
  },
  SetObservationPaused: function(paused) {
   if(this.contentObserving.enabled) {
    var observer = _aspxGetDomObserver(),
     contentContainer = this.GetContentsCell();
    if(paused)
     observer.pause(contentContainer, true);
    else
     observer.resume(contentContainer, true);
   }
  },
  IsPartiallyInitialized: function () {
   return !this.isFullyInitialized;
  },
  EnsureControlInitialized: function () {
   if(this.IsPartiallyInitialized())
    this.InitializeTabControl();
  },
  BrowserWindowResizeSubscriber: function () {
   return this.AdjustOnWindowResize();
  },
  OnBrowserWindowResize: function (evt) {
   if(!this.IsAdjustmentAllowed()) return;
   if(this.FlexStripEnabled()) {
    this.flexStrip.enabled = true;
    if(this.flexStrip.timerID !== -1)
     window.clearTimeout(this.flexStrip.timerID);
    var handler = function() { this.OnFlexStripTimeout(); }.aspxBind(this);
    this.flexStrip.timerID = window.setTimeout(handler, this.flexStrip.timeout);
   }
   if(this.contentObserving.enabled) {
    if(this.contentObserving.timerID !== -1)
     window.clearTimeout(this.contentObserving.timerID);
    this.contentObserving.canObserve = false;
    var enableObservationFunc = function() { this.EnableContentObservation(); }.aspxBind(this);
    this.contentObserving.timerID = window.setTimeout(enableObservationFunc, this.contentObserving.timeout);
   }
   this.AdjustControlCore();
  },
  FlexStripEnabled: function() {
   return this.flexStrip.available && this.IsTopBottomTabPosition() && this.GetTabsCell() &&
    !(this.enableScrolling || this.tabAlign == "Justify" || __aspxOpera && __aspxBrowserMajorVersion <= 12);
  },
  OnFlexStripTimeout: function() {
   this.flexStrip.timerID = -1;
   this.flexStrip.enabled = false;
   this.RecalculateTabStripWidthLite();
  },
  CanCauseReadjustment: function() {
   return false;
  },
  IsExpandableByAdjustment: function() {
   return true;
  },
  AdjustOnWindowResize: function () {
   var mainElement = this.GetMainElement();
   return this.IsPercentageSize(mainElement, "width") || this.IsPercentageSize(mainElement, "height");
  },
  InitializeEnabledAndVisible: function () {
   for(var i = 0; i < this.tabs.length; i++) {
    this.SetTabVisible(i, this.tabs[i].clientVisible, true);
    this.SetTabEnabled(i, this.tabs[i].clientEnabled, true);
   }
  },
  InitializeCallBackData: function () {
   var element = this.GetContentElement(this.activeTabIndex);
   if(element != null) element.loaded = true;
  },
  InitializeTabControlCore: function () {
   if(this.enableScrolling) {
    this.CalculateSizes();
    this.RecalculateTabStripWidthLite();
    this.AdjustTabScrollingCore(true, false);
   }
   else
    this.AdjustTabControlSizeLite();
   if(this.IsMultiRow())
    this.PlaceActiveTabRowToBottom(this.activeTabIndex);
  },
  StoreInitialIndentsSize: function () {
   var leftIndent = this.GetLeftIndentLite(),
    rightIndent = this.GetRightIndentLite(),
    dimension = this.IsTopBottomTabPosition() ? "width" : "height";
   if(leftIndent)
    this.minLeftIndentSizeLite = this.GetCachedElementSize(leftIndent);
   if(rightIndent)
    this.minRightIndentSizeLite = this.GetCachedElementSize(rightIndent);
   this.adjustmentVars.indentsSizes = {
    left: this.minLeftIndentSizeLite,
    right: this.minRightIndentSizeLite
   };
  },
  InitializeScrolling: function () {
   this.scrollManager = new ASPxScrollingManager(this, this.GetScrollableArea(), [1, 0], this.OnBeforeScrolling, this.OnAfterScrolling, true);
   this.scrollManager.scrollSessionInterval = 5;
   this.scrollManager.animationAcceleration = 0.5;
   this.InitializeScrollButton(this.GetScrollLeftButtonElement());
   this.InitializeScrollButton(this.GetScrollRightButtonElement());
  },
  InitializeScrollButton: function (button) {
   if(!button || !button.id) return;
   var img = _aspxGetChildByTagName(button, "IMG", 0);
   _aspxPreventElementDrag(img);
   _aspxSetElementSelectionEnabled(img, false);
   _aspxSetElementSelectionEnabled(button, false);
   var manager = this.scrollManager;
   var dir = button.id.charAt(button.id.length - 1) == "R" ? 1 : -1;
   if(this.enabled) {
    _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseDownEventName, function (e) { manager.StartScrolling(dir, 5, 5); _aspxPreventEvent(e); });
    _aspxAttachEventToElement(button, ASPxClientTouchUI.touchMouseUpEventName, function (e) { manager.StopScrolling(); });
    if(__aspxIE) {
     _aspxAttachEventToElement(button, "dblclick", function (e) { manager.StartScrolling(dir, 5, 5); manager.StopScrolling(); });
    }
   }
  },
  ScrollToShowTab: function (tabIndex, doAnimation) {
   if(!this.GetVisibleTabElement(tabIndex))
    return;
   var getWidtn = function (tc, index) {
    var res = 0;
    var tab = tc.GetVisibleTabElement(index);
    var separator = tc.GetSeparatorElement(index);
    if(tab && tab.style.display !== 'none')
     res += tab.offsetWidth;
    if(separator && separator.style.display !== 'none')
     res += separator.offsetWidth;
    return res;
   };
   var startIndex = this.firstShownTabIndex;
   var endIndex = tabIndex;
   var scrollToRight = !this.rtl;
   if(tabIndex < this.firstShownTabIndex) {
    startIndex = tabIndex;
    endIndex = this.firstShownTabIndex - 1;
    scrollToRight = !scrollToRight;
   }
   var width = 0;
   var shift = 0;
   var tabCount = 0;
   var scrollVisibleAreaWidth = this.GetScrollVisibleArea().offsetWidth;
   for(var i = startIndex; i <= endIndex; i++)
    width += getWidtn(this, i);
   for(var i = startIndex; i <= endIndex; i++) {
    var diff = width - shift;
    if(__aspxIE && __aspxBrowserVersion > 8)
     diff -= 1;
    if(diff > scrollVisibleAreaWidth || !(scrollToRight ^ this.rtl)) {
     shift += getWidtn(this, i);
     tabCount++;
    }
   }
   if(this.GetVisibleTabElement(tabIndex).offsetWidth >= scrollVisibleAreaWidth &&
      scrollToRight ^ this.rtl) {
    tabCount--;
    shift -= getWidtn(this, tabIndex);
   }
   if(shift <= 0) return;
   this.firstShownTabIndex += tabCount * (scrollToRight ^ this.rtl ? 1 : -1);
   if(doAnimation) {
    this.scrollManager.animationOffset = this.GetScrollAnimationOffset(this.firstShownTabIndex);
    this.scrollManager.PrepareForScrollAnimation();
    this.scrollManager.DoScrollSessionAnimation(scrollToRight ? -1 : 1);
   } else {
    this.scrollManager.SetScrolledAreaPosition(this.scrollManager.GetScrolledAreaPosition()
     + this.GetScrollAnimationOffset(this.firstShownTabIndex) * (scrollToRight ? -1 : 1));
   }
  },
  OnBeforeScrolling: function (manager, direction) {
   var tc = manager.owner;
   if(tc.IsFullyScrolledToLeft() && direction < 0 || tc.IsFullyScrolledToRight() && direction > 0) {
    manager.StopScrolling();
    return;
   }
   var prevFirstShownTabIndex = tc.firstShownTabIndex;
   var diff = (direction > 0 ^ tc.rtl) ? 1 : -1;
   do {
    if(tc.firstShownTabIndex <= 0 && diff < 0
    || tc.firstShownTabIndex >= tc.tabs.length - 1 && diff > 0) break;
    tc.firstShownTabIndex += diff;
   } while(!tc.IsTabVisible(tc.firstShownTabIndex));
   manager.animationOffset = tc.GetScrollAnimationOffset(tc.firstShownTabIndex);
  },
  OnAfterScrolling: function (manager, direction) {
   manager.owner.UpdateScrollButtonsEnabled();
  },
  AdjustTabScrolling: function (scrollToActiveTab, doAnimation) {
   this.CalculateSizes();
   this.AdjustTabScrollingCore(scrollToActiveTab, doAnimation);
  },
  AdjustTabScrollingCore: function (scrollToActiveTab, doAnimation) {
   if(!this.GetMainElement()) return;
   this.UpdateScrollButtonsVisible();
   if(scrollToActiveTab)
    this.ScrollToShowTab(this.activeTabIndex, doAnimation);
   if(this.enabled)
    this.UpdateScrollButtonsEnabled();
   this.AdjustPageContents();
   this.RefreshRelativeElements();
  },
  RefreshRelativeElements: function() {
   if(__aspxIE && __aspxBrowserMajorVersion < 8)
    this.GetScrollVisibleArea().className = "";
  },
  GetScrollAnimationOffset: function (newFirstShownTabIndex) {
   var newPos = 0;
   var i = this.GetNextVisibleTabIndex(-1);
   while(i < newFirstShownTabIndex && i > -1) {
    newPos += this.GetVisibleTabElement(i).offsetWidth;
    var separator = this.GetSeparatorElement(i);
    newPos += separator && separator.offsetWidth;
    i = this.GetNextVisibleTabIndex(i);
   }
   if(this.rtl)
    newPos = -newPos;
   return Math.abs(this.scrollManager.GetScrolledAreaPosition() + newPos);
  },
  AdjustScrollVisibleAreaWidth: function () {
   var sva = this.GetScrollVisibleArea();
   var mainElement = this.GetMainElement();
   if((mainElement.style.width == "" || mainElement.style.width == "0px") && !this.GetContentsCell()) {
    _aspxSetOffsetWidth(sva, this.GetScrollableAreaWidth());
    return;
   }
   _aspxSetOffsetWidth(sva, this.minScrollVisibleAreaSize);
   var scrollWrapper = this.GetTabsCellWrapperElement();
   var c = _aspxGetElementNodes(scrollWrapper);
   var restWidth = 0;
   for(var i = 0; i < c.length; i++)
    restWidth += c[i].offsetWidth;
   restWidth = restWidth - sva.offsetWidth + this.GetStripContainerBordersPaddingsMarginsWidth();
   var svaWidth = this.adjustmentVars.controlSizes.primary - restWidth;
   _aspxSetOffsetWidth(sva, svaWidth);
   var scrollWrapperWidth = restWidth + svaWidth;
   _aspxSetOffsetWidth(scrollWrapper, scrollWrapperWidth);
   this.RecalculateTabStripWidthLite();
  },
  DoSafeScrollPositionOperation: function (func) {
   var lastScrollYPos = _aspxGetDocumentScrollTop();
   var parent = this.GetMainElement().parentNode;
   var scrollParentYBefore = parent.scrollTop;
   func();
   if(scrollParentYBefore != parent.scrollTop)
    parent.scrollTop = scrollParentYBefore;
   var scrollY = _aspxGetDocumentScrollTop();
   if(lastScrollYPos != scrollY)
    window.scrollTo(_aspxGetDocumentScrollLeft(), lastScrollYPos);
  },
  UpdateScrollButtonsEnabled: function () {
   if(!this.IsStateControllerEnabled()) return;
   aspxGetStateController().SetElementEnabled(this.GetScrollLeftButtonElement(), !this.IsFullyScrolledToLeft());
   aspxGetStateController().SetElementEnabled(this.GetScrollRightButtonElement(), !this.IsFullyScrolledToRight());
  },
  UpdateScrollButtonsVisible: function () {
   this.AdjustScrollVisibleAreaWidth();
   var scrollButtonsVisible = this.GetScrollVisibleArea().offsetWidth < this.GetScrollableAreaWidth();
   _aspxSetElementDisplay(this.GetScrollLeftButtonContainer(), scrollButtonsVisible);
   _aspxSetElementDisplay(this.GetScrollRightButtonContainer(), scrollButtonsVisible);
   if(!scrollButtonsVisible)
    this.ScrollToShowTab(0, true);
   this.AdjustScrollVisibleAreaWidth();
  },
  GetScrollableAreaWidth: function () {
   return this.GetScrollableArea().offsetWidth - this.scrollingFillerElementWidth;
  },
  IsFullyScrolledToLeft: function () {
   if(!this.rtl)
    return _aspxPxToInt(this.GetScrollableArea().style.left) >= 0 || this.GetPrevVisibleTabIndex(this.firstShownTabIndex) < 0;
   var visibleWidth = this.GetScrollableAreaWidth() - _aspxPxToInt(this.GetScrollableArea().style.left);
   return visibleWidth <= this.GetScrollVisibleArea().offsetWidth ||
     this.GetNextVisibleTabIndex(this.firstShownTabIndex) < 0;
  },
  IsFullyScrolledToRight: function () {
   if(this.rtl)
    return _aspxPxToInt(this.GetScrollableArea().style.left) <= 0 || this.GetPrevVisibleTabIndex(this.firstShownTabIndex) < 0;
   var visibleWidth = this.GetScrollableAreaWidth() + _aspxPxToInt(this.GetScrollableArea().style.left);
   return visibleWidth <= this.GetScrollVisibleArea().offsetWidth ||
     this.GetNextVisibleTabIndex(this.firstShownTabIndex) < 0;
  },
  CorrectTabHeightOnStateChanged: function (element) {
   if(!this.adjustmentVars.tabsHeight.enabled) return;
   var tabElement = _aspxGetParentByTagName(element, "LI");
   var height = this.adjustmentVars.tabsHeight.lastValue;
   if(this.IsMultiRow() && !this.ElementHeightIsCorrected(tabElement))
    height -= this.GetTabSpaceSizeLite();
   height -= this.GetCachedVerticalBordersPaddingsMarginsWidth(tabElement);
   tabElement.style.height = height + "px";
  },
  IsDisplayTableSupported: function () {
   return !__aspxIE || __aspxBrowserMajorVersion > 7;
  },
  GetMainContainer: function() {
   var mainElement = this.GetMainElement();
   return this.IsDisplayTableSupported() ? mainElement : mainElement.rows[0].cells[0];
  },
  PrepareControlElements: function () {
   var mainElem = this.GetMainElement();
   if(this.IsPercentageSize(mainElem, "width"))
    mainElem.style.overflow = "visible";
   this.PrepareTabStrip();
   this.PrepareContentElements();
  },
  PrepareTabStrip: function () {
   var tabStrip = null;
   var mainContainer = this.GetMainContainer();
   var elements = _aspxGetElementNodes(mainContainer);
   var elementCount = elements.length;
   for(var i = 0; i < elementCount; i++) {
    var element = elements[i];
    if(element.tagName == "UL") {
     if(element.className.indexOf("dxtc-wrapper") == -1)
      tabStrip = element;
     else {
      element.id = this.name + this.GetTabsCellWrapperID();
      var c = _aspxGetDescendantNodesByClassName(element, "dxtc-strip");
      tabStrip = c.length > 0 ? c[0] : null;
     }
     break;
    }
   }
   if(tabStrip) {
    tabStrip.id = this.name + this.GetTabsCellID();
    var indexCorrection = (_aspxGetChildNodesByClassName(tabStrip, "dxr-fileTab").length > 0) ? 1 : 0;
    this.PrepareElements(tabStrip, "dxtc-tab",
     function (index) {
      var tabIndex = this.FindTabIndexByElementIndex(index);
      return this.name + this.GetTabElementID(tabIndex, false);
     }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-activeTab",
     function (index) {
      var tabIndex = this.FindActiveTabIndexByElementIndex(index, indexCorrection);
      return this.name + this.GetTabElementID(tabIndex, true);
     }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-spacer",
     function (index) {
      var separatorIndex = this.FindSeparatorIndexByElementIndex(index);
      if(!_aspxIsExists(separatorIndex)) return;
      return this.name + this.GetSeparatorElementID(separatorIndex);
     }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-link", function (index, el) { return el.parentNode.id + "T"; }.aspxBind(this));
    this.PrepareElements(tabStrip, "dxtc-img", function (index, el) { return el.parentNode.parentNode.id + "Img"; }.aspxBind(this));
   }
   this.PrepareTabStripForImageLoading();
  },
  PrepareTabStripForImageLoading: function() {
   var stripContainer = this.GetTabStripContainer();
   if(stripContainer) {
    _aspxAttachEventToElement(stripContainer, "load", function(evt) {
     if(this.isInitialized && this.isFullyInitialized && !this.isTabStripContainerLoaded) {
      this.isTabStripContainerLoaded = true;
      this.AdjustControlCore();
     }
    }.aspxBind(this));
   }
  },
  FindTabIndexByElementIndex: function (elementIndex) {
   var tabIndex = -1;
   for(var i = 0; i < this.tabs.length; i++) {
    if(this.tabs[i].visible)
     tabIndex++;
    if(!this.useClientVisibility && this.tabs[i].clientVisible && i == this.activeTabIndex)
     tabIndex--;
    if(tabIndex == elementIndex)
     return i;
   }
  },
  FindActiveTabIndexByElementIndex: function (elementIndex, indexCorrection) {
   if(!this.useClientVisibility)
    return this.activeTabIndex;
   var tabIndex = -1;
   for(var i = indexCorrection; i < this.tabs.length; i++) {
    var tab = this.tabs[i];
    if(tab.visible && tab.enabled)
     tabIndex++;
    if(tabIndex == elementIndex)
     return i;
   }
  },
  FindSeparatorIndexByElementIndex: function (elementIndex) {
   var tabIndex = -1;
   for(var i = 0; i < this.tabs.length; i++) {
    if(this.tabs[i].visible)
     tabIndex++;
    if(tabIndex == elementIndex) {
     if(this.IsMultiRow() && i > 0) {
      var nextIndex = this.GetNextVisibleTabIndex(i, true);
      if(nextIndex > -1 && _aspxElementHasCssClass(this.GetVisibleTabElement(nextIndex), "dxtc-n"))
       return i + 1;
     }
     if(!this.enableScrolling || this.GetNextVisibleTabIndex(i, true) > -1)
      return i;
    }
   }
  },
  PrepareContentElements: function () {
   var contentContainer = this.GetContentContainerElementLite();
   if(!contentContainer) return;
   contentContainer.id = this.name + this.GetContentsCellID();
   this.PrepareElements(contentContainer, "",
    function (index) {
     var contentIndex = this.FindContentIndexByElementIndex(index);
     return this.name + this.GetContentElementID(contentIndex);
    }.aspxBind(this));
   if(!this.GetTabsCell() && contentContainer.style.cssText)
    contentContainer.style.cssText = _aspxCreateImportantCssText(contentContainer.style.cssText);
  },
  FindContentIndexByElementIndex: function (elementIndex) {
   if(!this.useClientVisibility)
    return this.activeTabIndex;
   var tabIndex = -1;
   for(var i = 0; i < this.tabs.length; i++) {
    var tab = this.tabs[i];
    if(tab.visible && tab.enabled)
     tabIndex++;
    if(tabIndex == elementIndex)
     return i;
   }
  },
  PrepareElements: function (container, className, getId) {
   var elements = (className !== "") ? _aspxGetDescendantNodesByClassName(container, className) : _aspxGetChildNodes(container, function (el) { return !!el.tagName; });
   for(var i = 0; i < elements.length; i++) {
    if(elements[i].id === "") {
     var id = getId(i, elements[i]);
     if(id)
      elements[i].id = id;
    }
   }
  },
  UpdateTabsAdjustmentFlags: function () {
   if(!(this.GetTabStripContainer() && this.IsTopBottomTabPosition())) {
    this.adjustmentVars.tabsHeight.enabled = false;
    return;
   }
   this.adjustmentVars.tabsHeight.enabled = true;
   var elements = this.GetTabsElements(),
    elementCount = elements.length;
   for(var i = 0; i < elementCount; i++) {
    var element = elements[i];
    if(this.adjustmentVars.tabsHeight.enabled && element.style.height)
     this.adjustmentVars.tabsHeight.enabled = false;
   }
  },
  AdjustTabContents: function() {
   this.CorrectWrappedText(this.GetTabLinkElements);
  },
  GetTabLinkElements: function () {
   var container = this.GetTabStripContainer();
   if(container)
    return _aspxGetDescendantNodesByClassName(container, "dxtc-link");
   return null;
  },
  GetTabStripElementHeight: function () {
   var tabHeight = this.GetTabElementHeight();
   var templateHeight = this.GetIndentTemplateElementHeight();
   return templateHeight > tabHeight ? templateHeight : tabHeight;
  },
  GetTabElementHeight: function () {
   var result = 0;
   for(var i = 0; i < this.tabs.length; i++) {
    if(!this.IsTabVisible(i))
     continue;
    var element = this.GetVisibleTabElement(i);
    if(element) {
     var oldHeight;
     if(this.IsTopBottomTabPosition() && this.adjustmentVars.tabsHeight.enabled && element.style.height) {
      oldHeight = element.style.height;
      element.style.height = "";
     }
     var height = this.GetCachedElementSize(element, "height");
     if(height > result)
      result = height;
     if(oldHeight)
      element.style.height = oldHeight;
    }
   }
   return result;
  },
  GetIndentTemplateElementHeight: function () {
   var result = 0;
   var templateElements = _aspxGetDescendantNodesByClassName(this.GetTabStripContainer(), "dxtc-it");
   for(var i = 0; i < templateElements.length; i++) {
    var templateHeight = this.GetCachedElementSize(templateElements[i], "height");
    if(templateHeight > result)
     result = templateHeight;
   }
   return result;
  },
  SetTabStripElementsHeight: function (height, activeRowHeight) {
   var elements = _aspxGetChildNodes(this.GetTabStripContainer(), function (e) {
    return e.tagName == "LI" && e.className != "dxtc-lineBreak";
   });
   if(this.enableScrolling) {
    var subElements = _aspxGetChildNodesByTagName(this.GetTabsCell(), "LI");
    elements.push.apply(elements, subElements);
   }
   var elementCount = elements.length;
   for(var i = 0; i < elementCount; i++) {
    var element = elements[i];
    var heightValue = this.IsMultiRow() && this.ElementHeightIsCorrected(element)
     ? activeRowHeight : height;
    this.SetCachedElementHeight(element, heightValue);
   }
  },
  ElementHeightIsCorrected: function(element) {
   return this.tabPosition == "Top" ? (element.style.marginTop != "0px") : (element.style.marginBottom != "0px");
  },
  GetContentContainerElementLite: function () {
   var c = _aspxGetChildNodesByClassName(this.GetMainContainer(), "dxtc-content");
   return c.length > 0 ? c[0] : null;
  },
  SetInnerElementsVisibility: function (parent, visible) {
   var elements = _aspxGetElementNodes(parent);
   for(var i = 0; i < elements.length; i++)
    _aspxSetElementDisplay(elements[i], visible);
  },
  SetInnerElementsVisibilityExperimental: function (parent, visible) {
   if(visible)
    this.ExpandInnerElements(parent);
   else
    this.CollapseInnerElements(parent);
  },
  CollapseInnerElements: function (parent) {
   if(!this.elementsSavedSizes)
    this.elementsSavedSizes = {};
   var elements = _aspxGetElementNodes(parent);
   for(var i = 0; i < elements.length; i++) {
    var element = elements[i];
    this.elementsSavedSizes[i] = {
     width: element.style.width,
     height: element.style.height
    };
    element.style.width = "1px";
    element.style.height = "1px";
   }
  },
  ExpandInnerElements: function (parent) {
   var elements = _aspxGetElementNodes(parent);
   for(var i = 0; i < elements.length; i++) {
    elements[i].style.width = this.elementsSavedSizes[i].width;
    elements[i].style.height = this.elementsSavedSizes[i].height;
   }
  },
  GetCachedMarginsWidth: function(element, dimension) {
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension == "width" ? cache.horizontalMarginsWidth : cache.verticalMarginsWidth;
  },
  GetCachedBordersPaddingsMarginsWidth: function(element, dimension) {
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension == "width" ? cache.horizontalBordersPaddingsMarginsWidth : cache.verticalBordersPaddingsMarginsWidth;
  },
  GetCachedBordersAndPaddingsWidth: function(element, dimension) {
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension == "width" ? cache.horizontalBordersAndPaddingsWidth : cache.verticalBordersAndPaddingsWidth;
  },
  GetCachedVerticalMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.verticalMarginsWidth;
  },
  GetCachedHorizontalMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.horizontalMarginsWidth;
  },
  GetCachedVerticalBordersPaddingsMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.verticalBordersPaddingsMarginsWidth;
  },
  GetCachedHorizontalBordersPaddingsMarginsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.horizontalBordersPaddingsMarginsWidth;
  },
  GetCachedVerticalBordersAndPaddingsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.verticalBordersAndPaddingsWidth;
  },
  GetCachedHorizontalBordersAndPaddingsWidth: function(element) {
   var cache = this.GetOrCreateElementCache(element);
   return cache.horizontalBordersAndPaddingsWidth;
  },
  GetCachedElementInnerSize: function(element, dimension) {
   if(!element) return 0;
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension === "width" ? cache.width : cache.height;
  },
  GetCachedElementSize: function(element, dimension) {
   if(!element) return 0;
   if(!dimension)
    dimension = this.primaryDimension;
   var cache = this.GetOrCreateElementCache(element);
   return dimension === "width" ? cache.outerWidth : cache.outerHeight;
  },
  GetElementCurrentStyle: function(element) {
   var style = element.currentStyle;
   if(style)
    return window.getComputedStyle ? window.getComputedStyle(element, null) : style;
   else
    return _aspxGetCurrentStyle(element);
  },
  CacheElement: function(element) {
   var cache = { },
    style = this.GetElementCurrentStyle(element);
   var useOffsetSizes = __aspxIE && __aspxBrowserMajorVersion < 9 || style.height == "auto";
   cache.borderLeftWidth = style.borderLeftStyle != "none" ? _aspxPxToFloat(style.borderLeftWidth) : 0;
   cache.borderRightWidth = style.borderRightStyle != "none" ? _aspxPxToFloat(style.borderRightWidth) : 0;
   cache.borderTopWidth = style.borderTopStyle != "none" ? _aspxPxToFloat(style.borderTopWidth) : 0;
   cache.borderBottomWidth = style.borderBottomStyle != "none" ? _aspxPxToFloat(style.borderBottomWidth) : 0;
   cache.paddingLeft = _aspxPxToFloat(style.paddingLeft);
   cache.paddingRight = _aspxPxToFloat(style.paddingRight);
   cache.paddingTop = _aspxPxToFloat(style.paddingTop);
   cache.paddingBottom = _aspxPxToFloat(style.paddingBottom);
   cache.marginLeft = _aspxPxToFloat(style.marginLeft);
   cache.marginRight = _aspxPxToFloat(style.marginRight);
   cache.marginTop = _aspxPxToFloat(style.marginTop);
   cache.marginBottom = _aspxPxToFloat(style.marginBottom);
   cache.horizontalBorderAndPaddingsWidth = cache.borderLeftWidth + cache.borderRightWidth + cache.paddingLeft + cache.paddingRight;
   cache.verticalBorderAndPaddingsWidth = cache.borderTopWidth + cache.borderBottomWidth + cache.paddingTop + cache.paddingBottom;
   cache.horizontalMarginsWidth = cache.marginLeft + cache.marginRight;
   cache.verticalMarginsWidth = cache.marginTop + cache.marginBottom;
   cache.horizontalBordersPaddingsMarginsWidth = cache.horizontalBorderAndPaddingsWidth + cache.horizontalMarginsWidth;
   cache.verticalBordersPaddingsMarginsWidth = cache.verticalBorderAndPaddingsWidth + cache.verticalMarginsWidth;
   if(useOffsetSizes) {
    cache.width = element.offsetWidth - cache.horizontalBorderAndPaddingsWidth;
    cache.height = element.offsetHeight - cache.verticalBorderAndPaddingsWidth;
   }
   else {
    cache.width = _aspxPxToFloat(style.width);
    cache.height = _aspxPxToFloat(style.height);
   }
   cache.outerWidth = cache.width + cache.horizontalBordersPaddingsMarginsWidth;
   cache.outerHeight = cache.height + cache.verticalBordersPaddingsMarginsWidth;
   cache.needRefresh = !(__aspxDocumentLoaded && _aspxGetElementDisplay(element));
   element[this.cacheDataFieldName] = cache;
  },
  GetElementCache: function(element) {
   return element[this.cacheDataFieldName];
  },
  GetOrCreateElementCache: function(element) {
   this.EnsureElementCached(element);
   return this.GetElementCache(element);
  },
  EnsureElementCached: function(element) {
   var cache = this.GetElementCache(element);
   if(!this.cacheEnabled || this.UseProportionalTabSizes() || !cache || cache.needRefresh)
    this.CacheElement(element);
  },
  ClearElementCache: function(element) {
   if(element)
    element[this.cacheDataFieldName] = null;
  },
  ClearTabElementsCache: function(index) {
   var activeTabElement = this.GetTabElement(index, true),
    tabElement = this.GetTabElement(index, false);
   if(activeTabElement)
    this.ClearElementCache(activeTabElement);
   if(tabElement)
    this.ClearElementCache(tabElement);
   this.adjustmentVars.tabsHeight.needCalculate = true;
  },
  IsPercentageSize: function (element, dimension) {
   return _aspxIsPercentageSize(element.style[dimension]);
  },
  CollapseControl: function() {
   if(this.IsPartiallyInitialized()) return;
   this.isControlCollapsed = true;
   if(this.enableScrolling)
    this.CollapseTabScrolling();
   else
    this.CollapseControlCommon();
   if(this.adjustmentVars.content.needAdjustment) {
    this.SetObservationPaused(true);
    var contentContainer = this.GetContentsCell();
    this.adjustmentVars.content.lastHeight = contentContainer.style.height;
    contentContainer.style.height = "";
    this.SetObservationPaused(false);
   }
  },
  CollapseControlCommon: function() {
   var stripContainer = this.GetTabStripContainer(),
    leftIndent = this.GetLeftIndentLite(),
    rightIndent = this.GetRightIndentLite();
   if(!stripContainer) return;
   this.adjustmentVars.indentsSizes.leftLastSize = leftIndent.style[this.primaryDimension];
   this.adjustmentVars.indentsSizes.rightLastSize = rightIndent.style[this.primaryDimension];
   this.adjustmentVars.stripLastSize = stripContainer.style[this.primaryDimension];
   if(this.UseProportionalTabSizes())
    this.CollapseTabSizes();
   this.SetCachedElementSize(leftIndent, this.minLeftIndentSizeLite);
   this.SetCachedElementSize(rightIndent, this.minRightIndentSizeLite);
   this.RecalculateTabStripWidthLite(this.GetStripSizeLite(), this.minLeftIndentSizeLite, this.minRightIndentSizeLite);
  },
  CollapseTabSizes: function() {
   this.adjustmentVars.tabs.lastSizes = { };
   var tabElements = this.GetTabsElements();
   for(var i = 0, count = tabElements.length; i < count; i++) {
    var tabElement = tabElements[i];
    this.adjustmentVars.tabs.lastSizes[tabElement.id] = tabElement.style.width;
    tabElement.style.width = "";
   }
  },
  CollapseTabScrolling: function() {
   var scrollWrapper = this.GetTabsCellWrapperElement(),
    sva = this.GetScrollVisibleArea();
   if(!scrollWrapper) return;
   this.adjustmentVars.scrolling.svaLastWidth = sva.style.width;
   this.adjustmentVars.scrolling.wrapperLastWidth = scrollWrapper.style.width;
   var mainElement = this.GetMainElement();
   if((mainElement.style.width == "" || mainElement.style.width == "0px") && !this.GetContentsCell()) {
    _aspxSetOffsetWidth(sva, this.GetScrollableAreaWidth());
    return;
   }
   _aspxSetOffsetWidth(sva, this.minScrollVisibleAreaSize);
   var c = _aspxGetElementNodes(scrollWrapper),
    scrollWrapperWidth = 0;
   for(var i = 0; i < c.length; i++)
    scrollWrapperWidth += c[i].offsetWidth;
   scrollWrapper.style.width = scrollWrapperWidth + "px";
  },
  ExpandControl: function() {
   this.isControlCollapsed = false;
   var stripContainer = this.GetTabStripContainer()
   if(!stripContainer)
    return;
   if(this.enableScrolling) {
    var sva = this.GetScrollVisibleArea(),
     scrollWrapper = this.GetTabsCellWrapperElement();
    sva.style.width = this.adjustmentVars.scrolling.svaLastWidth;
    scrollWrapper.style.width = this.adjustmentVars.scrolling.wrapperLastWidth;
   }
   else {
    var leftIndent = this.GetLeftIndentLite(),
     rightIndent = this.GetRightIndentLite();
    leftIndent.style[this.primaryDimension] = this.adjustmentVars.indentsSizes.leftLastSize;
    rightIndent.style[this.primaryDimension] = this.adjustmentVars.indentsSizes.rightLastSize;
    if(this.IsTopBottomTabPosition()) {
     stripContainer.style.width = this.adjustmentVars.stripLastSize;
     if(this.UseProportionalTabSizes())
      this.ExpandTabSizes();
    }
   }
   if(this.adjustmentVars.content.needAdjustment) {
    this.SetObservationPaused(true);
    var contentContainer = this.GetContentsCell();
    contentContainer.style.height = this.adjustmentVars.content.lastHeight;
    this.SetObservationPaused(false);
   }
  },
  ExpandTabSizes: function() {
   var tabElements = this.GetTabsElements();
   for(var i = 0, count = tabElements.length; i < count; i++) {
    var tabElement = tabElements[i];
    tabElement.style.width = this.adjustmentVars.tabs.lastSizes[tabElement.id];
   }
  },
  NeedCollapseControlCore: function () {
   return true;
  },
  CalculateSizes: function () {
   this.CalculateTabsHeight();
   this.AdjustTabStripElementsHeight();
   if(!this.isControlCollapsed)
    this.CollapseControl();
   this.isControlCollapsed = false;
   this.adjustmentVars.stripSizes = { };
   this.UpdateStripSizes(this.GetStripSizeLite(this.UseProportionalTabSizes()));
   this.AdjustTabStripHeight();
   this.adjustmentVars.mainElementSizes = this.GetMainElementInnerSizes();
   this.adjustmentVars.controlSizes = {};
   this.adjustmentVars.controlSizes.primary = this.GetMaxValueExtended(
    this.enableScrolling ? this.minScrollVisibleAreaSize : this.adjustmentVars.stripFullSize,
    this.adjustmentVars.mainElementSizes.primary);
   this.adjustmentVars.controlSizes.secondary = this.adjustmentVars.mainElementSizes.secondary;
   this.CalculateContentHeight();
  },
  CalculateTabsHeight: function() {
   this.adjustmentVars.tabsHeight.needCalculate = this.UseProportionalTabSizes() || this.adjustmentVars.tabsHeight.needCalculate || !__aspxDocumentLoaded;
   if(!(this.adjustmentVars.tabsHeight.enabled && this.adjustmentVars.tabsHeight.needCalculate))
    return;
   var height = this.GetTabStripElementHeight();
   var lastTabHeight = this.adjustmentVars.tabsHeight.lastValue;
   if(lastTabHeight && (height == lastTabHeight || Math.abs(height - lastTabHeight) < 0.1))
    return;
   this.adjustmentVars.tabsHeight.needCalculate = !this.cacheEnabled;
   this.adjustmentVars.tabsHeight.lastValue = height;
   this.adjustmentVars.tabsHeight.needUpdate = true;
  },
  AdjustTabStripHeight: function() {
   var stripContainer = this.GetTabStripContainer();
   if(stripContainer) {
    stripContainer.style.height = "";
    this.ClearElementCache(stripContainer);
    var height = this.GetCachedElementInnerSize(stripContainer, this.secondaryDimension);
    this.adjustmentVars.stripSizes.secondary = height;
    height = this.GetPreparedSizeValue(height);
    height = height > 0 ? height : 0;
    stripContainer.style.height = height + "px";
   }
  },
  AdjustTabStripElementsHeight: function() {
   if(!this.adjustmentVars.tabsHeight.needUpdate)
    return;
   var height = this.adjustmentVars.tabsHeight.lastValue,
    activeRowTabHeight = null;
   if(this.IsMultiRow()) {
    activeRowTabHeight = height;
    height -= this.GetTabSpaceSizeLite();
   }
   this.SetTabStripElementsHeight(height, activeRowTabHeight);
   this.adjustmentVars.tabsHeight.needUpdate = false;
  },
  CalculateContentHeight: function() {
   var mainElement = this.GetMainElement(),
    contentContainer = this.GetContentsCell();
   this.adjustmentVars.content.needAdjustment = !!(contentContainer && mainElement.style.height);
   if(this.adjustmentVars.content.needAdjustment) {
    var contentHeight;
    if(this.IsTopBottomTabPosition()) {
     var stripContainer = this.GetTabStripContainer();
     contentHeight = this.adjustmentVars.controlSizes.secondary - this.adjustmentVars.stripSizes.secondary -
      (stripContainer ? this.GetCachedBordersPaddingsMarginsWidth(stripContainer, "height") : 0);
    }
    else
     contentHeight = this.adjustmentVars.controlSizes.primary;
    this.adjustmentVars.content.height = contentHeight;
   }
  },
  UpdateStripSizes: function(primarySize, secondarySize) {
   this.adjustmentVars.stripSizes.primary = primarySize;
   if(_aspxIsExists(secondarySize))
    this.adjustmentVars.stripSizes.secondary = secondarySize;
   if(!this.enableScrolling)
    this.adjustmentVars.stripFullSize = this.adjustmentVars.stripSizes.primary + this.minLeftIndentSizeLite + this.minRightIndentSizeLite;
  },
  NeedCalculateSecondarySize: function() {
   return !(this.ControlHasEmptySize(this.secondaryDimension) && this.IsTopBottomTabPosition());
  },
  AdjustPageContents: function () {
   if(!(this.adjustmentVars.content.needAdjustment)) return;
   var contentContainer = this.GetContentsCell();
   this.SetCachedElementSize(contentContainer, this.adjustmentVars.content.height, "height");
  },
  GetMainElementInnerSizes: function() {
   var mainElement = this.GetMainElement();
   this.ClearElementCache(mainElement);
   return {
    primary: this.GetCachedElementInnerSize(mainElement, this.primaryDimension),
    secondary: this.GetCachedElementInnerSize(mainElement, this.secondaryDimension)
   };
  },
  ControlHasEmptySize: function (dimension) {
   var mainElement = this.GetMainElement();
   var sizeValue = dimension == "width" ? mainElement.style.width : mainElement.style.height;
   return !sizeValue;
  },
  UpdateAdjustmentFlags: function () {
   var mainElement = this.GetMainElement();
   if(mainElement) {
    this.UpdatePercentSizeConfig([mainElement.style.width], [mainElement.style.height]);
    if(!this.IsTopBottomTabPosition()) {
     this.primaryDimension = "height";
     this.secondaryDimension = "width";
    }
   }
  },
  RequireContentMeasurement: function () {
   var mainElement = this.GetMainElement();
   return _aspxIsPercentageSize(mainElement.style.width) || _aspxIsPercentageSize(mainElement.style.height);
  },
  GetMaxValue: function (val1, val2) {
   return val1 > val2 ? val1 : val2;
  },
  GetMaxValueExtended: function (val1, val2, val3) {
   var ret = 0;
   for(var i = 0; i < arguments.length; i++) {
    if(arguments[i] > ret)
     ret = arguments[i];
   }
   return ret;
  },
  AdjustTabControlSizeLite: function () {
   this.CalculateSizes();
   if(!this.GetTabsCell()) {
    this.AdjustPageContents();
    return;
   }
   this.PrepareStripsForIE("none", "both");
   if(this.IsMultiRow())
    this.SetStripMarginsLite(0, false);
   this.CorrectTabsWidthLite();
   var controlSize = this.adjustmentVars.controlSizes.primary;
   var tabsSize = this.adjustmentVars.stripSizes.primary;
   var indentsSize = controlSize - tabsSize - this.GetStripContainerBordersPaddingsMarginsWidth();
   this.ClearElementCache(this.GetLeftIndentLite());
   this.ClearElementCache(this.GetRightIndentLite());
   switch(this.tabAlign) {
    case "Left":
     var leftIndentSize = this.GetCachedElementSize(this.GetLeftIndentLite());
     indentsSize = indentsSize - leftIndentSize;
     this.adjustmentVars.indentsSizes = {
      left: leftIndentSize,
      right: this.GetMaxValue(indentsSize, this.minRightIndentSizeLite)
     };
     this.SetCachedElementSize(this.GetRightIndentLite(), this.adjustmentVars.indentsSizes.right);
     break;
    case "Right":
     var rightIndentSize = this.GetCachedElementSize(this.GetRightIndentLite());
     indentsSize = indentsSize - rightIndentSize;
     this.adjustmentVars.indentsSizes = {
      left: this.GetMaxValue(indentsSize, this.minLeftIndentSizeLite),
      right: rightIndentSize
     };
     this.SetCachedElementSize(this.GetLeftIndentLite(), this.adjustmentVars.indentsSizes.left);
     break;
    case "Center":
     indentsSize = Math.floor(indentsSize / 2);
     this.adjustmentVars.indentsSizes.left = this.GetMaxValue(indentsSize, this.minLeftIndentSizeLite);
     this.SetCachedElementSize(this.GetLeftIndentLite(), this.adjustmentVars.indentsSizes.left);
     indentsSize = controlSize - (tabsSize + indentsSize) - this.GetStripContainerBordersPaddingsMarginsWidth();
     this.adjustmentVars.indentsSizes.right = this.GetMaxValue(indentsSize, this.minRightIndentSizeLite);
     this.SetCachedElementSize(this.GetRightIndentLite(), this.adjustmentVars.indentsSizes.right);
     break;
    default:
     indentsSize = this.GetCachedElementSize(this.GetLeftIndentLite()) + this.GetCachedElementSize(this.GetRightIndentLite());
     tabsSize = controlSize - indentsSize;
   }
   if(this.UseProportionalTabSizes()) {
    var stripSize = tabsSize - this.GetStripContainerBordersPaddingsMarginsWidth();
    this.SetStripSizeLite(stripSize);
    this.UpdateStripSizes(stripSize);
   }
   this.RecalculateTabStripWidthLite();
   this.AdjustPageContents();
   if(this.IsMultiRow())
    this.SetStripMarginsLite(this.GetLeftIndentLite().offsetWidth, true);
   this.PrepareStripsForIE(this.rtl ? "right" : "left", "none");
  },
  PrepareStripsForIE: function (indentClearAttribute, lineBreakClearAttribute) {
   if(__aspxIE && __aspxBrowserVersion < 8 && this.IsMultiRow()) {
    var leftIndent = this.GetLeftIndentLite();
    leftIndent.style.clear = indentClearAttribute;
    var c = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxtc-lineBreak");
    for(var i = 0; i < c.length; i++)
     c[i].style.clear = lineBreakClearAttribute;
   }
  },
  GetStripContainerBordersPaddingsMarginsWidth: function() {
   if(this.IsTopBottomTabPosition() && !this.enableScrolling)
    return this.GetCachedHorizontalBordersPaddingsMarginsWidth(this.GetTabsCell());
   if(this.enableScrolling)
    return this.GetCachedHorizontalBordersPaddingsMarginsWidth(this.GetScrollVisibleArea().parentNode);
   return this.GetCachedVerticalBordersPaddingsMarginsWidth(this.GetTabsCell());
  },
  GetStripSizeLite: function (storeTabSizes) {
   if(!this.GetTabStripContainer())
    return 0;
   if(storeTabSizes) {
    this.adjustmentVars.tabSizes = {};
    this.adjustmentVars.tabSizesSums = {};
   }
   var size = 0,
    prevSize = 0,
    tab,
    rowIndex = this.IsMultiRow() ? -1 : 0,
    needTabSizeCorrection = false;
   for(var i = 0; i < this.tabs.length; i++) {
    tab = this.GetVisibleTabElement(i);
    if(!tab)
     continue;
    if(_aspxElementHasCssClass(tab, "dxtc-n")) {
     rowIndex++;
     if(prevSize < size)
      prevSize = size;
     size = 0;
     needTabSizeCorrection = this.stripMarginsCorrected && !_aspxElementHasCssClass(tab, "dxtc-activeRowItem");
    }
    if(!this.GetTab(i).clientVisible)
     continue;
    var tabSize = this.GetCachedElementSize(tab, this.primaryDimension);
    if(needTabSizeCorrection) {
     tabSize -= this.GetLeftIndentLite().offsetWidth;
     needTabSizeCorrection = false;
    }
    if(storeTabSizes) {
     this.adjustmentVars.tabSizes[i] = tabSize;
     var tabSizesSums = this.adjustmentVars.tabSizesSums;
     if(!_aspxIsExists(tabSizesSums[rowIndex]))
      tabSizesSums[rowIndex] = 0;
     tabSizesSums[rowIndex] += tabSize;
    }
    var separator = this.GetSeparatorElement(i);
    size += tabSize + this.GetCachedElementSize(separator, this.primaryDimension);
   }
   if(prevSize > size)
    size = prevSize;
   return size;
  },
  GetTabRows: function () {
   var rows = [],
    rowIndex = -1,
    tabIndex = 0;
   while(tabIndex < this.tabs.length) {
    var tabElement = this.GetVisibleTabElement(tabIndex);
    if(tabElement) {
     if(rowIndex < 0 || _aspxElementHasCssClass(tabElement, "dxtc-n")) {
      rowIndex++;
      rows[rowIndex] = [];
     }
     if(_aspxGetElementDisplay(tabElement))
      rows[rowIndex].push(tabIndex);
    }
    tabIndex++;
   }
   return rows;
  },
  SetStripSizeLite: function (size) {
   var spacerSize = this.GetTabSpaceSizeLite(),
    rows = this.GetTabRows();
   for(var i = 0; i < rows.length; i++) {
    var row = rows[i],
     count = row.length,
     rowSize = size - spacerSize * (count - 1),
     newTabSizesSum = 0;
    for(var index = 0; index < count; index++) {
     var tabIndex = row[index],
      tabSize = this.adjustmentVars.tabSizes[tabIndex],
      newTabSize = Math.floor(rowSize * (tabSize / this.adjustmentVars.tabSizesSums[i]));
     newTabSizesSum += newTabSize;
     if(index == count - 1)
      newTabSize += rowSize - newTabSizesSum;
     var activeTabElement = this.GetTabElement(tabIndex, true),
      tabElement = this.GetTabElement(tabIndex, false);
     this.SetCachedElementSize(activeTabElement, newTabSize);
     this.SetCachedElementSize(tabElement, newTabSize);
     this.ClearElementCache(activeTabElement);
     this.ClearElementCache(tabElement);
    }
   }
  },
  GetTabSpaceSizeLite: function () {
   var spacers = _aspxGetChildNodesByClassName(this.GetTabsCell(), "dxtc-spacer"),
    size = spacers.length > 0 ? this.GetCachedElementSize(spacers[0]) : 0;
   return size;
  },
  RecalculateTabStripWidthLite: function(stripSize, leftIndentSize, rightIndentSize) {
   if(this.flexStrip.enabled) {
    var tabStrip = this.GetTabsCell();
    if(tabStrip.style.width)
     tabStrip.style.width = "";
    return;
   }
   if(!this.IsTopBottomTabPosition())
    return;
   if(stripSize === undefined)
    stripSize = this.adjustmentVars.stripSizes.primary;
   if(leftIndentSize === undefined)
    leftIndentSize = this.adjustmentVars.indentsSizes.left;
   if(rightIndentSize === undefined)
    rightIndentSize = this.adjustmentVars.indentsSizes.right;
   var tabStrip = this.GetTabsCell(),
    tabStripActualWidth = stripSize + leftIndentSize + rightIndentSize;
   if(this.enableScrolling)
    tabStripActualWidth += this.scrollingFillerElementWidth;
   tabStripActualWidth = this.GetPreparedSizeValue(tabStripActualWidth);
   tabStrip.style.width = tabStripActualWidth + "px";
  },
  GetPreparedSizeValue: function(sizeValue) {
   if(!__aspxIE || __aspxBrowserMajorVersion < 9)
    return sizeValue;
   var res = Math.floor(sizeValue);
   while(res < sizeValue)
    res += 0.1;
   return res;
  },
  CorrectTabsWidthLite: function() {
   if(!(__aspxIE && __aspxBrowserVersion < 8 && !this.IsTopBottomTabPosition()))
    return;
   var tabStrip = this.GetTabsCell();
   var collection = _aspxGetElementNodes(tabStrip);
   var width = this.GetCachedElementInnerSize(tabStrip, this.secondaryDimension);
   if(this.prevTabStripWidth && this.prevTabStripWidth == width)
    return;
   for(var i = 0; i < collection.length; i++)
    this.SetCachedElementWidth(collection[i], width);
   this.prevTabStripWidth = width;
  },
  SetCachedElementSize: function(element, size, dimension) {
   if(!element) return;
   if(!dimension)
    dimension = this.primaryDimension;
   if(dimension == "width")
    this.SetCachedElementWidth(element, size);
   else
    this.SetCachedElementHeight(element, size);
  },
  SetCachedElementWidth: function(element, width) {
   var cache = this.GetOrCreateElementCache(element);
   width -= cache.horizontalBordersPaddingsMarginsWidth;
   if(width >= 0)
    element.style.width = width + "px";
  },
  SetCachedElementHeight: function(element, height) {
   var cache = this.GetOrCreateElementCache(element);
   height -= cache.verticalBordersPaddingsMarginsWidth;
   if(height >= 0)
    element.style.height = height + "px";
  },
  GetLeftIndentLite: function () {
   var container = this.GetTabStripContainer();
   return container ? _aspxGetChildrenByPartialClassName(container, "dxtc-leftIndent")[0] : null;
  },
  GetRightIndentLite: function () {
   var container = this.GetTabStripContainer();
   return container ? _aspxGetChildrenByPartialClassName(this.GetTabStripContainer(), "dxtc-rightIndent")[0] : null;
  },
  GetTabsCellID: function () {
   return "_TC";
  },
  GetTabsCell: function () {
   return this.GetChild(this.GetTabsCellID());
  },
  GetTabsCellWrapperID: function () {
   return "_WC";
  },
  GetTabsCellWrapperElement: function () {
   return this.GetChild(this.GetTabsCellWrapperID());
  },
  GetTabStripContainer: function () {
   return this.enableScrolling ? this.GetTabsCellWrapperElement() : this.GetTabsCell();
  },
  GetTabElementID: function (index, active) {
   return "_" + (active ? "A" : "") + "T" + index;
  },
  GetTabElement: function (index, active) {
   return this.GetChild(this.GetTabElementID(index, active));
  },
  GetTabsElements: function() {
   var tabsCell = this.GetTabsCell();
   if(!tabsCell)
    return [];
   return _aspxGetChildNodes(tabsCell, function(el) {
    return el.tagName === "LI" && el.className && _aspxElementHasCssClass(el, "(dxtc-tab|dxtc-activeTab)");
   });
  },
  GetVisibleTabElement: function (index) {
   return this.GetChild(this.GetTabElementID(index, index == this.activeTabIndex));
  },
  GetContentsCellID: function () {
   return "_CC";
  },
  GetContentsCell: function () {
   return this.GetChild(this.GetContentsCellID());
  },
  GetContentElementID: function (index) {
   return "_C" + index;
  },
  GetContentElement: function (index) {
   return this.GetChild(this.GetContentElementID(index));
  },
  GetContentHolder: function (index) {
   var contentElement = this.GetContentElement(index);
   if(!contentElement)
    return null;
   return this.IsDisplayTableSupported()
    ? _aspxGetChildNodesByTagName(contentElement, "DIV")[0]
    : contentElement.rows[0].cells[0];
  },
  GetSeparatorElementID: function (index) {
   return "_T" + index + "S";
  },
  GetSeparatorElement: function (index) {
   return this.GetChild(this.GetSeparatorElementID(index));
  },
  GetScrollVisibleAreaID: function () {
   return "_SVA";
  },
  GetScrollVisibleArea: function () {
   return this.GetChild(this.GetScrollVisibleAreaID());
  },
  GetScrollableArea: function () {
   return this.GetTabsCell();
  },
  GetScrollLeftButtonID: function () {
   return "_SBL";
  },
  GetScrollLeftButtonElement: function () {
   return this.GetChild(this.GetScrollLeftButtonID());
  },
  GetScrollLeftButtonContainer: function () {
   return this.GetScrollLeftButtonElement().parentNode;
  },
  GetScrollRightButtonID: function () {
   return "_SBR";
  },
  GetScrollRightButtonElement: function () {
   return this.GetChild(this.GetScrollRightButtonID());
  },
  GetScrollRightButtonContainer: function () {
   return this.GetScrollRightButtonElement().parentNode;
  },
  GetActiveTabIndexInputElement: function (index) {
   return _aspxGetElementById(this.name + "ATI");
  },
  IsTopBottomTabPosition: function () {
   return (this.tabPosition == "Top" || this.tabPosition == "Bottom");
  },
  IsControlVisible: function() {
   if(!this.clientVisible)
    return false;
   var mainElement = this.GetMainElement(),
    hasVisibleTabs = _aspxGetElementDisplay(mainElement);
   if(!hasVisibleTabs)
    mainElement.style.display = "";
   var res = this.IsDisplayed() && !this.IsHidden();
   if(!hasVisibleTabs)
    mainElement.style.display = "none";
   return res;
  },
  FixControlSize: function () {
   this.FixElementSize(this.GetMainElement());
   var contentCell = this.GetContentsCell();
   if(!contentCell) return;
   var width = (__aspxIE ? contentCell.clientWidth : contentCell.offsetWidth);
   var height = (__aspxIE ? contentCell.clientHeight : contentCell.offsetHeight);
   width -= this.GetCachedHorizontalBordersAndPaddingsWidth(contentCell);
   height -= this.GetCachedVerticalBordersAndPaddingsWidth(contentCell);
   _aspxChangeStyleAttribute(contentCell, "width", width + "px");
   _aspxChangeStyleAttribute(contentCell, "height", height + "px");
  },
  UnfixControlSize: function () {
   this.UnfixElementSize(this.GetMainElement());
   this.UnfixElementSize(this.GetContentsCell());
  },
  FixElementSize: function (element) {
   if(element == null) return;
   var width = (__aspxIE ? element.clientWidth : element.offsetWidth);
   var height = (__aspxIE ? element.clientHeight : element.offsetHeight);
   _aspxChangeStyleAttribute(element, "width", width + "px");
   _aspxChangeStyleAttribute(element, "height", height + "px");
  },
  UnfixElementSize: function (element) {
   if(element == null) return;
   _aspxRestoreStyleAttribute(element, "width");
   _aspxRestoreStyleAttribute(element, "height");
  },
  AdjustSize: function () {
   this.AdjustControlCore();
  },
  AdjustControlCore: function () {
   ASPxClientControl.prototype.AdjustControlCore.call(this);
   this.EnsureControlInitialized();
   this.SetObservationPaused(true);
   this.UpdateLayout();
   this.ProcessDeferredActions();
   this.SetObservationPaused(false);
  },
  ProcessDeferredActions: function() {
   while(this.deferredActions.length > 0) {
    var action = this.deferredActions[0];
    try {
     this.SetTabVisible(action.tabIndex, action.setVisible);
    }
    finally {
     _aspxArrayRemoveAt(this.deferredActions, 0);
    }
   }
  },
  IsAdjustmentRequired: function() {
   if(this.deferredActions.length > 0)
    return true;
   return ASPxClientControl.prototype.IsAdjustmentRequired.call(this);
  },
  UpdateLayout: function () {
   if(!this.enableScrolling)
    this.AdjustTabControlSizeLite();
   else
    this.AdjustTabScrolling(true, false);
   this.AdjustTabContents();
  },
  AdjustAutoHeight: function () {
   if(!this.IsAdjustmentAllowed())
    return;
   this.EnsureControlInitialized();
   this.UpdateAutoHeight();
  },
  UpdateAutoHeight: function () {
   this.AdjustPageContents();
  },
  SetWidth: function(width) {
   this.SetSizeInternal(width, "Width");
  },
  SetHeight: function(height) {
   this.SetSizeInternal(height, "Height");
  },
  SetSizeInternal: function(value, dimension) {
   var offsetSizePropName = "offset" + dimension,
    setSizeFuncName = "Set" + dimension;
   if(this.GetMainElement()[offsetSizePropName] === value)
    return;
   this.ResetControlAdjustment();
   this.constructor.prototype[setSizeFuncName].call(this, value);
  },
  CanLoadTabOnCallback: function (index) {
   return this.isLoadTabByCallback && _aspxIsFunction(this.callBack);
  },
  ChangeTabState: function (index, active) {
   var element = this.GetTabElement(index, true);
   if(element != null) _aspxSetElementDisplay(element, active);
   element = this.GetTabElement(index, false);
   if(element != null) _aspxSetElementDisplay(element, !active);
   element = this.GetContentElement(index);
   if(element != null) _aspxSetElementDisplay(element, active);
   this.adjustmentVars.tabsHeight.needCalculate = true;
  },
  ChangeActiveTab: function (index, hasLink) {
   this.SetObservationPaused(true);
   var processingMode = this.RaiseActiveTabChanging(index);
   if(processingMode == "Client" || processingMode == "ClientWithReload") {
    var element = this.GetContentElement(index);
    if(this.CanLoadTabOnCallback(index) && element != null && (!element.loaded || processingMode == "ClientWithReload")) {
     if(this.callbackCount == 0)
      this.FixControlSize();
     this.DoChangeActiveTab(index);
     this.isActiveTabChanged = true;
     this.PerformCallbackInternal(index, element);
    }
    else {
     this.DoChangeActiveTab(index);
     if(this.GetMainElement()) {
      var activeContentElement = this.GetContentElement(this.activeTabIndex);
      if(activeContentElement) {
       var handler = function() {
        this.SetObservationPaused(true);
        this.CollapseControl();
        aspxGetControlCollection().AdjustControlsCore(activeContentElement, true);
        this.DoSafeScrollPositionOperation(function () {
         this.AdjustControlCore();
        }.aspxBind(this));
        this.SetObservationPaused(false);
       }.aspxBind(this);
       window.setTimeout(handler, 0);
      }
     }
     this.RaiseActiveTabChanged(index);
    }
   }
   else if(processingMode == "Server" && !hasLink)
    this.SendPostBack("ACTIVATE:" + index);
   this.SetObservationPaused(false);
  },
  PerformCallbackInternal: function (tabIndex, tabContentElement, callbackArgument) {
   if(typeof (callbackArgument) == "undefined")
    callbackArgument = tabIndex;
   if(!tabContentElement.loading) {
    this.callbackCount++;
    tabContentElement.loading = true;
    this.tabsContentRequest.push(tabIndex);
    this.ShowLoadingPanelInTabPage(tabIndex);
    this.CreateCallback(callbackArgument);
   }
  },
  IsMultiRow: function () {
   if(!_aspxIsExists(this.isMultiRow))
    this.isMultiRow = _aspxElementHasCssClass(this.GetMainElement(), "dxtc-multiRow");
   return this.isMultiRow;
  },
  UseProportionalTabSizes: function () {
   return this.IsMultiRow() || this.tabAlign == "Justify";
  },
  PlaceActiveTabRowToBottom: function (activeTabIndex) {
   var strip = this.GetTabsCell();
   var leftIndent = this.GetLeftIndentLite();
   var rightIndent = this.GetRightIndentLite();
   strip.insertBefore(rightIndent, this.tabPosition == "Top" ? null : strip.firstChild);
   strip.insertBefore(leftIndent, rightIndent);
   var newActiveRow = this.GetTabRowByTabElementLite(this.GetVisibleTabElement(activeTabIndex));
   var currentActiveRow = this.GetActiveTabRowLite();
   this.InsertTabRowBeforeLite(currentActiveRow, newActiveRow[0]);
   this.InsertTabRowBeforeLite(newActiveRow, rightIndent);
   this.SetStripMarginsLite(0, false);
   this.SetStripMarginsLite(leftIndent.offsetWidth, true);
   this.AdjustStripSpacesLite();
   this.ReplaceCssClassLite(currentActiveRow, this.ActiveRowItemCssClass, "");
   this.ReplaceCssClassLite(newActiveRow, "", this.ActiveRowItemCssClass);
  },
  ReplaceCssClassLite: function (collection, className, newClassName) {
   for(var i = 0; i < collection.length; i++) {
    if(!collection[i]) continue;
    var c = collection[i].className.replace(className, "");
    collection[i].className = _aspxTrim(c);
    if(newClassName != "")
     collection[i].className += " " + newClassName;
   }
  },
  InsertTabRowBeforeLite: function (row, refElement) {
   var strip = this.GetTabsCell();
   for(var i = 0; i < row.length; i++)
    strip.insertBefore(row[i], refElement);
  },
  GetTabRowByTabElementLite: function (tabElement) {
   var c = _aspxGetChildNodes(this.GetTabsCell(),
    function (e) { return e.className && !_aspxElementHasCssClass(e, "dxtc-leftIndent") && !_aspxElementHasCssClass(e, "dxtc-rightIndent"); });
   var start = 0;
   var end = 0;
   var found = false;
   for(var i = 0; i < c.length; i++) {
    if(!found)
     found = c[i].id == tabElement.id;
    if(_aspxElementHasCssClass(c[i], "dxtc-lineBreak")) {
     if(found) {
      end = i;
      break;
     } else
      start = i + 1;
    }
    end = c.length;
   }
   return c.slice(start, end);
  },
  GetActiveTabRowLite: function () {
   var c = _aspxGetElementNodes(this.GetTabsCell());
   var index = 0;
   for(var i = 0; i < c.length; i++) {
    if(_aspxElementHasCssClass(c[i], "dxtc-tab") || _aspxElementHasCssClass(c[i], "dxtc-activeTab")) {
     index = i;
     if(this.tabPosition == "Bottom") break;
    }
   }
   return this.GetTabRowByTabElementLite(c[index]);
  },
  SetStripMarginsLite: function (marginSize, excludeCurrentStrip) {
   var c = _aspxGetChildNodesByClassName(this.GetTabsCell(), "dxtc-n");
   var count = c.length;
   var startIndex = 0;
   if(this.tabPosition == "Top")
    count -= excludeCurrentStrip ? (this.autoPostBack ? 1 : 2) : 0;
   else
    startIndex = excludeCurrentStrip ? (this.autoPostBack ? 1 : 2) : 0;
   for(var i = startIndex; i < count; i++) {
    if(this.rtl)
     c[i].style.marginRight = marginSize + "px";
    else
     c[i].style.marginLeft = marginSize + "px";
   }
   this.stripMarginsCorrected = excludeCurrentStrip;
  },
  AdjustStripSpacesLite: function () {
   var c = _aspxGetElementNodesByPredicate(this.GetTabsCell(),
    function (e) { return !_aspxElementHasCssClass(e, "dxtc-lineBreak"); });
   var indent = this.GetTabSpaceSizeLite();
   for(var i = 0; i < c.length; i++) {
    if(this.tabPosition == "Bottom")
     c[i].style.marginBottom = indent + "px";
    else
     c[i].style.marginTop = indent + "px";
   }
   var lastStrip = this.GetLastTabStrip();
   for(var i = 0; i < lastStrip.length; i++) {
    if(this.tabPosition == "Bottom")
     lastStrip[i].style.marginBottom = "0px";
    else
     lastStrip[i].style.marginTop = "0px";
   }
  },
  GetLastTabStrip: function () {
   var c = _aspxGetElementNodes(this.GetTabsCell());
   var index = 0;
   for(var i = 0; i < c.length; i++) {
    if(_aspxElementHasCssClass(c[i], "dxtc-tab") || _aspxElementHasCssClass(c[i], "dxtc-activeTab")) {
     index = i;
     if(this.tabPosition == "Top") break;
    }
   }
   return this.GetTabRowByTabElementLite(c[index]);
  },
  DoChangeActiveTab: function (index) {
   if(__aspxFirefox && __aspxBrowserVersion >= 3) {
    var contentsCell = this.GetContentsCell();
    var isContentsCellExists = _aspxIsExistsElement(contentsCell);
    if(isContentsCellExists)
     _aspxSetElementVisibility(contentsCell, false);
    this.ChangeTabState(index, true);
    this.ChangeTabState(this.activeTabIndex, false);
    this.activeTabIndex = index;
    if(isContentsCellExists)
     _aspxSetElementVisibility(contentsCell, true);
   } else {
    this.ChangeTabState(this.activeTabIndex, false);
    this.activeTabIndex = index;
    this.ChangeTabState(this.activeTabIndex, true);
   }
   if(this.enableScrolling)
    this.AdjustTabScrolling(true, true);
   else
    this.AdjustTabControlSizeLite();
   if(this.IsMultiRow())
    this.PlaceActiveTabRowToBottom(index);
   this.AdjustTabContents();
   this.UpdateActiveTabIndexInputElement();
   this.UpdateActiveTabIndexCookie();
  },
  SetActiveTabIndexInternal: function (index, hasLink) {
   if(this.activeTabIndex == index) return;
   this.DoSafeScrollPositionOperation(function () {
    this.ChangeActiveTab(index, hasLink);
   }.aspxBind(this));
   this.UpdateHoverState(index);
  },
  UpdateActiveTabIndexCookie: function () {
   if(this.cookieName == "") return;
   _aspxDelCookie(this.cookieName);
   _aspxSetCookie(this.cookieName, this.activeTabIndex);
  },
  UpdateActiveTabIndexInputElement: function () {
   var element = this.GetActiveTabIndexInputElement();
   if(element != null) element.value = this.activeTabIndex;
  },
  UpdateHoverState: function (index) {
   if(!this.IsStateControllerEnabled()) return;
   var element = this.GetTabElement(index, true);
   if(element != null) aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
  },
  OnTabClick: function (evt, index) {
   var processingMode = this.RaiseTabClick(index, evt);
   var clickedLinkElement = _aspxGetParentByTagName(_aspxGetEventSource(evt), "A");
   var isLinkClicked = (clickedLinkElement != null && !!clickedLinkElement.href && clickedLinkElement.href != __aspxAccessibilityEmptyUrl);
   var element = this.GetTabElement(index, false);
   var linkElement = (element != null) ? _aspxGetChildByTagName(element, "A", 0) : null;
   if(linkElement != null && (!linkElement.href || linkElement.href == __aspxAccessibilityEmptyUrl))
    linkElement = null;
   if(processingMode != "Handled") {
    var hasLink = isLinkClicked || linkElement != null;
    if(processingMode == "Server" && !hasLink)
     this.SendPostBack("CLICK:" + index);
    else
     this.SetActiveTabIndexInternal(index, hasLink);
    if(this.handleClickOnWholeTab && !isLinkClicked && linkElement != null)
     _aspxNavigateByLink(linkElement);
   }
  },
  OnCallback: function (result) {
   this.OnCallbackInternal(result.html, result.index, false);
  },
  OnCallbackError: function (result, data) {
   this.OnCallbackInternal(result, data, true);
  },
  OnCallbackInternal: function (html, index, isError) {
   this.SetCallbackContent(html, index, isError);
   _aspxArrayRemoveAt(this.tabsContentRequest, 0);
   if(!isError && this.isActiveTabChanged) {
    this.isActiveTabChanged = false;
    this.shouldRaiseActiveTabChangedEvent = true;
   }
   if(this.enableCallbackAnimation)
    ASPxAnimationHelper.fadeIn(this.GetContentElement(index), function () { this.OnCallbackFinish(index); }.aspxBind(this));
  },
  OnCallbackFinish: function (index) {
   this.AdjustControlCore();
   if(this.shouldRaiseActiveTabChangedEvent) {
    this.shouldRaiseActiveTabChangedEvent = false;
    if(!_aspxIsExists(index))
     index = this.GetActiveTabIndex();
    this.RaiseActiveTabChanged(index);
   }
  },
  OnCallbackFinalized: function () {
   if(!this.enableCallbackAnimation)
    this.OnCallbackFinish();
  },
  OnCallbackGeneralError: function (result) {
   var callbackTabIndex = (this.tabsContentRequest.length > 0) ? this.tabsContentRequest[0] : this.activeTabIndex;
   this.SetCallbackContent(result, callbackTabIndex, true);
   _aspxArrayRemoveAt(this.tabsContentRequest, 0);
  },
  ShowLoadingPanelInTabPage: function (index) {
   if(this.lpDelay > 0)
    _aspxSetTimeout(function () { this.ShowLoadingPanelInTabPageCore(index); }.aspxBind(this), this.lpDelay);
   else
    this.ShowLoadingPanelInTabPageCore(index);
  },
  ShowLoadingPanelInTabPageCore: function (index) {
   if(_aspxArrayIndexOf(this.tabsContentRequest, index) < 0) return;
   var element = this.GetContentHolder(index);
   var hasContent = !!_aspxTrim(this.GetTabContentHTML(this.GetTab(index)));
   var loadingPanelElement = this.CreateLoadingPanelWithAbsolutePosition(element, this.GetContentsCell());
   if(!hasContent && loadingPanelElement)
    _aspxAddClassNameToElement(loadingPanelElement, "dxlp-withoutBorders");
  },
  ShouldHideExistingLoadingElements: function () {
   return false;
  },
  SetCallbackContent: function (html, index, isError) {
   this.SetObservationPaused(true);
   var element = this.GetContentElement(index);
   if(element != null) {
    if(!isError)
     element.loaded = true;
    element.loading = false;
    _aspxSetInnerHtml(this.GetContentHolder(index), html);
    this.callbackCount--;
    if(this.callbackCount == 0)
     this.UnfixControlSize();
   }
   this.SetObservationPaused(false);
  },
  CreateTabs: function (tabsProperties) {
   for(var i = 0; i < tabsProperties.length; i++) {
    var tabName = tabsProperties[i][0] || "";
    var tab = new ASPxClientTab(this, i, tabName);
    this.CreateTabProperties(tab, tabsProperties[i]);
    this.tabs.push(tab);
   }
  },
  CreateTabProperties: function (tab, tabProperties) {
   if(_aspxIsExists(tabProperties[1]))
    tab.enabled = tabProperties[1];
   if(_aspxIsExists(tabProperties[2]))
    tab.clientEnabled = tabProperties[2];
   if(_aspxIsExists(tabProperties[3]))
    tab.visible = tabProperties[3];
   if(_aspxIsExists(tabProperties[4]))
    tab.clientVisible = tabProperties[4];
  },
  RaiseTabClick: function (index, htmlEvent) {
   var processingMode = this.autoPostBack || this.IsServerEventAssigned("TabClick") ? "Server" : "Client";
   if(!this.TabClick.IsEmpty()) {
    var htmlElement = this.GetTabElement(index, this.activeTabIndex == index);
    var args = new ASPxClientTabControlTabClickEventArgs(processingMode == "Server", this.GetTab(index), htmlElement, htmlEvent);
    this.TabClick.FireEvent(this, args);
    if(args.cancel)
     processingMode = "Handled";
    else
     processingMode = args.processOnServer ? "Server" : "Client";
   }
   return processingMode;
  },
  RaiseActiveTabChanged: function (index) {
   if(!this.ActiveTabChanged.IsEmpty()) {
    var args = new ASPxClientTabControlTabEventArgs(this.GetTab(index));
    this.ActiveTabChanged.FireEvent(this, args);
   }
  },
  RaiseActiveTabChanging: function (index) {
   var processingMode = this.autoPostBack ? "Server" : "Client";
   if(!this.ActiveTabChanging.IsEmpty()) {
    var args = new ASPxClientTabControlTabCancelEventArgs(processingMode == "Server", this.GetTab(index));
    this.ActiveTabChanging.FireEvent(this, args);
    if(args.cancel)
     processingMode = "Handled";
    else if(args.processOnServer)
     processingMode = "Server";
    else
     processingMode = args.reloadContentOnCallback ? "ClientWithReload" : "Client";
   }
   return processingMode;
  },
  SetEnabled: function (enabled) {
   for(var i = this.GetTabCount() - 1; i >= 0; i--) {
    var tab = this.GetTab(i);
    tab.SetEnabled(enabled, true );
   }
  },
  GetActiveTab: function () {
   return (this.activeTabIndex > -1) ? this.GetTab(this.activeTabIndex) : null;
  },
  SetActiveTab: function (tab) {
   if(this.IsTabVisible(tab.index))
    this.SetActiveTabIndexInternal(tab.index, false);
  },
  GetActiveTabIndex: function () {
   return this.activeTabIndex;
  },
  SetActiveTabIndex: function (index) {
   if(index < 0 || index >= this.tabs.length) return;
   if(this.IsTabVisible(index))
    this.SetActiveTabIndexInternal(index, false);
  },
  GetTabCount: function () {
   return this.tabs.length;
  },
  GetTab: function (index) {
   return (0 <= index && index < this.tabs.length) ? this.tabs[index] : null;
  },
  GetTabByName: function (name) {
   for(var i = 0; i < this.tabs.length; i++)
    if(this.tabs[i].name == name) return this.tabs[i];
   return null;
  },
  IsTabEnabled: function (index) {
   return this.tabs[index].GetEnabled();
  },
  SetTabEnabled: function (index, enabled, initialization, doNotChangeActiveTab) {
   if(!this.tabs[index].enabled) return;
   this.ClearTabElementsCache(index);
   if(!initialization || !enabled)
    this.ChangeTabEnabledStateItems(index, enabled);
   this.ChangeTabEnabledAttributes(index, enabled, doNotChangeActiveTab);
   if(!initialization)
    this.AdjustControlCore();
  },
  ChangeTabEnabledAttributes: function (index, enabled, doNotChangeActiveTab) {
   if(enabled) {
    this.ChangeTabElementsEnabledAttributes(index, _aspxRestoreAttribute, _aspxRestoreStyleAttribute);
    var isActiveTabEnabled = this.activeTabIndex != -1 ? this.IsTabEnabled(this.activeTabIndex) : false;
    if(!doNotChangeActiveTab && !isActiveTabEnabled && this.IsTabVisible(index))
     this.SetActiveTabIndexInternal(index, false);
   }
   else {
    if(this.activeTabIndex == index && !doNotChangeActiveTab) {
     for(var i = 0; i < this.GetTabCount() ; i++) {
      if(this.IsTabVisible(i) && this.IsTabEnabled(i) && i != index) {
       this.SetActiveTabIndexInternal(i, false);
       break;
      }
     }
    }
    this.ChangeTabElementsEnabledAttributes(index, _aspxResetAttribute, _aspxResetStyleAttribute);
   }
  },
  ChangeTabElementsEnabledAttributes: function (index, method, styleMethod) {
   var element = this.GetTabElement(index, false);
   if(element) {
    method(element, "onclick");
    styleMethod(element, "cursor");
    var link = this.GetInternalHyperlinkElement(element, 0);
    if(link != null) {
     method(link, "href");
     styleMethod(link, "cursor");
    }
    link = this.GetInternalHyperlinkElement(element, 1);
    if(link != null) {
     method(link, "href");
     styleMethod(link, "cursor");
    }
   }
   var activeElement = this.GetTabElement(index, true);
   if(activeElement) {
    method(activeElement, "onclick");
    styleMethod(activeElement, "cursor");
   }
  },
  ChangeTabEnabledStateItems: function (index, enabled) {
   if(!this.IsStateControllerEnabled()) return;
   var element = this.GetTabElement(index, false);
   if(element != null) aspxGetStateController().SetElementEnabled(element, enabled);
   var activeElement = this.GetTabElement(index, true);
   if(activeElement != null) aspxGetStateController().SetElementEnabled(activeElement, enabled);
  },
  GetTabTextCell: function (index, active) {
   return this.GetChild("_" + (active ? "A" : "") + "T" + index + "T");
  },
  GetTabImageCell: function (index, active) {
   return this.GetChild("_" + (active ? "A" : "") + "T" + index + "I");
  },
  GetTabImageUrl: function (index, active) {
   var imgEl = this.GetTabInsideElement(index, active, "dxtc-img");
   return imgEl ? imgEl.src : "";
  },
  SetTabImageUrl: function (index, active, url) {
   var imgEl = this.GetTabInsideElement(index, active, "dxtc-img");
   if(imgEl) {
    imgEl.src = url;
    var tabEl = this.GetTabElement(index, active);
    this.ClearElementCache(tabEl);
    this.adjustmentVars.tabsHeight.needCalculate = true;
    this.AdjustControlCore();
   }
  },
  GetTabNavigateUrl: function (index) {
   var linkEl = this.GetTabInsideElement(index, false, "dxtc-link");
   return linkEl ? linkEl.href : "";
  },
  SetTabNavigateUrl: function (index, url) {
   var linkEl = this.GetTabInsideElement(index, false, "dxtc-link");
   if(linkEl)
    linkEl.href = url;
  },
  SetTabNavigateUrlInternal: function (index, url, parentElem) {
   if(parentElem != null) {
    var link = _aspxGetChildByTagName(parentElem, "A", 0);
    if(link != null)
     link.href = url;
   }
  },
  GetTabText: function (index) {
   var isActive = index == this.GetActiveTabIndex();
   var element = this.GetTabInsideElement(index, isActive, "dxtc-link");
   if(element) {
    var textNode = _aspxGetChildTextNode(element, 0);
    if(textNode != null)
     return textNode.nodeValue;
   }
   return "";
  },
  SetTabText: function (index, text) {
   this.SetTabTextInternal(index, false, text);
   this.SetTabTextInternal(index, true, text);
   this.ClearTabElementsCache(index);
   this.AdjustControlCore();
  },
  SetTabTextInternal: function (index, isActive, text) {
   var element = this.GetTabInsideElement(index, isActive, "dxtc-link");
   if(element != null) {
    var textNode = _aspxGetChildTextNode(element, 0);
    if(textNode != null)
     textNode.nodeValue = text;
   }
  },
  GetTabInsideElement: function (index, isActive, insideClassName) {
   var tabElement = this.GetTabElement(index, isActive);
   if(!tabElement)
    return null;
   var c = _aspxGetDescendantNodesByClassName(tabElement, insideClassName);
   return null || (c.length > 0 && c[0]);
  },
  IsTabVisible: function (index) {
   return this.tabs[index].GetVisible();
  },
  IsTabStartOutOfScrollArea: function (index) {
   var width = 0;
   for(var i = 0; i < index; i++) {
    width += this.GetVisibleTabElement(index).offsetWidth;
    var separator = this.GetSeparatorElement(index);
    if(separator)
     width += separator.offsetWidth;
   }
   return Math.abs(this.scrollManager.GetScrolledAreaPosition()) > width;
  },
  SetTabVisible: function (index, visible, initialization) {
   if(!this.tabs[index].visible || (visible && initialization))
    return;
   if(initialization || (this.isFullyInitialized && this.IsControlVisible()))
    this.SetTabVisibleInternal(index, visible);
   else {
    var action = {
     tabIndex: index,
     setVisible: visible
    };
    this.deferredActions.push(action);
   }
  },
  SetTabVisibleInternal: function (index, visible) {
   this.SetObservationPaused(true);
   var element = this.GetTabElement(index, false);
   var currentShiftWidth = 0,
    visibleTabElement = this.GetVisibleTabElement(index),
    separatorElement = this.GetSeparatorElement(index);
   if(visibleTabElement)
    currentShiftWidth = visibleTabElement.offsetWidth;
   if(separatorElement)
    currentShiftWidth += separatorElement.offsetWidth;
   var activeElement = this.GetTabElement(index, true);
   var contentElement = this.GetContentElement(index);
   if(!visible) {
    if(this.activeTabIndex == index) {
     for(var i = 0; i < this.GetTabCount() ; i++) {
      if(this.IsTabVisible(i) && this.IsTabEnabled(i) && i != index) {
       this.SetActiveTabIndexInternal(i, false);
       break;
      }
     }
     for(var i = 0; i < this.GetTabCount() ; i++) {
      if(this.IsTabVisible(i) && i != index) {
       this.SetActiveTabIndexInternal(i, false);
       break;
      }
     }
     if(this.activeTabIndex == index) {
      this.activeTabIndex = -1;
      _aspxSetElementDisplay(this.GetMainElement(), false);
     }
    }
    if(element != null)
     _aspxSetElementDisplay(element, false);
    if(activeElement != null)
     _aspxSetElementDisplay(activeElement, false);
    if(contentElement != null)
     _aspxSetElementDisplay(contentElement, false);
   }
   else {
    if(element != null)
     _aspxSetElementDisplay(element, this.activeTabIndex != index);
    if(activeElement != null)
     _aspxSetElementDisplay(activeElement, this.activeTabIndex == index);
    if(contentElement != null)
     _aspxSetElementDisplay(contentElement, this.activeTabIndex == index);
    if(this.activeTabIndex == -1) {
     _aspxSetElementDisplay(this.GetMainElement(), true);
     this.SetActiveTabIndexInternal(index, false);
    }
    else if(!this.IsTabEnabled(this.activeTabIndex) && this.IsTabEnabled(index))
     this.SetActiveTabIndexInternal(index, false);
   }
   if(this.GetTabsCell())
    this.CorrectTabsBorders(index, visible);
   this.SetSeparatorsVisiblility();
   this.adjustmentVars.tabsHeight.needCalculate = true;
   if(!this.enableScrolling)
    this.AdjustTabControlSizeLite();
   else {
    this.AdjustTabScrolling(false, false);
    if(this.IsTabStartOutOfScrollArea(index)) {
     currentShiftWidth = visible
      ? (this.GetVisibleTabElement(index).offsetWidth + this.GetSeparatorElement(index).offsetWidth) * (-1)
      : currentShiftWidth;
     this.CorrectScrollArea(currentShiftWidth);
    }
    if(this.firstShownTabIndex == index && !visible) {
     var newShownTabIndex = this.GetNextVisibleTabIndex(index);
     if(newShownTabIndex < 0) {
      newShownTabIndex = this.GetPrevVisibleTabIndex(index);
      if(newShownTabIndex < 0) return;
     }
     this.ScrollToShowTab(newShownTabIndex, true);
    }
   }
   this.SetObservationPaused(false);
  },
  CorrectTabsBorders: function (index, visible) {
   var firstVisibleTabIndex = this.GetNextVisibleTabIndex(-1);
   var prevFirstVisibleTabIndex = visible
    ? this.GetNextVisibleTabIndex(firstVisibleTabIndex)
    : index < firstVisibleTabIndex
     ? index
     : firstVisibleTabIndex;
   if(this.tabs.length > 1 && index <= prevFirstVisibleTabIndex && this.IsTopBottomTabPosition() &&
    (!this.GetSeparatorElement(0) || this.GetSeparatorElement(0).style.width === "0px")) {
    var tabStyle = _aspxGetCurrentStyle(this.GetTabElement(0));
    if(tabStyle.marginLeft.indexOf("-") == -1 && tabStyle.marginRight.indexOf("-") == -1) {
     var borderLeftStyle = tabStyle.borderLeftStyle;
     this.SetTabBorderStyle(firstVisibleTabIndex, false, "borderLeftStyle", borderLeftStyle);
     this.SetTabBorderStyle(firstVisibleTabIndex, true, "borderLeftStyle", borderLeftStyle);
     if(prevFirstVisibleTabIndex > 0) {
      this.SetTabBorderStyle(prevFirstVisibleTabIndex, false, "borderLeftStyle", "none");
      this.SetTabBorderStyle(prevFirstVisibleTabIndex, true, "borderLeftStyle", "none");
     }
    }
   }
  },
  SetTabBorderStyle: function (index, active, stylePropName, stylePropValue) {
   var tabElement = this.GetTabElement(index, active);
   if(tabElement) {
    tabElement.style[stylePropName] = stylePropValue;
    this.ClearElementCache(tabElement);
   }
  },
  CorrectScrollArea: function (value) {
   var rtlCorrect = this.rtl ? -1 : 1;
   var newPostion = (this.scrollManager.GetScrolledAreaPosition() + value * rtlCorrect);
   this.scrollManager.SetScrolledAreaPosition((newPostion * rtlCorrect) <= 0 ? newPostion : 0);
  },
  SetSeparatorsVisiblility: function () {
   for(var i = 0; i < this.tabs.length; i++) {
    var separatorVisible = this.tabs[i].GetVisible() && this.GetNextVisibleTabIndex(i) > -1;
    var separatorElement = this.GetSeparatorElement(i);
    if(separatorElement != null)
     _aspxSetElementDisplay(separatorElement, separatorVisible);
   }
  },
  GetNextVisibleTabIndex: function (index, allowHidden) {
   for(var i = index + 1; i < this.tabs.length; i++) {
    if(allowHidden && this.tabs[i].visible || this.tabs[i].GetVisible())
     return i;
   }
   return -1;
  },
  GetPrevVisibleTabIndex: function (index) {
   for(var i = index - 1; i >= 0; i--) {
    if(this.tabs[i].GetVisible())
     return i;
   }
   return -1;
  }
 });
 ASPxClientTabControlBase.TabChildElementIDRegExp = /^A?T\d+(T|Img)?$/;
 ASPxClientTabControlBase.IsTabChildElementID = function (id) {
  return ASPxClientTabControlBase.TabChildElementIDRegExp.test(id);
 };
 ASPxClientTabControlBase.PrepareStateController = function () {
  if(ASPxClientTabControlBase.IsStateControllerPrepared) return;
  aspxAddAfterSetHoverState(aspxTabStateChanged);
  aspxAddAfterClearHoverState(aspxTabStateChanged);
  aspxAddAfterSetPressedState(aspxTabStateChanged);
  aspxAddAfterClearPressedState(aspxTabStateChanged);
  ASPxClientTabControlBase.IsStateControllerPrepared = true;
 };
 var ASPxClientTabControl = _aspxCreateClass(ASPxClientTabControlBase, {
  SetHeight: function (height) { }
 });
 ASPxClientTabControl.Cast = ASPxClientControl.Cast;
 var ASPxClientPageControl = _aspxCreateClass(ASPxClientTabControlBase, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.handleClickOnWholeTab = false;
   this.sizingConfig.supportPercentHeight = true;
   this.sizingConfig.supportAutoHeight = true;
  },
  GetTabContentHTML: function (tab) {
   var element = this.GetContentHolder(tab.index);
   return (element != null) ? element.innerHTML : "";
  },
  SetTabContentHTML: function (tab, html, useAnimation) {
   var element = this.GetContentElement(tab.index);
   if(element != null) {
    _aspxSetInnerHtml(this.GetContentHolder(tab.index), html);
    this.AdjustControlCore();
    if(useAnimation && typeof (ASPxAnimationHelper) != "undefined")
     ASPxAnimationHelper.fadeIn(element, function () { }.aspxBind(this));
   }
  },
  PerformCallback: function (parameter) {
   var index = this.GetActiveTabIndex();
   var element = this.GetContentElement(index);
   if(element != null) {
    var arg = index + "|" + parameter;
    this.PerformCallbackInternal(index, element, arg);
   }
  }
 });
 ASPxClientPageControl.Cast = ASPxClientControl.Cast;
 var ASPxClientTab = _aspxCreateClass(null, {
  constructor: function (tabControl, index, name) {
   this.tabControl = tabControl;
   this.index = index;
   this.name = name;
   this.enabled = true;
   this.clientEnabled = true;
   this.visible = true;
   this.clientVisible = true;
  },
  GetEnabled: function () {
   return this.enabled && this.clientEnabled;
  },
  SetEnabled: function (value, doNotChangeActiveTab) {
   if(this.clientEnabled != value) {
    this.clientEnabled = value;
    this.tabControl.SetTabEnabled(this.index, value, false, doNotChangeActiveTab);
   }
  },
  GetImageUrl: function (active) {
   return this.tabControl.GetTabImageUrl(this.index, active);
  },
  SetImageUrl: function (value, active) {
   this.tabControl.SetTabImageUrl(this.index, active, value);
  },
  GetActiveImageUrl: function () {
   return this.tabControl.GetTabImageUrl(this.index, true);
  },
  SetActiveImageUrl: function (value) {
   this.tabControl.SetTabImageUrl(this.index, true, value);
  },
  GetNavigateUrl: function () {
   return this.tabControl.GetTabNavigateUrl(this.index);
  },
  SetNavigateUrl: function (value) {
   this.tabControl.SetTabNavigateUrl(this.index, value);
  },
  GetText: function () {
   return this.tabControl.GetTabText(this.index);
  },
  SetText: function (value) {
   this.tabControl.SetTabText(this.index, value);
  },
  GetVisible: function () {
   return this.visible && this.clientVisible;
  },
  SetVisible: function (value) {
   if(this.clientVisible != value) {
    this.clientVisible = value;
    this.tabControl.SetTabVisible(this.index, value, false);
   }
  }
 });
 var ASPxClientTabControlTabEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
  constructor: function (tab, htmlElement, htmlEvent) {
   this.constructor.prototype.constructor.call(this);
   this.tab = tab;
  }
 });
 var ASPxClientTabControlTabCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeCancelEventArgs, {
  constructor: function (processOnServer, tab) {
   this.constructor.prototype.constructor.call(this, processOnServer);
   this.tab = tab;
   this.reloadContentOnCallback = false;
  }
 });
 var ASPxClientTabControlTabClickEventArgs = _aspxCreateClass(ASPxClientTabControlTabCancelEventArgs, {
  constructor: function (processOnServer, tab, htmlElement, htmlEvent) {
   this.constructor.prototype.constructor.call(this, processOnServer, tab);
   this.htmlElement = htmlElement;
   this.htmlEvent = htmlEvent;
  }
 });
 function aspxTCTClick(evt, name, index) {
  var tc = aspxGetControlCollection().Get(name);
  if(tc != null) tc.OnTabClick(evt, index);
  if(!__aspxNetscapeFamily)
   evt.cancelBubble = true;
 }
 function aspxTabStateChanged(source, args) {
  var postfixIndex = args.item.name.lastIndexOf("_");
  var postfix = args.item.name.substring(postfixIndex + 1);
  if(!ASPxClientTabControlBase.IsTabChildElementID(postfix))
   return;
  var tcName = args.item.name.substring(0, postfixIndex);
  var tc = aspxGetControlCollection().Get(tcName);
  if(tc && tc.CorrectTabHeightOnStateChanged)
   tc.CorrectTabHeightOnStateChanged(args.element);
 }
 window.aspxTCTClick = aspxTCTClick;
 window.ASPxClientTabControlBase = ASPxClientTabControlBase;
 window.ASPxClientPageControl = ASPxClientPageControl;
 window.ASPxClientTabControl = ASPxClientTabControl;
 window.ASPxClientTab = ASPxClientTab;
 window.ASPxClientTabControlTabClickEventArgs = ASPxClientTabControlTabClickEventArgs;
 window.ASPxClientTabControlTabCancelEventArgs = ASPxClientTabControlTabCancelEventArgs;
 window.ASPxClientTabControlTabEventArgs = ASPxClientTabControlTabEventArgs;
})();
ASPxClientCallback = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.CallbackComplete = new ASPxClientEvent();
 },
 SendCallback: function(parameter) {
  this.PerformCallback(parameter);
 },
 PerformCallback: function(parameter) {
  if(!_aspxIsExists(parameter)) parameter = "";
  this.CreateCallback(parameter);
 },
 OnCallback: function(result) {
  var args = new ASPxClientCallbackCompleteEventArgs(result.parameter, result.data);
  this.CallbackComplete.FireEvent(this, args);
 }
});
ASPxClientCallback.Cast = ASPxClientControl.Cast;
ASPxClientCallbackCompleteEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(parameter, result){
  this.constructor.prototype.constructor.call(this);
  this.parameter = parameter;
  this.result = result;
 }
});

ASPxClientUploadControlIDSuffix = {
 FlagHiddenInput: "_dxeUpload",
 ErrorRow: "_ErrR",
 ErrorRowTemplate: "_ErrRRT",
 UploadIFrame: "_UploadIframe",
 TextBoxCell: "_TextBox",
 ClearBoxCell: "_ClearBox",
 FileInput: "_Input",
 FileFakeInput: "_FakeInput",
 AddUploadButtonsSeparator: "_AddUploadR",
 AddUploadButtonsPanelRow: "_AddUploadPanelR",
 InputCountHidden: "_IC",
 AddButtonCell: "_Add",
 UploadButtonCell: "_Upload",
 BrowseButtonCell: "_Browse",
 RemoveButtonCell: "_Remove",
 CancelButtonCell: "_Cancel",
 CommonErrorDiv: "_CErr",
 PlatformErrorTable: "_PlatformErrorPanel",
 ButtonImageIdPostfix: "Img",
 UploadInputsTable: "_UploadInputs",
 ProgressPanel: "_ProgressPanel",
 ProgressControl: "_UCProgress",
 SlUploadHelper: "_SLUploadHelper",
 SlUploadHost: "_SLUploadHost",
 FakeFocusInput: "_FFI"
};
var __aspxErrorTextResponsePrefix = "DXER:";
var __aspxBrowseButtonCellClassName = "dxBB";
var __aspxClearButtonCellClassName = "dxCB";
var __aspxRemoveButtonCellClassName = "dxRB";
var __aspxBrowseButtonFocusClassName = "dxbf";
var __aspxFITextBoxHoverDocumentClassNamePostfix = "_dxFITextBoxHover";
var __aspxFIButtonHoverDocumentClassNamePostfix = "_dxFIButtonHover";
var __aspxProgressInfoQueryParamName = "DXProgressInfo";
var __aspxUploadingCallbackQueryParamName = "DXUploadingCallback";
var __aspxHelperUploadingCallbackQueryParamName = "DXHelperUploadingCallback";
var __aspxProgressHandlerKeyQueryParamName = "DXProgressHandlerKey";
var __aspxDefaultPacketSizeValue = 200000;
var __aspxDefaultTemporaryFolderPath = "~\\App_Data\\UploadTemp\\";
var __aspxCancelUploadFakeQueryParamName = "DXFakeQueryParam";
ASPxClientUploadControl = _aspxCreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.fileInputSpacing = "";
  this.generalErrorText = "";
  this.unspecifiedErrorText = "";
  this.uploadProcessingErrorText = "";
  this.uploadWasCanceledErrorText = "";
  this.invalidWindowsPathErrorText = "";
  this.tooManyFilesErrorText = "";
  this.selectedSeveralFilesText = "";
  this.validationSettings = {};
  this.invalidFileNames = [];
  this.enableMultiSelect = false;
  this.isNative = false;
  this.isInCallback = false;
  this.isAborted = false;
  this.isCancel = false;
  this.uploadingTimerID = null;
  this.isProgressWaiting = false;
  this.isResponseWaiting = false;
  this.progressHandlerPage = "";
  this.uploadProcessingEnabled = false;
  this.advancedModeEnabled = false;
  this.autoModeEnabled = false;
  this.fileApiAvailable = null;
  this.uploadHelper = null;
  this.slUploadHelperUrl = "";
  this.packetSize = __aspxDefaultPacketSizeValue;
  this.tempFolderPath = __aspxDefaultTemporaryFolderPath;
  this.nullText = null;
  this.nullTextItem = null;
  this.templateDisabledTextBoxItem = null;
  this.templateDisabledClearBoxItem = null;
  this.templateHoveredBrowseItem = null;
  this.templatePressedBrowseItem = null;
  this.templateDisabledBrowseItem = null;
  this.templateDisabledRemoveItem = null;
  this.sizingConfig.allowSetWidth = false;
  this.sizingConfig.allowSetHeight = false;
  this.suppressTextChangedHandling = false;
  this.fileInputIsHidden = true;
  this.pressedBrowseButtonIndex = -1;
  aspxGetUploadControlCollection().Add(this);
  this.FileUploadComplete = new ASPxClientEvent();
  this.FilesUploadComplete = new ASPxClientEvent();
  this.FileUploadStart = new ASPxClientEvent();
  this.UploadingProgressChanged = new ASPxClientEvent();
  this.TextChanged = new ASPxClientEvent();
  this.FileInputCountChanged = new ASPxClientEvent();
 },
 InlineInitialize: function () {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeHelpers();
  this.UpdateNullTextState();
  this.SetUploadButtonEnabled(false);
  if(this.IsSlUploadHelperEnabled() && !__aspxOpera)
   this.SetAllFileInputRowsEnabled(false);
 },
 Initialize: function() {
  ASPxClientControl.prototype.Initialize.call(this);
  if(!this.GetMainElement())
   return;
  this.AdjustMainElementWidth();
  if (__aspxFirefox && this.isNative)
   this.CorrectFileInputSize();
  if (__aspxIE && __aspxBrowserVersion == 7) {
   var mainElement = this.GetMainElement();
   _aspxGetChildByTagName(mainElement, "TABLE", 0).style.borderCollapse = "separate";
   mainElement.className += " dxuc-IE7";
  }
  if (__aspxOpera && !frames[this.GetFakeIframeName()])
   this.ReinitializeIFrame(this.GetFakeIframe());
  this.GetIFrameUrl();
  this.InitializeForm();
  this.InitializeInputElements();
  this.InitializeHelpersElement();
  this.InitializeFakeFocusInputElement();
  this.InitializeTemplates();
  if(!this.isNative)
   this.InitializeFileInputStyles();
  _aspxAttachEventToElement(__aspxIE ? this.GetFakeIframeElement() : this.GetFakeIframe(), "load",
   new Function("aspxFakeUploadIframeOnLoad('" + this.name + "');"));
  for(var i = 0; i < this.GetFileInputCountInternal(); i++)
   this.ChangeEventsToFileInput(true, i);
 },
 InitializeHelpers: function() {
  if(this.IsFileApiEnabled())
   this.uploadHelper = new ASPxClientHtml5UploadHelper(this);
  else if(this.IsSlUploadHelperEnabled())
   this.uploadHelper = new ASPxClientSlUploadHelper(this);
 },
 InitializeHelpersElement: function() {
  if(this.IsSlUploadHelperEnabled()) {
   if(!__aspxIE) {
    var slHost = document.createElement("DIV");
    _aspxSetAttribute(slHost, "id", this.GetSlUploadHostElementID());
    _aspxSetAttribute(slHost.style, "position", "absolute");
    _aspxSetAttribute(slHost.style, "width", "0px");
    _aspxSetAttribute(slHost.style, "height", "0px");
    _aspxSetAttribute(slHost.style, "border-width", "0px");
    var mainCell = this.GetUploadInputsTable().parentNode;
    mainCell.appendChild(slHost);
   }
   var indexs = ["T"];
   for(var i = 0; i < this.GetFileInputCountInternal(); i++)
    indexs.push(i);
   for(var i = 0; i < indexs.length; i++) {
    var index = indexs[i];
    var slHelper = this.uploadHelper.CreateSlObject(this.slUploadHelperUrl, index);
    if(this.GetSlUploadHostElement()) {
     if(index != "T")
      this.GetSlUploadHostElement().appendChild(slHelper);
    }
    else
     this.GetTextBoxCell(index).insertBefore(slHelper, this.GetFileInputElement(index));
    this.GetTextBoxCell(index).removeChild(this.GetFileInputElement(index));
   }
  }
  else if(this.IsShowPlatformErrorElement())
   this.SetVisiblePlatformErrorElement(true);
 },
 InitializeInputElements: function() {
  var initializers = {
   filtration: {
    condition: !this.IsSlUploadHelperEnabled() && this.validationSettings.allowedFileExtensions,
    initialize: function(fileInput) {
     fileInput.accept = fileInput.accept.replace(/\/\*/g, "");
    }
   },
   multiselection: {
    condition: this.IsFileApiEnabled() && this.enableMultiSelect,
    initialize: function(fileInput) {
     fileInput.multiple = true;
    }
   },
   postBackUpload: {
    condition: this.autoModeEnabled && this.IsAdvancedModeEnabled(),
    initialize: function(fileInput) {
     fileInput.name = "";
    }
   }
  };
  var inputCount = this.GetFileInputCountInternal();
  for(var initializerName in initializers) {
   var initializer = initializers[initializerName];
   if(initializer.condition) {
    for(var i = 0; i < inputCount; i++) {
     var fileInput = this.GetFileInputElement(i);
     initializer.initialize(fileInput);
    }
    var fileInputRowTemplate = this.GetFileInputRowTemplate();
    var fileInputTemplate = _aspxGetChildByTagName(fileInputRowTemplate, "INPUT", 0);
    initializer.initialize(fileInputTemplate);
   }
  }
 },
 InitializeFakeFocusInputElement: function() {
  if(this.IsFocusNeedReset()) {
   var mainCell = this.GetUploadInputsTable().parentNode;
   var div = _aspxCreateHtmlElementFromString("<div class='dxucFFIHolder'></div>");
   mainCell.appendChild(div);
   var fakeFocusInput = _aspxCreateHtmlElementFromString("<input readonly='readonly' class='dxucFFI'></input>");
   fakeFocusInput.id = this.GetFakeFocusInputElementID();
   div.appendChild(fakeFocusInput);
  }
 },
 InitializeTemplates: function() {
  this.clearFileInputTempalteHtml = _aspxGetChildByTagName(this.GetFileInputRowTemplate(), "TD", 0).innerHTML;
  this.fileInputRowTemplateNode = this.GetFileInputRowTemplate().cloneNode(true);
  _aspxSetElementDisplay(this.fileInputRowTemplateNode, true);
  var errorRowTemplate = this.GetErrorRowTemplate();
  if(errorRowTemplate)
   this.errorRowTemplateNode = this.GetErrorRowTemplate().cloneNode(true);
  if(this.fileInputSpacing != "") {
   this.fileInputSeparatorTemplateNode = this.GetFileInputSeparatorRowTemplate().cloneNode(true);
   _aspxSetElementDisplay(this.fileInputSeparatorTemplateNode, true);
  }
 },
 InitializeForm: function() {
  var form = this.GetParentForm();
  if (form) form.enctype = form.encoding = "multipart/form-data";
 },
 InitializeFileInputStyles: function() {
  var styleSheet = _aspxGetCurrentStyleSheet();
  _aspxAddStyleSheetRule(styleSheet,
          " ." + this.GetFileInputOnTextBoxHoverClassName(),
          "cursor: " + _aspxGetCurrentStyle(this.GetTextBoxCell("T"))["cursor"] + ";");
  _aspxAddStyleSheetRule(styleSheet,
          " ." + this.GetFileInputOnBrowseButtonHoverClassName(),
          "cursor: " + _aspxGetCurrentStyle(this.GetBrowseButtonCell("T"))["cursor"] + ";");
 },
 ReinitializeIFrame: function(iframe) {
  var divElem = document.createElement("DIV");
  _aspxSetElementDisplay(divElem, false);
  var parentIframe = iframe.parentNode;
  parentIframe.appendChild(divElem);
  divElem.appendChild(iframe);
 },
 AttachEventForElement: function(element, eventName, func, detachOldEvent) {
  if(detachOldEvent && element["dx" + eventName])
   _aspxDetachEventFromElement(element, eventName, element["dx" + eventName]);
  element["dx" + eventName] = func;
  _aspxAttachEventToElement(element, eventName, element["dx" + eventName]);
 },
 DetachEventForElement: function(element, eventName) {
  if(element["dx" + eventName]) {
   _aspxDetachEventFromElement(element, eventName, element["dx" + eventName]);
   element["dx" + eventName] = null;
  }
 },
 ChangeEventsMethod: function(attach) {
  return attach ? this.AttachEventForElement : this.DetachEventForElement;
 },
 ChangeEventsToFileInput: function(attach, index) {
  var method = this.ChangeEventsMethod(attach);
  var fileInput = this.GetFileSelectorElement(index);
  if(!this.isNative) {
   var textBoxCell = this.GetTextBoxCell(index);
   method(textBoxCell, "mousemove", new Function("event", "aspxUTextBoxMouseMove(event, '" + this.name + "'," + index + ");"));
   method(textBoxCell, "mouseout", new Function("event", "aspxUTextBoxMouseOut(event, '" + this.name + "'," + index + ");"));
   method(textBoxCell, "click", function(event) { this.OnTextBoxClick(event, index); }.aspxBind(this));
   var browseButton = this.GetBrowseButtonCell(index);
   method(browseButton, "mousemove", new Function("event", "aspxUBrowseButtonMouseMove(event, '" + this.name + "'," + index + ");"));
   method(browseButton, "mouseout", new Function("event", "aspxUBrowseButtonMouseOut(event, '" + this.name + "'," + index + ");"));
   method(browseButton, "click", function(event) { this.OnBrowseButtonClick(event, index); }.aspxBind(this));
   method(fileInput, "mousemove", new Function("event", "aspxUFileInputMouseMove(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "mouseout", new Function("event", "aspxUFileInputMouseOut(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "mousedown", new Function("event", "aspxUFileInputMouseDown(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "focus", new Function("event", "aspxUFileInputGotFocus(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "blur", new Function("event", "aspxUFileInputLostFocus(event, '" + this.name + "'," + index + ");"));
   method(fileInput, "keydown", new Function("event", "aspxUFileInputKeyDown(event, '" + this.name + "'," + index + ");"));
  }
  if(!this.IsSlUploadHelperEnabled())
   method(fileInput, "change", new Function("event", "aspxUTextChanged('" + this.name + "'," + index + ");"));
 },
 AdjustControlCore: function() {
  ASPxClientControl.prototype.AdjustControlCore.call(this);
  this.AdjustMainElementWidth();
  if (__aspxFirefox && this.isNative) {
   this.CorrectFileInputSize();
   this.InitializeTemplates();
  }
 },
 AdjustMainElementWidth: function() {
  var element = this.GetMainElement();
  if(this.IsDisplayed() && element.style.width == "") {
   if(__aspxIE)
    element.style.width = _aspxGetClearClientWidth(element);
   else
    element.style.width = _aspxGetCurrentStyle(element).width;
  }
 },
 CorrectFileInputSize: function() {
  if(!this.IsDisplayed())
   return;
  var width = this.GetInputWidth();
  var fontSize = this.GetInputFontSize();
  var size = this.FindInputSize(width, fontSize);
  this.GetFileInputElement("T").size = size;
  var fileInputCount = this.GetFileInputCountInternal();
  for (var i = 0; i < fileInputCount; i++)
   this.GetFileInputElement(i).size = size;
 },
 GetInputWidth: function() {
  var width = 0;
  if (this.GetFileInputCountInternal() > 0)
   width = this.GetFileInputElement(0).clientWidth;
  else {
   _aspxSetElementDisplay(this.GetFileInputRowTemplate(), true);
   width = this.GetFileInputElement("T").clientWidth;
   _aspxSetElementDisplay(this.GetFileInputRowTemplate(), false);
  }
  return width;
 },
 GetInputFontSize: function() {
  if (this.GetFileInputCountInternal() > 0)
   return _aspxGetCurrentStyle(this.GetFileInputElement(0)).fontSize;
  else
   return _aspxGetCurrentStyle(this.GetFileInputElement("T")).fontSize;
 },
 FindInputSize: function(width, fontSize) {
  var spanInput = document.createElement("SPAN");
  document.body.appendChild(spanInput);
  var fakeInput = document.createElement("INPUT");
  fakeInput.type = "file";
  fakeInput.size = 1;
  fakeInput.style.fontSize = fontSize;
  spanInput.appendChild(fakeInput);
  var stepSize = 1;
  while (true) {
   var previousInputWidth = spanInput.offsetWidth;
   fakeInput.size += stepSize;
   if(previousInputWidth == spanInput.offsetWidth) {
    fakeInput.size = 1;
    break;
   }
   if (spanInput.offsetWidth == width)
    break;
   else if (spanInput.offsetWidth > width) {
    if (stepSize > 1) {
     fakeInput.size -= stepSize;
     stepSize = 1;
    } else {
     fakeInput.size -= 1;
     break;
    }
   }
   else
    stepSize *= 2;
  }
  var inputSize = fakeInput.size;
  _aspxRemoveElement(fakeInput);
  _aspxRemoveElement(spanInput);
  return inputSize;
 },
 GetSelectedInputFileCount: function(isClearCache) {
  if(isClearCache)
   this.selectedInputFileCount = null;
  if (!_aspxIsExists(this.selectedInputFileCount)) {
   this.selectedInputFileCount = 0;
   var fileInputCount = this.GetFileInputCountInternal();
   for (var i = 0; i < fileInputCount; i++) {
    var files = this.GetFiles(i);
    if(files.length > 0)
     this.selectedInputFileCount += files.length;
   }
  }
  return this.selectedInputFileCount;
 },
 GetFileInputCountInternal: function() {
  var element = this.GetInputCountHiddenField();
  return parseInt(element.value, 10);
 },
 SetFileInputCountInternal: function(value) {
  this.GetInputCountHiddenField().value = value;
 },
 GetInputCountHiddenField: function() {
  if (!this.inputCountHiddenField) {
   var id = this.name + ASPxClientUploadControlIDSuffix.InputCountHidden;
   this.inputCountHiddenField = _aspxGetElementById(id);
  }
  return this.inputCountHiddenField;
 },
 GetIFrameUrl: function() {
  if (!this.iframeUrl) {
   var iframe = __aspxIE ? this.GetFakeIframeElement() : this.GetFakeIframe();
   var iframeSrc = _aspxGetAttribute(iframe, "src");
   this.iframeUrl = (iframeSrc) ? iframeSrc : "";
  }
  return this.iframeUrl;
 },
 SetIFrameUrl: function(url) {
  var iframe = __aspxIE ? this.GetFakeIframeElement() : this.GetFakeIframe();
  _aspxSetAttribute(iframe, "src", url);
 },
 GetProgressInfoKey: function() {
  return this.uploadingKey;
 },
 GetErrorRow: function(index) {
  return this.GetChild(ASPxClientUploadControlIDSuffix.ErrorRow + index);
 },
 GetErrorCell: function(index) {
  return _aspxGetElementsByTagName(this.GetErrorRow(index), "td")[0];
 },
 GetErrorRowTemplate: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.ErrorRowTemplate);
 },
 GetFakeIframe: function() {
  var name = this.GetFakeIframeName();
  return __aspxIE ? frames[name] : _aspxGetElementById(name);
 },
 GetFakeIframeName: function() {
  return this.name + ASPxClientUploadControlIDSuffix.UploadIFrame;
 },
 GetFakeIframeElement: function() {
  return this.GetFakeIframe().frameElement;
 },
 GetFakeIframeDocument: function() {
  return __aspxIE ? this.GetFakeIframe().document : this.GetFakeIframe().contentDocument;
 },
 GetFakeIframeResponseString: function() {
  var html = _aspxDecodeHtml(this.GetFakeIframeDocument().body.innerHTML);
  if(__aspxIE && __aspxBrowserVersion == 8)
   html = this.RestoreProtectedWhitespaceSeries(html);
  return html;
 },
 GetFileInputRow: function(index) {
  return _aspxGetParentByTagName(this.GetTextBoxCell(index), "TR");
 },
 GetTextBoxCellID: function(index) {
  return this.name + ASPxClientUploadControlIDSuffix.TextBoxCell + index;
 },
 GetTextBoxCell: function(index) {
  return _aspxGetInputElementById(this.GetTextBoxCellID(index));
 },
 GetClearBoxCell: function(index) {
  return _aspxGetChildrenByPartialClassName(this.GetFileInputRow(index), __aspxClearButtonCellClassName)[0];
 },
 GetFileInputElement: function(index) {
  return _aspxGetInputElementById(this.GetTextBoxCellID(index) + ASPxClientUploadControlIDSuffix.FileInput);
 },
 GetFileInputOnTextBoxHoverClassName: function() {
  return this.name + __aspxFITextBoxHoverDocumentClassNamePostfix;
 },
 GetFileInputOnBrowseButtonHoverClassName: function() {
  return this.name + __aspxFIButtonHoverDocumentClassNamePostfix;
 },
 GetFileFakeInputElement: function(index) {
  return _aspxGetInputElementById(this.GetTextBoxCellID(index) + ASPxClientUploadControlIDSuffix.FileFakeInput);
 },
 GetFileInputRowTemplate: function() {
  if(!this.fileInputRowTemplate) {
   var inputTemplate = this.GetFileInputRow("T");
   this.fileInputRowTemplate = _aspxGetParentByTagName(inputTemplate, "TR");
  }
  return this.fileInputRowTemplate;
 },
 GetFileInputsTBody: function() {
  if (!this.tbody)
   this.tbody = _aspxGetParentByTagName(this.GetFileInputRowTemplate(), "TBODY");
  return this.tbody;
 },
 GetUploadInputsTable: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.UploadInputsTable);
 },
 GetProgressPanel: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.ProgressPanel);
 },
 GetProgressControl: function() {
  if (!this.progressControl) {
   var name = this.name + ASPxClientUploadControlIDSuffix.ProgressControl;
   this.progressControl = aspxGetControlCollection().Get(name);
  }
  return this.progressControl;
 },
 GetBrowseButtonCell: function(index) {
  return _aspxGetChildrenByPartialClassName(this.GetFileInputRow(index), __aspxBrowseButtonCellClassName)[0];
 },
 GetRemoveButtonCell: function(index) {
  return _aspxGetChildrenByPartialClassName(this.GetFileInputRow(index), __aspxRemoveButtonCellClassName)[0];
 },
 GetAddButtonCell: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.AddButtonCell);
 },
 GetUploadButtonCell: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.UploadButtonCell);
 },
 GetCancelButtonCell: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.CancelButtonCell);
 },
 GetRemoveButtonLink: function(index) {
  return _aspxGetChildByTagName(this.GetRemoveButtonCell(index), "A", 0);
 },
 GetAddButtonLink: function() {
  return _aspxGetChildByTagName(this.GetAddButtonCell(), "A", 0);
 },
 GetUploadButtonLink: function() {
  return _aspxGetChildByTagName(this.GetUploadButtonCell(), "A", 0);
 },
 GetClearButtonLink: function(index) {
  return _aspxGetChildByTagName(this.GetClearBoxCell(index), "A", 0);
 },
 GetAddUploadButtonsSeparatorRow: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.AddUploadButtonsSeparator);
 },
 GetAddUploadButtonsPanelRow: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.AddUploadButtonsPanelRow);
 },
 GetFileInputSeparatorRow: function(index) {
  if (this.fileInputSpacing == "" || this.GetFileInputCountInternal() == 1)
   return null;
  if (!_aspxIsExists(index))
   index = 0;
  var ret = null;
  var errorRow = this.GetErrorRow(index);
  var fileInput = this.GetFileInputRow(index);
  var target = errorRow ? errorRow : fileInput;
  if (target) {
   var parent = target.parentNode;
   var rowIndex = _aspxArrayIndexOf(parent.childNodes, target);
   var element = parent.childNodes[rowIndex + 1];
   if (!element.id)
    ret = parent.childNodes[rowIndex + 1];
  }
  return ret;
 },
 GetFileInputSeparatorRowTemplate: function() {
  if (this.fileInputSpacing == "")
   return null;
  var parent = this.GetFileInputRowTemplate().parentNode;
  var fileInputRowIndex = _aspxArrayIndexOf(parent.childNodes, this.GetFileInputRowTemplate());
  fileInputRowIndex += this.errorRowTemplateNode ? 2 : 1;
  return parent.childNodes[fileInputRowIndex];
 },
 GetCommonErrorDivElement: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.CommonErrorDiv);
 },
 GetPlatformErrorElement: function() {
  return this.GetChild(ASPxClientUploadControlIDSuffix.PlatformErrorTable);
 },
 SetEnabledInternal: function(enabled) {
  this.SetAllFileInputRowsEnabled(enabled);
  this.SetButtonEnabled(this.GetAddButtonCell(), enabled);
  this.SetButtonEnabled(this.GetUploadButtonCell(), enabled);
 },
 SetFileInputRowEnabled: function(index, enabled) {
  this.SetTextBoxEnabled(this.GetTextBoxCell(index), enabled);
  this.SetClearBoxEnabled(this.GetClearBoxCell(index), enabled);
  this.SetButtonEnabled(this.GetBrowseButtonCell(index), enabled);
  this.SetButtonEnabled(this.GetRemoveButtonCell(index), enabled);
 },
 SetAllFileInputRowsEnabled: function(enabled) {
  var fileInputCount = this.GetFileInputCountInternal();
  for (var i = 0; i < fileInputCount; i++)
   this.SetFileInputRowEnabled(i, enabled);
 },
 SetNullTextEnabled: function(index, enabled) {
  if(this.nullText != null) {
   if(enabled)
    this.GetFileFakeInputElement(index).value = this.nullText;
   this.ChangeTextBoxNullTextState(index, this.GetTextBoxCell(index), enabled);
   this.ChangeClearBoxNullTextState(this.GetClearBoxCell(index), enabled);
  }
 },
 SetUploadButtonEnabled: function(enabled) {
  this.SetButtonEnabled(this.GetUploadButtonCell(), enabled);
 },
 SetTextBoxEnabled: function(element, enabled) {
  this.ChangeTextBoxEnabledState(element, enabled);
  this.ChangeTextBoxEnabledAttributes(element, _aspxChangeAttributesMethod(enabled), enabled);
 },
 SetClearBoxEnabled: function(element, enabled) {
  this.ChangeClearBoxEnabledState(element, enabled);
  this.ChangeClearBoxEnabledAttributes(element, _aspxChangeAttributesMethod(enabled), enabled);
 },
 SetButtonEnabled: function(element, enabled) {
  this.ChangeButtonEnabledState(element, enabled);
  this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled), enabled);
 },
 GetSlUploadHelperElementID: function(index) {
  return this.GetTextBoxCellID(index) + ASPxClientUploadControlIDSuffix.SlUploadHelper;
 },
 GetSlUploadHelperElement: function(index) {
  return _aspxGetElementById(this.GetSlUploadHelperElementID(index));
 },
 GetSlUploadHostElementID: function() {
  return this.name + ASPxClientUploadControlIDSuffix.SlUploadHost;
 },
 GetSlUploadHostElement: function() {
  if(!this.slUploadHostElement)
   this.slUploadHostElement = _aspxGetElementById(this.GetSlUploadHostElementID());
  return this.slUploadHostElement;
 },
 GetFakeFocusInputElementID: function() {
  return this.name + ASPxClientUploadControlIDSuffix.FakeFocusInput;
 },
 GetFakeFocusInputElement: function() {
  return _aspxGetInputElementById(this.GetFakeFocusInputElementID());
 },
 GetFileSelectorElement: function(index) {
  if(this.IsSlUploadHelperEnabled())
   return this.GetSlUploadHelperElement(index);
  return this.GetFileInputElement(index);
 },
 SetFileInputTooltip: function(index) {
  if(!this.isNative) {
   var files = this.GetFiles(index, true);
   var value = '';
   if((typeof files == "object") && (files instanceof Array)) {
    if((__aspxIE || __aspxWebKitFamily) && files.length > 1) {
     var i = 0;
     while(i < files.length) {
      if(i > 0)
       value += '\n';
      value += _aspxTrim(files[i++]);
     }
    }
    else
     value = files.join(', ');
   }
   var handler = (value != '') ? _aspxSetAttribute : _aspxRemoveAttribute;
   handler(this.GetTextBoxCell(index), "title", value);
  }
 },
 GetIsResponseValid: function() {
  var ret = false;
  try {
   if (eval(this.GetFakeIframeResponseString()) != null)
    ret = true;
  }
  catch (e) {
   if (__aspxIE)
    this.GetFakeIframe().window.location = this.GetIFrameUrl();
  }
  return ret;
 },
 GetFiles: function(index, isShortName) {
  var files = [];
  if(this.IsAdvancedModeEnabled()) {
   var fileInfos = this.uploadHelper.GetFileInfos(index);
   if(fileInfos) {
    for(var i = 0; i < fileInfos.length; i++)
     files.push(isShortName ? fileInfos[i].fileName : fileInfos[i].fullName);
   }
  }
  else {
   var fileInputElement = this.GetFileInputElement(index);
   if(fileInputElement && fileInputElement.value != '')
    files.push(isShortName ? ASPxClientUploadControl.GetFileName(fileInputElement.value) : fileInputElement.value);
  }
  return files;
 },
 GetValue: function(index, isShortName) {
  var value = this.GetFiles(index, isShortName).join(', ');
  return value != '' ? value : null;
 },
 ChangeTextBoxNullTextState: function(index, element, enabled) {
  if(element && this.nullText != null && this.nullTextItem) {
   var restore = !enabled;
   var isIE7 = __aspxIE && __aspxBrowserMajorVersion < 8
   var styleAttrName = isIE7 ? 'cssText' : 'style';
   _aspxChangeAttributesMethod(restore)(element, isIE7 ? 'className' : 'class');
   _aspxChangeAttributesMethod(restore)(isIE7 ? element.style : element, styleAttrName);
   var inputRow = null;
   if(this.nullTextItem.inputRow) {
    inputRow = this.GetFileInputRow(index);
    _aspxChangeAttributesMethod(restore)(isIE7 ? inputRow.style : inputRow, styleAttrName);
   }
   var editArea = this.GetFileFakeInputElement(index);
   if(editArea)
    _aspxChangeAttributesMethod(restore)(isIE7 ? editArea.style : editArea, styleAttrName);
   if(enabled) {
    element.className = this.nullTextItem.textBox.className;
    element.style.cssText = this.nullTextItem.textBox.cssText;
    if(editArea)
     editArea.style.cssText = this.nullTextItem.editArea.cssText;
    if(this.nullTextItem.inputRow)
     inputRow.style.cssText = this.nullTextItem.inputRow.cssText;
   }
  }
 },
 ChangeTextBoxEnabledState: function(element, enabled) {
  if (element) {
   aspxGetStateController().SetElementEnabled(element, enabled);
   var editArea = _aspxGetChildByTagName(element, "INPUT", 1);
   if (editArea)
    aspxGetStateController().SetElementEnabled(editArea, enabled);
  }
 },
 ChangeTextBoxEnabledAttributes: function(element, method, enabled) {
  if (element) {
   var inputs = _aspxGetElementsByTagName(element, "INPUT");
   for(var i = 0; i < inputs.length; i++)
    inputs[i].disabled = !enabled;
  }
 },
 ChangeClearBoxNullTextState: function(element, enabled) {
  if (element && this.nullText != null && this.nullTextItem) {
   var restore = !enabled;
   var isIE7 = __aspxIE && __aspxBrowserMajorVersion < 8;
   _aspxChangeAttributesMethod(restore)(isIE7 ? element.style : element, isIE7 ? 'cssText' : 'style');
   _aspxChangeAttributesMethod(restore)(element, isIE7 ? 'className' : 'class');
   if(enabled) {
    element.className = this.nullTextItem.clearBox.className;
    element.style.cssText = this.nullTextItem.clearBox.cssText;
   }
  }
 },
 ChangeClearBoxEnabledState: function(element, enabled) {
  if (element) {
   aspxGetStateController().SetElementEnabled(element, enabled);
  }
 },
 ChangeClearBoxEnabledAttributes: function(element, method, enabled) {
  if (element) {
   var link = _aspxGetChildByTagName(element, "A", 0);
   this.ChangeButtonEnabledAttributes(link, method, enabled);
  }
 },
 ChangeButtonEnabledState: function(element, enabled) {
  if (element)
   aspxGetStateController().SetElementEnabled(element, enabled);
 },
 ChangeButtonEnabledAttributes: function(element, method, enabled) {
  if (element) {
   method(element, "onclick");
   if (!__aspxIE && enabled)
    element.onclick = new Function(_aspxGetAttribute(element, "onclick"));
   var link = _aspxGetChildByTagName(element, "A", 0);
   if (link) {
    var isBrowseButton = element.className.indexOf(__aspxBrowseButtonCellClassName) != -1;
    if(!isBrowseButton)
     _aspxSetOrRemoveAttribute(link, "tabindex", !enabled ? "-1" : "0");
    _aspxSetOrRemoveAttribute(link, "unselectable", !enabled ? "on" : null);
    if(__aspxNetscapeFamily || __aspxWebKitFamily) {
     method = this.ChangeEventsMethod(!enabled);
     method(link, "mousedown", function(e) {
      e.preventDefault();
      return false;
     }, true);
    }
   }
  }
 },
 ChangeButtonHoveredState: function(element, enabled, index) {
  if(element && this.pressedBrowseButtonIndex != index) {
   element = enabled  ? aspxGetStateController().GetHoverElement(element) : null;
   aspxGetStateController().SetCurrentHoverElement(element);
  }
 },
 ChangeButtonPressedState: function(element, enabled) {
  if (element) {
   var controller = aspxGetStateController();
   var pressedElement = controller.GetPressedElement(element);
   controller.SetPressedElement(enabled ? pressedElement : null);
  }
 },
 AddFileInput: function(isUi) {
  var tBody = this.GetFileInputsTBody();
  var addUploadButtonsElement = this.GetAddUploadButtonsSeparatorRow();
  if (addUploadButtonsElement == null)
   addUploadButtonsElement = this.GetAddUploadButtonsPanelRow();
  if (this.fileInputSpacing != "" && this.GetFileInputCountInternal() != 0) {
   var separatorRow = this.fileInputSeparatorTemplateNode.cloneNode(true);
   tBody.insertBefore(separatorRow, addUploadButtonsElement);
  }
  tBody.insertBefore(this.CreateFileInputRow(this.GetFileInputCountInternal()), addUploadButtonsElement);
  var errorRow = this.CreateErrorRow(this.GetFileInputCountInternal());
  if(errorRow)
   tBody.insertBefore(errorRow, addUploadButtonsElement);
  this.ChangeEventsToFileInput(true, this.GetFileInputCountInternal());
  var newCount = this.GetFileInputCountInternal() + 1;
  this.SetFileInputCountInternal(newCount);
  this.SetNullTextEnabled(newCount - 1, true);
  var element = this.GetAddUploadButtonsSeparatorRow();
  if (element && this.GetFileInputCountInternal() > 0 && !_aspxGetElementDisplay(element))
   _aspxSetElementDisplay(element, true);
  if(isUi)
   this.RaiseFileInputCountChanged();
 },
 RemoveFileInput: function(index, isUi) {
  var count = this.GetFileInputCountInternal();
  if(!_aspxIsExists(index))
   index = count - 1;
  if(count == 0 || index >= count) return;
  if(__aspxIE && __aspxBrowserVersion == 8) {
   var slElement = _aspxGetChildByTagName(this.GetTextBoxCell(index), "OBJECT", 0);
   _aspxRemoveElement(slElement);
  }
  _aspxRemoveElement(this.GetFileInputSeparatorRow((index == 0) ? index : index - 1));
  _aspxRemoveElement(this.GetFileInputRow(index));
  _aspxRemoveElement(this.GetErrorRow(index));
  if(this.IsSlUploadHelperEnabled())
   this.uploadHelper.RemoveSlObjectInHostElement(index);
  this.RedefineAttributtes(index + 1);
  this.SetFileInputCountInternal(this.GetFileInputCountInternal() - 1);
  this.UpdateUploadButtonState();
  var element = this.GetAddUploadButtonsSeparatorRow();
  if (element && this.GetFileInputCountInternal() == 0 && _aspxGetElementDisplay(element))
   _aspxSetElementDisplay(element, false);
  if(isUi)
   this.RaiseFileInputCountChanged();
  var inputsTable = this.GetUploadInputsTable();
  if(__aspxIE && __aspxBrowserVersion == 9 && inputsTable.style.borderCollapse == "collapse") {
   inputsTable.style.borderCollapse = "separate";
   inputsTable.style.borderCollapse = "collapse";
  }
 },
 SetVisiblePlatformErrorElement: function(display) {
  if(this.IsShowPlatformErrorElement()) {
   _aspxSetElementDisplay(this.GetUploadInputsTable(), !display);
   _aspxSetElementDisplay(this.GetPlatformErrorElement(), display);
  }
 },
 RedefineAttributtes: function(startIndex) {
  var tBody = this.GetFileInputsTBody();
  for (var index = startIndex; index < this.GetFileInputCountInternal(); index++) {
   this.ChangeEventsToFileInput(false, index);
   var newIndex = index - 1;
   var textBoxCell = this.GetTextBoxCell(index);
   var clearBoxCell = this.GetClearBoxCell(index);
   var browseButton = this.GetBrowseButtonCell(index);
   var removeButton = this.GetRemoveButtonCell(index);
   var errorRow = this.GetErrorRow(index);
   this.RedefineInputAttributes(textBoxCell, newIndex);
   this.RedefineClearAttributes(clearBoxCell, newIndex);
   this.RedefineBrowseAttributes(browseButton, newIndex);
   this.RedefineRemoveAttributes(removeButton, newIndex);
   if(errorRow)
    errorRow.id = this.name + ASPxClientUploadControlIDSuffix.ErrorRow + newIndex;
   this.ChangeEventsToFileInput(true, newIndex);
  }
 },
 RedefineInputAttributes: function(textBoxCell, index, isNewElement) {
  textBoxCell.id = this.GetTextBoxCellID(index);
  if(this.IsSlUploadHelperEnabled()) {
   if(this.GetSlUploadHostElement())
    this.uploadHelper.RedefineSlObjectAttributesInHostElement(index + 1, index, isNewElement);
   else
    this.uploadHelper.RedefineSlObjectAttributes(textBoxCell, index, isNewElement);
  }
  else {
   var inputElement = _aspxGetChildByTagName(textBoxCell, "INPUT", 0);
   inputElement.id = textBoxCell.id + ASPxClientUploadControlIDSuffix.FileInput;
   if(!this.IsAdvancedModeEnabled())
    inputElement.name = inputElement.id;
  }
  var fakeInputElement = _aspxGetChildByTagName(textBoxCell, "INPUT", this.IsSlUploadHelperEnabled() ? 0 : 1);
  if(fakeInputElement)
   fakeInputElement.id = textBoxCell.id + ASPxClientUploadControlIDSuffix.FileFakeInput;
 },
 RedefineBrowseAttributes: function(browseButton, newIndex) {
  if (browseButton) {
   var newId = this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + newIndex;
   browseButton.id = newId;
   var img = _aspxGetChildByTagName(browseButton, "IMG", 0);
   if (img)
    img.id = newId + ASPxClientUploadControlIDSuffix.ButtonImageIdPostfix;
  }
 },
 RedefineClearAttributes: function(clearButton, newIndex) {
  if (clearButton) {
   var newId = this.name + ASPxClientUploadControlIDSuffix.ClearBoxCell + newIndex;
   clearButton.id = newId;
   var link = _aspxGetChildByTagName(clearButton, "A", 0);
   var onclick = "aspxUClearFileInputClick('" + this.name + "'," + newIndex + ");";
   link.onclick = new Function(onclick);
   if(!(__aspxIE && __aspxBrowserVersion < 8))
    _aspxSetAttribute(link, "onclick", onclick);
   var img = _aspxGetChildByTagName(clearButton, "IMG", 0);
   if (img)
    img.id = newId + ASPxClientUploadControlIDSuffix.ButtonImageIdPostfix;
  }
 },
 RedefineRemoveAttributes: function(removeButton, newIndex) {
  if (removeButton) {
   var newId = this.name + ASPxClientUploadControlIDSuffix.RemoveButtonCell + newIndex;
   removeButton.id = newId;
   var onclick = "aspxURemoveFileInputClick('" + this.name + "'," + newIndex + ");";
   removeButton.onclick = new Function(onclick);
   if(!(__aspxIE && __aspxBrowserVersion < 8))
    _aspxSetAttribute(removeButton, "onclick", onclick);
   var img = _aspxGetChildByTagName(removeButton, "IMG", 0);
   if (img)
    img.id = newId + ASPxClientUploadControlIDSuffix.ButtonImageIdPostfix;
  }
 },
 SetAddButtonTextInternal: function(text) {
  var link = this.GetAddButtonLink();
  if (link)
   link.innerHTML = text;
 },
 SetUploadButtonTextInternal: function(text) {
  var link = this.GetUploadButtonLink();
  if (link)
   link.innerHTML = text;
 },
 GetAddButtonTextInternal: function() {
  var link = this.GetAddButtonLink();
  if (link)
   return link.innerHTML;
  return null;
 },
 GetUploadButtonTextInternal: function() {
  var link = this.GetUploadButtonLink();
  if (link)
   return link.innerHTML;
  return null;
 },
 CreateFileInputRow: function(index) {
  var row = this.fileInputRowTemplateNode.cloneNode(true);
  var inputCell = _aspxGetChildByTagName(row, "TD", 0);
  this.RedefineInputAttributes(inputCell, index, true);
  this.CreateTextBoxDisabledState(index);
  this.CreateClearBoxDisabledState(index);
  var clearBoxCell = _aspxGetChildrenByPartialClassName(row, __aspxClearButtonCellClassName)[0];
  this.RedefineClearAttributes(clearBoxCell, index);
  var browseButton = _aspxGetChildrenByPartialClassName(row, __aspxBrowseButtonCellClassName)[0];
  this.RedefineBrowseAttributes(browseButton, index);
  if(browseButton) {
   this.CreateBrowseHoveredState(index);
   this.CreateBrowsePressedState(index);
   this.CreateBrowseDisabledState(index);
  }
  var removeButton = _aspxGetChildrenByPartialClassName(row, __aspxRemoveButtonCellClassName)[0];
  this.RedefineRemoveAttributes(removeButton, index);
  if(removeButton)
   this.CreateRemoveDisabledState(index);
  return row;
 },
 CreateTextBoxDisabledState: function(index) {
  if (this.templateDisabledTextBoxItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.TextBoxCell + index,
    this.templateDisabledTextBoxItem.className, this.templateDisabledTextBoxItem.cssText,
    this.templateDisabledTextBoxItem.postfixes, this.templateDisabledTextBoxItem.imageUrls,
    this.templateDisabledTextBoxItem.imagePostfixes);
  }
 },
 CreateClearBoxDisabledState: function(index) {
  if (this.templateDisabledClearBoxItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.ClearBoxCell + index,
    this.templateDisabledClearBoxItem.className, this.templateDisabledClearBoxItem.cssText,
    this.templateDisabledClearBoxItem.postfixes, this.templateDisabledClearBoxItem.imageObjs,
    this.templateDisabledClearBoxItem.imagePostfixes);
  }
 },
 CreateBrowseHoveredState: function(index) {
  if (this.templateHoveredBrowseItem) {
   aspxGetStateController().AddHoverItem(this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + index,
    this.templateHoveredBrowseItem.className, this.templateHoveredBrowseItem.cssText,
    this.templateHoveredBrowseItem.postfixes, this.templateHoveredBrowseItem.imageObjs,
    this.templateHoveredBrowseItem.imagePostfixes);
  }
 },
 CreateBrowsePressedState: function(index) {
  if (this.templatePressedBrowseItem) {
   aspxGetStateController().AddPressedItem(this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + index,
    this.templatePressedBrowseItem.className, this.templatePressedBrowseItem.cssText,
    this.templatePressedBrowseItem.postfixes, this.templatePressedBrowseItem.imageObjs,
    this.templatePressedBrowseItem.imagePostfixes);
  }
 },
 CreateBrowseDisabledState: function(index) {
  if (this.templateDisabledBrowseItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.BrowseButtonCell + index,
    this.templateDisabledBrowseItem.className, this.templateDisabledBrowseItem.cssText,
    this.templateDisabledBrowseItem.postfixes, this.templateDisabledBrowseItem.imageObjs,
    this.templateDisabledBrowseItem.imagePostfixes);
  }
 },
 CreateRemoveDisabledState: function(index) {
  if (this.templateDisabledRemoveItem) {
   aspxGetStateController().AddDisabledItem(this.name + ASPxClientUploadControlIDSuffix.RemoveButtonCell + index,
    this.templateDisabledRemoveItem.className, this.templateDisabledRemoveItem.cssText,
    this.templateDisabledRemoveItem.postfixes, this.templateDisabledRemoveItem.imageObjs,
    this.templateDisabledRemoveItem.imagePostfixes);
  }
 },
 CreateErrorRow: function(index) {
  var row = null;
  if(this.errorRowTemplateNode) {
   row = this.errorRowTemplateNode.cloneNode(true);
   row.id = this.name + ASPxClientUploadControlIDSuffix.ErrorRow + index;
  }
  return row;
 },
 GetUploadFormAction: function(form){
  var action = form.action;
  if(this.IsAdvancedModeEnabled())
   action = this.AddQueryParamToUrl(action, __aspxProgressHandlerKeyQueryParamName, this.GetProgressInfoKey());
  else if (this.IsUploadProcessingEnabled())
   action = this.AddQueryParamToUrl(action, __aspxProgressInfoQueryParamName, this.GetProgressInfoKey());
  if(this.IsAdvancedModeEnabled())
   action = this.AddQueryParamToUrl(action, __aspxHelperUploadingCallbackQueryParamName, this.name);
  else
   action = this.AddQueryParamToUrl(action, __aspxUploadingCallbackQueryParamName, this.name);
  return action;
 },
 AddQueryParamToUrl: function(url, paramName, paramValue) {
  var prefix = url.indexOf("?") >= 0 ? "&" : "?";
  var paramQueryString = prefix + paramName + "=" + paramValue;
  var anchorStart = url.indexOf("#");
  return anchorStart >= 0
   ? url.substring(0, anchorStart) + paramQueryString + url.substring(anchorStart)
   : url + paramQueryString;
 },
 GetUploadFormTarget: function(form){
  return this.GetFakeIframe().name;
 },
 UploadForm: function() {
  var form = this.GetParentForm();
  if(!form) return;
  var sourceTarget = form.target;
  var soureActionString = form.action;
  var sourceMethod = form.method;
  form.action = this.GetUploadFormAction(form);
  form.target = this.GetUploadFormTarget(form);
  form.method = "post";
  var isInternalErrorOccurred = false;
  try {
   form.submit();
  }
  catch (e) {
   isInternalErrorOccurred = true;
   this.WriteResponseString(__aspxErrorTextResponsePrefix + this.generalErrorText);
   this.OnCompleteFileUpload();
  }
  form.target = sourceTarget;
  form.action = soureActionString;
  form.method = sourceMethod;
  return !isInternalErrorOccurred;
 },
 UploadFileFromUser: function() {
  if(this.GetSelectedInputFileCount(true) == 0)
   return;
  this.isAborted = false;
  this.isCancel = false;
  this.uploadProcessingErrorText = "";
  this.ClearErrorMessageCells();
  this.UpdateCommonErrorDiv("", false);
  var validateObj = {
    commonErrorText: "",
    commonCallbackData: ""
   };
  if (!this.isInCallback && !this.AreEmptyInputs()) {
   if ((this.isNative && __aspxIE && __aspxBrowserVersion != 7 && !this.ValidateWindowsFileNames())
    || !this.ValidateInputFiles(validateObj) || this.IsFileUploadCanceled(validateObj)) {
     this.RaiseFilesUploadComplete(validateObj);
     return false;
   }
   var isSuccessful = true;
   if(this.IsAdvancedModeEnabled())
    this.BeginProcessUploading();
   else {
    isSuccessful = this.UploadForm();
    if (this.IsUploadProcessingEnabled())
     this.BeginProcessUploading();
   }
   if (isSuccessful)
    this.SetEnabledInternal(false);
   return true;
  }
 },
 CancelUploading: function(isUI) {
  if (this.isInCallback) {
   if(isUI)
    this.isCancel = true;
   else
    this.isAborted = true;
   var iframeUrl = ASPx.SSLSecureBlankUrl;
   if (__aspxOpera)
    this.SetIFrameUrl(iframeUrl + "&" + __aspxCancelUploadFakeQueryParamName + "=" + (new Date()).valueOf());
   this.SetIFrameUrl(iframeUrl);
   this.EndProcessUploading();
  }
 },
 CancelUploadingFileFromHelper: function() {
  this.CancelUploading();
 },
 CancelUploadingFileFromUser: function() {
  this.CancelUploading(true);
  if(this.IsAdvancedModeEnabled())
   _aspxSetTimeout('aspxUploadAsyncCancelProcessing(\'' + this.name + '\')', 100);
 },
 IsRightToLeft: function () {
  return _aspxIsElementRightToLeft(this.GetMainElement());
 },
 IsShowProgressPanel: function() {
  return !!this.GetProgressPanel();
 },
 IsShowErrorText: function() {
  return !!this.errorRowTemplateNode;
 },
 IsUploadProcessingEnabled: function() {
  return this.uploadProcessingEnabled;
 },
 IsAdvancedModeEnabled: function() {
  return this.advancedModeEnabled && (this.IsFileApiAvailable() || this.IsSlUploadHelperAvailable());
 },
 IsFileApiEnabled: function() {
  return this.advancedModeEnabled && this.IsFileApiAvailable();
 },
 IsSlUploadHelperEnabled: function() {
  return this.advancedModeEnabled && !this.IsFileApiAvailable() && this.IsSlUploadHelperAvailable();
 },
 IsSlUploadHelperAvailable: function() {
  return ASPxClientSlUploadHelper.IsPluginAvailable();
 },
 IsFileApiAvailable: function() {
  if(this.fileApiAvailable == null) {
   var input = document.createElement("input");
   this.fileApiAvailable = "multiple" in input && "File" in window && "FormData" in window;
   this.fileApiAvailable = this.fileApiAvailable && ("slice" in window.File.prototype ||
    __aspxWebKitFamily && "webkitSlice" in window.File.prototype ||
    __aspxNetscapeFamily && "mozSlice" in window.File.prototype);
  }
  return this.fileApiAvailable;
 },
 IsShowPlatformErrorElement: function() {
  return this.advancedModeEnabled && !this.IsFileApiAvailable() && !this.IsSlUploadHelperAvailable() && !this.autoModeEnabled;
 },
 IsHelperElementReady: function(index) {
  return this.uploadHelper.IsHelperElementReady(index);
 },
 IsFocusNeedReset: function() {
  return this.IsSlUploadHelperEnabled() ? !__aspxIE : (__aspxIE || __aspxOpera);
 },
 CreateXmlHttpRequestObject: function() {
  if(!this.xmlHttpRequest) {
   if (typeof (XMLHttpRequest) != 'undefined')
    this.xmlHttpRequest = new XMLHttpRequest();
   else if (typeof (ActiveXObject) != 'undefined')
    this.xmlHttpRequest = new ActiveXObject('Microsoft.XMLHTTP');
   this.xmlHttpRequest.onreadystatechange = new Function("aspxUploadAsyncXmlHttpResponse('" + this.name + "');");
  }
  return this.xmlHttpRequest;
 },
 BeginProcessUploading: function() {
  if (this.IsShowProgressPanel())
   window.setTimeout('aspxShowProgressInfoPanel(\'' + this.name + '\')', 600);
  this.CleanUploadingInfoPanel();
  this.uploadingTimerID = _aspxSetInterval('aspxUploadProcessing(\'' + this.name + '\')', 1000);
 },
 EndProcessUploading: function() {
  this.helperUploadingState = null;
  this.uploadingInfo = null;
  this.selectedInputFileCount = null;
  if (this.uploadingTimerID != null)
   this.uploadingTimerID = _aspxClearInterval(this.uploadingTimerID);
  if(this.IsAdvancedModeEnabled() && !this.isCancel && !this.isAborted)
   this.UploadForm();
 },
 GetHelperUploadingState: function() {
  if (!this.helperUploadingState) {
   var nextFileInfo = this.GetHelperNextFileInput(0, 0);
   this.helperUploadingState = {
    TotalFileLength: this.uploadHelper.GetTotalLength(this.GetFileInputCountInternal()),
    FileIndexesCount: this.uploadHelper.GetFileIndexesCount(this.GetFileInputCountInternal()),
    currentInputIndex: nextFileInfo.inputIndex,
    currentFileIndex: nextFileInfo.fileIndex,
    uploadedCurrentFileLength: 0,
    isNewUploading: true,
    isLastChunk: false
   };
  }
  return this.helperUploadingState;
 },
 GetHelperNextFileInput: function(startInputIndex, startFileIndex) {
  var inputIndex = null;
  var fileIndex = startFileIndex;
  var isFound = false;
  var fileInputCount = this.GetFileInputCountInternal();
  for(var i = startInputIndex; i < fileInputCount; i++) {
   currentFileInfos = this.uploadHelper.GetFileInfos(i);
   if(fileIndex < currentFileInfos.length) {
    inputIndex = i;
    isFound = true;
    break;
   }
   else
    fileIndex = 0;
  }
  return {
   inputIndex: isFound ? inputIndex : null,
   fileIndex: isFound ? fileIndex : null
  };
 },
 GetHelperRequestData: function() {
  var currentInputIndex = this.GetHelperUploadingState().currentInputIndex;
  var currentFileIndex = this.GetHelperUploadingState().currentFileIndex;
  var uploadedCurrentFileLength = this.GetHelperUploadingState().uploadedCurrentFileLength;
  var isLastChunk = false;
  var startPos = 0;
  var chunkLength = this.packetSize;
  var currentFileInfos = (currentInputIndex != null) ? this.uploadHelper.GetFileInfos(currentInputIndex) : null;
  var currentFileInfo = (currentFileIndex != null) ? currentFileInfos[currentFileIndex] : null;
  var requestData = { data: "" };
  var isEmptyFile = false;
  if(currentFileInfo) {
   if(uploadedCurrentFileLength >= currentFileInfo.fileSize) {
    isEmptyFile = uploadedCurrentFileLength == 0 && currentFileInfo.fileSize == 0;
    if(isEmptyFile) {
     chunkLength = 0;
     uploadedCurrentFileLength = 1;
    }
    else {
     uploadedCurrentFileLength = 0;
     var nextFileInfo = this.GetHelperNextFileInput(currentInputIndex, currentFileIndex + 1);
     currentInputIndex = nextFileInfo.inputIndex;
     currentFileIndex = nextFileInfo.fileIndex;
     currentFileInfos = (currentInputIndex != null) ? this.uploadHelper.GetFileInfos(currentInputIndex) : null;
     currentFileInfo = (currentFileIndex != null) ? currentFileInfos[currentFileIndex] : null;
     isEmptyFile = currentFileInfo.fileSize == 0;
     if(isEmptyFile) {
      chunkLength = 0;
      uploadedCurrentFileLength = 1;
     }
    }
   }
   if(!isEmptyFile && currentFileInfo) {
    if(uploadedCurrentFileLength < currentFileInfo.fileSize) {
     startPos = uploadedCurrentFileLength;
     uploadedCurrentFileLength += chunkLength;
     if(startPos + chunkLength > currentFileInfo.fileSize) {
      chunkLength = currentFileInfo.fileSize - startPos;
      uploadedCurrentFileLength = currentFileInfo.fileSize;
     }
    }
   }
   if(uploadedCurrentFileLength >= currentFileInfo.fileSize) {
    var nextFileInfo = this.GetHelperNextFileInput(currentInputIndex, currentFileIndex + 1);
    if(nextFileInfo.inputIndex == null)
     isLastChunk = true;
   }
   var fileData = this.uploadHelper.ReadFileData(currentInputIndex, currentFileIndex, startPos, chunkLength);
   if(fileData.errorText)
    requestData.errorText = fileData.errorText;
   else {
    requestData.data = this.uploadHelper.BuildChunkRequest(
     this.GetHelperUploadingState().isNewUploading,
     this.tempFolderPath,
     this.GetHelperUploadingState().TotalFileLength,
     this.GetHelperUploadingState().FileIndexesCount,
     currentInputIndex,
     currentFileIndex,
     currentFileInfo.fileSize,
     currentFileInfo.fileType,
     chunkLength,
     currentFileInfo.fileName,
     fileData.data);
   };
  }
  else
   isLastChunk = true;
  this.GetHelperUploadingState().isNewUploading = false;
  this.GetHelperUploadingState().currentInputIndex = currentInputIndex;
  this.GetHelperUploadingState().currentFileIndex = currentFileIndex;
  this.GetHelperUploadingState().uploadedCurrentFileLength = uploadedCurrentFileLength;
  this.GetHelperUploadingState().isLastChunk = isLastChunk;
  return requestData;
 },
 GetUploadingInfo: function() {
  if (!this.uploadingInfo) {
   this.uploadingInfo = {
    isUploadingStart: false,
    isComplete: false,
    currentFileName: "",
    currentFileContentLength: 0,
    currentFileUploadedContentLength: 0,
    currentFileProgress: 0,
    currentContentType: "",
    totalUploadedSize: 0,
    totalLength: 0,
    progress: 0,
    errorText: ""
   };
  }
  return this.uploadingInfo;
 },
 UpdateUploadingInfo: function(responseXML) {
  var info = this.GetUploadingInfo();
  if (responseXML == null || this.GetXmlAttribute(responseXML, 'empty') == 'true') {
   if (info.isUploadingStart) {
    info.isUploadingStart = false;
    info.isComplete = true;
    info.progress = 100;
    info.totalUploadedSize = info.totalLength;
    this.SetButtonEnabled(this.GetCancelButtonCell(), false);
   }
   return;
  }
  info.isUploadingStart = true;
  info.errorText = this.GetXmlAttribute(responseXML, 'errorText');
  info.currentFileName = this.GetXmlAttribute(responseXML, 'fileName');
  info.currentFileContentLength = this.GetXmlAttribute(responseXML, 'fileSize');
  info.currentFileUploadedContentLength = this.GetXmlAttribute(responseXML, 'fileUploadedSize');
  info.currentFileProgress = this.GetXmlAttribute(responseXML, 'fileProgress');
  info.currentContentType = this.GetXmlAttribute(responseXML, 'contentType');
  info.totalUploadedSize = parseInt(this.GetXmlAttribute(responseXML, 'totalUploadedSize'));
  info.totalLength = parseInt(this.GetXmlAttribute(responseXML, 'totalSize'));
  info.progress = parseInt(this.GetXmlAttribute(responseXML, 'progress'));
 },
 UploadProcessing: function() {
  if (this.isProgressWaiting || this.isResponseWaiting) return;
  this.isProgressWaiting = true;
  var xmlHttp = this.CreateXmlHttpRequestObject();
  if (xmlHttp == null) {
   this.isProgressWaiting = false;
   this.EndProcessUploading();
   return;
  }
  if (!this.GetUploadingInfo().isComplete) {
   var url = this.progressHandlerPage + '?' + __aspxProgressHandlerKeyQueryParamName + '=' + this.GetProgressInfoKey();
   var httpMethod = "GET";
   var requestData = { data: "" };
   if(this.IsAdvancedModeEnabled()) {
    url += "&" + __aspxHelperUploadingCallbackQueryParamName + "=" + this.name;
    httpMethod = "POST";
    requestData = this.GetHelperRequestData();
    if(requestData.errorText) {
     this.isProgressWaiting = false;
     this.uploadProcessingErrorText = requestData.errorText;
     this.CancelUploadingFileFromHelper();
     return;
    }
   }
   xmlHttp.open(httpMethod, url, true);
   xmlHttp.send(requestData.data);
   this.isResponseWaiting = true;
  }
  else
   this.EndProcessUploading();
  this.isProgressWaiting = false;
 },
 UploadAsyncXmlHttpResponse: function() {
  var xmlHttp = this.CreateXmlHttpRequestObject();
  if(xmlHttp && xmlHttp.readyState == 4) {
   var successful = false;
   if(xmlHttp.status == 200) {
    this.UpdateUploadingInfo(xmlHttp.responseXML);
    var info = this.GetUploadingInfo();
    successful = !info.errorText;
   }
   if(successful) {
    if(info.isUploadingStart || info.isComplete) {
     if(this.IsShowProgressPanel())
      this.UpdateUploadingInfoPanel(info);
     this.OnUploadingProgressChanged(this.GetSelectedInputFileCount(), info);
    }
   }
   else {
    if(this.IsAdvancedModeEnabled()) {
     var text = (info && info.errorText != "") ? info.errorText : xmlHttp.statusText;
     this.uploadProcessingErrorText = text;
     this.GetHelperUploadingState().isLastChunk = true;
     this.CancelUploadingFileFromHelper();
    }
   }
   var isEndProcessUploading = (!this.GetUploadingInfo().isUploadingStart && !this.isInCallback)
    || (this.IsAdvancedModeEnabled() && this.GetHelperUploadingState().isLastChunk)
    || this.uploadingTimerID == -1;
   if(isEndProcessUploading)
    this.EndProcessUploading();
   else if(this.IsAdvancedModeEnabled())
    _aspxSetTimeout('aspxUploadProcessing(\'' + this.name + '\')', 0);
   this.isResponseWaiting = false;
   if(__aspxIE && __aspxBrowserVersion < 8)
    this.xmlHttpRequest = null;
  }
 },
 UploadAsyncCancelProcessing: function() {
  if(this.isResponseWaiting)
   _aspxSetTimeout('aspxUploadAsyncCancelProcessing(\'' + this.name + '\')', 100);
  else {
   var xmlHttp = this.CreateXmlHttpRequestObject();
   if(xmlHttp && this.IsAdvancedModeEnabled()) {
    var url = this.progressHandlerPage + '?' + __aspxProgressHandlerKeyQueryParamName + '=' + this.GetProgressInfoKey();
    url += "&" + __aspxHelperUploadingCallbackQueryParamName + "=" + this.name;
    xmlHttp.open("POST", url, false);
    xmlHttp.send(this.uploadHelper.BuildCancelRequest());
   }
  }
 },
 ShowProgressInfoPanel: function(show) {
  var inputsTable = this.GetUploadInputsTable();
  _aspxSetStyles(this.GetProgressPanel(), {
   width: inputsTable.clientWidth,
   height: inputsTable.clientHeight
  });
  _aspxSetElementDisplay(inputsTable, !show);
  _aspxSetElementDisplay(this.GetProgressPanel(), show);
  if(!show && __aspxChrome) {
   var _inputsTable = inputsTable;
   window.setTimeout(function() {
    _aspxSetElementVisibility(_inputsTable, true);
   }, 100);
  }
  if (show) {
   var progressControl = this.GetProgressControl();
   if (progressControl != null)
    progressControl.AdjustControl();
  }
  this.SetButtonEnabled(this.GetCancelButtonCell(), true);
 },
 CleanUploadingInfoPanel: function() {
  this.UpdateProgress(0);
 },
 UpdateUploadingInfoPanel: function(info) {
  this.UpdateProgress(info.progress);
 },
 UpdateProgress: function(percent) {
  if (!(percent > 0 && percent <= 100))
   percent = percent > 0 ? 100 : 0;
  var element = this.GetProgressControl();
  if (element != null)
   element.SetPosition(percent);
 },
 AreEmptyInputs: function() {
  for (var i = 0; i < this.GetFileInputCountInternal(); i++)
   if (_aspxTrim(this.GetText(i)) != "") return false;
  return true;
 },
 ClearAllInputText: function(isUI) {
  for (var i = 0; i < this.GetFileInputCountInternal(); i++)
   this.ClearInputText(i, isUI);
 },
 ClearInputText: function(index, isUI) {
  this.ChangeEventsToFileInput(false, index);
  var textBoxCell = this.GetTextBoxCell(index);
  if(_aspxIsExistsElement(textBoxCell)) {
   if(this.IsSlUploadHelperEnabled()) {
    this.uploadHelper.ClearFileInfos(index);
    this.GetFileFakeInputElement(index).value = "";
   }
   else {
    textBoxCell.innerHTML = this.clearFileInputTempalteHtml;
    this.RedefineInputAttributes(textBoxCell, index);
   }
  }
  this.SetFileInputTooltip(index);
  this.ShowClearButton(index, false);
  if(isUI) {
   this.ClearErrorMessageCell(index);
   this.UpdateNullTextState();
  }
  this.UpdateUploadButtonState();
  this.RaiseTextChanged(index);
  this.ChangeEventsToFileInput(true, index);
 },
 ClearInvalidFileInputText: function(index) {
  if(this.IsAdvancedModeEnabled()) {
   this.ClearErrorMessageCell(index);
   this.uploadHelper.ClearInvalidFileInfos(index);
   if(this.IsFileApiEnabled()) {
    this.suppressTextChangedHandling = true;
    this.GetFileInputElement(index).value = null;
    this.suppressTextChangedHandling = false;
   }
   this.OnTextChanged(index);
  }
 },
 ClearErrorMessageCells: function() {
  for (var index = 0; index < this.GetFileInputCountInternal(); index++)
   this.ClearErrorMessageCell(index);
 },
 ClearErrorMessageCell: function(index) {
  this.UpdateErrorMessageCell(index, "", true);
 },
 ShowClearButton: function(index, show) {
  var clearBoxCell = this.GetClearBoxCell(index);
  if(clearBoxCell) {
   var link = _aspxGetChildByTagName(clearBoxCell, "A", 0);
   var func = show ? _aspxRemoveAttribute : _aspxSetAttribute;
   func(link.style, "visibility", "hidden");
  }
 },
 ShowMultiselectionErrorText: function(errorText) {
  if(this.IsShowErrorText())
   alert(errorText);
 },
 ShowTooManyFilesError: function() {
  alert(this.tooManyFilesErrorText);
 },
 UpdateMultiselectionErrorMessageCell: function(index, errorTextArray, isValidArray) {
  if(this.GetErrorRow(index)) {
   var errorCell = this.GetErrorCell(index),
    errorTexts = [];
   for(var i = 0; i < errorTextArray.length; i++)
    if(!isValidArray[i] && errorTextArray[i] != "")
     errorTexts.push(errorTextArray[i]);
   if(errorTexts.length) {
    _aspxSetElementDisplay(this.GetErrorRow(index), true);
    errorCell.innerHTML = errorTexts.join("<br />");
   }
  }
 },
 UpdateErrorMessageCell: function(index, errorText, isValid) {
  if (this.GetErrorRow(index)) {
   var errorCell = this.GetErrorCell(index);
   _aspxSetElementDisplay(this.GetErrorRow(index), !isValid);
   if (errorText != "")
    errorCell.innerHTML = errorText;
  }
 },
 UpdateCommonErrorDiv: function(text, display) {
  var commonErrorDiv = this.GetCommonErrorDivElement();
  if (commonErrorDiv) {
   commonErrorDiv.innerHTML = text;
   _aspxSetElementDisplay(commonErrorDiv, display);
  }
 },
 UpdateNullTextState: function() {
  if(this.isNative)
   return;
  var inputCount = this.GetFileInputCountInternal();
  for(var i = 0; i < inputCount; i++) {
   var inputIsEmpty = this.GetText(i) == '';
   if(this.nullText != null)
    this.SetNullTextEnabled(i, inputIsEmpty);
   else if(inputIsEmpty)
    this.GetFileFakeInputElement(i).value = '';
  }
 },
 UpdateUploadButtonState: function() {
  var isEnabled = this.GetSelectedInputFileCount(true) > 0;
  this.SetUploadButtonEnabled(isEnabled);
 },
 GetXmlAttribute: function(xmlDoc, attrName) {
  return xmlDoc.documentElement.getAttribute(attrName);
 },
 ProcessResponse: function() {
  try {
   return eval(this.GetFakeIframeResponseString());
  }
  catch (e) { }
  return null;
 },
 ValidateWindowsFileNames: function() {
  for (var i = 0; i < this.GetFileInputCountInternal(); i++) {
   if (!ASPxClientUploadControl.IsValidWindowsFileName(_aspxTrim(this.GetText(i)))) {
    alert(this.invalidWindowsPathErrorText.replace("{0}", this.GetText(i)));
    return false;
   }
  }
  return true;
 },
 CreateFileValidators: function() {
  return {
   fileSize: {
    value: this.validationSettings.maxFileSize,
    errorText: this.validationSettings.maxFileSizeErrorText,
    isValid: function(fileInfo) {
     return fileInfo.fileSize < this.value;
    },
    getErrorText: function() {
     return this.errorText.replace("{0}", this.value);
    }
   },
   fileExtensions: {
    value: this.validationSettings.allowedFileExtensions,
    errorText: this.validationSettings.notAllowedFileExtensionErrorText,
    isValid: function(fileInfo) {
     var fileExtension = ASPxClientUploadControl.GetFileExtension(fileInfo.fileName).toLowerCase();
     return _aspxArrayIndexOf(this.value, fileExtension) != -1;
    },
    getErrorText: function() {
     return this.errorText;
    }
   }
  };
 },
 ValidateInputFileCore: function(validateObj, validators, fileInfo) {
  for(var validatorName in validators) {
   var validator = validators[validatorName];
   if(validator != null && validator.value) {
    var isValid = validator.isValid(fileInfo);
    if(!isValid) {
     validateObj.commonErrorText = validator.getErrorText();
     return false;
    }
   }
  }
  return true;
 },
 ValidateInputFiles: function(validateObj) {
  if(!this.IsAdvancedModeEnabled())
   return true;
  var result = true;
  var fileInputCount = this.GetFileInputCountInternal();
  var validators = this.CreateFileValidators();
  var multiSelectionErrorText = this.validationSettings.multiSelectionErrorText;
  this.invalidFileNames = [];
  for(var inputIndex = 0; inputIndex < fileInputCount; inputIndex++) {
   var isValid = true;
   var files = [];
   this.invalidFileNames.push(files);
   var fileInfos = this.uploadHelper.GetFileInfos(inputIndex);
   if(fileInfos) {
    var isMultiFileSelected = fileInfos.length > 1;
    for(var fileIndex = 0; fileIndex < fileInfos.length; fileIndex++) {
     var currentFileInfo = fileInfos[fileIndex];
     var success = this.ValidateInputFileCore(validateObj, validators, currentFileInfo);
     if(!success) {
      files.push(fileInfos[fileIndex].fileName);
      isValid = false;
     }
    }
    if(!isValid) {
     if(isMultiFileSelected)
      validateObj.commonErrorText = multiSelectionErrorText.replace("{0}", files.length)
       .replace("{1}", validators.fileSize.value)
       .replace("{2}", files.join(', '));
     this.ShowMultiselectionErrorText(validateObj.commonErrorText);
    }
   }
   result = result && isValid;
  }
  return result;
 },
 WriteResponseString: function(responseString) {
  try {
   this.GetFakeIframeDocument().body.innerHTML = responseString;
  }
  catch (e) { }
 },
 RestoreProtectedWhitespaceSeries: function(text) {
  return text.replace(/&nbsp;/g, ' ').replace(/&nbspx;/g, '&nbsp;');
 },
 NeedMouseClickCorrection: function() {
  return !__aspxTouchUI && this.fileInputIsHidden;
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(evt) {
  this.AdjustControl();
 },
 OnCompleteFileUpload: function() {
  var responseObj = null;
  var commonErrorText = '';
  if (this.GetIsResponseValid()) {
   responseObj = this.ProcessResponse();
   if(responseObj.customJSProperties) {
    for(var property in responseObj.customJSProperties)
     this[property] = responseObj.customJSProperties[property];
   }
   for (var i = 0; i < this.GetFileInputCountInternal(); i++) {
    var fileCount = this.GetFiles(i).length;
    if(this.enableMultiSelect && fileCount > 1) {
     this.UpdateMultiselectionErrorMessageCell(i, responseObj.errorTexts, responseObj.isValidArray);
     for(var j = 0; j < fileCount; j++)
      this.RaiseFileUploadComplete(j, responseObj);
    }
    else {
     this.UpdateErrorMessageCell(i, responseObj.errorTexts[i], responseObj.isValidArray[i]);
     if (this.GetText(i) != "")
      this.RaiseFileUploadComplete(i, responseObj);
    }
   }
   this.ClearAllInputText();
  }
  if (this.IsShowProgressPanel())
   this.UpdateProgress(100);
  if(!this.isCancel) {
   if(responseObj)
    commonErrorText = responseObj.commonErrorText;
   else if(this.uploadProcessingErrorText != '')
    commonErrorText = this.uploadProcessingErrorText;
   else
    commonErrorText = this.unspecifiedErrorText;
   this.UpdateCommonErrorDiv(commonErrorText, commonErrorText != '');
  }
  this.isInCallback = false;
  this.responseHashTable = {};
  this.SetEnabledInternal(true);
  this.UpdateNullTextState();
  this.UpdateUploadButtonState();
  if(this.IsShowProgressPanel())
   this.ShowProgressInfoPanel(false);
  if(responseObj)
   this.RaiseFilesUploadComplete(responseObj);
  else
   this.RaiseFilesUploadComplete({
    commonErrorText: commonErrorText,
    commonCallbackData: ""
   });
  if (__aspxIE) {
   try {
    this.GetFakeIframeDocument().write("");
    this.GetFakeIframeDocument().close();
   }
   catch (e) { }
  }
 },
 OnUploadingProgressChanged: function(fileCount, info) {
  this.RaiseUploadingProgressChanged(fileCount, info.currentFileName, info.currentFileContentLength,
   info.currentFileUploadedContentLength, info.currentFileProgress, info.totalLength, info.totalUploadedSize, info.progress);
 },
 OnTextChanged: function (index, isUI) {
  if(this.suppressTextChangedHandling)
   return;
  if(isUI && this.IsAdvancedModeEnabled()) {
   this.uploadHelper.UpdateFileInfos(index);
   if(__aspxWebKitTouchUI) {
    setTimeout(function() {
     this.OnTextChanged(index);
    }.aspxBind(this), 0);
    return;
   }
  }
  if(!this.isNative) {
   this.UpdateNullTextState();
   var files = this.GetFiles(index, true);
   if(files.length) {
    var value = (files.length > 1) ? this.selectedSeveralFilesText.replace("{0}", files.length) : files[0];
    this.GetFileFakeInputElement(index).value = value;
   }
   this.SetFileInputTooltip(index);
   this.ShowClearButton(index, value && value != '');
   if(this.IsAdvancedModeEnabled()) {
    var validateObj = {
     commonErrorText: "",
     commonCallbackData: ""
    };
    if(!this.ValidateInputFiles(validateObj))
     this.ClearInvalidFileInputText(index);
   }
   if(__aspxIE)
    _aspxSetFocus(this.GetBrowseButtonCell(index));
  }
  this.UpdateUploadButtonState();
  this.RaiseTextChanged(index);
 },
 OnPluginLoaded: function(index) {
  this.SetFileInputRowEnabled(index, true)
 },
 OnPluginError: function(index) {
  if(!this.pluginError) {
   this.pluginError = true;
   this.SetVisiblePlatformErrorElement(true);
  }
 },
 OnDocumentMouseUp: function() {
  this.pressedBrowseButtonIndex = -1;
 },
 OnFileInputMouseMove: function(evt, index) {
  this.OnMouseMoveInFileInputElement(evt, index);
  this.StopEventPropagation(evt);
 },
 OnFileInputMouseOut: function(evt, index) {
  this.ResetFileInputPosition(index);
  this.StopEventPropagation(evt);
 },
 OnFileInputMouseDown: function(evt, index) {
  var isOverBrowseButton = this.IsMouseOverBrowseButton(evt, index);
  this.pressedBrowseButtonIndex = index;
  this.ChangeButtonPressedState(this.GetBrowseButtonCell(index), isOverBrowseButton);
 },
 OnTextBoxMouseMove: function(evt, index) {
  this.OnMouseMoveInFakeElement(evt, index);
 },
 OnTextBoxMouseOut: function(evt, index) {
  this.OnMouseOutInFakeElement(evt, index);
 },
 OnTextBoxClick: function(evt, index) {
  this.OnClickInFakeElement(evt, index);
 },
 OnBrowseButtonMouseMove: function(evt, index) {
  this.OnMouseMoveInFakeElement(evt, index);
 },
 OnBrowseButtonMouseOut: function(evt, index) {
  this.OnMouseOutInFakeElement(evt, index);
  this.ChangeButtonHoveredState(this.GetBrowseButtonCell(index), false, index);
 },
 OnBrowseButtonClick: function(evt, index) {
  this.OnClickInFakeElement(evt, index);
 },
 OnMouseMoveInFakeElement: function(evt, index) {
  if(!this.GetFileFakeInputElement(index).disabled) {
   var isOverBrowseButton = this.IsMouseOverBrowseButton(evt, index);
   this.SetFileInputPosition(index, _aspxGetEventX(evt), _aspxGetEventY(evt), isOverBrowseButton);
   var browseButtonCell = this.GetBrowseButtonCell(index);
   if(this.pressedBrowseButtonIndex == index)
    this.ChangeButtonPressedState(browseButtonCell, isOverBrowseButton);
   else
    this.ChangeButtonHoveredState(browseButtonCell, isOverBrowseButton, index);
  }
 },
 OnMouseOutInFakeElement: function(evt, index) {
  if( !(this.IsMouseOverTextBox(evt, index) || this.IsMouseOverBrowseButton(evt, index)) )
   this.ResetFileInputPosition(index);
 },
 OnClickInFakeElement: function(evt, index) {
  if(!this.NeedMouseClickCorrection()) return;
  this.OnMouseMoveInFakeElement(evt, index);
  var fileInput = this.GetFileSelectorElement(index);
  if(fileInput.click)
   fileInput.click();
 },
 OnMouseMoveInFileInputElement: function(evt, index) {
  if(!this.GetFileFakeInputElement(index).disabled) {
   var isOverBrowseButton = this.IsMouseOverBrowseButton(evt, index);
   var isOverTextBoxButton = this.IsMouseOverTextBox(evt, index);
   if(isOverTextBoxButton || isOverBrowseButton) {
    this.SetFileInputPosition(index, _aspxGetEventX(evt), _aspxGetEventY(evt), isOverBrowseButton);
    this.ChangeButtonHoveredState(this.GetBrowseButtonCell(index), isOverBrowseButton, index);
    var tooltipElement = isOverTextBoxButton ? this.GetTextBoxCell(index) : this.GetBrowseButtonCell(index);
    var tooltip = _aspxGetAttribute(tooltipElement, "title");
    _aspxSetAttribute(this.GetFileSelectorElement(index), "title", tooltip ? tooltip : "");
   }
   else
    this.ResetFileInputPosition(index);
  }
 },
 IsFileUploadCanceled: function(validateObj) {
  var isCancel = this.RaiseFileUploadStart();
  if (!isCancel)
   this.isInCallback = true;
  else
   validateObj.commonErrorText = this.uploadWasCanceledErrorText;
  return isCancel;
 },
 IsMouseOverElement: function(mouseEvt, element) {
  var x = _aspxGetAbsoluteX(element);
  var y = _aspxGetAbsoluteY(element);
  var w = element.offsetWidth;
  var h = element.offsetHeight;
  var eventX = _aspxGetEventX(mouseEvt);
  var eventY = _aspxGetEventY(mouseEvt);
  return (eventX > x && eventX < (x + w) && eventY > y && eventY < (y + h));
 },
 IsMouseOverTextBox: function(evt, index) {
  return this.IsMouseOverElement(evt, this.GetTextBoxCell(index));
 },
 IsMouseOverBrowseButton: function(evt, index) {
  return this.IsMouseOverElement(evt, this.GetBrowseButtonCell(index));
 },
 SetFileInputPosition: function (index, x, y, isChooseButton) {
  var fileInput = this.GetFileSelectorElement(index);
  var space = 10;
  var xPos = x;
  var yPos = y;
  var width = fileInput.offsetWidth;
  var height = fileInput.offsetHeight;
  xPos -= this.IsRightToLeft() ? space : (width - space);
  yPos -= height/2;
  _aspxSetAbsoluteY(fileInput, yPos);
  _aspxSetAbsoluteX(fileInput, xPos);
  this.SetFileInputCursor(index, isChooseButton);
  this.fileInputIsHidden = false;
 },
 SetFileInputCursor: function(index, isChooseButton) {
  var fileSelectorElement = this.GetFileSelectorElement(index);
  var className = fileSelectorElement.className;
  className = className.replace(" " + this.GetFileInputOnTextBoxHoverClassName(), "").replace(" " + this.GetFileInputOnBrowseButtonHoverClassName(), "");
  className += " " + (isChooseButton ? this.GetFileInputOnBrowseButtonHoverClassName() : this.GetFileInputOnTextBoxHoverClassName());
  fileSelectorElement.className = className;
  if(this.IsSlUploadHelperEnabled())
   this.uploadHelper.SetCursorStyle(index, _aspxGetCurrentStyle(fileSelectorElement)["cursor"]);
 },
 FileInputGotFocus: function(evt, index) {
  var button = this.GetBrowseButtonCell(index);
  var focusedClassName = " " + __aspxBrowseButtonFocusClassName;
  button.className += focusedClassName;
  if(__aspxOpera) {
   if(this._operaFocusedFlag)
    this._operaFocusedFlag = false;
   else {
    this._operaFocusedFlag = true;
    this.GetFakeFocusInputElement().focus();
    var _this = this;
    var _index = index;
    window.setTimeout(function() {
     _this.GetFileInputElement(index).focus();
    }, 100);
   }
  }
 },
 FileInputLostFocus: function(evt, index) {
  var button = this.GetBrowseButtonCell(index);
  var focusedClassName = " " + __aspxBrowseButtonFocusClassName;
  var className = button.className;
  while(className.indexOf(focusedClassName) != -1)
   className = className.replace(focusedClassName, "");
  button.className = className;
 },
 FileInputFocusNextElement: function(evt, index, isBackward) {
  if(this.IsFocusNeedReset()) {
   var count = this.GetFileInputCountInternal();
   var newInputIndex = !isBackward ? (index + 1) : (index - 1);
   var element = null;
   if(this.IsSlUploadHelperEnabled()) {
    if(newInputIndex > -1 && newInputIndex < count)
     element = this.GetFileSelectorElement(newInputIndex);
    else if(newInputIndex > count - 1)
     element = this.GetFakeFocusInputElement();
    if(element == null)
     element = this.GetUploadButtonLink();
   }
   else {
    if(isBackward) {
     if(newInputIndex > -1) {
      element = this.GetRemoveButtonLink(newInputIndex);
      if(element == null)
       element = this.GetFileSelectorElement(newInputIndex);
     }
    }
    else {
     element = this.GetClearButtonLink(index);
     if(!_aspxGetElementVisibility(element))
      element = this.GetRemoveButtonLink(index);
     if(element == null && newInputIndex < count)
      element = this.GetFileSelectorElement(newInputIndex);
     if(element == null)
      element = this.GetAddButtonLink();
     if(element == null)
      element = this.GetUploadButtonLink();
     if(element == null)
      element = this.GetFakeFocusInputElement();
    }
   }
   if(element != null) {
    element.focus();
    _aspxPreventEvent(evt);
   }
  }
 },
 ResetFileInputPosition: function(index) {
  this.GetFileSelectorElement(index).style.top = '-5000px';
  this.fileInputIsHidden = true;
 },
 StopEventPropagation: function(evt) {
  if(__aspxIE && __aspxBrowserMajorVersion <= 8)
   evt.cancelBubble = true;
 },
 RaiseUploadingProgressChanged: function(fileCount, currentFileName, currentFileContentLength,
  currentFileUploadedContentLength, currentFileProgress, totalContentLength, uploadedContentLength, progress) {
  if (!this.UploadingProgressChanged.IsEmpty()) {
   var args = new ASPxClientUploadControlUploadingProgressChangedEventArgs(fileCount, currentFileName, currentFileContentLength,
    currentFileUploadedContentLength, currentFileProgress, totalContentLength, uploadedContentLength, progress);
   this.UploadingProgressChanged.FireEvent(this, args);
  }
 },
 RaiseTextChanged: function(index) {
  if (!this.TextChanged.IsEmpty()) {
   var args = new ASPxClientUploadControlTextChangedEventArgs(index);
   this.TextChanged.FireEvent(this, args);
  }
 },
 RaiseFileUploadComplete: function(index, responseObj) {
  if (!this.FileUploadComplete.IsEmpty()) {
   var args = new ASPxClientUploadControlFileUploadCompleteEventArgs(index, responseObj.isValidArray[index],
    responseObj.errorTexts[index], responseObj.callbackDataArray[index]);
   this.FileUploadComplete.FireEvent(this, args);
  }
 },
 RaiseFilesUploadComplete: function(responseObj) {
  var args = new ASPxClientUploadControlFilesUploadCompleteEventArgs(responseObj.commonErrorText, responseObj.commonCallbackData);
  this.FilesUploadComplete.FireEvent(this, args);
 },
 RaiseFileUploadStart: function() {
  var ret = false;
  if (!this.FileUploadStart.IsEmpty()) {
   var args = new ASPxClientUploadControlFileUploadStartEventArgs(false);
   this.FileUploadStart.FireEvent(this, args);
   ret = args.cancel;
  }
  return ret;
 },
 RaiseFileInputCountChanged: function() {
  if (!this.FileInputCountChanged.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.FileInputCountChanged.FireEvent(this, args);
  }
 },
 ClearText: function() {
  this.ClearAllInputText(true);
 },
 GetText: function(index) {
  if (!_aspxIsExists(index))
   index = 0;
  var value = this.GetValue(index);
  return value != null ? value : "";
 },
 UploadFile: function() {
  this.UploadFileFromUser();
 },
 Upload: function() {
  this.UploadFileFromUser();
 },
 Cancel: function() {
  this.CancelUploadingFileFromUser();
 },
 GetFileInputCount: function() {
  return this.GetFileInputCountInternal();
 },
 SetFileInputCount: function(count) {
  var lastCount = this.GetFileInputCountInternal();
  if(count == lastCount) return;
  if(lastCount < count) {
   for(var i = 0; i < count - lastCount; i++)
    this.AddFileInput();
  } else {
   for(var i = lastCount; i > count; i--)
    this.RemoveFileInput();
  }
 },
 SetAddButtonText: function(text) {
  this.SetAddButtonTextInternal(text);
 },
 SetUploadButtonText: function(text) {
  this.SetUploadButtonTextInternal(text);
 },
 GetAddButtonText: function() {
  return this.GetAddButtonTextInternal();
 },
 GetUploadButtonText: function() {
  return this.GetUploadButtonTextInternal();
 }
});
ASPxClientUploadControl.Cast = ASPxClientControl.Cast;
var windowsFileNameRegExpTemplate = "^([a-zA-Z]\\:|\\\\\\\\[^\\/\\\\:*?\\\"<>|]+\\\\[^\\/\\\\:*?\\\"<>|]+)(\\\\[^\\/\\\\:*?\\\"<>|]+)+(\\.[^\\/\\\\:*?\\\"<>|]+)?$";
windowsRootDirectoryNameRegExpTemplate = "[a-zA-Z]\\:";
ASPxClientUploadControl.IsValidWindowsFileName = function(fileName) {
 var windowsRootDirectoryNameRegExp = new RegExp(windowsRootDirectoryNameRegExpTemplate, "gi");
 var windowsFileNameRegExp = new RegExp(windowsFileNameRegExpTemplate, "gi");
 return (fileName == "" || windowsFileNameRegExp.test(fileName)) || (fileName.length == 3 && windowsRootDirectoryNameRegExp.test(fileName));
};
ASPxClientUploadControl.GetFileName = function(filePath) {
 if(!ASPxClientUploadControl.IsValidWindowsFileName(filePath))
  return filePath;
 var windowsFileNameRegExp = new RegExp(windowsFileNameRegExpTemplate, "gi");
 return filePath.replace(windowsFileNameRegExp, '$2').replace('\\', '');
};
ASPxClientUploadControl.GetFileExtension = function(fileName) {
 return fileName.replace(/.*?(\.[^.\\\/:*?\"<>|]+$)/, "$1");
};
ASPxClientUploadControl.OnTooManyFilesError = function(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if(uploader != null)
  uploader.ShowTooManyFilesError();
};
ASPxClientUploadControlFileUploadStartEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(cancel) {
  this.constructor.prototype.constructor.call(this);
  this.cancel = cancel;
 }
});
ASPxClientUploadControlFileUploadCompleteEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(inputIndex, isValid, errorText, callbackData){
  this.constructor.prototype.constructor.call(this);
  this.inputIndex = inputIndex;
  this.isValid = isValid;
  this.errorText = errorText;
  this.callbackData = callbackData;
 }
});
ASPxClientUploadControlFilesUploadCompleteEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(errorText, callbackData){
  this.constructor.prototype.constructor.call(this);
  this.errorText = errorText;
  this.callbackData = callbackData;
 }
});
ASPxClientUploadControlTextChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(inputIndex){
  this.constructor.prototype.constructor.call(this);
  this.inputIndex = inputIndex;
 }
});
ASPxClientUploadControlUploadingProgressChangedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
 constructor: function(fileCount, currentFileName, currentFileContentLength,
  currentFileUploadedContentLength, currentFileProgress, totalContentLength, uploadedContentLength, progress){
  this.constructor.prototype.constructor.call(this);
  this.fileCount = fileCount;
  this.currentFileName = currentFileName;
  this.currentFileContentLength = currentFileContentLength;
  this.currentFileUploadedContentLength = currentFileUploadedContentLength;
  this.currentFileProgress = currentFileProgress;
  this.totalContentLength = totalContentLength;
  this.uploadedContentLength = uploadedContentLength;
  this.progress = progress;
 }
});
ASPxClientUploadHelper = _aspxCreateClass(null, {
 constructor: function(uploadControl) {
  this.uploadControl = uploadControl;
 },
 ClearInvalidFileInfos: function(inputIndex) {
  var fileNames = this.uploadControl.invalidFileNames[inputIndex];
  var fileInfos = this.GetFileInfos(inputIndex);
  var i = 0;
  while(i < fileInfos.length) {
   var fileInfo = fileInfos[i];
   if(_aspxArrayIndexOf(fileNames, fileInfo.fileName) != -1) {
    this.RemoveFileInfo(inputIndex, i);
    fileInfos = this.GetFileInfos(inputIndex);
   }
   else
    i++;
  }
 },
 RemoveFileInfo: function(inputIndex, fileIndex) {
 },
 GetAbsoluteFileIndex: function(inputIndex, fileIndex) {
  var index = 0;
  for(var i = 0; i < inputIndex; i++) {
   var fileInfos = this.GetFileInfos(i);
   index += fileInfos.length > 0 ? fileInfos.length : 1;
  }
  return index + fileIndex;
 },
 GetFileInfos: function(inputIndex) {
 },
 GetFileIndexesCount: function(fileInputCount) {
  var count = 0;
  for(var inputIndex = 0; inputIndex < fileInputCount; inputIndex++) {
   var fileInfos = this.GetFileInfos(inputIndex);
   count += fileInfos.length > 0 ? fileInfos.length : 1;
  }
  return count;
 },
 GetTotalLength: function(fileInputCount) {
  var totalFileLength = 0;
  for(var inputIndex = 0; inputIndex < fileInputCount; inputIndex++) {
   var fileInfos = this.GetFileInfos(inputIndex);
   for(var fileIndex = 0; fileIndex < fileInfos.length; fileIndex++)
    totalFileLength += parseInt(fileInfos[fileIndex].fileSize);
  }
  return totalFileLength;
 }
});
ASPxClientHtml5UploadHelper = _aspxCreateClass(ASPxClientUploadHelper, {
 constructor: function(uploadControl) {
  this.constructor.prototype.constructor.call(this, uploadControl);
 },
 IsHelperElementReady: function(index) {
  return true;
 },
 GetFileInfos: function(inputIndex) {
  var fileInputElement = this.uploadControl.GetFileInputElement(inputIndex);
  var fileInfos = fileInputElement.aspxFileInfos;
  if(!fileInfos) {
   fileInfos = [];
   var fileCount = fileInputElement.files.length;
   for(var i = 0; i < fileCount; i++) {
    var file = fileInputElement.files[i];
    var fileInfo = {
     file: file,
     fileName: file.name,
     fileSize: file.size,
     fileType: file.type,
     fullName: "C:\\fakepath\\" + file.name
    };
    fileInfos.push(fileInfo);
   }
   fileInputElement.aspxFileInfos = fileInfos;
  }
  return fileInfos;
 },
 FileSlice: function(file, startPos, endPos) {
  if(file.slice)
   return file.slice(startPos, endPos);
  if(__aspxWebKitFamily && file.webkitSlice)
   return file.webkitSlice(startPos, endPos);
  if(__aspxNetscapeFamily && file.mozSlice)
   return file.mozSlice(startPos, endPos);
  throw "'File.slice()' method is not implemented";
 },
 ReadFileData: function(inputIndex, fileIndex, startPos, chunkLength) {
  var fileData = {};
  if(!chunkLength)
   return fileData;
  var file = this.GetFileInfos(inputIndex)[fileIndex].file;
  try {
   fileData.data = this.FileSlice(file, startPos, startPos + chunkLength);
  }
  catch(ex) {
   fileData.errorText = "" + ex;
  }
  return fileData;
 },
 RemoveFileInfo: function(inputIndex, fileIndex) {
  var fileInfos = this.GetFileInfos(inputIndex);
  _aspxArrayRemoveAt(fileInfos, fileIndex);
 },
 BuildChunkRequest: function(isNewUploading, tempFolderPath, totalSize, fileIndexesCount, inputIndex, fileIndex, fileSize, fileType, chunkSize, fileName, fileData) {
  var index = this.GetAbsoluteFileIndex(inputIndex, fileIndex);
  var formData = new FormData();
  formData.append("IsNewUploading", isNewUploading ? "true" : "false");
  formData.append("TempFolderPath", tempFolderPath);
  formData.append("TotalSize", totalSize);
  formData.append("FileIndexesCount", fileIndexesCount);
  formData.append("FileIndex", index);
  formData.append("FileSize", fileSize);
  formData.append("FileType", fileType);
  formData.append("ChunkSize", chunkSize);
  formData.append("FileName", fileName);
  if(chunkSize)
   formData.append("Data", fileData);
  return formData;
 },
 BuildCancelRequest: function() {
  var formData = new FormData();
  formData.append("IsCancel", "true");
  return formData;
 },
 UpdateFileInfos: function(inputIndex) {
  var fileInputElement = this.uploadControl.GetFileInputElement(inputIndex);
  fileInputElement.aspxFileInfos = undefined;
 }
});
ASPxClientSlUploadHelper = _aspxCreateClass(ASPxClientUploadHelper, {
 constructor: function(uploadControl) {
  this.constructor.prototype.constructor.call(this, uploadControl);
 },
 CreateSlObject: function(source, inputIndex) {
  var slObjectId = this.uploadControl.GetSlUploadHelperElementID(inputIndex);
  var controlName = this.uploadControl.name;
  var properties = { width: '70px', height: '22px' };
  var events = {};
  events.onLoad = 'slOnLoad_' + slObjectId;
  window[events.onLoad] = new Function("aspxSLOnLoad('" + this.uploadControl.name + "', '" + inputIndex + "');");
  events.onError = 'slOnError_' + slObjectId;
  window[events.onError] = new Function("aspxSLOnError('" + this.uploadControl.name + "', '" + inputIndex + "');");
  var parentElement = document.createElement("DIV");
  parentElement.innerHTML = this.BuildHTML(source, slObjectId, controlName, inputIndex, properties, events);
  return parentElement.firstChild;
 },
 SetCursorStyle: function(inputIndex, cursorStyle) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   slElement.content.sl.SetCursorStyle(cursorStyle);
  }
 },
 ClearFileInfos: function(inputIndex) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   return slElement.content.sl.ClearFileInfos();
  }
 },
 GetErrorText: function(stringData) {
  var index = stringData.indexOf(__aspxErrorTextResponsePrefix) + __aspxErrorTextResponsePrefix.length;
  return stringData.substr(index);
 },
 GetFileInfos: function(inputIndex) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   var fileInfos = eval(slElement.content.sl.FileInfos);
   for(var i = 0, count = fileInfos.length; i < count; i++)
    fileInfos[i].fileType = "";
   return fileInfos;
  }
  return [];
 },
 ReadBase64StringData: function(inputIndex, fileIndex, startPos, length) {
  if(this.IsObjectLoaded(inputIndex)) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   return slElement.content.sl.ReadBase64StringData(fileIndex, startPos, length);
  }
  return null;
 },
 ReadFileData: function(inputIndex, fileIndex, startPos, chunkLength) {
  var fileData = {};
  var encodedData = this.ReadBase64StringData(inputIndex, fileIndex, startPos, chunkLength);
  if(this.IsErrorOccurred(encodedData))
   fileData.errorText = this.GetErrorText(encodedData);
  else
   fileData.data = encodedData;
  return fileData;
 },
 RemoveFileInfo: function(inputIndex, fileIndex) {
  var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
  return slElement.content.sl.RemoveFileInfo(fileIndex);
 },
 BuildChunkRequest: function(isNewUploading, tempFolderPath, totalSize, fileIndexesCount, inputIndex, fileIndex, fileSize, fileType, chunkSize, fileName, fileData) {
  var index = this.GetAbsoluteFileIndex(inputIndex, fileIndex);
  var request = "";
  request += "IsNewUploading:" + (isNewUploading ? "true" : "false") + "\r\n";
  request += "TempFolderPath:" + tempFolderPath + "\r\n";
  request += "TotalSize:" + totalSize + "\r\n";
  request += "FileIndexesCount:" + fileIndexesCount + "\r\n";
  request += "FileIndex:" + index + "\r\n";
  request += "FileSize:" + fileSize + "\r\n";
  request += "FileType:" + fileType + "\r\n";
  request += "ChunkSize:" + chunkSize + "\r\n";
  request += "FileName:" + fileName + "\r\n";
  request += "EncodingData:" + fileData;
  return request;
 },
 BuildCancelRequest: function() {
  return "IsCancel:true";
 },
 BuildHTML: function(source, id, controlName, inputIndex, properties, events) {
  var sb = [];
  sb.push('<object type="application/x-silverlight-2" data="data:application/x-silverlight-2,"');
  sb.push(' id="' + id + '"');
  if(properties.width != null) sb.push(' width="' + properties.width + '"');
  if(properties.height != null) sb.push(' height="' + properties.height + '"');
  var opacityStyle = "";
  if(!__aspxIE)
   opacityStyle = "opacity: 0.01;";
  sb.push(' style="position: absolute; background-color: transparent; top: -5000px; ' + opacityStyle + '"');
  sb.push('>');
  sb.push('<param name="source" value="' + source + '" />');
  sb.push('<param name="background" value="Transparent" />');
  sb.push('<param name="windowless" value="true" />');
  sb.push('<param name="minRuntimeVersion" value="3.0.40818.0" />');
  var init = '<param name="initParams" value="';
   init += 'controlName=' + controlName + ', ';
   init += 'inputIndex=' + inputIndex + ', ';
   init += 'multiselect=' + this.uploadControl.enableMultiSelect + ', ';
   init += 'allowedMaxFileSize=' + this.uploadControl.validationSettings.maxFileSize;
   var allowedFileExtensions = this.uploadControl.validationSettings.allowedFileExtensions;
   if(allowedFileExtensions != null) {
    init += ', allowedFileExtensions=' + allowedFileExtensions.join(';') + ', ';
    var fileMasks = [];
    for(var i = 0; i < allowedFileExtensions.length; i++)
     fileMasks.push("*" + allowedFileExtensions[i]);
    init += 'filter=' + fileMasks.join(';');
   }
  init += '" />';
  sb.push(init);
  if(events.onLoad)
   sb.push('<param name="onLoad" value="' + events.onLoad + '" />');
  if(events.onError)
   sb.push('<param name="onError" value="' + events.onError + '" />');
  sb.push("</object>");
  return sb.join("");
 },
 RedefineSlObjectAttributes: function(parent, inputIndex, isNewElement) {
  var slElement = _aspxGetChildByTagName(parent, "OBJECT", 0);
  if(slElement) {
   var slObjectId = this.uploadControl.GetSlUploadHelperElementID(inputIndex);
   var controlName = this.uploadControl.name;
   slElement.id = slObjectId;
   if(isNewElement == true) {
    if(__aspxIE && __aspxBrowserVersion == 8) {
     parent.insertBefore(
      this.CreateSlObject(this.uploadControl.slUploadHelperUrl, inputIndex),
      slElement
     );
     parent.removeChild(slElement);
    }
    else {
     if(__aspxIE)
      _aspxRemoveAttribute(slElement, "data");
     var onLoad = 'slOnLoad_' + slObjectId;
     window[onLoad] = new Function("aspxSLOnLoad('" + this.uploadControl.name + "', '" + inputIndex + "');");
     var onError = 'slOnError_' + slObjectId;
     window[onError] = new Function("aspxSLOnError('" + this.uploadControl.name + "', '" + inputIndex + "');");
     var params = _aspxGetElementsByTagName(parent, "param");
     for(var i = 0; i < params.length; i++) {
      switch(_aspxGetAttribute(params[i], "name")) {
       case "initParams":
        var paramValue = _aspxGetAttribute(params[i], "value");
        paramValue = paramValue.replace("inputIndex=T", "inputIndex=" + inputIndex);
        _aspxSetAttribute(params[i], "value", paramValue);
        break;
       case "onLoad":
        _aspxSetAttribute(params[i], "value", onLoad);
        break;
       case "onError":
        _aspxSetAttribute(params[i], "value", onError);
        break;
      }
     }
    }
   }
   else if(this.IsObjectLoaded(inputIndex))
    slElement.content.sl.RedefineAttributes(controlName, inputIndex);
  }
 },
 RedefineSlObjectAttributesInHostElement: function(inputIndex, newInputIndex, isNewElement) {
  var slHost = this.uploadControl.GetSlUploadHostElement();
  if(slHost) {
   if(isNewElement)
    slHost.appendChild(this.CreateSlObject(this.uploadControl.slUploadHelperUrl, newInputIndex));
   else {
    var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
    if(slElement) {
     slElement.id = this.uploadControl.GetSlUploadHelperElementID(newInputIndex);
     if(this.IsObjectLoaded(newInputIndex))
      slElement.content.sl.RedefineAttributes(this.uploadControl.name, newInputIndex);
    }
   }
  }
 },
 RemoveSlObjectInHostElement: function(inputIndex) {
  var slHost = this.uploadControl.GetSlUploadHostElement();
  if(slHost) {
   var slElement = this.uploadControl.GetSlUploadHelperElement(inputIndex);
   if(slElement)
    slHost.removeChild(slElement);
  }
 },
 UpdateFileInfos: function(inputIndex) {
 },
 IsHelperElementReady: function(index) {
  return this.IsObjectLoaded(index);
 },
 IsObjectLoaded: function(index) {
  var slElement = this.uploadControl.GetSlUploadHelperElement(index);
  try {
   if(slElement && slElement.content && slElement.content.sl)
    return true;
  }
  catch (e) { }
  return false;
 },
 IsErrorOccurred: function(stringData) {
  return stringData.indexOf(__aspxErrorTextResponsePrefix) != -1;
 }
});
ASPxClientUploadControlCollection = _aspxCreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
 },
 OnDocumentMouseUp: function(evt) {
  this.ForEachControl(function(control){
   if(control.IsDOMInitialized())
    control.OnDocumentMouseUp();
  });
 }
});
ASPxClientSlUploadHelper.IsPluginInstalled = function() {
 if(!ASPxClientSlUploadHelper.isSilverlightInstalled) {
  try{
   if(typeof(ActiveXObject) != 'undefined') {
    var slControl = new ActiveXObject('AgControl.AgControl');
    if(slControl != null)
     ASPxClientSlUploadHelper.isSilverlightInstalled = true;
   }
   else if(navigator.plugins["Silverlight Plug-In"])
    ASPxClientSlUploadHelper.isSilverlightInstalled = true;
  } catch(e) { }
 }
 return ASPxClientSlUploadHelper.isSilverlightInstalled;
};
ASPxClientSlUploadHelper.IsPluginSupported = function() {
 return !(__aspxSafari && __aspxBrowserMajorVersion == 5);
};
ASPxClientSlUploadHelper.IsPluginAvailable = function() {
 return ASPxClientSlUploadHelper.IsPluginInstalled() && ASPxClientSlUploadHelper.IsPluginSupported();
};
var __aspxUploadControlCollection = null;
function aspxGetUploadControlCollection(){
 if(__aspxUploadControlCollection == null)
  __aspxUploadControlCollection  = new ASPxClientUploadControlCollection();
 return __aspxUploadControlCollection;
}
_aspxAttachEventToDocument("mouseup", aspxUploadControlDocumentMouseUp);
function aspxUploadControlDocumentMouseUp(evt){
 return aspxGetUploadControlCollection().OnDocumentMouseUp(evt);
}
function aspxUTextChanged(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextChanged(index, true);
}
function aspxUFileInputMouseMove(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnFileInputMouseMove(evt, index);
}
function aspxUFileInputMouseOut(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnFileInputMouseOut(evt, index);
}
function aspxUFileInputMouseDown(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnFileInputMouseDown(evt, index);
}
function aspxUFileInputGotFocus(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.FileInputGotFocus(evt, index);
}
function aspxUFileInputLostFocus(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.FileInputLostFocus(evt, index);
}
function aspxUFileInputKeyDown(evt, name, index) {
 if(_aspxGetKeyCode(evt) == ASPxKey.Tab) {
  var uploader = aspxGetControlCollection().Get(name);
  if (uploader != null)
   uploader.FileInputFocusNextElement(evt, index, evt.shiftKey);
 }
}
function aspxUTextBoxMouseMove(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextBoxMouseMove(evt, index);
}
function aspxUTextBoxMouseOut(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextBoxMouseOut(evt, index);
}
function aspxUBrowseButtonMouseMove(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnBrowseButtonMouseMove(evt, index);
}
function aspxUBrowseButtonMouseOut(evt, name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnBrowseButtonMouseOut(evt, index);
}
function aspxUAddFileInputClick(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.AddFileInput(true);
}
function aspxURemoveFileInputClick(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.RemoveFileInput(index, true);
}
function aspxUUploadFileClick(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.Upload();
}
function aspxUCancelFileClick(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.Cancel();
}
function aspxUClearFileInputClick(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.ClearInputText(index, true);
}
function aspxFakeUploadIframeOnLoad(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if ((uploader != null) && uploader.isInCallback)
  uploader.OnCompleteFileUpload();
}
function aspxUploadProcessing(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.UploadProcessing();
}
function aspxUploadAsyncXmlHttpResponse(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.UploadAsyncXmlHttpResponse();
}
function aspxUploadAsyncCancelProcessing(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.UploadAsyncCancelProcessing();
}
function aspxShowProgressInfoPanel(name) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null && uploader.isInCallback)
  uploader.ShowProgressInfoPanel(true);
}
function aspxSLOnLoad(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if(uploader != null)
  uploader.OnPluginLoaded(index);
}
function aspxSLOnError(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if(uploader != null)
  uploader.OnPluginError(index);
}
function aspxSLOnFileSelectionChanged(name, index) {
 var uploader = aspxGetControlCollection().Get(name);
 if (uploader != null)
  uploader.OnTextChanged(index, true);
}

